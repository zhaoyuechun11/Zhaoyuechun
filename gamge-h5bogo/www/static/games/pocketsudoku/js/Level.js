"use strict";
// -- user code here --
var DEF = {
	// PENAL_TIME:10,
	MAINSTEPX : 77,
	MAINSTEPY : 77,
	GAP : 6,
	MIXCOUNT : 10,
	FRAME : {
		BASE : 0,		FIXED : 1,		CEHCK : 0,		NUMBER : 4,		MEMO : 0
	},
	SUDOKU : {
		FIXED : 0,		EMPTY : 1,		MEMO : 2,		WORK : 3	},
	BUTTON : {
		DEFAULT : 0,		CHECK : 1,		MEMO : 2,		DELETE : 3
	},
	SFIXED : 0,	SEMPTY : 1,	SMEMO : 2,	SWORK : 3,	EMPTYNO : 0
};
var FRAME = {
	0 : 1,
	1 : 0,
	2 : 0,
	3 : 1
};
function LINEINFO() {
	this.prefab = null, this.index = 0, this.start = 0, this.end = 0;
}
function _Class_InputManager() {
	this.Group;
	this.Index;
	this.Number;
	this.Btn;
	this.Spr;
}
function _Class_SudokuManager() {
	this.x, this.y, this.Index = 0;
	this.OrignalNo = -1, 
	this.No = -1, 
	this.Type = DEF.SEMPTY;
	this.SprMemo = [ null, null, null, null, null, null, null, null, null ],
	this.Spr_Back,  this.Spr_W_Box,
	this.W_Box_Count = 0, this.Spr_Effect, this.Spr_No;
	this.BtnIndex;
	this.isButton = false;
}
/* --- start generated code --- */

// Generated by 1.4.4 (Phaser v2.6.2)

/**
 * Level.
 */
function Level() {

	Phaser.State.call(this);

}

/** @type Phaser.State */
var Level_proto = Object.create(Phaser.State.prototype);
Level.prototype = Level_proto;
Level.prototype.constructor = Level;

Level.prototype.init = function() {
};

Level.prototype.preload = function() {
};
Level.prototype.create = function() {

	this.initObjects();
};

/* --- end generated code --- */
Level.prototype.initGroup = function() {

	_UserInfo.PlayRetry = true;
	this.fGroup_main = this.add.group();
	this.backimage = this.add.sprite(360, 640, 'bg', null, this.fGroup_main);
	this.backimage.anchor.setTo(0.5, 0.5);

	this.fGroup_pause 		= this.add.group();
	this.fGroup_Sudoku 		= this.add.group(this.fGroup_main);
	this.fGroup_Button 		= this.add.group(this.fGroup_main);
	this.fGroup_Input 		= this.add.group(this.fGroup_main);
	this.fGroup_notice 		= this.add.group(this.fGroup_main);	
	this.fGroup_Game     	= this.add.group(this.fGroup_Sudoku);	
	this.fGroup_GameNumber 	= this.add.group(this.fGroup_Sudoku);
	this.fGroup_Memo 		= this.add.group(this.fGroup_Button);
	this.fGroup_Delete 		= this.add.group(this.fGroup_Button);
	this.fGroup_Check 		= this.add.group(this.fGroup_Button);

	this.fNowNoBtn = null;

	this.fGroup_notice.position.setTo(0, 470);
	this.fGroup_pause.position.setTo(0, 100);
	this.fGroup_Input.position.setTo(110, 960);
	this.fGroup_Sudoku.position.setTo(46, 191);
	this.fGroup_Button.position.setTo(450, 960);

	this.fSpine_Check = this.game.add.spine(0, 0, "CheckBtn_spine");
	this.fSpine_Check.position.setTo(550, 1200);
	this.fGroup_Spine = this.add.group(this.fGroup_main);

	this.f_onpuase = this.game.onPause.add(this.OnPause, this);
	this.f_onresume = this.game.onResume.add(this.OnResume, this);

};
Level.prototype.OnPause = function() {
	if (this.fGroup_pause.visible == false) {
		if (this.fboolResult == false)
			this.fGroup_GameNumber.visible = false;
	}
};
Level.prototype.OnResume = function() {
	if (!this.fGroup_pause.visible == true) {
		if (this.fboolResult == false)
			this.fGroup_GameNumber.visible = true;
	}
};
Level.prototype.initCheckButton = function() {
	this.fBtn_check = this.add.button(100, 250, 'data01', null, this, null,	'btn_off', null, null, this.fGroup_Check);
	this.fBtn_check.anchor.setTo(0.5, 0.5);
	this.fBtn_check.onInputDown.add(this.OnClickCheck, this);
	this.fBtn_check.onInputDown.add(_BTN.ANI3, this);
	this.add.sprite(30, 250, 'data01', 'check', this.fGroup_Check).anchor.setTo(0.5, 0.5);
	this.add.sprite(130, 250, 'data01', 'text_check', this.fGroup_Check).anchor.setTo(0.5, 0.5);

};
Level.prototype.initDeleteButton = function() {
	this.fBtn_delete = this.add.button(100, 125, 'data01', null, this, null,'btn_off', null, null, this.fGroup_Delete);
	this.fBtn_delete.onInputDown.add(this.OnClickDelete, this);
	this.fBtn_delete.onInputDown.add(_BTN.ANI3, this);
	this.fBtn_delete.name = 'btndelete';
	this.fBtn_delete.anchor.setTo(0.5, 0.5);
	this.add.sprite(30, 125, 'data01', 'delete', this.fGroup_Delete).anchor.setTo(0.5, 0.5);
	this.add.sprite(130, 125, 'data01', 'text_delete', this.fGroup_Delete).anchor.setTo(0.5, 0.5);
};
Level.prototype.initMemoButton = function() {
	this.fBtn_memo = this.add.button(100, 0, 'data01', null, this, 'btn_off','btn_off', 'btn_off', 'btn_off', this.fGroup_Memo);
	this.fBtn_memo.onInputDown.add(this.OnClickMemo, this);
	this.fBtn_memo.onInputDown.add(_BTN.ANI3, this);
	this.fBtn_memo.name = 'memobutton';
	this.fBtn_memo.anchor.setTo(0.5, 0.5);
	this.add.sprite(30, 0, 'data01', 'memo', this.fGroup_Memo).anchor.setTo(0.5);
	this.add.sprite(130, 0, 'data01', 'text_memo', this.fGroup_Memo).anchor.setTo(0.5);
};
Level.prototype.initPause = function() {
	var spr;
	this.fBtn_pause = this.add.button(620, -130, 'data01', this.OnClickPause,this, null, 'btn_pause', null, null, this.fGroup_Game);
	this.fBtn_pause.pivot.setTo(0.5, 0.5);
	this.fBtn_pause.anchor.setTo(0.5, 0.5);

	spr = this.add.sprite(360, 330, 'data03', 'popup_pause', this.fGroup_pause);
	spr.anchor.setTo(0.5, 0.0);

	this.fBtn_sound = this.add.button(584, 235, 'btn_icon', this.OnClicksound,this, null, 2, null, null, this.fGroup_pause);
	this.fBtn_sound.anchor.setTo(0.5, 0.5);

	this.fBtn_Tutorial = this.add.button(475, 235, 'btn_icon',this.OnClickTutorial, this, null, 3, null, null, this.fGroup_pause);
	this.fBtn_Tutorial.anchor.setTo(0.5, 0.5);

	this.fBtn_giveup = this.add.button(361, 591, 'data01', this.OnClickgiveup,this, null, 'btn_giveup', null, null, this.fGroup_pause);
	this.fBtn_giveup.anchor.setTo(0.5, 0.5);

	this.fBtn_continue = this.add.button(359, 446, 'data01',this.OnClickExitpause, this, null, 'btn_continue', null, null,
			this.fGroup_pause);
	this.fBtn_continue.anchor.setTo(0.5, 0.5);
	var _text_continue = this.add.sprite(357, 447, 'data02', 'text_back_en',this.fGroup_pause);
	_text_continue.anchor.setTo(0.5, 0.5);
	var _text_giveup = this.add.sprite(358, 590, 'data02', 'text_quit_en',	this.fGroup_pause);
	_text_giveup.anchor.setTo(0.5, 0.5);
	// public fields
	this.fBtn_pause.inputEnabled = false;

	this.fBtn_continue.onInputDown.add(_BTN.ANI4, this);
	this.fBtn_giveup.onInputDown.add(_BTN.ANI4, this);
	this.fBtn_Tutorial.onInputDown.add(_BTN.ANI4, this);

};
Level.prototype.initNobutton = function() {
	for (var i = 0; i < 9; i++) {
		var QUO_3 = Math.floor(i % 3) * 120;
		var DIV_3 = Math.floor(i / 3) * 120;
		this.NumberInput[i].Group = this.add.group(this.fGroup_Input);
		this.NumberInput[i].Group.position.setTo(QUO_3, DIV_3);
		this.NumberInput[i].Index = i;
		this.NumberInput[i].Number = i + 1;
		this.NumberInput[i].Btn = this.add.button(0, 0, 'btn_small', null,this, 3, 3, 4, 3, this.NumberInput[i].Group);
		this.NumberInput[i].Btn.name = 'buttonnumber';
		this.NumberInput[i].Btn.data['object'] = this.NumberInput[i];
		this.NumberInput[i].Btn.anchor.setTo(0.5, 0.5);
		this.NumberInput[i].Btn.onInputDown.add(this.OnClickNumber, this);
		this.NumberInput[i].Btn.onInputDown.add(_BTN.ANI5, this);
		this.NumberInput[i].Spr = this.add.sprite(0, 0,'no_default', (i + 1));
		this.NumberInput[i].Group.add(this.NumberInput[i].Spr);
		this.NumberInput[i].Spr.anchor.setTo(0.5, 0.5);
		this.NumberInput[i].Spr.position.setTo(0, -2);
	}
};
Level.prototype.initMain = function() {
	this.fClock = this.add.sprite(245, -130, 'data01', 'clock',	this.fGroup_Sudoku);
	this.fClock.anchor.setTo(0.5, 0.5);

	this.fClock = this.add.sprite(420, -130, 'data01', 'trophy_1',	this.fGroup_Sudoku);
	this.fClock.anchor.setTo(0.5, 0.5);
	
	
	this.flevelbackspr = this.add.sprite(-40, -160, 'levelback',_UserInfo.Nowlevel);
	this.fGroup_Sudoku.add(this.flevelbackspr);
	this.ftextlevel = this.add.sprite(78, -132, "data02",_IMAGE_LOCALIZING.TEXT_SELECT_TITLE[_UserInfo.Nowlevel],this.fGroup_Sudoku);
	this.ftextlevel.pivot.setTo(0.5, 0.5);
	this.ftextlevel.anchor.setTo(0.5, 0.5);

	this.fText_Gametime = this.add.text(325, -126, '', FontStyle.TIME,this.fGroup_Sudoku);
	this.fText_Gametime.anchor.setTo(0.5, 0.5);
	
	
	this.fText_Besttime = this.add.text(490, -126, '', FontStyle.TIME,	this.fGroup_Sudoku);
	this.fText_Besttime.anchor.setTo(0.5, 0.5);

	var Sec = Math.floor(_UserInfo.Besttime[_UserInfo.Nowlevel] % 60);
	var Min = Math.floor(_UserInfo.Besttime[_UserInfo.Nowlevel] / 60);
	Min = Min % 100;
	var formattedNumber = ("0" + Sec).slice(-2);
	this.fText_Besttime.text = Min + ":" + formattedNumber;

};

Level.prototype.initObjects = function() {

	_UserInfo.PlayTime = 0;
	this.addtime = 0;
	this.NumberInput = new Array(_DEFINE.COUNT_NUMBER);
	this.Sudoku = new Array(_DEFINE.COUNT_TOTAL);
	this.fWrong_Line_Prefab = new Array();
	this.fWrong_Spine = new Array();

	for (var i = 0; i < _DEFINE.COUNT_TOTAL; i++)		this.Sudoku[i]      = new _Class_SudokuManager();
	for (var i = 0; i < _DEFINE.COUNT_NUMBER; i++)		this.NumberInput[i] = new _Class_InputManager();
	this.initGroup();
	this.initDeleteButton();
	this.initCheckButton();
	this.initMemoButton();
	this.initNobutton();
	this.initMain();
	this.initPause();
	this.Register_Sodoku();

	this.fbool_memo = false;
	this.fbool_delete = false;

	var _popup_message = this.add.sprite(360, 0, 'data03', 'popup_message',	this.fGroup_notice);
	_popup_message.anchor.setTo(0.5, 0.5);
	var _style = {"font" : "bold 40px",		"stroke" : "#ffffff",		"strokeThickness" : 1,		"align" : "center"};
	
	this.fTextnotice = this.add.text(360, 1, 'Please select a number first !\n',_style, this.fGroup_notice);
	
	this.fTextnotice.anchor.setTo(0.5, 0.5);
	this.fGroup_notice.visible = false;
	this.fSec = 0;
	this.fboolResult = false;
	this.addevent = null;
	this.ButtonEvent = {		Timer : null,		Object : null,		Tick : null,		SelectImage : null,		Live : false	};
	this.fTimer_Game = this.game.time.create(false);
	this.fTimer_Game.loop(1000, this.On_Timer_Count, this);

	this.ButtonEvent.Timer = this.game.time.create(false);
	this.ButtonEvent.Timer.loop(1, this.On_ProcessEmpty, this);

	this.fGroup_main.alpha = 0;
	this.fGroup_Sudoku.alpha = 0;
	this.fGroup_Input.alpha = 0;
	this.fGroup_Button.alpha = 0;

	this.fGroup_notice.visible = false;
	this.fGroup_pause.visible = false;

	_FX.SetBtn(this.fBtn_sound);

	this.fWindow_Tutorial = null;

	this.Update_Timer();
	this.Mixcount = DEF.MIXCOUNT;
	this.Process_Ready();
	this.fTextnotice.text = "";	
	
};
// -- user code here --
Level.prototype.Make_Back_9 = function(index) {
	this.Sudoku[index].Spr_Back.frame = 2;
};
Level.prototype.Register_Sodoku = function() {
	for (var i = 0; i < _DEFINE.COUNT_TOTAL; i++) {
		var QUO_9 = Math.floor(i % 9);
		var DIV_9 = Math.floor(i / 9);

		var QUO_3 = Math.floor(DIV_9 / 3);
		var DIV_3 = Math.floor(QUO_9 / 3);

		this.Sudoku[i].x = (QUO_9 * DEF.MAINSTEPX) + DIV_3 * DEF.GAP;
		this.Sudoku[i].y = (DIV_9 * DEF.MAINSTEPY) + QUO_3 * DEF.GAP;
		
		this.Sudoku[i].Spr_Back = this.game.add.sprite( this.Sudoku[i].x,this.Sudoku[i].y,"btn_sudoku",0);
		
		this.Sudoku[i].Spr_Back.anchor.setTo(0.5, 0.5);
		this.Sudoku[i].Spr_Back.name = "sudokuworkbutton";
		this.Sudoku[i].Spr_Back.data["object"] = this.Sudoku[i];
		
		this.fGroup_Game.add(this.Sudoku[i].Spr_Back);	
		
		this.Sudoku[i].Type = DEF.SFIXED;
		this.Sudoku[i].Spr_Back.inputEnabled = true;
		this.Sudoku[i].Spr_Back.events.onInputDown.add(this.onClickSudoku, this);
		this.Sudoku[i].Spr_Back.events.onInputDown.add(this.onClickToggleOn,this);
		this.Sudoku[i].Spr_Back.events.onInputUp.add(this.onClickToggleOff,	this);
	}
	for (var i = 0; i < _DEFINE.COUNT_TOTAL; i++) {
		this.Sudoku[i].Spr_No = this.game.add.sprite(this.Sudoku[i].x,		this.Sudoku[i].y, "no_default", 0);
		this.Sudoku[i].Spr_No.anchor.setTo(0.5, 0.5);
		this.Sudoku[i].Spr_No.scale.setTo(0.73, 0.73);
		this.Sudoku[i].Spr_No.name = "skip";
		this.Sudoku[i].Spr_No.inputEnabled = false;
		this.fGroup_GameNumber.add(this.Sudoku[i].Spr_No);
	}
	for (var i = 0; i < _DEFINE.COUNT_TOTAL; i++) {
		this.Sudoku[i].Spr_Effect = this.game.add.sprite(this.Sudoku[i].x,this.Sudoku[i].y, "data01", "selected_no");
		this.Sudoku[i].Spr_Effect.anchor.setTo(0.5, 0.5);
		this.Sudoku[i].Spr_Effect.scale.setTo(1, 1);
		this.Sudoku[i].Spr_Effect.name = "skip";
		this.Sudoku[i].Spr_Effect.visible = false;
		this.Sudoku[i].Spr_Effect.inputEnabled = false;
		this.fGroup_GameNumber.add(this.Sudoku[i].Spr_Effect);
	}
	for (var i = 0; i < _DEFINE.COUNT_TOTAL; i++) {
		this.Sudoku[i].Spr_W_Box = this.game.add.sprite(this.Sudoku[i].x,this.Sudoku[i].y, "data01", "wrong_box");
		this.Sudoku[i].Spr_W_Box.anchor.setTo(0.5, 0.5);
		this.Sudoku[i].Spr_W_Box.scale.setTo(1, 1);
		this.Sudoku[i].Spr_W_Box.name = "skip";
		this.Sudoku[i].Spr_W_Box.visible = false;
		this.Sudoku[i].Spr_W_Box.inputEnabled = false;
		this.Sudoku[i].W_Box_Count = 0;
		this.fGroup_GameNumber.add(this.Sudoku[i].Spr_W_Box);
		this.Sudoku[i].Index = i;
	}
};

Level.prototype.Pop_up_notice = function(notice) {
	if (this.fGroup_notice.visible === true)	return;
	_FX.Start(_FX.SE_SELECTNUMBER);
	this.fGroup_notice.visible = true;
	this.fGroup_notice.scale.y = 0;
	this.fTextnotice.text = notice;
	var tween1 = this.game.add.tween(this.fGroup_notice.scale).to({		y : 1	}, 100, Phaser.Easing.Linear.Out, false);
	var tween2 = this.game.add.tween(this.fGroup_notice.scale).to({		y : 0	}, 200, Phaser.Easing.Linear.Out, false, 600);
	tween2.onComplete.add(this.On_EventPop_up_close, this);
	tween1.chain(tween2);
	tween1.start();
};
Level.prototype.On_EventPop_up_close = function() {
	this.fGroup_notice.visible = false;
};
Level.prototype.OnClicksound = function(Object) {

	_FX.Toggle(1, Object);
	_FX.Start(_FX.SE_CLICK);
};

Level.prototype.NobuttonNormal = function() {
	this.fBtn_memo.setFrames("btn_off", "btn_off", "btn_off", "btn_off");
	for (var i = 0; i < 9; i++) {
		this.NumberInput[i].Group.alpha = 1;
		this.NumberInput[i].Spr.loadTexture("no_default");
		this.NumberInput[i].Spr.frame = i + 1;
		this.NumberInput[i].Btn.setFrames(3, 3, 4, 3);
	}
};
Level.prototype.Result_Initialize = function() {
	this.Input_Disable(true);
	this.NobuttonNormal();

	for (var i = 0; i < 81; i++) {
		this.Sudoku[i].Spr_Effect.visible = false;
	}
	this.fbool_memo = false;

	this.fGroup_Button.alpha = 0.5;
	this.fGroup_Input.alpha = 0.5;
	this.fBtn_pause.inputEnabled = false;
	this.game.time.events.add(Phaser.Timer.SECOND, this.Animation_result, this);
	this.fboolResult = true;
	this.fTimer_Game.pause();
};
Level.prototype.Check_Result = function() {
	if (this.fboolResult == true)		return;
	for (var i = 0; i < 81; i++)		if (this.Sudoku[i].No == 0)			return false;
	for (var i = 0; i < 81; i++) 
	{
		if (this.BackMask_Vertical(i, 1) == false)				return false;
		if (this.BackMask_Horizontal(i, 1) == false)			return false;
		if (this.BackMask_Center(i, 1) == false)				return false;
	}
	this.Result_Initialize();
};
Level.prototype.OnClickCheck = function() {
	var check = false;
	_FX.Start(_FX.SE_KEYPAD);

	for (var i = 0; i < 81; i++) {
		if (this.Sudoku[i].No != 0)
			if (this.Sudoku[i].No != this.Sudoku[i].OrignalNo) {
				this.Sudoku[i].Spr_W_Box.frameName = "check_result";
				this.Sudoku[i].Spr_W_Box.alpha = 1;
				this.Sudoku[i].Spr_W_Box.visible = true;
				check = true;
			}
	}
	for (var i = 0; i < 81; i++) {
		if (this.Sudoku[i].Type == DEF.SWORK)
			if (this.Sudoku[i].No == this.Sudoku[i].OrignalNo) {
				this.Sudoku[i].Spr_No.loadTexture("no_default");
				this.Sudoku[i].Spr_No.frame = this.Sudoku[i].No;
				this.Sudoku[i].Type = DEF.SFIXED;
				this.Sudoku[i].Spr_W_Box.visible = false;
				this.game.add.tween(this.Sudoku[i].Spr_No.scale).to({
					x : 1.5,
					y : 1.5
				}, 200, Phaser.Easing.Linear.Out, true).yoyo(true);
			}
	}
	if (check == false) {
		_FX.Start(_FX.SE_CORRECT);

	} else {
		this.fSpine_Check.setAnimationByName(0, "btn_check_ani", false);
		this.addtime += _DEFINE.CHECK_PENALTY_TIME;
		this.Add_Effect(_EFFECT_IMAGE.MISS);
		_FX.Start(_FX.SE_ERROR);
	}

	if (this.addtime > 0)
		this.game.time.events.add(500, this.On_EventCallitself, this);
	this.Process_Equal_number();
	this.Check_CommomButton();
};

Level.prototype.OnBackBlack = function(value) {
	if (value == true) 
	{
		this.fGroup_GameNumber.visible = false;
		this.backimage.tint = 0x000000;
		this.fGroup_Sudoku.alpha = 0.1;
		this.fGroup_Button.alpha = 0.1;
		this.fGroup_Input.alpha = 0.1;
	}
	else {
		this.backimage.tint = 0xffffff;
		this.fGroup_Sudoku.alpha = 1;
		this.fGroup_Button.alpha = 1;
		this.fGroup_Input.alpha = 1;
		this.fGroup_GameNumber.visible = true;
	}
};
Level.prototype.OnClickPause = function() {
	_FX.Start(_FX.SE_POPUP_ON);
	this.fBtn_pause.inputEnabled = true;
	this.fTimer_Game.pause();
	this.fGroup_pause.scale.setTo(1, 0);
	this.fGroup_pause.visible = true;
	this.Input_Disable(true);

	this.fGroup_pause.alpha = 1;
	this.OnBackBlack(true);
	this.game.add.tween(this.fGroup_pause.scale).to({
		x : 1,
		y : 1
	}, 100, Phaser.Easing.Linear.None, true);
};
Level.prototype.OnClickExitpause = function() {
	_FX.Start(_FX.SE_CLICK);
	this.OnBackBlack(false);
	this.fTimer_Game.resume();
	this.game.add.tween(this.fGroup_Sudoku).to({		alpha : 1	}, 100, Phaser.Easing.Linear.None, true);
	_FX.Start(_FX.SE_POPUP_OFF);
	this.fGroup_pause.visible = false;
	this.Input_Disable(false);
};
Level.prototype.Add_Effect = function(value, object) {
	var prefabtemp;
	switch (value) {
	case _EFFECT_IMAGE.GO:
		prefabtemp = new Prefab(this.game, this.game.canvas.width / 2 + 70,-200, 'data02', 'go');
		this.game.add.existing(prefabtemp);
		prefabtemp.start(_EFFECT_IMAGE.GO);
		break;
	case _EFFECT_IMAGE.MISSNUMBER:
		prefabtemp = new Prefab(this.game, object.x+50, object.y+150, 'data02',"miss");
		this.game.add.existing(prefabtemp);
		prefabtemp.start(_EFFECT_IMAGE.MISSNUMBER);
		break;
	case _EFFECT_IMAGE.MISS:
		prefabtemp = new Prefab(this.game, this.game.canvas.width / 2, -200,'data02', "miss");
		this.game.add.existing(prefabtemp);
		prefabtemp.start(_EFFECT_IMAGE.MISS);
		break;
	case _EFFECT_IMAGE.GOOD:
		prefabtemp = new Prefab(this.game, this.game.canvas.width / 2, -200,'data02', "good");
		this.game.add.existing(prefabtemp);
		prefabtemp.start(_EFFECT_IMAGE.GOOD);
		break;
	}
};
Level.prototype.Animation_Clock = function() {
	// var tempy = (this.fClock.position.y) -5;
	// this.game.add.tween(this.fClock.position).to({y:tempy},1000,
	// Phaser.Easing.Linear.Out,true,true,-1);
};
Level.prototype.Make_sudoku_number = function() {
	
	SudokuEngine.CreateNew(_UserInfo.Nowlevel);	
	for (var i = 0; i < _DEFINE.COUNT_TOTAL; i++) 
	{
		this.Sudoku[i].OrignalNo = SudokuEngine._Data_Save_Result[i] & 0x00ff;
		
		if( SudokuEngine._Data_Save_Result[i] & 0x1000)
		{
			this.Sudoku[i].Type      = DEF.SFIXED;			
			this.Sudoku[i].No        = this.Sudoku[i].OrignalNo;			
			
			this.Sudoku[i].Spr_No.loadTexture("no_default");
			this.Sudoku[i].Spr_No.frame = this.Sudoku[i].No;
			this.Sudoku[i].Spr_Back.frame = DEF.FRAME.FIXED;

		}
		else
		{			
			this.Sudoku[i].Type = DEF.SEMPTY;
			this.Sudoku[i].No   = DEF.EMPTYNO;		
			
			this.Sudoku[i].Spr_Back.frame = DEF.FRAME.BASE;
			this.Sudoku[i].Spr_No.loadTexture("no_normal");
			this.Sudoku[i].Spr_No.frame = this.Sudoku[i].No;
		}
	}
};
Level.prototype.Put_Memo = function(object)
{	

	this.Sudoku[object.Index].Type = DEF.SEMPTY;	
	var index = object.Index;
	var number = this.fNowNoBtn.Index;
	var tempx = Math.floor(number % 3);
	var tempy = Math.floor(number / 3);
	tempx = (tempx * 22) - 22;
	tempy = (tempy * 22) - 20;

	if(this.Sudoku[index].SprMemo[number] == null)
	{
		this.Sudoku[index].SprMemo[number] = this.add.sprite(this.Sudoku[index].x + tempx, this.Sudoku[index].y + tempy,"no_memo", number + 1);
		this.fGroup_GameNumber.add(this.Sudoku[index].SprMemo[number]);
		this.Sudoku[index].SprMemo[number].anchor.setTo(0.5, 0.5);
		this.Sudoku[index].SprMemo[number].scale.setTo(0.30, 0.30);
		_FX.Start(_FX.SE_MEMO);
	}
	else
	{
		this.Sudoku[index].SprMemo[number].destroy();
		this.Sudoku[index].SprMemo[number] = null;
	}
	for (var i = 0; i < 8; i++)	if (this.Sudoku[object.Index].SprMemo[i] != null)this.Sudoku[object.Index].Type = DEF.SMEMO;
};

Level.prototype.Input_Disable = function(temp) {
	for (var i = 0; i < 9; i++)
		this.NumberInput[i].Group.ignoreChildInput = temp;
	this.fGroup_main.ignoreChildInput = temp;
	this.fGroup_Button.ignoreChildInput = temp;
	this.fGroup_Game.ignoreChildInput = temp;
	this.fGroup_Input.ignoreChildInput = temp;
	this.fGroup_Check.ignoreChildInput = temp;
	this.fGroup_Memo.ignoreChildInput = temp;
	this.fGroup_Delete.ignoreChildInput = temp;

};
Level.prototype.Animation_result = function() {
	_FX.Stop();
	for (var i = 0; i < 81; i++) {
		this.Sudoku[i].Spr_Back.frame = 1;
		this.Sudoku[i].Spr_No.loadTexture("no_normal");
		this.Sudoku[i].Spr_No.frame = this.Sudoku[i].OrignalNo;
	}
	var value = 100;
	var delayvalue = 0;

	for (var i = 0; i < 9; i++) {
		for (var j = 0; j < i + 1; j++) {
			var _start = i + j * 8;
			this.game.add.tween(this.Sudoku[_start].Spr_Back).to({
				frame : 2
			}, 60, Phaser.Easing.Linear.In, true, i * value);
			this.game.add.tween(this.Sudoku[_start].Spr_No.scale).to({
				x : 1.02,
				y : 1.02
			}, 60, Phaser.Easing.Linear.None, true, i * value).yoyo(true);
		}
		this.game.time.events.add(i * value, this.On_Playresultsound, this);
	}
	delayvalue = 9 * value;

	for (var i = 0; i < 8; i++) {

		for (var j = 0; j < (8 - i); j++) {
			var _start = (17 + (i * 9) + j * 8);

			this.game.add.tween(this.Sudoku[_start].Spr_Back).to({
				frame : 2
			}, 60, Phaser.Easing.Linear.In, true, i * value + delayvalue);
			this.game.add.tween(this.Sudoku[_start].Spr_No.scale).to({
				x : 1.02,
				y : 1.02
			}, 60, Phaser.Easing.Linear.In, true, i * value + delayvalue).yoyo(
					true);

		}
		this.game.time.events.add(i * value + delayvalue,
				this.On_Playresultsound, this);
	}
	this.game.time.events.add(Phaser.Timer.SECOND * 2, this.Result_Display,	this);
};
Level.prototype.On_Playresultsound = function() {
	_FX.Start(_FX.SE_2);
};
Level.prototype.Result_Display = function() 
{	
	this.Window_Result = new Window_Result(this.game,this);
	this.OnBackBlack(true);
	this.Window_Result.position.setTo(0, -700);	
	this.fGroup_GameNumber.visible = false;	
};
Level.prototype.Shutdown = function() 

{
	for (var i = 0; i < _DEFINE.COUNT_TOTAL; i++) 
	{
		this.Sudoku[i].Spr_Back.destroy(true);
		this.Sudoku[i].Spr_Back.events.destroy();
		this.Sudoku[i].Spr_No.destroy();
		this.Sudoku[i].Spr_Effect.destroy();
		this.Sudoku[i].Spr_W_Box.destroy();
		
		for (var i = 0; i < _DEFINE.COUNT_TOTAL; i++) 
		{
			for (var j = 0; j < 9; j++) 
			{
				if(this.Sudoku[i].SprMemo[j] != null)
				{
					this.Sudoku[i].SprMemo[j].destroy();
					this.Sudoku[i].SprMemo[j] = null;
				}
			}
		}		
		this.Sudoku[i] = null;
	}
	
	this.fGroup_Sudoku.removeAll(true);
	this.backimage.destroy();
	this.fNowNoBtn = null;
	this.fSpine_Check.destroy();
	this.game.onPause.removeAll();
	this.game.onResume.removeAll();

	this.fGroup_main.removeAll(true);
	this.fGroup_pause.removeAll(true);

	this.fGroup_Button.removeAll(true);
	this.fGroup_Input.removeAll(true);
	this.fGroup_notice.removeAll(true);
	this.fGroup_Game.removeAll(true);
	this.fGroup_GameNumber.removeAll(true);


	this.fGroup_Memo.removeAll(true);
	this.fGroup_Delete.removeAll(true);
	this.fGroup_Check.removeAll(true);

	this.ButtonEvent.Timer.stop(true);
	this.fTimer_Game.stop(true);

	this.fGroup_main = null;
	this.fGroup_pause = null;
	this.fGroup_Sudoku = null;
	this.fGroup_Button = null;
	this.fGroup_Input = null;
	this.fGroup_notice = null;
	this.fGroup_Game = null;
	this.fGroup_GameNumber = null;
	this.fGroup_Memo = null;
	this.fGroup_Delete = null;
	this.fGroup_Check = null;
};
Level.prototype.GotoMenu = function() {
	_FX.Stop();
	this.fGroup_main.visible = false;
	this.fGroup_pause.visible = false;
	this.Shutdown();
	this.game.state.start("Menu", true);
};
Level.prototype.On_EventCloseresult = function() {
	this.Window_Result.destroy(true);
	this.GotoMenu();
};
Level.prototype.Update_Timer = function() {
	var Sec = Math.floor(_UserInfo.PlayTime % 60);
	var Min = Math.floor(_UserInfo.PlayTime / 60);
	Min = Min % 100;
	var formattedNumber = ("0" + Sec).slice(-2);
	this.fText_Gametime.text = Min + ":" + formattedNumber;

	if (_UserInfo.Besttime[_UserInfo.Nowlevel] == 0) {
		this.fText_Besttime.text = this.fText_Gametime.text;
	}
};
Level.prototype.On_Timer_Count = function() {
	_UserInfo.PlayTime++;
	this.Update_Timer();
};
Level.prototype.Close_Turtorial = function(obj) {
	_FX.Start(_FX.SE_CLICK);
	_FX.Start(_FX.SE_POPUP_OFF);

	this.game.add.tween(this.fGroup_pause).to({	x : 0}, 200, Phaser.Easing.Linear.Out, true).yoyo(false);
	var tween = this.game.add.tween(this.fWindow_Tutorial.position).to({x : 1080}, 200, Phaser.Easing.Bounce.OutSine, true, 0, 0, false);
	tween.onComplete.add(this.OnClearTutorial, this);
};
Level.prototype.OnClearTutorial = function() {
	this.fUserinfoPrefab.destroy(true);
	this.fWindow_Tutorial.destroy();
};
Level.prototype.OnClickgiveup = function() {
	this.GotoMenu();
	_FX.Start(_FX.SE_POPUP_OFF);
};
Level.prototype.OnClickTutorial = function() {
	_FX.Start(_FX.SE_POPUP_ON);

	this.fWindow_Tutorial = new Window_Tutorial(this.game,this);
	this.fWindow_Tutorial.position.setTo(1080, 660);
	this.fWindow_Tutorial.Reset_Position();
	
 	this.fUserinfoPrefab = new Window_User(this.game, this.fWindow_Tutorial);
	this.fUserinfoPrefab.position.setTo(-360, -650);
	this.fUserinfoPrefab.visible = true;

	this.fWindow_Tutorial.visible = true;
	this.game.add.tween(this.fGroup_pause).to({	x : -720}, 200, Phaser.Easing.Linear.Out, true).yoyo(false);
	this.game.add.tween(this.fWindow_Tutorial.position).to({x : 360	}, 200, Phaser.Easing.Bounce.OutSine, true, 0, 0, false);
};
Level.prototype.OnClickDelete = function(object) {
	if (object.name == "btndelete")
		_FX.Start(_FX.SE_KEYPAD);
	if (this.fbool_delete == false) {
		this.fbool_delete = true;
		this.fBtn_delete.setFrames("btn_on", "btn_on", "btn_on", "btn_on");
	} else {
		this.fbool_delete = false;
		this.fBtn_delete.setFrames("btn_off", "btn_off", "btn_off", "btn_off");
	}
};

Level.prototype.Set_NoBtn_Normal = function() {
	for (var i = 0; i < 9; i++) {
		this.NumberInput[i].Spr.loadTexture("no_default");
		this.NumberInput[i].Spr.frame = i + 1;
		this.NumberInput[i].Btn.setFrames(3, 3, 4, 3);
	}
};
Level.prototype.Set_NoBtn_Memo = function() {
	for (var i = 0; i < 9; i++) {
		this.NumberInput[i].Spr.loadTexture("no_memo");
		this.NumberInput[i].Spr.frame = i + 1;
		this.NumberInput[i].Btn.setFrames(1, 1, 2, 1);
	}
};
Level.prototype.Set_NoBtn_BaseFrame = function() {
	if (this.fbool_memo == true) {
		this.fBtn_memo
				.setFrames("btn_memo", "btn_memo", "btn_memo", "btn_memo");
		this.Set_NoBtn_Memo();
	} else {
		this.fBtn_memo.setFrames("btn_off", "btn_off", "btn_off", "btn_off");
		this.Set_NoBtn_Normal();
	}
};
Level.prototype.OnClickMemo = function(object) {
	if (object.name != "memobutton")
		return;
	_FX.Start(_FX.SE_KEYPAD);
	if (this.fbool_memo == true) {
		this.fbool_memo = false;
		this.Set_NoBtn_BaseFrame();
		this.No_Button_9OverCheck();
		if (this.fNowNoBtn != null)
			this.fNowNoBtn.Btn.setFrames(4, 4, 3, 4);
	} else {
		this.fbool_memo = true;
		this.Set_NoBtn_BaseFrame();
		this.No_Button_9OverCheck();
		if (this.fNowNoBtn != null)
			this.fNowNoBtn.Btn.setFrames(2, 2, 1, 2);
	}
};

Level.prototype.Number_Setting = function() {
	this.Set_NoBtn_BaseFrame();
	if (this.fbool_memo != true) {
		if (this.fNowNoBtn != null)
			this.fNowNoBtn.Btn.setFrames(4, 4, 4, 4);
	} else {
		if (this.fNowNoBtn != null)
			this.fNowNoBtn.Btn.setFrames(2, 2, 2, 2);
	}
};

Level.prototype.OnClickNumber = function(object) {
	if (object.name == "buttonnumber") {
		_FX.Start(_FX.SE_KEYPAD);
		this.fGroup_Input.ignoreChildInput = true;
		this.game.time.events.add(100, this.On_EventEnableNumberInput, this);
		this.fNowNoBtn = object.data['object'];
		this.Number_Setting(object.data['object']);
		this.No_Button_9OverCheck();
		this.Process_Equal_number();
	}
};
Level.prototype.On_EventEnableNumberInput = function() {
	this.fGroup_Input.ignoreChildInput = false;
};
Level.prototype.No_Button_9OverCheck = function() {
	var count = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
	for (var i = 0; i < 81; i++) {
		count[this.Sudoku[i].No]++;
	}

	for (var i = 1; i < 10; i++) {
		this.NumberInput[i - 1].Group.alpha = 1;
		if (count[i] >= 9) {
			this.NumberInput[i - 1].Group.alpha = 0.4;
			this.NumberInput[i - 1].Btn.setFrames(5, 5, 5, 5);

		}
	}

	if (this.fbool_memo == true) {
		if (this.fNowNoBtn != null)
			this.fNowNoBtn.Btn.setFrames(2, 2, 2, 2);
	} else {
		if (this.fNowNoBtn != null)
			this.fNowNoBtn.Btn.setFrames(4, 4, 4, 4);
	}

};
Level.prototype.Reset_SudokuFrame = function() {
	for (var i = 0; i < 81; i++) {
		this.Sudoku[i].Spr_Back.frame = FRAME[this.Sudoku[i].Type];
	}
};
Level.prototype.Process_Equal_number = function() {
	if (this.fNowNoBtn == null) {
		for (var i = 0; i < 81; i++) {
			this.Sudoku[i].Spr_Effect.visible = false;
			this.Sudoku[i].Spr_Effect.frameName = "selected_no";
		}
		return;
	}

	for (var i = 0; i < 81; i++) {
		this.Sudoku[i].Spr_Effect.visible = false;
		this.Sudoku[i].Spr_Effect.frameName = "selected_no";

		if (this.fNowNoBtn.Number == this.Sudoku[i].No) {
			this.Sudoku[i].Spr_Effect.visible = true;
		}
		if (this.Sudoku[i].Type != DEF.SFIXED)
			if (this.Sudoku[i].SprMemo[this.fNowNoBtn.Index] != null) {
				this.Sudoku[i].Spr_Effect.frameName = "selected_memo";
				this.Sudoku[i].Spr_Effect.visible = true;
			}
	}
};

Level.prototype.UpdateChangeOption = function() {
	this.Process_Equal_number();
	this.Number_Setting();
	this.No_Button_9OverCheck();
	this.Check_CommomButton();
	this.Check_Result();
};
Level.prototype.onClickToggleOff = function(buttonobject) {
	if ('sudokuworkbutton' != buttonobject.name) {
		return;
	}
	var object = buttonobject.data["object"];

	object.isButton = false;
};
Level.prototype.onClickToggleOn = function(buttonobject) {
	if ('sudokuworkbutton' != buttonobject.name) {
		return;
	}

	var object = buttonobject.data["object"];

	object.isButton = true;
};

Level.prototype.onClickSudoku = function(buttonobject) {
	if ('sudokuworkbutton' != buttonobject.name) {
		return;
	}
	var object = buttonobject.data["object"];
	switch (this.Sudoku[object.Index].Type) {
	case DEF.SMEMO:

		if (this.fbool_delete == true) {
			this.Delete_Number(object);
			this.Clear_memo(object);
		} else {
			if (this.fNowNoBtn == null) {
				this.Pop_up_notice("Please select a number");
			} else {

				if (this.fbool_memo) {
					this.Put_Memo(object);
				} else {
					this.Put_Number(object);
				}
			}
		}
		break;
	case DEF.SWORK:
		if (this.fbool_delete == true) {
			this.fNowNoBtn = null;
			this.Delete_Number(object);
			_FX.Start(_FX.SE_NUMBER);
		}
		if (this.fNowNoBtn != null) {
			if ((object.No == this.fNowNoBtn.Number)) {
				this.Delete_Number(object);
				_FX.Start(_FX.SE_NUMBER);
			} else {
				this.fNowNoBtn = this.NumberInput[object.No - 1];
			}
		} else {
			this.fNowNoBtn = this.NumberInput[object.No - 1];
		}
		break;
	case DEF.SEMPTY:
		if (this.fbool_delete == true) {
			this.Pop_up_notice("Please select a field to delete.");
			return;
		}
		if (this.fNowNoBtn == null) {
			this.Pop_up_notice("Please select a number");
			return;
		}

		if (this.ButtonEvent.Timer.running)
			this.ButtonEvent.Timer.resume();
		else
			this.ButtonEvent.Timer.start();
		this.ButtonEvent.Tick = 0;
		this.ButtonEvent.Object = object;
		break;
	case DEF.SFIXED:
		if (this.fNowNoBtn == this.NumberInput[object.No - 1]) {
			this.fNowNoBtn = null;
		} else {
			_FX.Start(_FX.SE_KEYPAD);
			this.fNowNoBtn = this.NumberInput[object.No - 1];
		}
		break;

	}
	this.UpdateChangeOption();

};
Level.prototype.On_ProcessEmpty = function() {
	this.ButtonEvent.Tick++;
	if (this.ButtonEvent.Tick >= _DEFINE.PUSHTIME) {
		if (this.Sudoku[this.ButtonEvent.Object.Index].isButton == true) {

			if (!this.fbool_memo) {
				this.Put_Memo(this.ButtonEvent.Object);
			} else {
				this.Put_Number(this.ButtonEvent.Object);
			}
			this.ButtonEvent.Timer.pause();

			this.UpdateChangeOption();
		} else {

			if (this.fbool_memo) {
				this.Put_Memo(this.ButtonEvent.Object);
			} else {
				this.Put_Number(this.ButtonEvent.Object);
			}
			this.ButtonEvent.Timer.pause();

			this.UpdateChangeOption();
		}
	} else {
		if (this.Sudoku[this.ButtonEvent.Object.Index].isButton == false) {

			if (this.fbool_memo) {
				this.Put_Memo(this.ButtonEvent.Object);
			} else {
				this.Put_Number(this.ButtonEvent.Object);
			}

			this.ButtonEvent.Timer.pause();

			this.UpdateChangeOption();

		}
	}
};
Level.prototype.Off_Combutton = function(mode) {
	switch (mode) {
	case DEF.BUTTON.CHECK:
		this.fGroup_Check.ignoreChildInput = true;
		this.fGroup_Check.alpha = 0.5;
		break;
	case DEF.BUTTON.MEMO:
		this.fGroup_Memo.ignoreChildInput = true;
		this.fGroup_Memo.alpha = 0.5;
		break;
	case DEF.BUTTON.DELETE:
		this.fbool_delete = false;
		this.fBtn_delete.setFrames("btn_off", "btn_off", "btn_off", "btn_off");
		this.fGroup_Delete.ignoreChildInput = true;
		this.fGroup_Delete.alpha = 0.5;
		break;
	}
};
Level.prototype.On_Combutton = function(mode) {
	switch (mode) {
	case DEF.BUTTON.CHECK:
		this.fGroup_Check.ignoreChildInput = false;
		this.fGroup_Check.alpha = 1.0;
		break;
	case DEF.BUTTON.MEMO:
		this.fGroup_Memo.ignoreChildInput = false;
		this.fGroup_Memo.alpha = 1;
		break;
	case DEF.BUTTON.DELETE:
		this.fBtn_delete.setFrames("btn_off", "btn_off", "btn_off", "btn_off");
		this.fbool_delete = false;
		this.fGroup_Delete.ignoreChildInput = false;
		this.fGroup_Delete.alpha = 1;
		break;
	}
};

Level.prototype.Check_CommomButton = function() {
	var memocount = 0;
	var workcount = 0;
	for (var i = 0; i < 81; i++) {
		if (this.Sudoku[i].Type == DEF.SMEMO)
			memocount++;
		if (this.Sudoku[i].Type == DEF.SWORK)
			workcount++;
	}

	if ((workcount > 0) || (memocount > 0)) {
		if (this.fbool_delete == false)
			this.On_Combutton(DEF.BUTTON.DELETE);
	}
	if (workcount > 0) {
		this.On_Combutton(DEF.BUTTON.CHECK);
	} else {
		this.Off_Combutton(DEF.BUTTON.CHECK);
	}
	if (memocount == 0 && workcount == 0) {
		this.Off_Combutton(DEF.BUTTON.DELETE);
	}
};
Level.prototype.Delete_Number = function(object) {
	this.Remove_Wrong_Line(object.Index);
	this.Sudoku[object.Index].No = DEF.EMPTYNO;
	this.Sudoku[object.Index].Type = DEF.SEMPTY;
	this.Sudoku[object.Index].Spr_Back.frame = 0;
	this.Sudoku[object.Index].Spr_No.frame = 0;
	this.Sudoku[object.Index].Spr_Effect.visible = false;
	this.Sudoku[object.Index].Spr_W_Box.visible = false;

};
Level.prototype.Clear_memo = function(object) {
	for (var i = 0; i < 9; i++)
	{
		if(object.SprMemo[i]!= null) 
		{
			object.SprMemo[i].destroy();
			object.SprMemo[i]= null;
		}
	}
};
Level.prototype.Check_Wrongnumber = function(index) {
	var result = false;
	var source = index;

	for (var i = 0; i < SudokuEngine._Arrangement_Rule_Data[index].length; i++) {
		var target = SudokuEngine._Arrangement_Rule_Data[index][i];
		if (target != source)
			if (this.Sudoku[target].No == this.Sudoku[source].No) {
				this.MakeWrongLine(source, target);
				this.Sudoku[source].Spr_W_Box.frameName = "wrong_box";
				this.Sudoku[target].Spr_W_Box.frameName = "wrong_box";
				this.Sudoku[source].Spr_W_Box.visible = true;
				this.Sudoku[target].Spr_W_Box.visible = true;

				this.Sudoku[source].W_Box_Count++;
				this.Sudoku[target].W_Box_Count++;

				result = true;
			}
	}
	return result;
};

Level.prototype.Check_PositionDef = function(index) 
{
	if (this.Sudoku[index].Type != DEF.SFIXED) 
	{
		if (this.Sudoku[index].No == 0) {
			this.Sudoku[index].Type = DEF.SEMPTY;
			for (var i = 0; i < 9; i++) 
			{
				if (this.Sudoku[index].SprMemo[i] != null)	this.Sudoku[index].Type = DEF.SMEMO;
			}
		} else 
		{
			this.Sudoku[index].Type = DEF.SWORK;
		}
	}
};
Level.prototype.DeleteMemo_On_Validindex = function(index) {
	for (var i = 0; i < SudokuEngine._Arrangement_Rule_Data[index].length; i++) {
		var temp = SudokuEngine._Arrangement_Rule_Data[index][i];

		if (this.Sudoku[temp].Type !== DEF.SFIXED)
			if (this.Sudoku[temp].SprMemo[this.fNowNoBtn.Index] != null) {
				this.Sudoku[temp].Spr_Effect.visible = false;
				this.Sudoku[temp].SprMemo[this.fNowNoBtn.Index].destroy();
				this.Sudoku[temp].SprMemo[this.fNowNoBtn.Index] = null;
			}
		this.Check_PositionDef(temp);
	}
};
Level.prototype.Put_Number = function(arg) {
	var object = arg;
	this.Sudoku[object.Index].No = this.fNowNoBtn.Number;
	this.Sudoku[object.Index].Spr_Effect.visible = true;
	this.Sudoku[object.Index].Spr_No.frame = this.Sudoku[object.Index].No;
	this.Sudoku[object.Index].Spr_Back.frame = 1;
	this.Sudoku[object.Index].Type = DEF.SWORK;
	this.Clear_memo(object);

	if (this.Check_Wrongnumber(object.Index) == true) {
		this.Add_Effect(_EFFECT_IMAGE.MISSNUMBER, object);
		_FX.Start(_FX.SE_ERROR);
		if (_UserInfo.Nowlevel == 2) {
			this.MakeSpine(this.Sudoku[object.Index].x + 46,
					this.Sudoku[object.Index].y + 170);
			this.addtime += _DEFINE.CHECK_PENALTY_TIME;
			if (this.addevent == null)
				this.addevent = this.game.time.events.add(500,
						this.On_EventCallitself, this);

		}
	} else {
		_FX.Start(_FX.SE_NUMBER);
	}

	this.DeleteMemo_On_Validindex(object.Index);
	var soundcheck = false;
	if (this.BackMask_Vertical(object.Index, 0) == true) 	{		soundcheck = true;	}
	if (this.BackMask_Horizontal(object.Index, 0) == true) 	{		soundcheck = true;	}
	if (this.BackMask_Center(object.Index, 0) == true) 		{		soundcheck = true;	}	
	if (soundcheck)											
	{
		_FX.Start(_FX.SE_1);
		this.game.time.events.add(200, this.ReTurnBackImage, this);
	}
};

Level.prototype.Put_Memo1 = function(object) {
	
	this.Sudoku[object.Index].Type = DEF.SEMPTY;
	if (this.Sudoku[object.Index].SprMemo[this.fNowNoBtn.Index].visible == true) 
	{
		this.Sudoku[object.Index].SprMemo[this.fNowNoBtn.Index].visible = false;
	} else 
	{
		this.Sudoku[object.Index].SprMemo[this.fNowNoBtn.Index].visible = true;
		_FX.Start(_FX.SE_MEMO);
	}
	for (var i = 0; i < 8; i++)
		if (this.Sudoku[object.Index].SprMemo[i].visible == true)
			this.Sudoku[object.Index].Type = DEF.SMEMO;
};

Level.prototype.MakeWrongLine = function(start, end) {
	var sx = 0, sy = 0, tx = 0, ty = 0;
	for ( var temp in this.fWrong_Line_Prefab) {
		if ((this.fWrong_Line_Prefab[temp].start == start)
				&& (this.fWrong_Line_Prefab[temp].end == end)) {
			return;
		}
		if ((this.fWrong_Line_Prefab[temp].start == end)
				&& (this.fWrong_Line_Prefab[temp].end == start)) {
			return;
		}
	}
	sx = this.Sudoku[start].x;
	sy = this.Sudoku[start].y;
	tx = this.Sudoku[end].x;
	ty = this.Sudoku[end].y;
	var line = new Phaser.Line(sx, sy, tx, ty);
	sx = line.left + (line.right - line.left) / 2;
	sy = line.top + (line.bottom - line.top) / 2;
	var wrongline = new Prefab(this.game, sx, sy, "data01", "wrong_line");
	wrongline.start(_EFFECT_IMAGE.LINEMAKE, line);
	this.game.add.existing(wrongline);
	this.fGroup_GameNumber.add(wrongline);
	
	temp = new LINEINFO();
	temp.end = end;
	temp.start = start;
	temp.prefab = wrongline;
	this.fWrong_Line_Prefab.push(temp);
};
Level.prototype.Remove_Wrong_Line = function(index) {
	var temp = 0;

	for (var i = 0; i < this.fWrong_Line_Prefab.length; i++) {
		var lineinfo = this.fWrong_Line_Prefab[i];
		if ((lineinfo.start === index) || (lineinfo.end === index)) {
			temp++;
			if (this.Sudoku[lineinfo.start].W_Box_Count > 0) {
				this.Sudoku[lineinfo.start].W_Box_Count--;
				if (this.Sudoku[lineinfo.start].W_Box_Count == 0)
					this.Sudoku[lineinfo.start].Spr_W_Box.visible = false;
			}
			if (this.Sudoku[lineinfo.end].W_Box_Count > 0) {
				this.Sudoku[lineinfo.end].W_Box_Count--;
				if (this.Sudoku[lineinfo.end].W_Box_Count == 0)
					this.Sudoku[lineinfo.end].Spr_W_Box.visible = false;
			}
			if (this.fWrong_Line_Prefab[i].prefab.fLive == true)
				this.fWrong_Line_Prefab[i].prefab.lineend(
						_EFFECT_IMAGE.LINEKILL, i);

		}
	}
	while (temp) {
		for (var i = 0; i < this.fWrong_Line_Prefab.length; i++) {
			if (this.fWrong_Line_Prefab[i].start == index
					|| (this.fWrong_Line_Prefab[i].end == index)) {
				this.fWrong_Line_Prefab.splice(i, 1);
				temp--;
				break;
			}
		}
	}
};
Level.prototype.Process_Ready = function() {
	this.Check_CommomButton();
	this.fGroup_main.alpha = 1;
	if (_FX.BGM_TITLE.isPlaying === true)
		_FX.BGM_TITLE.stop();
	this.fGroup_Sudoku.alpha = 1;
	_FX.Start(_FX.SE_SHUFFLE);
	this.e_startdoing = this.game.time.events.add(10, this.Process_Makesudoku,this);
	this.Input_Disable(true);
};
Level.prototype.Process_Makesudoku = function() {
	
	if (this.Mixcount == 0) 
	{
		this.game.add.tween(this.fGroup_Input).to({			alpha : 1		}, 500, Phaser.Easing.Linear.In, true, 0);
		this.game.add.tween(this.fGroup_Button).to({			alpha : 1		}, 600, Phaser.Easing.Linear.In, true, 0);
		this.Add_Effect(_EFFECT_IMAGE.GO);
		this.game.time.events.add(1000, this.Process_Gamestart, this);
	} else {
		this.game.time.events.add(100, this.Process_Makesudoku, this);
		this.Make_sudoku_number();
		this.Mixcount--;
	}
};

Level.prototype.BackMask_Vertical = function(position, option) {
	var checkdata = new Array();
	var checkbit = 0x000000;
	var tempCOL = Math.floor(position / 9);
	for (var i = 0; i < 9; i++)
		checkdata.push(i + tempCOL * 9);
	for (var i = 0; i < 9; i++) {
		if (this.Sudoku[checkdata[i]].Type == DEF.SEMPTY)			return;
		if (this.Sudoku[checkdata[i]].Type == DEF.SMEMO)			return;
		checkbit |= (0x00000001 << this.Sudoku[checkdata[i]].No);
	}

	if (checkbit == 0x0003fe) {
		if (option == 0) 
		{
			for (var i = 0; i < 9; i++)this.Sudoku[checkdata[i]].Spr_Back.frame = 2;
		}
		return true;
	}
	return false;
};

Level.prototype.BackMask_Horizontal = function(position, option) {
	var checkdata = new Array();
	var checkbit = 0x000000;
	var tempROW = Math.floor(position % 9);
	for (var i = 0; i < 9; i++)
		checkdata.push(i * 9 + tempROW);
	for (var i = 0; i < 9; i++) {
		if (this.Sudoku[checkdata[i]].Type == DEF.SEMPTY)			return;
		if (this.Sudoku[checkdata[i]].Type == DEF.SMEMO)			return;
		checkbit |= (0x00000001 << this.Sudoku[checkdata[i]].No);
	}
	if (checkbit == 0x0003fe) {
		if (option == 0) 
		{
			for (var i = 0; i < 9; i++)this.Sudoku[checkdata[i]].Spr_Back.frame = 2;
		}
		return true;
	}
	return false;
};
Level.prototype.ReTurnBackImage = function() 
{
	
	for(var i = 0 ; i < 81 ; i ++)
	{
		if(this.Sudoku[i].Spr_Back.frame == 2)
		{
			this.Sudoku[i].Spr_Back.frame = 1;	
		}
	}
};

Level.prototype.BackMask_Center = function(position, option) {
	var checkdata = new Array();
	var checkbit = 0x000000;
	var tempROW = Math.floor(position % 9);
	var tempCOL = Math.floor(position / 9);
	var tempROW1 = Math.floor(tempROW / 3) * 3;
	var tempCOL1 = Math.floor(tempCOL / 3) * 3;
	for (var i = 0; i < 3; i++) {
		checkdata.push(tempROW1 + tempCOL1 * 9 + 0 + i * 9);
		checkdata.push(tempROW1 + tempCOL1 * 9 + 1 + i * 9);
		checkdata.push(tempROW1 + tempCOL1 * 9 + 2 + i * 9);
	}
	for (var i = 0; i < 9; i++) {
		if (this.Sudoku[checkdata[i]].Type == DEF.SEMPTY)			return;
		if (this.Sudoku[checkdata[i]].Type == DEF.SMEMO)			return;
		checkbit |= (0x00000001 << this.Sudoku[checkdata[i]].No);
	}
	if (checkbit == 0x0003fe) 
	{
		if (option == 0) 
		{		
			for (var i = 0; i < 9; i++)	this.Sudoku[checkdata[i]].Spr_Back.frame = 2;
		}
		return true;
	}
	return false;
};

Level.prototype.StartBGM = function() {
	this.fBtn_pause.inputEnabled = true;
	_FX.Start(_FX.BGM_GAME);
};
Level.prototype.Process_Gamestart = function() {
	this.Input_Disable(false);
	this.Animation_Clock();
	this.fTimer_Game.start();
	this.Timer_Pushing = 0;
	this.game.time.events.add(1000, this.StartBGM, this);

	this.Check_CommomButton();
	this.No_Button_9OverCheck();
	_FX.Start(_FX.SE_GO);
};
Level.prototype.MakeSpine = function(x, y) {
	this.fSpine_Check.position.setTo(x, y);
	this.fSpine_Check.scale.setTo(0.5);
	this.fSpine_Check.setAnimationByName(0, "btn_check_ani", false);
};

Level.prototype.On_EventCallitself = function() {
	if (this.addtime > 0) {
		this.addevent = null;
		this.addtime--;
		_UserInfo.PlayTime++;
		this.Update_Timer();
		this.game.add.tween(this.fText_Gametime.scale).to({			x : 1.1,			y : 1.1		}, 10, Phaser.Easing.Linear.Out, true).yoyo(true);
		if (this.addtime > 0) {			this.addevent = this.game.time.events.add(60,					this.On_EventCallitself, this);
		}
	}
};
