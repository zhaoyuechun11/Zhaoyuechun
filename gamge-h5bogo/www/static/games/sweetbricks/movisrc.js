Define = function () {};
/*
1	상하이타운
2	펭귄 대쉬
3	네오 2048
4	상하이쉐프
5	스페이스버블
6	네코닌자
7	좀비건
8	코스믹팝
9	네코팡
10	모미모미
11	요괴파티
12	라이벌레이싱
13	트레져 아일랜드(슬롯01)
14	창업신화
15	쥬얼리 스타(슬롯02)
16	IKON틀린그림찾기
17	"스위트블릭스              <--
(벽돌깨기)"
18	다루마
20	"몬스터크로니클
(드래곤마스터)"
 */
Define.GIDX = 17;
/** NetworkMnager v0.2.11
 * 현제 가능한 기능
 * 데이터 세이브, 로드
 * 랭킹 세이브, 로드
 * 하트 사용
 * 상점관련 작업
 * ============================= 업데이트 내역 =============================
 * v.0.1.1
 * 네트워크 호출 전 sTopContainer를 최상단 컨테이너로 적용할 수 있도록 작업
 * 현금 제화쪽에서 ForcedSave를 연속으로 사용하여 저장 할 수 있도록 작업
 * v.0.1.2
 * 량킹중 allrank 부분쪽 랭크업 표시를 위한 데이터 작업
 * v.0.2.0
 * 하트관련 작업              networkManager.UseHeart( useHeartCount , callbakcFunc)
 * 상점 리스트 불러오기       networkManager.GetShoplist ( type -> ShopType 중 하나 , callbackFunc)
 * 상점 구매                  networkManager.Payment(  mkidx -> 상점리스트에 있음, callbackFunc)
 * v.0.2.1
 * greap 포인트 관련 지정
 * v.0.2.2
 * 서버 시간 받아오기
 * v.0.2.3
 * ForceSaveData 부분 에러 수정
 * v.0.2.4
 * Payment -> 앞단에 세이브를 안하고 있어서 ForceSaveData 를 호출 한 뒤
 * payment의 콜백을 실행
 * v0.2.5
 * this 부분 networkManager 로 수정
 * v0.2.6
 * (콜백 되는 함수들 undefined 거나 null 이면 무시 했엇는데 함수를 한 번 더 호출하면 콜백 함수가 발생.)
 * undefined 거나 null 일 때도 콜백 함수 null 처리
 * v0.2.7
 * clientData 내에 TIME_STAMP 관련 수정 -> 비로그인시만 체크 했었는데 로그인 시에도 AD관련 시간처리를 해야하기 때문에
 * kData 내에 calcedTimeStamp 변수 추가
 * SaveDataComplete, LoadDataComplete 부분 수정 됨
 * ex) heartController 의 UI가 마무리 되고 new 를 선언해 줄때 분기문으로 나누며 사용
 heartController = new HeartController();

 if(loginTF == 0) {
    networkManager.GetServerTime(function (_time) {
        if (clientData[TIME_STAMP] != null) {
            var lostTime = (_time - clientData[TIME_STAMP]);
            heartController.LostTime(lostTime);
        }

        clientData[TIME_STAMP] = _time;
        SaveOnlyClientData();
    });
}else{
    // 로그인 퇴어 있을 경우에는 하트는 받아오니 ADCoolTime만 정리
    for(var i=0,imax= kData.fCooltime_Heart.length;i<imax;++i){
        if(kData.fCooltime_Heart[i] > 0){
            kData.fCooltime_Heart[i] -= kData.calcedTimeStamp;
            // Gamemoney 데이터를 쓰는 경우
            // kData.fCooltime_Gamemoney[i] -= kData,calcedTimeStamp;

            if(kData.fCooltime_Heart[i] <= 0)
                kData.fCooltime_Heart[i] = 0;

            // Gamemoney 데이터를 쓰는 경우
            // if(kData.fCooltime_Gamemoney[i] <= 0)
            //    kData.fCooltime_Gamemoney[i] = 0;
        }
    }
}

 또한 client 내에 저장할 때 저장시간 체크를 위해 아래처럼 수정 되야 함
 function SaveDataInClient()
 {
     if(loginTF == 0){
         networkManager.GetServerTime(function (_time) {
             clientData[TIME_STAMP] = _time;

             var strJson = JSON.stringify(kData);
             var strJsonClientData = JSON.stringify(clientData);
             localStorage.setItem('Neo_Neglect.gamegrape.co.kr', strJson);
             localStorage.setItem('MomiMomiClientData.grape.co.kr', strJsonClientData);

             console.log('SaveDataInClient');
             console.log(strJsonClientData);

             saveLocal('Neo_Neglect.gamegrape.co.kr');
         });
     }else{
         var strJson = JSON.stringify(kData);
         var strJsonClientData = JSON.stringify(clientData);
         localStorage.setItem('Neo_Neglect.gamegrape.co.kr', strJson);
         localStorage.setItem('MomiMomiClientData.grape.co.kr', strJsonClientData);

         console.log('SaveDataInClient');
         console.log(strJsonClientData);

         saveLocal('Neo_Neglect.gamegrape.co.kr');
     }
 }
 * v0.2.8
 * Payment에 apkTF로 체크하여 분기
 * 변수 sGooglePlayJumpPanel 추가
 * v0.2.9
 * sGooglePlayJumpPanel 제거
 * modal call 작업
 * networkManager.ModalCall(MODAL_BUTTON_TYPE,string_MSG,okFunc,cancelFunc);
 * index.html 수정
 <link rel="stylesheet" href="/css/bootstrap.min.css" type="text/css" />  <--- 추가
 <script src="js_lib/jquery-3.1.1.min.js"></script>
 <script src="/js/bootstrap.min.js"></script>             <-- 추가
 ...
 <script src="js/GameMain.js"></script>
 <?php                                                  <-- 추가
 require_once('../../fs/modal.do');
 ?>
 * v0.2.10
 * JumpGooglePlay 함수 정리 완료
 * v0.2.11
 * GetGameInfo()
 * GetGameInfoComplete() 메쏘드 추가.
 * v0.2.12
 * NET_STATE 정리 작업 [LOCALHOST, RUN_SERVER]
 * v0.2.13
 * 라이벌 레이싱 관련 작업
 * (node.js 사용 실시간 게임 전용 Save, Load 수정)
 * ============================= 업데이트 예정 =============================
 * v0.2.13
 * RequestTimeOut 및 Request
 * =========================================================================
 * index.html에
 * NetworkManager.js를 먼저 로드하고
 * netbase.js를 로드 합니다.
 * ex)
 * <script src="js/NetworkManager.js"></script>
 * <script src=../add_js/netbase.js></script>
 * <script src="js/GameMain.js"></script>
 *
 * 위치 및 폴더 정리 (서버에 있는 거와 같은 위치인 상태로)
 * 상위폴더\WebContents\add_js\netbase.js                   [SFTP로 서버에서 받아오시면 됩니다.]
 * 상위폴더\WebContents\'게임이름폴더'\
 * ex)
 * GameData\add_js\
 * GameData\WebContents\Neo_NinjaClicker\
 *
 * 로컬스토리지에 저장,로드 함수명을 변경해주세요
 * ex)
 * SaveData ---(rename)---> SaveDataInClient
 * LoadData ---(rename)---> LoadDataInClient
 *
 * 세이브 초기화 단계에서 ForcedSaveData 함수 사용 하셔야 합니다.
 *
 * 본인이 사용하는 변수로 변경
 * kData
 * CASH_DATA_NAME
 * RANKVAL_DATA_NAME
 * HEART_COUNT
 * HEART_TIME
 * GREAP_POINT
 *
 *  클라 내부에 저장할 때
 *  saveLocal( 로컬스토리지 URL );
 *  도 같이 해줘야 합니다.
 *  
 *  MYGIDX 사용하는데 자신의 게임의 gidx를 넣어줘야함
 *  gidx는 netbase를 참조
 *  
 *  SaveDataComplete 함수에 있는
 *  this.LoadRanking(CB_ShowRanking);
 *  'CB_ShowRanking' 콜백 함수는 따로 만드셔서 작업하세요. (ranking데이터를 서버에서 다 받아오면 호출 합니다)
 *
 *  sNetworkLoading -> PIXI.Container
 *  서버 통신 중 버튼 못 누르게 제어하려는 panel (최상단) 입니다.
 *  리소스 작업할 때 작업해주시면 될거 같습니다.
 *  네트워크 호출 전에 sTopContainer에 최상단 컨테이너 넣어주세요
 *  sTopContainer에 기본은 null 이며 , null 값으로 유지시 sGame의 child로 되게 작업 되어 있습니다.
 *
 *  GameMain 로더 부분 수정 사항
 *  networkManager.LoadData(function () {
		// 이미지 다운로드.
        var loader = PIXI.loader;
        for(var i=0;i<tbImgGame.length;++i)
            loader.add(tbImgGame[i], tbImgGame[i]);
        .........
        loader.once('complete',cbImageDownComplete);
        loader.load();
    });
 * 위처럼 로딩 부분을 수정해 주셔야 합니다.
 *
 * sRanking 은 리소스 설정 단계에서.
 *
 * update에서
 if(networkManager !== undefined && networkManager != null)
 networkManager.Update();
 * 를 해주셔야 합니다.
 */

var GIDX = 17;//

var loginTF=0;

// kData 안에 현금재화 항목의 이름으로
// 클라에서 누적 시킨 뒤 서버에 저장
var CASH_DATA_NAME = 'iCash';

// kData 안에 랭킹점수 항목의 이름으로
// 클라에서 누적 시킨 뒤 서버에 저장
var RANKVAL_DATA_NAME = 'RankVal';

// kData 내부에 하트관련된 항목의 이름으로.
var HEART_COUNT = 'iHeart';
var HEART_TIME = 'fHeartTime';

// kData 내부의 Greap 포인트 항목
var GREAP_POINT = 'greappoint';

// kData 내부의 TimeStamp
var TIME_STAMP = 'timeSTAMP';


var ITEM1 = 'ITEM_1';
var ITEM2 = 'ITEM_2';
var ITEM3 = 'ITEM_3';

// netbase 참조하여 넣어줘야합니다.
var MYGIDX = 17; //벽돌깨기

// Server State Enum
var NET_STATE = {
    LOCALHOST : 100,
    DEV_SERVER : 200, // Dev,Test 둘 다
    TEST_SERVER : 300, // Dev,Test 둘 다
    RUN_SERVER : 400,
    NAVER_SERVER : 500
};

var ShopType = {
    HEART : 1,
    GAMEMONEY : 2
};

var MODAL_BUTTON_TYPE = {
    OKONLY : 1,
    OKCANCEL : 2
};

var networkManager = new NetworkManager();
//
// // 화면 닫을 시 강제 저장 --  조금 더 정보조사 필요
// $(window).bind("beforeunload" , function () {
//     console.log('quit Save Data');
//     if(proto.actk != null)
//         networkManager.ForcedSaveData();
// });

// 서버 통신 중 버튼 못 누르게 제어하려는 panel (최상단)
//var sNetworkLoading = new PIXI.Container();
var sNetworkLoading = undefined; //<-----페이저에서 indexgame.create단계에서 할당
/** sTopContainer는 통신하기 전에 설정해 주면 됩니다.
 * ex)
 sTopContainer = sTopContainer
 * netowkrManager.LoadData( callback );
 */
var sTopContainer = null;

/** 서버 통신 시작시 버튼 제어관련 */
function NetworkingWait() {
    return;
    // 메인 panel이 sGane 아닐 경우 변경
    // res 셋팅은 gameviewsetting 때 정리해준다.
    // proto 에 gidx 입력
    if(proto.gidx == 0 && networkManager.networkState == NET_STATE.TEST_SERVER){
        // 게임에 따라 다르게 설정해야함
        setGidx(MYGIDX);
    }

    if(sTopContainer === undefined || sTopContainer == null){
        if(sGame !== undefined && sNetworkLoading !== undefined){
            sGame.addChild(sNetworkLoading);
            if(whiteshopguard!=undefined) whiteshopguard.visible = true;
            networkManager.fSaveTimer = 0;
        }
    }else{
        sTopContainer.addChild(sNetworkLoading);
        if(whiteshopguard!=undefined) whiteshopguard.visible = true;
        networkManager.fSaveTimer = 0;
    }

    //sNetworkLoading.alpha = 0;
    //sNetworkLoading.visible = true;
}

/** 서버에서 통신 완료 */
function NetworkingEnd() {
    if(whiteshopguard!=undefined) whiteshopguard.visible = false;
    //sNetworkLoading.visible = false;
}

function NetworkManager(){
    this.networkState = NET_STATE.LOCALHOST;
    this.fSaveTimer = 0;
    this.fSaveTimeTick = 10;
    this.iSaveStackMax = 4;

    // 서버 호출 가능  : true;
    // 서버에서 호출 중 : false
    this.bAbleConnetingServer = true;
    this.saveStack = [];
    
    // 강제 저장관련 스택
    this.forcedSaveStack = [];
    this.isSaveRankVal = [];

    // 하트 소모관련
    this.bHeartUseCalled = false;
    this.heartUseStack = [];

    // 데이터 로드 관련
    this.bCalledDataLoading = false;
    this.loadDataStack = [];

    // modal cb func
    this.cb_ModalOK = null;
    this.cb_ModalCancel = null;

    var link = document.location.href;


    // 사용 서버 분기
    if(nvmode===true){
        this.networkState = NET_STATE.LOCALHOST;//강제 로컬//호스트
    }else{
        if(link.indexOf('localhost') != -1){//개발서버,데브서버,DEV서버판별
            this.networkState = NET_STATE.LOCALHOST;
            whereServerNet = NET_STATE.LOCALHOST;
            if(dm) console.log('localhost');
        }else if(link.indexOf('taeeset') != -1){
            this.networkState = NET_STATE.RUN_SERVER;
            whereServerNet = NET_STATE.TEST_SERVER;
            if(dm) console.log('TEST_SERVER');
        }else if(link.indexOf('dessav') != -1){
            this.networkState = NET_STATE.RUN_SERVER;
            whereServerNet = NET_STATE.DEV_SERVER;
            if(dm) console.log('DEV_SERVER');
        // }else if(link.indexOf('naver') != -1){
        //     this.networkState = NET_STATE.RUN_SERVER;
        //     whereServerNet = NET_STATE.NAVER_SERVER;
        //     console.log('NAVER_SERVER');
        }else{
            this.networkState = NET_STATE.RUN_SERVER;
            whereServerNet = NET_STATE.RUN_SERVER;
            if(dm) console.log('RUN_SERVER');
        }
        //강제로컬호스트 설정...지울것
        //this.networkState = NET_STATE.LOCALHOST;
    }




    /* privete method */
    var UploadData = function () {
        if(!networkManager.bAbleConnetingServer) return;

        NetworkingWait();
        networkManager.bAbleConnetingServer = false; //업로드시도, 서버통신중 모드로

        //cb_saveCompleteFunc = cb_func;

        if(networkManager.networkState != NET_STATE.RUN_SERVER) {
            // save data in local
            SaveDataInClient();
            networkManager.SaveDataComplete();
        }else{
            if(loginTF == 1){
                // 랭킹 정보는 저장하지 않습니다.
                var sendData = networkManager.saveStack.pop();
                savecall(sendData,null,kData[CASH_DATA_NAME]);
            }else{
                // 실서버 이면서 로그인이 되지 않았을 때
                SaveDataInClient();
                networkManager.SaveDataComplete();
            }
        }
    };

    var ForcedUploadData = function () {
        if(!networkManager.bAbleConnetingServer) return;

        NetworkingWait();
        networkManager.bAbleConnetingServer = false; //강제업로드시도, 서버통신중 모드로

        var SendData = networkManager.forcedSaveStack.pop();
        var b_isRankingSave = networkManager.isSaveRankVal.pop();

        if(networkManager.networkState != NET_STATE.RUN_SERVER){
            SaveDataInClient();
            networkManager.SaveDataComplete();
        }else{
            if(loginTF == 1){
                if(b_isRankingSave)
                    savecall(SendData,RANKVAL_DATA_NAME,kData[CASH_DATA_NAME]);
                else
                    savecall(SendData,null,kData[CASH_DATA_NAME]);
            }else{
                // 실서버 이면서 로그인이 되지 않았을 때
                SaveDataInClient();
                networkManager.SaveDataComplete();
            }
        }
    };

    /* public method */
    NetworkManager.prototype.Update = function () {
        if(!networkManager.bAbleConnetingServer) return;

        if(networkManager.bCalledDataLoading && networkManager.loadDataStack.length > 0){
            networkManager.bCalledDataLoading = false;
            networkManager.LoadData(networkManager.loadDataStack.pop());
        }else if(networkManager.bHeartUseCalled && networkManager.heartUseStack.length > 0){
            networkManager.UseHeart([0].use_Heart,networkManager.heartUseStack[0].cb_func);
        }else if(networkManager.forcedSaveStack != null && networkManager.forcedSaveStack.length > 0){
            ForcedUploadData();
        }else{
            if(networkManager.bAbleConnetingServer && networkManager.saveStack.length >= 1)
                networkManager.fSaveTimer += deltaTime;

            if(networkManager.saveStack.length >= networkManager.iSaveStackMax){
                networkManager.fSaveTimer = 0;
                UploadData();
            }else if(networkManager.fSaveTimer >= networkManager.fSaveTimeTick){
                // 방치형 게임이 아니면 제거
                // networkManager.fSaveTimer = 0;
                // UploadData();
            }
        }
    };

    // 2017-02-07 Save Callback Func은 없어도 될거라 생각하고 지움
    /** 일반적으로 서버에 세이브 하려할 때 호출
     * ====================== 업데이트 예정 ========================
     * 유저의 호출타이머를 따로 만들어서 save가 잦은 경우와 많지 않은 경우의 시간을 변경
     * =============================================================
     */
    NetworkManager.prototype.SaveData = function() {
        // 추가 세이브 데이터를 기다리기 위해 [통신 최적화]
        networkManager.fSaveTimer = 0;
        
        // 서버와 통신 중 세이브가 들어오면 무시함.
        // %필수 : 게임 종료 혹은 포커스를 잃었을 경우 세이브는 강제세이브로 따로 만들어야 할 듯
        if(networkManager.bAbleConnetingServer)
            networkManager.saveStack.push($.extend({}, kData));
    };

    /** 강제 네트워크 저장.
     * Init 단계 혹은 게임 강제 종료 단계
     * 랭킹 저장
     * 제화 구매 및 제화 사용
     * =================== 업데이트 예정 ===================
     * =====================================================
     * _b_saveRank : 랭킹 저장이 필요할 때 true 그외 null, 혹은 false
     * _cb_func : 콜백
     */
    var CB_ForcedSaveCompleteFunc = null;
    NetworkManager.prototype.ForcedSaveData = function (_b_saveRank,_cb_func) {
        if(_b_saveRank === undefined || _b_saveRank == null)
            _b_saveRank = false;

        if(_cb_func !== undefined && _cb_func != null)
            CB_ForcedSaveCompleteFunc = _cb_func;
        else
            CB_ForcedSaveCompleteFunc = null;

        if(!networkManager.bAbleConnetingServer){//상태:서버에서 호출 중
            networkManager.forcedSaveStack.push($.extend({}, kData));
            networkManager.isSaveRankVal.push($.extend({}, _b_saveRank));
            return; //when:로그인,
        }

        NetworkingWait(); //when:비로그인
        networkManager.bAbleConnetingServer = false; //강제저장시도, 서버통신중 모드로
        networkManager.fSaveTimer = 0;

        //cb_saveCompleteFunc = cb_func;

        if(networkManager.networkState != NET_STATE.RUN_SERVER) {
            // save data in local
            SaveDataInClient();
            networkManager.SaveDataComplete();
        }else{
            if(loginTF == 1){

                if(_b_saveRank)
                    savecall(kData,RANKVAL_DATA_NAME,kData[CASH_DATA_NAME]);
                else
                    savecall(kData,null,kData[CASH_DATA_NAME]);

            }else{
                // 실서버 이면서 로그인이 되지 않았을 때
                SaveDataInClient();
                networkManager.SaveDataComplete();
            }
        }
    };

    /** 저장 완료
     * netbase 에서만 호출
     */
    var CB_ShowRanking=function () {};//에러가 나서 추가

    NetworkManager.prototype.SaveDataComplete = function (_data) {
        if(networkManager.saveStack.length > 0)
            networkManager.saveStack = [];

        NetworkingEnd();
        networkManager.bAbleConnetingServer = true; //저장완료, 서버통신완료 모드로

        if(networkManager.networkState != NET_STATE.LOCALHOST) {
            if (networkTF == 0) { //비네트워크게임
                if (_data !== undefined && _data != null) {
                    // console.log(_data.data['gamemoney']);
                    // gamemoney 관련 현제 단계에서는 계산이 아직 안됨
                    // 서버에 상점 작업 완료시 수정 예정
                    kData[CASH_DATA_NAME] = _data.data['gamemoney'];
                    kData[HEART_TIME] = _data.data['nextHtime'];
                    kData[HEART_COUNT] = _data.data['nHeart'];

                    // 클라 데이터 분리하지 않았을 경우 주석 처리
                    //clientData[TIME_STAMP] = _data.data[TIME_STAMP];
                    SaveDataInClient();

                    //kData[CASH_DATA_NAME] = kData[CASH_DATA_NAME];
                } else {
                    if (_data != null && _data.rank != null) {
                        rankingPopupData = _data.rank;

                        // 콜백 함수는 따로 만들어서 사용 합니다
                        networkManager.LoadRanking(CB_ShowRanking);
                    }
                }
            }else{ //네트워크게임
                // console.log(_data.data['gamemoney']);
                // gamemoney 관련 현제 단계에서는 계산이 아직 안됨
                // 서버에 상점 작업 완료시 수정 예정
                
                if(undefined !== _data) {//데이터가 다를 경우 다운되서 임시처리
                    
                    kData[CASH_DATA_NAME] = _data.data['gamemoney'];
                    kData[HEART_TIME] = _data.data['nextHtime'];
                    kData[HEART_COUNT] = _data.data['nHeart'];

                    // 클라 데이터 분리하지 않았을 경우 주석 처리
                    //clientData[TIME_STAMP] = _data.data[TIME_STAMP];
                    SaveDataInClient();

                    //kData[CASH_DATA_NAME] = kData[CASH_DATA_NAME];

                    if (_data != null && _data.rank != null) {
                        rankingPopupData = _data.rank;

                        // 라이벌 레이싱 (networkTF == 1)은 LoadRanking(cbFunc) 을 따로
                        // 호출 해야 합니다.
                    }
                    
                }
            }
        }

        if(CB_ForcedSaveCompleteFunc != null){
            CB_ForcedSaveCompleteFunc();
            CB_ForcedSaveCompleteFunc = null;
        }
        // if(cb_saveCompleteFunc !== undefined)
        //     cb_saveCompleteFunc();
    };

    // callback load complete
    var cb_loadCompleteFunc;
    /** 로드 데이터
     * DB에 있는 데이터 긁어 오기
     * ex)
     networkManager.LoadData(function(){
        ...
     });
     * cb_func : 로드 끝난 뒤 실행 될 함수, null 가능
     */
    NetworkManager.prototype.LoadData = function (cb_func) {
        if(!networkManager.bAbleConnetingServer) {
            networkManager.bCalledDataLoading = true;

            if(cb_func === undefined)
                cb_func = null;

            networkManager.loadDataStack.push(cb_func);
            return;
        }

        NetworkingWait();   //seq:b08 비로그인&시작

        if(cb_func !== undefined && cb_func != null)
            cb_loadCompleteFunc = cb_func;          //function(){} //seq:a-08-1 //seq:b-08-1 비로그인&시작
        else
            cb_loadCompleteFunc = null;

        networkManager.bAbleConnetingServer = false; //로드시도, 서버통신중 모드로

        // LoadDataInClient();

        if(networkManager.networkState != NET_STATE.RUN_SERVER){
            networkManager.LoadDataComplete();
        }else{
            if(loginTF == 1)
                dataLoading(); //seq:a-09 로그인&시작 로딩
            else{
                networkManager.LoadDataComplete();  //seq:b-09 비로그인&시작 로딩
                // 실서버 이면서 로그인이 되지 않았을 때
            }
        }
    };

    /** 로드 완료
     * netbase에서만 호출
     */
    NetworkManager.prototype.LoadDataComplete = function (_data) {

        //if(networkManager.networkState != NET_STATE.RUN_SERVER) return;
        // LoadDataInClient();

        if(loginTF == 1){//로그인
            if(_data['save'] != null)
            {
                // 각자 수정해야 할 부분
                // kData.iCash 는 현금 결제관련 제화.

                //소켓io kData save항목
                // {
                //     CumulMedal:0
                //     DayMedal:0
                //     ITEM_1:9
                //     ITEM_2:4
                //     ITEM_3:6
                //     WinCnt:0
                // }

                kData = JSON.parse(_data['save']);

                if(kData === undefined || kData === null)//값이 없을때 로컬데이터참조
                    LoadOnlyClientData();
                
                //kData로 추가로 입력
                kData[CASH_DATA_NAME] = JSON.parse(_data['gamemoney']);
                kData[HEART_TIME] = _data['nextHtime'];
                kData[HEART_COUNT] = _data['nHeart'];
                kData[GREAP_POINT] = _data['greappoint'];
                
                net_yourname_source = _data['user_id'];
                net_yourname = _data['user_id'];

                // 클라 데이터 분리하지 않았을 경우 주석 처리
                //kData.calcedTimeStamp = _data['timeSTAMP'] - clientData[TIME_STAMP];

                //console.log(kData.iCash);
                if(kData.iVer === undefined || kData.iVer != SAVE_VER) {// 버젼이 없거나 버젼이 다르면 세이브를 초기화 시킨다.
                    //버전별변환할곳
                    //InitData();
                    kData.iVer=1; //컨버팅 안함
                }
            }else{//세이브데이터가 null이면

                // 기존에 로컬에 저장한게 있는지 체크 후 세이브
                LoadDataInClient();

                if(kData.iVer === undefined || kData.iVer != SAVE_VER) // 버젼이 없거나 버젼이 다르면 세이브를 초기화 시킨다.
                    InitData();

                kData[CASH_DATA_NAME] = JSON.parse(_data['gamemoney']);
                kData[HEART_TIME] = _data['nextHtime'];
                kData[HEART_COUNT] = _data['nHeart'];
                kData[GREAP_POINT] = _data['greappoint'];

                if(nvmode===false) {
                    networkManager.ForcedSaveData();//in LoadDataComplete
                }
            }
        }

        if(cb_loadCompleteFunc !== undefined && cb_loadCompleteFunc != null){
            cb_loadCompleteFunc(_data); //yahooIN : 공통UI때문에 추가.//야후추가< >
            cb_loadCompleteFunc = null;
        }

        networkManager.bAbleConnetingServer = true; //로드완료, 서버통신완료 모드로
        NetworkingEnd();
    };                                                                      //LoadData완료

    // var cb_SaveRankingComplete;
    /** 랭킹 저장
     */
    NetworkManager.prototype.SaveRaking = function () {
        // localhost에서는 scr/network/control.do  가 없기 때문에 호출 불가
        rankingPopupData = null;
        if(nvmode===false) {
            networkManager.ForcedSaveData(true);//in NetworkManager.SaveRaking
        }
    };

    var cb_LoadRankingComplete;
    /** 랭킹 데이터 불러오기
     * cb_func : 랭킹 로드 끝나는 시점에 실행되는 함수, null 가능
     * ex)
     networkManager.LoadRanking(function(){
        ...
     });
     */
    NetworkManager.prototype.LoadRanking = function (cb_func) {
        if(!networkManager.bAbleConnetingServer) return;

        if(networkManager.networkState == NET_STATE.LOCALHOST){
            sRanking.visible = true;
            //cb_func();
            alert('localhost Ranking can not be called in.');
            return;
        }

        NetworkingWait();
        networkManager.bAbleConnetingServer = false; //랭킹로드시도, 서버통신중 모드로
        networkManager.fSaveTimer = 0;

        rankingData = null;

        cb_LoadRankingComplete = cb_func;
        getRankingList();
    };

    /** 로드 랭킹 완료
     * netbase에서만 사용
     */
    NetworkManager.prototype.LoadRankingComplete = function (_data) {
        if(loginTF == 1){
            rankingData = _data.data;

            // 데일리 랭킹 초기화
            if(rankingData.day === undefined || rankingData.day == null || rankingData.day.length == 0){
                kData[RANKVAL_DATA_NAME] = 0;
            }else{
                var bCheckMyData = false;
                for(var i=0,imax=rankingData.day.length;i<imax;++i){
                    if(rankingData.day[i]['user_id'] == rankingData.myid){
                        bCheckMyData = true;
                        break;
                    }
                }

                if(!bCheckMyData)
                    kData[RANKVAL_DATA_NAME] = 0;
            }
        }
        else
            rankingData = _data;

        networkManager.bAbleConnetingServer = true; //랭킹로드완료, 서버통신완료모드로
        NetworkingEnd();

        if(cb_LoadRankingComplete !== undefined && cb_LoadRankingComplete != null){
            cb_LoadRankingComplete();
            cb_LoadRankingComplete = null;
        }
    };

    var cb_useHeartComplete;
    /** 하트 사용
     * 서버에서 계산 한 뒤 받아 오고 kData에 저장.
     * ex)
     networkManager.UseHeart(1, function(){
        ...
     });
     * _useCount : 사용 갯수
     * _cb_func : 하트 사용 완료 시점에 실행 되는 함수
     */
    NetworkManager.prototype.UseHeart = function (_useCount,_cb_func) {
        if(!networkManager.bAbleConnetingServer){
            networkManager.bHeartUseCalled = true;
            networkManager.heartUseStack.push(new HeartUseStackData(_useCount,_cb_func));
            return;
        }

        NetworkingWait();
        networkManager.bAbleConnetingServer = false; //하트소비시도, 서버통신중 모드로

        if(_useCount === undefined || _useCount == null)
            _useCount = 1;

        if(_cb_func !== undefined && _cb_func != null)
            cb_useHeartComplete = _cb_func;
        else
            cb_useHeartComplete = null;

        if(networkManager.networkState != NET_STATE.RUN_SERVER){
            if(kData[HEART_COUNT] == iHeartChargeMax) // iHeartChargeMax 는 따로 지정
                kData[HEART_TIME] = fHeartChargeTime; // fHeartChargeTime 는 따로 지정
            kData[HEART_COUNT] -= _useCount;

            networkManager.UseHeartComplete();
        }else{
            if(loginTF == 1){
                heartUse(_useCount);
            }else{ //비로그인
                if(kData[HEART_COUNT] == iHeartChargeMax) // iHeartChargeMax 는 따로 지정
                    kData[HEART_TIME] = fHeartChargeTime; // fHeartChargeTime 는 따로 지정

                kData[HEART_COUNT] -= _useCount;
                networkManager.UseHeartComplete();
            }
        }
    };

    /** 하트 소모 완료
     * netbase에서만 사용
     */
    NetworkManager.prototype.UseHeartComplete = function (_data) {
        networkManager.bHeartUseCalled = false;
        networkManager.heartUseStack = [];

        if(networkManager.networkState == NET_STATE.RUN_SERVER && loginTF == 1){
            // 데이터 적용

            kData[HEART_TIME] = _data.data['nextHtime'];
            kData[HEART_COUNT] = _data.data['nHeart'];
        }

        NetworkingEnd();
        networkManager.bAbleConnetingServer = true; //하트소비완료, 서버통신완료모드로


        if(nvmode===true) {
            var sends = {};
            sends.clearStage = kData.clearStage;//네이버저장하기
            if (typeof GamePocket.Sdk !== 'undefined') {
                networkManager.AppDataPut(JSON.stringify(sends));
            }
        }else{
            networkManager.ForcedSaveData(); //처리 //NetworkManager.UseHeartComplete
        }
        // 콜백 함수 있는지 체크
        if(cb_useHeartComplete !== undefined && cb_useHeartComplete !=null){
            cb_useHeartComplete();
            cb_useHeartComplete = null;
        }
    };

    var cb_func_getshoppinglist;
    /** 상점 리스트 호출
     * ex)
     networkManager.GetShoplist(ShopType.HEART, function(){
        ...
     });
     * 서버DB에 테이블 들어가 있는지 체크(서버팀장님께 문의하면 됩니다.)
     * _shopTyop    : ShopSype enum 형 처리 되어 있음
     * cb_func      : 상점 리스트 불러온 뒤 실행될 함수
     */
    NetworkManager.prototype.GetShoplist = function (_shopType, cb_func) {
        if(!networkManager.bAbleConnetingServer)
            return;

        networkManager.bAbleConnetingServer = false; //삽리스트받기시도, 서버통신중 모드로
        NetworkingWait();

        if(_shopType === undefined || _shopType == null)
            _shopType = ShopType.HEART;

        if(networkManager.networkState == NET_STATE.LOCALHOST){
            if(cb_func !== undefined && cb_func != null)
                cb_func_getshoppinglist = cb_func;
            else
                cb_func_getshoppinglist = null;
            networkManager.GetShoppingListComplete();
        }else{
            // test server는 무조건 로그아웃 상점으로 표시 됨
            if(cb_func !== undefined && cb_func != null)
                cb_func_getshoppinglist = cb_func;
            else
                cb_func_getshoppinglist = null;
            marketList(_shopType);
        }
    };

    /** 상점 리스트 호출 완료
     * netbase에서만 호출
     */
    NetworkManager.prototype.GetShoppingListComplete = function (_data) {
        networkManager.bAbleConnetingServer = true; //상점리스트받기완료, 서버통신완료모드로
        NetworkingEnd();

        if(_data === undefined || _data == null){
            if(cb_func_getshoppinglist !== undefined && cb_func_getshoppinglist !== null){
                cb_func_getshoppinglist();
                cb_func_getshoppinglist = null;
            }
        }else{
            shopListData = _data;

            if(cb_func_getshoppinglist !== undefined && cb_func_getshoppinglist !== null){
                cb_func_getshoppinglist();
                cb_func_getshoppinglist = null;
            }
        }
    };

    /** 구매 요청
     * ex)
     networkManager.Payment(shopListData[_index].mkidx, function(){
        ...
     });
     * shopListData에 있는 mkidx를 넣어 주어야 합니다.
     * _mkidx   : 상점 리스트 불러 왔을 때 shopListData에 넣어져 있는 mkidx.
     * cb_func  : 구매 완료 한 뒤 호출되는 함수
     */
    NetworkManager.prototype.Payment = function (_mkidx, cb_func) {
        if(_mkidx === undefined || _mkidx == null){
            alert('Purchase index error\n version' + VERSION);
            return;
        }
        if(nvmode===false) {
            networkManager.ForcedSaveData(false,function () { //in payment
                if(_mkidx === undefined || _mkidx == null)
                    return false;

                if(!networkManager.bAbleConnetingServer)//false면 통신중이라 중지시킴
                    return;

                networkManager.bAbleConnetingServer = false; //구매시도, 서버통신중 모드로
                NetworkingWait();

                if(networkManager.networkState == NET_STATE.LOCALHOST){
                    if(cb_func !== undefined && cb_func != null)
                        cb_loadCompleteFunc = cb_func;
                    else
                        cb_loadCompleteFunc = null;
                    networkManager.GetShoppingListComplete();
                }else{
                    // test server는 무조건 로그아웃 상점으로 표시 됨
                    if(cb_func !== undefined && cb_func != null)
                        cb_loadCompleteFunc = cb_func;
                    else
                        cb_loadCompleteFunc = null;

                    if(apkTF == 1){
                        mkPayment(_mkidx);
                    }else{
                        var b_isAD = false;
                        for(var i=0,imax=shopListData.length;i<imax;++i){
                            if(shopListData[i].mkidx == _mkidx){
                                if(shopListData[i].pType.indexOf('ad') != -1){
                                    b_isAD = true;
                                    break;
                                }
                            }
                        }
                        b_isAD = false;  //광고무시,무조건결제,항상결제,항시결제
                        if(b_isAD){
                            // 팝업 혹은 에러 아니면 구글플레이 점프

                            NetworkingEnd();
                            networkManager.bAbleConnetingServer = true; //구매가안됨, 서버통신완료모드로
                            if(dm) console.log("Payment-피씨모드:"+GetShpMsg("gotogpg"));//구글플레이로(b_isAD = true;)
                            networkManager.ModalCall(MODAL_BUTTON_TYPE.OKCANCEL,GetShpMsg("gotogpg"),
                                function () {
                                    networkManager.JumpGooglePlay();
                                },
                                function () {
                                }
                            );
                        }else{
                            mkPayment(_mkidx);
                        }
                    }
                }
            });//Payment
        }//nvmove=false
    };

    var cb_GetServerTimeComplete;
    /** 서버 시간 받아 오기
     * ex)
     networkManager.GetServerTime(function(){
        ...
     });
     * cb_func  : 서버 시간 받아온 뒤 실행 되는 함수
     */
    NetworkManager.prototype.GetServerTime = function (cb_func) {
        if(cb_func !== undefined && cb_func != null)
            cb_GetServerTimeComplete = cb_func;
        else
            cb_GetServerTimeComplete = null;

        if(networkManager.networkState != NET_STATE.LOCALHOST){
            getTimestamp(function () {} ); //야후수정때문에 함수인자 추가함
        }else{
            networkManager.GetServerTimeComplete();
        }
    };

    /** 서버 시간 받아오기 완료
     * netbase에서만 호출
     * _data['Timestamp'] -> 초단위로 옴 ( /1000 할 필요 없습니다)
     */
    NetworkManager.prototype.GetServerTimeComplete = function (_data) {
        var retData = null;
        if(_data !== undefined && _data != null){
            retData = _data['Timestamp'];
        }

        if(cb_GetServerTimeComplete !== undefined && cb_GetServerTimeComplete != null){
            cb_GetServerTimeComplete(retData);
            cb_GetServerTimeComplete = null;
        }
    };

	/** 게임정보 받아오기..
	 */
	var cb_GetGameInfoComplete;
	NetworkManager.prototype.GetGameInfo = function (cb_func) {
		cb_GetGameInfoComplete = cb_func;
		if(networkManager.networkState != NET_STATE.LOCALHOST){
			baseinfoCall();
		}else{
			networkManager.GetGameInfoComplete();
		}
	};

	/** 게임정보 받아오기 완료
	 * netbase에서만 호출
	 */
	NetworkManager.prototype.GetGameInfoComplete = function (_data) {
		if(cb_GetGameInfoComplete !== undefined){
			cb_GetGameInfoComplete(_data);
			cb_GetGameInfoComplete = undefined;
		}
	};
    /** 회원가입으로 점프
     ex) networkManager.JoinMember();
     */
    NetworkManager.prototype.JoinMember = function () {
        if(nvmode===false) {
            if (networkManager.networkState == NET_STATE.RUN_SERVER && loginTF == 0) {
                //networkManager.ForcedSaveData();
                networkManager.ForcedSaveData(false, function () {
                    memberCall();
                });
            }
        }
    };

    NetworkManager.prototype.JumpGooglePlay = function () {
        googleplaypopCall();
    };

    // NetworkManager.prototype.ModalCall = function (_modalType,_msg,_okfunc,_cancelfunc) {
    //     b_okTF = false;
    //
    //     switch (_modalType){
    //         case MODAL_BUTTON_TYPE.OKONLY:
    //             b_okTF = false;
    //             break;
    //         case MODAL_BUTTON_TYPE.OKCANCEL:
    //             b_okTF = true;
    //             break;
    //     }
    //
    //     networkManager.cb_ModalOK = _okfunc;
    //     networkManager.cb_ModalCancel = _cancelfunc;
    //
    //     msgModalSET(_msg,b_okTF);
    // };
    //모달콜을 토스트로 교체
    NetworkManager.prototype.ModalCall = function (_modalType,_msg,_okfunc,_cancelfunc) {
        ShowToast("warning", _msg);
    };
    //모달콜을 토스트로 교체
    //-------------------------------새로추가된 네트워크 매니저 메소드
	this.bNaverLogin = true;
	this.shopData = undefined;
	this.iRetryCnt = 0;

    NetworkManager.prototype.refresh = function(callback){
		GamePocket.SdkLoader.onLoad(function(){
            GamePocket.Sdk.refresh(function(response){
                if(callback) callback(response);
            });
		});
    };

    NetworkManager.prototype.AppDataGet = function(args, callback){
        /*var args = Array.prototype.slice.call(arguments, 1);
        var strKey = "";
        for(var i=0;i<args.length;++i) {
            strKey += args[i];
            if(i < args.length - 1)
                strKey += ",";
        }*/
        GamePocket.Sdk.AppData.get(args, function(response) {
            if(response.code == 0){
				var parsing = JSON.stringify(response.result).replace(/\"\[/gi, "[").replace(/\]\"/gi, "]");
				parsing = parsing.replace(/\"\{/gi, "{").replace(/\}\"/gi, "}");
				parsing = parsing.replace(/\"true\"/gi, "true").replace(/\"false\"/gi, "false");
				parsing = parsing.replace(/\\\"/gi, "\"");
                if(callback) callback(JSON.parse(parsing));
				networkManager.iRetryCnt = 0;
            }else{ //fail process
				switch(response.code){
					case 2001:
					case 2002:
						ShowToast("warning", "Game data is not saved when you are not logged in.");
						if(callback) callback(response);
						break;
					case 8888:	// 타임아웃이 발생할경우..데이터를 새로 받아온다.
						if(++networkManager.iRetryCnt <= 3) {
							ShowToast("warning", "Failed to load data and try again.");
							networkManager.AppDataGet(args, callback);
						}else{
							ShowToast("warning", "The network environment is bad. Please refresh.");
						}
						break;
					default:
						networkManager.NaverError(response);
						break;
				}
				networkManager.bNaverLogin = false;
				/*if(response.code == 2001 || response.code == 2002){
					ShowToast("warning", "Game data is not saved when you are not logged in.");
					if(callback) callback(response);
				}
				else
					networkManager.NaverError(response);
				networkManager.bNaverLogin = false;*/
            }
        });
    };

	/*NetworkManager.prototype.AppDataGetRetry = function(args, callback){
	}*/

    NetworkManager.prototype.AppDataPut = function(args, callback){
    	if(this.bNaverLogin == false) return;

        GamePocket.Sdk.AppData.put(args, function(response) {
            if(response.code == 0){
                if(callback) callback(response.result);
				networkManager.iRetryCnt = 0;
            }else{ //fail process
				switch(response.code){
					case 8888:	// 타임아웃이 발생할경우..데이터를 새로 받아온다.
						if(++networkManager.iRetryCnt <= 3) {
							ShowToast("warning", "Network error occurs and communication is resumed.");
							networkManager.AppDataPut(args, callback);
						}else{
							ShowToast("warning", "The network environment is bad. Please refresh.");
						}
						break;
					default:
						networkManager.NaverError(response);
						break;
				}
            }
        });
    }

    NetworkManager.prototype.AppDataRemove = function(args, callback){
		if(this.bNaverLogin == false) return;
        GamePocket.Sdk.AppData.remove(args, function(response) {
            if(response.code == 0){
                if(callback) callback(response.result);
				networkManager.iRetryCnt = 0;
            }else{ //fail process
				switch(response.code){
					case 8888:	// 타임아웃이 발생할경우..데이터를 새로 받아온다.
						if(++networkManager.iRetryCnt <= 3) {
							ShowToast("warning", "Network error occurs and communication is resumed.");
							networkManager.AppDataRemove(args, callback);
						}else{
							ShowToast("warning", "The network environment is bad. Please refresh.");
						}
						break;
					default:
						networkManager.NaverError(response);
						break;
				}
            }
        });
    }

    NetworkManager.prototype.RankingGet = function(callback){
		if(this.bNaverLogin == false) return;
        GamePocket.Sdk.Ranking.get(function(response) {
            if(response.code == 0){
                if(callback) callback(response.result);
				networkManager.iRetryCnt = 0;
            }else{ //fail process
				switch(response.code){
					case 8888:	// 타임아웃이 발생할경우..데이터를 새로 받아온다.
						if(++networkManager.iRetryCnt <= 3) {
							ShowToast("warning", "Network error occurs and communication is resumed.");
							networkManager.RankingGet(callback);
						}else{
							ShowToast("warning", "The network environment is bad. Please refresh.");
						}
						break;
					default:
						networkManager.NaverError(response);
						break;
				}
            }
        });
    }

    NetworkManager.prototype.RankingAdd = function(args, callback){
		if(this.bNaverLogin == false) return;
        GamePocket.Sdk.Ranking.add(args, function(response) {
            if(response.code == 0){
                if(callback) callback(response.result);
				networkManager.iRetryCnt = 0;
            }else{ //fail process
				switch(response.code){
					case 8888:	// 타임아웃이 발생할경우..데이터를 새로 받아온다.
						if(++networkManager.iRetryCnt <= 3) {
							ShowToast("warning", "Network error occurs and communication is resumed.");
							networkManager.RankingAdd(args, callback);
						}else{
							ShowToast("warning", "The network environment is bad. Please refresh.");
						}
						break;
					default:
						networkManager.NaverError(response);
						break;
				}
            }
        });
    }

	NetworkManager.prototype.NaverError = function(error, callback){
		ShowToast("error", error.code + ":" + error.message);
	}

    //======================================================================================
    // 모비게임쪽 URL쪽 처리
	NetworkManager.prototype.GetNaverShop = function(callback){
        /*var url = "http://13.124.198.140/__api_naver/request3.php?cryptData=";
		var jsondata = "{\"mode\":\"GET_GAME_LIST\"}";//encodeURIComponent("{\"mode\":\"GET_GAME_LIST\"}");
        $.ajax({
            url:url + jsondata,
            dataType:"jsonp",
            jsonpCallback:"callback",
            success:function(data){
                console.log("===== : " +  JSON.stringify(data.gameList));
				callback(data.gameList);
            },
            error:function(err){
				console.log("========== error : GetNaverShop : " + err);
            }
        });*/
        // 샵데이터가 없을경우 데이터를 받아서 처리한다.
        if(this.shopData == undefined){
			this.shopData = JSON.parse("[" +
                "{\"gameinfoIdx\":\"9\",\"gName\":\" Nekopang\",\"iconLNK\":\"http://13.124.198.140/img/icon_0009.png\",\"gContents\":\"Cute Cats 3 Match Puzzles! \\ nCap a variety of cats with puzzles! \\ n Come on! Cats wait for you!\",\"aLNK\":\"https://gamepocket.naver.com/games/14\"}," +
				"{\"gameinfoIdx\":\"11\",\"gName\":\"Yogi Party\",\"iconLNK\":\"http://13.124.198.140/img/icon_0011.png\",\"gContents\":\"A march to collect all sorts of monsters! \\ nNice monsters that make money even if you neglect them! \\ n Make more money with new monsters~\",\"aLNK\":\"https://gamepocket.naver.com/games/15\"}," +
				"{\"gameinfoIdx\":\"5\",\"gName\":\"Space Bubble\",\"iconLNK\":\"http://13.124.198.140/img/icon_0005.png\",\"gContents\":\"Save the astronauts trapped in the bell! \\ n Make sure the blocks are tightly packed so!\",\"aLNK\":\"https://gamepocket.naver.com/games/16\"}," +
				"{\"gameinfoIdx\":\"8\",\"gName\":\"코스믹팝\",\"iconLNK\":\"http://13.124.198.140/img/icon_0008.png\",\"gContents\":\"아래에서 위로 쏘는 시시한 버블은 이제 NO~\\n360도로 회전하면 사방에서 쏘는 뉴 버블~\\n신비한 버블의 세계로 당신을 초대합니다.\",\"aLNK\":\"https://gamepocket.naver.com/games/17\"}," +
				"{\"gameinfoIdx\":\"4\",\"gName\":\"상하이쉐프\",\"iconLNK\":\"http://13.124.198.140/img/icon_0004.png\",\"gContents\":\"같은 패를 찾는 짝맞추기 게임!\\n당신의 손은 눈보다 빠를 수 있습니까?\\n어떤 블록을 이을 수 있을지 찾아보아요!\",\"aLNK\":\"https://gamepocket.naver.com/games/18\"}," +
				"{\"gameinfoIdx\":\"1\",\"gName\":\"상하이타운\",\"iconLNK\":\"http://13.124.198.140/img/icon_0001.png\",\"gContents\":\"마작 짝맞추기 게임!\\n패를 맞추면 멋진 건물을 만들어요!\\n건물들을 모아 멋진 도시를 만들어보세요!\",\"aLNK\":\"https://gamepocket.naver.com/games/19\"}," +
				"{\"gameinfoIdx\":\"10\",\"gName\":\"모미모미\",\"iconLNK\":\"http://13.124.198.140/img/icon_0010.png\",\"gContents\":\"당신의 안마력은 얼마입니까? 100? 200?\\n훗! 저의 안마력은 724,231,128,158 입니다.\\n고양이 안마사의 손길을 플레이 해보세요!\",\"aLNK\":\"https://gamepocket.naver.com/games/20\"}," +
				"{\"gameinfoIdx\":\"6\",\"gName\":\"네코닌자\",\"iconLNK\":\"http://13.124.198.140/img/icon_0006.png\",\"gContents\":\"어느 겁나먼 동방의 동물 나라.\\n평화를 위하여 그들을 물리쳐야 해요!\\n어떻게 하냐고요? 눌러만 주세요!\",\"aLNK\":\"https://gamepocket.naver.com/games/21\"}," +
				"{\"gameinfoIdx\":\"12\",\"gName\":\"라이벌레이싱\",\"iconLNK\":\"http://13.124.198.140/img/icon_0012.png\",\"gContents\":\"4인 대전 실시간 네트워크 레이싱 게임!\\n서로 방해물을 던지며, 엎치락뒤치락하는\\n경기 속에서 1등으로 달려봐요!\",\"aLNK\":\"https://gamepocket.naver.com/games/22\"}," +
				"{\"gameinfoIdx\":\"3\",\"gName\":\"네오 2048\",\"iconLNK\":\"http://13.124.198.140/img/icon_0003.png\",\"gContents\":\"같은 번호를 가진 두개의 타일이\\n닿으면 하나로 합쳐져요!\\n타일을 밀어 최고의 점수에 도전해 보세요!\",\"aLNK\":\"https://gamepocket.naver.com/games/23\"}," +
				"{\"gameinfoIdx\":\"2\",\"gName\":\"펭귄대쉬\",\"iconLNK\":\"http://13.124.198.140/img/icon_0002.png\",\"gContents\":\"달려요! 멈추지 말아요! 계속 달려요!!\\n빙하를 피해 펭귄은 계속 달립니다!\\n당신은 어디까지 달릴 수 있을까요?\",\"aLNK\":\"https://gamepocket.naver.com/games/24\"}," +
				"{\"gameinfoIdx\":\"7\",\"gName\":\"좀비건\",\"iconLNK\":\"http://13.124.198.140/img/icon_0007.png\",\"gContents\":\"좀비와의 사투에서 생존자들을 구해주세요.\\n좀비들을 처치하면 다양한 총기를 얻어요.\\n과연 당신의 순발력은 전세계 몇 등 일까요?\",\"aLNK\":\"https://gamepocket.naver.com/games/25\"}," +
				"{\"gameinfoIdx\":\"17\",\"gName\":\"스위트블릭스\",\"iconLNK\":\"http://13.124.198.140/img/icon_0015.png\",\"gContents\":\"세상에서 제일 달콤한 사탕 깨기!\\n도망가고 떨어지고 사라지는 사탕들!\\n다양한 사탕들이 여러분을 기다려요!\",\"aLNK\":\"https://gamepocket.naver.com/games/26\"}]");

			for(var i=0;i<this.shopData.length;++i){
				if(this.shopData[i].gameinfoIdx == Define.GIDX){
					var temp = this.shopData[0];
					this.shopData[0] = this.shopData[i];
					this.shopData[i] = temp;
					this.shopData.shift();
					break;
				}
			}
		}
		callback(this.shopData);
	}
    //-------------------------------새로추가된 네트워크 매니저 메소드

}//네트워크매니져


// 랭킹 관련 데이터
var rankingData = new RankingData();
function RankingData() {
    /*
    로그인
    {"TF":1,"my_day_rank":1,"my_day_score":7,"my_all_rank":2,"my_all_score":7,"myid":"Arccent","day":[{"user_id":"Arccent","score":7,"rank":1}],"all":[{"user_id":"Arccent","score":"7,"rank":1}]}}

    로그아웃
    {"TF":1,"day":[{"user_id":"Arccent","score":7,"rank":1}],"all":[{"user_id":"Arccent","score":7,"rank":1}]}

    데일리 랭킹 초기화 되면
     day.length = 0

     my_day_score 혹은 my_all_score 가 0이면 NODATA
    */

    this.TF = 0;

    this.my_day_rank = 0;
    this.my_day_score = 0;

    this.my_all_rank = 0;
    this.my_all_score = 0;

    this.myid = "";

    this.day = [];
    this.all = [];
}

var rankingPopupData = new RankingPopupData();
function RankingPopupData() {
    // "rank":{"oldRank":1,"newRank":1,"oldScore":47,"newScore":52}}
    // oldRank, oldCuRank 가 0으로 오는건 rankup 표시를 안하면 됨 -> 첫 저장이므로 랭크 업과는 다름
    // 데일리 랭킹 관련
    this.oldRank = 0;
    this.newRank = 0;

    this.oldScore = 0;
    this.newScore = 0;

    // 종합 랭킹 관련
    this.oldCuRank = 0;
    this.newCuRank = 0;

    this.oldCuScore = 0;
    this.newCuScore = 0;
}

// 하트 관련 스텍 데이터
function HeartUseStackData(_use_Heart, _cb_func) {
    this.use_Heart = 0;
    this.cb_func = null;

    if(_use_Heart !== undefined && _use_Heart != null)
        this.use_Heart = _use_Heart;

    if(_cb_func !== undefined && _cb_func != null)
        this.cb_func =_cb_func;
}

var shopListData = [new ShopListData()];
function ShopListData() {
    // 로그아웃
    // {"TF":1,
    // "data":[{"mkidx":21,"mtype":"logout","pType":"member","Quantity":5,"Price":0},{"mkidx":22,"mtype":"loginout","pType":"ad_1","Quantity":5,"Price":0},
    // {"mkidx":23,"mtype":"loginout","pType":"ad_2","Quantity":20,"Price":0},{"mkidx":24,"mtype":"loginout","pType":"ad_3","Quantity":60,"Price":0}]}

    // 로그인
    // {"TF":1,"actk":"zy32DLjr688Obv0tQY58i0BzYyojyvzbEPYvMfwSLyvgyD7c2K9dP+xy7CuG6PcyEwnxo9+lhr1v0PUFWIn78Z8yQsbr50DbXv5YrX88Nipq7ocXFJxbRrkkDZXUx3CA","data":[{"mkidx":20,"mtype":"login","pType":"point","Quantity":5,"Price":200},
    // {"mkidx":22,"mtype":"loginout","pType":"ad_1","Quantity":5,"Price":0},{"mkidx":23,"mtype":"loginout","pType":"ad_2","Quantity":20,"Price":0},{"mkidx":24,"mtype":"loginout","pType":"ad_3","Quantity":60,"Price":0}]}

    this.mkidx = 0;
    this.mtype = ""; //"logout" "loginout"
    this.pType = ""; // member : 회원가입 , point : greap 포인트, ad_1~3 : 광고
    this.Quantity = 0;
    this.Price = 0;
}

// 토스트 기본 옵션 초기화..
function ShowToast(type, msg){
    toastr.options = {
        "closeButton": false,
        "debug": false,
        "newestOnTop": false,
        "progressBar": false,
        "positionClass": "toast-bottom-center",
        "preventDuplicates": false,
        "onclick": null,
        "showDuration": "300",
        "hideDuration": "1000",
        "timeOut": "4000",
        "extendedTimeOut": "1000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    }
//	toastr.options["timeOut"] = time;
    //var per = parseFloat(renderer.view.style.width);
    //per = per * 0.8;
    toastr[type](msg);//.css("width", per + "%");
}
/** HeratController v.0.1.0
 *
 */

var HEART_SHOP_STATE = {
    STATE_HEARTPOPUP_BASE : 0,
    STATE_HEARTPOPUP_BASE_NoShowing : 1,
    STATE_HEARTPOPUP_SHOP : 10,
    STATE_HEARTPOPUP_BUY : 20,
    STATE_HEARTPOPUP_CONFIRM : 30
};

var sGame = undefined;

var sPopupHeart = undefined; //<-----페이저에서 indexgame.create단계에서 할당              // 하트 표시
var sPopupHeartShop = undefined; //<-----페이저에서 indexgame.create단계에서 할당         // 하트 샵
var sPopupHeartShopConfirm = undefined; //<-----페이저에서 indexgame.create단계에서 할당 // 하트 충전 완료
var sPopupHeartChargeGuide = undefined; //<-----페이저에서 indexgame.create단계에서 할당 // 차지 유도 //ui없는 컨테이너

// 일반 적인 하트 표시
var txtHeartCnt; //하트갯수 8
var txtHeartTimeCnt; //하트타이머 "max", 00:00
var navercount;
var navertime;
var navercount2;
var navertime2;

// 하트 샵 충전
var txtGreapPoint;              // greap 포인트
var txtOnlyAccount;             // 회원전용 //슬롯1 글자
var txtOnlyAccount2;            // 회원전용 //슬롯2 글자

var txtHeartBuyCount = [];  // 충전되는 하트
var txtHeartBuyPay = [];    // 포인트나 원,엔 수치
var sprHeartBuyPay = [];    // 광고
var sprHeartShopBtn = [];   // 버튼 이미지

// 하트샵 충전 완료
var sprHeartShopConfirm;
var txtHeartShopConfirmImg;
var txtHeartShopConfirm;

var heartShopState = HEART_SHOP_STATE.STATE_HEARTPOPUP_BASE_NoShowing;

// 하트 저장 관련 변수
var HeartSaveTime = 10;
var HeartSaveCurrentTime = 0;


// 구입하는 하트 갯수
var listHeartBuyCount = [5,5,20,60];
var listHeartBuyValue = ['200P','100￥','300￥','500￥'];      // 구입 가격 (일본버전)

// 리소스 정리 단계에서 spr나 txt 변수들 지정한 뒤
// heartController = new HeartController(); 해줘야 함
var heartController;

function HeartController() {
    this.Show(true,true);
    if(dm) console.log("HeartController()");
}

HeartController.prototype.Show = function(_b_immediately, _b_show) {
    if(false) {
        if (_b_show === undefined)
            _b_show = true;

        //sGame.addChild(sPopupHeart);

        if (_b_show) {
            if (!sPopupHeart.visible)
                sPopupHeart.visible = true;
        }

        if (_b_immediately) {
            if (_b_show) {
                //즉각 샵컨테이너 보이게
                heartShopState = HEART_SHOP_STATE.STATE_HEARTPOPUP_BASE;
                sPopupHeart.position.set(0, 0);
            }
            else {
                //즉각 샵컨테이너 사라지게
                heartShopState = HEART_SHOP_STATE.STATE_HEARTPOPUP_BASE_NoShowing;
                sPopupHeart.position.set(0, 0);
                compelteHideHeartPopup();
            }
        } else {
            //마종때문에 추가된 부분
            if (_b_show) {
                //0.2초후  샵컨테이너 보이게
                heartShopState = HEART_SHOP_STATE.STATE_HEARTPOPUP_BASE;
                sPopupHeart.position.set(0, -100);
                TweenMax.to(sPopupHeart, 0.2, {y: 0, ease: Linear.easeNone});
            } else {
                //0.2초후  샵컨테이너 사라지게
                heartShopState = HEART_SHOP_STATE.STATE_HEARTPOPUP_BASE_NoShowing;
                sPopupHeart.position.set(0, 0);
                TweenMax.to(sPopupHeart, 0.2, {
                    y: -100, ease: Linear.easeNone,
                    onComplete: function () {
                        compelteHideHeartPopup();
                    }
                });
            }
        }
    }//false

    //Time2Heart();
    // //-----로컬타이머 보정하기---------------
    // if(kData2get!=undefined) {
    //     //예제
    //     //var kData2get = new Data2();
    //     //kData2get.lifeTime: 1505837136463
    //     //kData2get.lastTick: 2.1169999999999947
    //
    //     //현재시간
    //     var curDateA = Date.now();
    //     var curDateB = parseInt(curDateA.toString().substring(0, 10));
    //     //저장시간
    //     var oldDateB = parseInt((kData2get.lastTick).toString().substring(0, 10));
    //     var passedSec = curDateB - oldDateB;
    //     var remainSec;
    //     //                 충전잔여시간       -흘러간시간
    //     var displaytime = kData2get.lifeTime-passedSec;
    //     if(0<displaytime) { //잔여시간
    //         //충전시간보다 더 많이 흘
    //         if(fHeartChargeTime<displaytime){
    //             var count =Math.floor(displaytime/fHeartChargeTime);
    //             kData.iHeart+=count;
    //             kData.fHeartTime=fHeartChargeTime;
    //             if(nvmode===true) {
    //                 var sends = {};
    //                 sends.iHeart = kData.iHeart;//네이버저장하기
    //                 if (typeof GamePocket.Sdk !== 'undefined') networkManager.AppDataPut(JSON.stringify(sends));
    //             }
    //         }
    //         else kData.fHeartTime = displaytime;
    //     } else { //보상시간
    //         //하트보상 갯수충전
    //         var addHeart = Math.floor(Math.abs(displaytime)/fHeartChargeTime);
    //         var remainpiec = Math.abs(displaytime)%fHeartChargeTime;
    //         var remainrev = fHeartChargeTime - remainpiec;
    //         //var addHeart = Math.floor(passedSec/fHeartChargeTime);
    //         //if(addHeart+kData.iHeart>iHeartInitData){ //아직쓸때가없음
    //         if (addHeart < iHeartChargeMax) {
    //             kData.iHeart += addHeart;
    //             if(kData.iHeart>iHeartChargeMax) kData.iHeart=iHeartChargeMax;
    //         }
    //         kData.fHeartTime = remainrev;
    //
    //         if(nvmode===true) {
    //             var sends = {};
    //
    //             //초기 하트값이 없을경우 예외
    //             if( typeof kData === 'undefined' || typeof kData.iHeart === 'undefined') return;
    //
    //             sends.iHeart = kData.iHeart;//네이버저장하기
    //             if (typeof GamePocket.Sdk !== 'undefined') networkManager.AppDataPut(JSON.stringify(sends));
    //         }
    //         //광고버튼시에 활성화
    //         //remainSec=0;
    //         //kData.btn1TimeStamp=null;
    //     }
    //     //var remainStr = convertTimeFormatFromSec(remainSec);//00:00형식으로
    //     //kData.fHeartTime = kData2get.lastTick;
    // }
    // //-----로컬타이머 보정하기---------------

    this.Changed();
};

function compelteHideHeartPopup() {
    if(sPopupHeart.visible)
        sPopupHeart.visible = false;
}

HeartController.prototype.Update = function() { 
    if(kData.iHeart < iHeartChargeMax){
        kData.fHeartTime -= deltaTime;

        if(kData.fHeartTime <= 0){ //시간이 소진되어, 충전가능
            //SaveDataInClient();

            if(networkManager.networkState == NET_STATE.RUN_SERVER){
                // CheckButton은 게임에 따라 수정을 하면 될듯
                networkManager.LoadData(function () { });
            }
            else{
                //로컬에서 처리하려고 만든 것
                kData.iHeart++;
                kData.fHeartTime = fHeartChargeTime;
                console.log("로컬호스트에서 하트1 증가처리");
                //CheckButton은 게임에 따라 수정을 하면 될듯
                //CheckButton();

                if(nvmode===true) {
                    var sends = {};
                    sends.iHeart = kData.iHeart;//네이버저장하기
                    if (typeof GamePocket.Sdk !== 'undefined') {
                        networkManager.AppDataPut(JSON.stringify(sends));
                    }
                }else {
                    networkManager.ForcedSaveData(); //처리 //HeartController.Update
                    //로컬에서 처리하려고 만든 것
                }
            }
        }
    }

    this.Changed(); //max또는 00:00 출력

    HeartSaveCurrentTime += deltaTime;
    if(HeartSaveCurrentTime >= HeartSaveTime){
        HeartSaveCurrentTime = 0;
    }
};

//10분하트1개충전 타이머
//txtHeartTimeCnt.text
HeartController.prototype.Changed = function () {
    if(typeof(txtHeartCnt) !== 'undefined'
    && typeof(kData) !== 'undefined'
    && typeof(kData.iHeart) !== 'undefined') {
        if(typeof kData.iHeart !== 'undefined') {
            txtHeartCnt.text = kData.iHeart.toString();
            if(nvmode===true) {
                if (typeof navercount !== 'undefined')
                    navercount.text = kData.iHeart.toString();
            }
        }
        if(kData.iHeart >= iHeartChargeMax) {
            txtHeartTimeCnt.text = "MAX";
            if(nvmode===true) {
                if (typeof navertime !== 'undefined')
                    navertime.text = "MAX";
            }
        }
        else {
            var min = Math.floor(kData.fHeartTime / 60);
            if (min < 10)
                min = '0' + min;
            var sec = Math.floor(kData.fHeartTime % 60);
            if (sec < 10)
                sec = '0' + sec;
            txtHeartTimeCnt.text = min + ":" + sec;
            if(nvmode===true) {
                if (typeof navertime !== 'undefined')
                    navertime.text = min + ":" + sec;
            }
        }
    }
};

//sGame->sPopupHeart->
//txtGreapPoint.text
//txtOnlyAccount <==회원전용
//txtHeartBuyPay <==포인트나 원,엔 수치

//플러스버튼,상점버튼 클릭시 상점 띄우기
//GameMain -> GameViewSetting(res) -> sPopupHeart 구성
HeartController.prototype.ShowHeartShop = function (_b_show) {
    //상점용도 --UI에서 사운드가 나오므로 여기선 주석처리
    //SESoundPlay(SEIndex.click);//SESoundPlay(SE_Button);

    if(_b_show === undefined) _b_show = true;

    if(_b_show == true){
        networkManager.GetShoplist(ShopType.HEART,function () {
            //구매유도창
            if(sPopupHeartChargeGuide.visible) sPopupHeartChargeGuide.visible = false;
            //구매결과창
            if(sPopupHeartShopConfirm.visible) sPopupHeartShopConfirm.visible = false;

            sGame.addChild(sPopupHeartShop);

            if(sPopupHeartShop.visible != _b_show) //지정상태랑 현상태랑 다르면, 지정상태로 보이기
                sPopupHeartShop.visible = _b_show;

            // login bummy data
            if(loginTF == 1){
                //그레이프회원, 야후회원
                if(proto.serPos == 0){

                    sHeartShop.onSetPointFast(kData.greappoint); //포인트P표시 처음표시

                    // txtGreapPoint.style = {fontFamily:'ROUNDS_BLACK', fontSize:'40px', fill:'#ffffff', align:'right'};
                    //
                    //     for(var i=0; i<4; i++){ //서버에서 가져오기
                    //     sHeartShop.itemList["greap"][i]["tx"] = "x"+shopListData[i].Quantity; //갯수가져오기
                    //     sHeartShop.itemList["greap"][i]["button"] = ""+shopListData[i].Price+"P"; //포인트가져오기
                    //     sHeartShop.itemList["greap"][i]["value"] = ""+shopListData[i].Quantity;
                    // }
                    //서버에서 가져온걸 적용준비--------------------------

                }else if(proto.serPos == 1){
                    // 야후
                }
            }else{
                //게스트 모드

                txtGreapPoint.text = GetString("login");//GetString("membersonly");// "회원전용"; //포인트P표시

                // for(var i=0; i<4; i++){
                //     sHeartShop.itemList["greapguest"][i]["tx"] = "x"+shopListData[i].Quantity; //x5 갯수표시
                //     sHeartShop.itemList["greapguest"][i]["button"] = ""+shopListData[i].Price+"P"; //500P 가격표시
                //     sHeartShop.itemList["greapguest"][i]["value"] = ""+shopListData[i].Quantity; //5 갯수
                // }
            }
        });
    }
    else{
        if(sPopupHeartShop.visible != _b_show)
            sPopupHeartShop.visible = _b_show;
    }

};

HeartController.prototype.IsActive = function () {
    return sPopupHeart.visible;
};

//하트가 부족할 경우
//하트구매유도창 띄우기
//sPopupHeartChargeGuide 띄우기
//GameMain -> GameViewSetting(res) -> sPopupHeartChargeGuide 구성
HeartController.prototype.ShowGuidePopup = function(_b_show){

    //상점용도 --UI에서 사운드가 나오므로 여기선 주석처리
    //SESoundPlay(SEIndex.click);//SESoundPlay(SE_Button);
    //상점용도

    if(_b_show === undefined) _b_show = true;

    sGame.addChild(sPopupHeartChargeGuide);
    sPopupHeartChargeGuide.visible = _b_show;
};


//구매하려고 버튼 클릭시
var sHeartShop_delaybtn=false;//초기화


HeartController.prototype.BuyHeart = function(heartIndex) {//버튼이벤트 함수에서 로그인만 BuyHeart로, 비로그인은 예외처리함(s3.btnfnok)

    //1초간 재입력막기
    if(sHeartShop_delaybtn==false) {
        sHeartShop_delaybtn=true;
        TweenMax.delayedCall(1,function(){sHeartShop_delaybtn=false;});
    }else {
        return;
    }

    if(heartIndex === undefined || heartIndex == null) return;


    //쿨타이머 실행< //결제전 미리 실행하려고
    if (loginTF == 1)
    {
        if(proto.serPos == 0    //모비서비스에서만 //복귀
        || proto.serPos == 1    //야후서비스에서만
        //&& apkTF == 1           //apk에서만
        ) {
            if(shopListData[heartIndex].Price !== 0 //광고아니면
               && kData.greappoint<shopListData[heartIndex].Price){//포인트부족시 리턴 //

                if(dm) console.log("바이하트-포인트부족:"+GetShpMsg("lowpoint"));
                networkManager.ModalCall(MODAL_BUTTON_TYPE.OKONLY,GetShpMsg("lowpoint"),
                    function () {
                    },
                    function () {
                    }
                );
                return;
            }

            //shop모드별대응
            var uiresult;
            var uiplus;
            var uishop;
            if (uishopinmenu) {
                uishop = uigame.state.states.menu.uishop;
                uiresult = uigame.state.states.menu.uishopresult;
                uiplus = uigame.state.states.menu.uishopplus;
            }
            else {
                uishop = uigame.state.states.game.uiController.uishop;
                uiresult = uigame.state.states.game.uiController.uishopresult;
                uiplus = uigame.state.states.game.uiController.uiMain.z_shopplus;
            }
            //shop모드별대응

            //2번,3번이면 쿨타임실행
            if (heartIndex == 2) {
                //sHeartShop.twcooltime.onInitCoolTimer(heartIndex);
                SaveDataInClient();

                for (var i = 0; i < 4; i++) {
                    uishop.slots[i].onRefreshSlot1(); //가진포인트가 적으면, 비활성 시킨다
                }
                curDate = Date.now();
                kData.btn1TimeStamp = parseInt(curDate.toString().substring(0, 10));//kData.btn1TimeStamp
                if (kData.btn1TimeStamp !== null) uishop.slots[2].setBtnOff();
                if (kData.btn2TimeStamp !== null) uishop.slots[3].setBtnOff();

                //가져올때 에라가 나는상황 발생 //message:"_time is not defined"
                // networkManager.GetServerTime(function (_time) {
                //     kData.btn1TimeStamp = _time;
                //     //networkManager.ForcedSaveData();
                //     for (var i = 0; i < 4; i++) {
                //         uishop.slots[i].onRefreshSlot1(); //가진포인트가 적으면, 비활성 시킨다
                //     }
                //     if (kData.btn1TimeStamp !== null) uishop.slots[2].setBtnOff();
                //     if (kData.btn2TimeStamp !== null) uishop.slots[3].setBtnOff();
                // });

            }
            if (heartIndex == 3) {
                //sHeartShop.twcooltime.onInitCoolTimer(heartIndex);
                SaveDataInClient();

                for (var i = 0; i < 4; i++) {
                    uishop.slots[i].onRefreshSlot1(); //가진포인트가 적으면, 비활성 시킨다
                }
                curDate = Date.now();
                kData.btn2TimeStamp = parseInt(curDate.toString().substring(0, 10));//kData.btn1TimeStamp
                if (kData.btn1TimeStamp !== null) uishop.slots[2].setBtnOff();
                if (kData.btn2TimeStamp !== null) uishop.slots[3].setBtnOff();

                //가져올때 에라가 나는상황 발생 //message:"_time is not defined"
                // networkManager.GetServerTime(function (_time) {
                //     kData.btn2TimeStamp = _time;
                //     //networkManager.ForcedSaveData();
                //     for (var i = 0; i < 4; i++) {
                //         uishop.slots[i].onRefreshSlot1(); //가진포인트가 적으면, 비활성 시킨다
                //     }
                //     if (kData.btn1TimeStamp !== null) uishop.slots[2].setBtnOff();
                //     if (kData.btn2TimeStamp !== null) uishop.slots[3].setBtnOff();
                // });
            }
        }

    }
    //비로그인은 앞에서 예외처리함 -- 타이머
    //쿨타이머 실행>

    //모드에따른 구매완료결과창 출력한다.
    networkManager.Payment(shopListData[heartIndex].mkidx,function () {//서버에 온 물품배열에서 정보를 가져온다.
        if(dm)console.log("networkManager.Payment");
        //그레이프회원모드, 야후 회원모드
        if(loginTF == 1){
            if(proto.serPos == 0 // 모비회원
            || proto.serPos == 1){ // 야후회원

                //shop모드별대응
                var uiresult;
                var uiplus;
                var uishop;
                if(uishopinmenu) {
                    uishop =  uigame.state.states.menu.uishop;
                    uiresult = uigame.state.states.menu.uishopresult;
                    uiplus = uigame.state.states.menu.uishopplus;
                }
                else
                {
                    uishop =  uigame.state.states.game.uiController.uishop;
                    uiresult = uigame.state.states.game.uiController.uishopresult;
                    uiplus = uigame.state.states.game.uiController.uiMain.z_shopplus;
                }
                //shop모드별대응

                //하트구매결과창
                uiresult.onRefreshShopResult(shopListData[heartIndex].Quantity, shopListData[heartIndex].icon);
                uiresult.visible=true;
                //if(bSoundSE) SE_BuyItem.play();            //아이템 구매 사운드           --아이템을 구매하였을 때 사운드

                uishop.pttx.text = getMoneyFormatFromNum(kData.greappoint);//잔여포인트표시
                uiplus.onRefresh();
            }
        }else{
            if(false) {
                //
                // if (networkManager.networkState == NET_STATE.LOCALHOST) {
                //     //로컬서비스//비로그인은 예외처리함(s3.btnfnok)
                //     kData.iHeart += str2int(shopListData[heartIndex].Quantity);
                // } else {//비회원
                //     //게스트모드
                //     //kData.iHeart +=  Number(sHeartShop.itemList["greapguest"][heartIndex]["value"]);
                //     kData.iHeart += str2int(shopListData[heartIndex].Quantity);
                // }
                //
                //
                // // if(heartIndex==2
                // //     || heartIndex==3) {
                // //     uigame.state.states.menu.uishopresult.onRefreshShopResult(shopListData[heartIndex].Quantity);
                // //     uigame.state.states.menu.uishopresult.visible=true;
                // //     //sHeartShop.twcooltime.onInitCoolTimer(heartIndex);
                // //     uigame.state.states.menu.uishopplus.onRefresh();
                // //     //SaveDataInClient();
                // // }
                //
                //
                // var uiresult;
                // var uiplus;
                // if (uishopinmenu) {
                //     uiresult = uigame.state.states.menu.uishopresult;
                //     uiplus = uigame.state.states.menu.uishopplus;
                // }
                // else {
                //     uiresult = uigame.state.states.game.uiController.uishopresult;
                //     uiplus = uigame.state.states.game.uiController.uiMain.z_shopplus;
                // }
                //
                //
                // // if(heartIndex==2
                // //     || heartIndex==3) {
                // if (shopListData[heartIndex].Price === 0) {
                //     uiresult.onRefreshShopResult(shopListData[heartIndex].Quantity, shopListData[heartIndex].icon);
                //     uiresult.visible = true;
                //     //sHeartShop.twcooltime.onInitCoolTimer(heartIndex);
                //     uiplus.onRefresh();
                //     //SaveDataInClient();
                // }
            }//false
        }

    });
};


//버튼클릭시 하트를 소비한다.                       사용하트수, 버튼업데이트콜백
//서버에서 하트수 차감처리된다.
HeartController.prototype.UseHeart = function (_useCount,_cb_func) {
    if(_useCount === undefined || _useCount == null) _useCount = 1;

    networkManager.UseHeart(_useCount,_cb_func);
};

//비회원 로그인시
//GameMain.js -> GameViewSetting(res)
//heartController = new HeartController(); //생성직후 호출

HeartController.prototype.LostTime = function (_iLostTime) {
    if(kData.iHeart >= iHeartChargeMax)
        return;

    var addHeart = 0;

    while(_iLostTime >= fHeartChargeTime){
        addHeart++;
        _iLostTime -= fHeartChargeTime;
    }

    kData.fHeartTime -= _iLostTime;

    if(kData.fHeartTime < 0){
        addHeart++;
        kData.fHeartTime = fHeartChargeTime - kData.fHeartTime;
    }

    kData.iHeart += addHeart;

    if(kData.iHeart > iHeartChargeMax)
        kData.iHeart = iHeartChargeMax;


    var sends={}; sends.iHeart=kData.iHeart;//네이버저장하기
    if(nvmode===true) {
        if (typeof GamePocket.Sdk !== 'undefined') networkManager.AppDataPut(JSON.stringify(sends));
    }else{
        networkManager.ForcedSaveData(); //처리//in LostTime
    }

};
var naverShop;
var naverShop2;
var iCenterSizeX=720/2;
var iCenterSizeY=1280/2;
//var naverShop = new NaverShop(uigame);
var NaverShopThis=undefined;
function NaverShop(g, par) {

	//this.main = new PIXI.Container();
    this.main = g.add.group();

	this.imgPath = "./atlas/shop/";
	this.bLoad = false;
	this.gameList;
	this.cbReward;
	this.bInit = false;
    NaverShopThis = this;
	NaverShop.prototype.loadImg = function() {
		// var loader = PIXI.loader;
		// loader.add(this.imgPath+"btn_close.png", this.imgPath+"btn_close.png");
		// loader.add(this.imgPath+"btn_ok.png", this.imgPath+"btn_ok.png");
		// loader.add(this.imgPath+"btn_shop_1.png", this.imgPath+"btn_shop_1.png");
		// loader.add(this.imgPath+"icon_0001.png", this.imgPath+"icon_0001.png");
		// loader.add(this.imgPath+"icon_0002.png", this.imgPath+"icon_0002.png");
		// loader.add(this.imgPath+"icon_0003.png", this.imgPath+"icon_0003.png");
		// loader.add(this.imgPath+"icon_0004.png", this.imgPath+"icon_0004.png");
		// loader.add(this.imgPath+"icon_0005.png", this.imgPath+"icon_0005.png");
		// loader.add(this.imgPath+"icon_0006.png", this.imgPath+"icon_0006.png");
		// loader.add(this.imgPath+"icon_0007.png", this.imgPath+"icon_0007.png");
		// loader.add(this.imgPath+"icon_0008.png", this.imgPath+"icon_0008.png");
		// loader.add(this.imgPath+"icon_0009.png", this.imgPath+"icon_0009.png");
		// loader.add(this.imgPath+"icon_0010.png", this.imgPath+"icon_0010.png");
		// loader.add(this.imgPath+"icon_0011.png", this.imgPath+"icon_0011.png");
		// loader.add(this.imgPath+"icon_0012.png", this.imgPath+"icon_0012.png");
		// loader.add(this.imgPath+"icon_0015.png", this.imgPath+"icon_0015.png");
		// loader.add(this.imgPath+"list_1.png", this.imgPath+"list_1.png");
		// loader.add(this.imgPath+"point_bg_naver.png", this.imgPath+"point_bg_naver.png");
		// loader.add(this.imgPath+"popup_green.png", this.imgPath+"popup_green.png");
		// loader.add(this.imgPath+"shop_naver_film.png", this.imgPath+"shop_naver_film.png");
		// loader.add(this.imgPath+"shop_naver_info.png", this.imgPath+"shop_naver_info.png");
        //
		// loader.once('complete', this.Init.bind(this)); //cbLogoComplete->cbImageDownComplete(loader, res) //State.TITLE로 대기모드로-->GameViewSetting(res)
		// loader.load();

        g.load.onLoadStart.add(function () {}, this);
    	//g.load.onFileComplete.add(fileComplete, this);
        g.load.onLoadComplete.add(this.Init.bind(this), this);

        // //-----------상점이미지이동
        // g.load.image(this.imgPath+"btn_close.png", this.imgPath+"btn_close.png");
        // g.load.image(this.imgPath+"btn_ok.png", this.imgPath+"btn_ok.png");
        // g.load.image(this.imgPath+"btn_shop_1.png", this.imgPath+"btn_shop_1.png");
        // g.load.image(this.imgPath+"icon_0001.png", this.imgPath+"icon_0001.png");
        // g.load.image(this.imgPath+"icon_0002.png", this.imgPath+"icon_0002.png");
        // g.load.image(this.imgPath+"icon_0003.png", this.imgPath+"icon_0003.png");
        // g.load.image(this.imgPath+"icon_0004.png", this.imgPath+"icon_0004.png");
        // g.load.image(this.imgPath+"icon_0005.png", this.imgPath+"icon_0005.png");
        // g.load.image(this.imgPath+"icon_0006.png", this.imgPath+"icon_0006.png");
        // g.load.image(this.imgPath+"icon_0007.png", this.imgPath+"icon_0007.png");
        // g.load.image(this.imgPath+"icon_0008.png", this.imgPath+"icon_0008.png");
        // g.load.image(this.imgPath+"icon_0009.png", this.imgPath+"icon_0009.png");
        // g.load.image(this.imgPath+"icon_0010.png", this.imgPath+"icon_0010.png");
        // g.load.image(this.imgPath+"icon_0011.png", this.imgPath+"icon_0011.png");
        // g.load.image(this.imgPath+"icon_0012.png", this.imgPath+"icon_0012.png");
        // g.load.image(this.imgPath+"icon_0015.png", this.imgPath+"icon_0015.png");
        // g.load.image(this.imgPath+"list_1.png", this.imgPath+"list_1.png");
        // g.load.image(this.imgPath+"point_bg_naver.png", this.imgPath+"point_bg_naver.png");
        // g.load.image(this.imgPath+"popup_green.png", this.imgPath+"popup_green.png");
        // g.load.image(this.imgPath+"shop_naver_film.png", this.imgPath+"shop_naver_film.png");
        // g.load.image(this.imgPath+"shop_naver_info.png", this.imgPath+"shop_naver_info.png");
        // g.load.image(this.imgPath+"white1x1.png", this.imgPath+"white1x1.png");
        // //-----------상점이미지이동

        //추가-나인슬라이스
        //g.load.nineSlice(this.imgPath+"popup_green.png", this.imgPath+"popup_green.png", 50, 50, 150, 50);
        //g.load.nineSlice('my-image', '/images/my-image.jpg', 10, 15, 20, 30);
        //추가-나인슬라이스
        g.load.start();


	};

	NaverShop.prototype.Init = function() {
        var spr0 = g.add.sprite(iCenterSizeX, iCenterSizeY, this.imgPath+"white1x1.png");
        this.main.addChild(spr0);
        spr0.anchor.setTo(0.5, 0.5);
        spr0.scale.setTo(720, 1280);
        //var spr = SpriteLoad(this.main, "white.png", iCenterSizeX, iCenterSizeY);
		//spr.scale.set(iMaxSizeX/4, iMaxSizeY/4);
		spr0.tint = 0x000000;
		spr0.alpha = 0.9;
		//spr0.interactive = true;
        spr0.inputEnabled = true;
		//픽시----
		//spr = SpriteSliceLoad(this.main, this.imgPath+"popup_green.png", iCenterSizeX, iCenterSizeY, 670, 950, 50, 50, 150, 50);
     	//페이저---
        var spr = new PhaserNineSlice.NineSlice( g, iCenterSizeX, iCenterSizeY, this.imgPath+"popup_green.png",null,
            670, 950, {top: 150, bottom: 50, left: 50, right: 50}
        );
        spr.anchor.setTo(0.5, 0.5);//spr.resize(100,200);//spr.scale.setTo(0.5,0.5);
        this.main.addChild(spr);

		//있으면 사용	var spr2 = SpriteLoad(spr, "title.png", 0, -412);
		//픽시-----
		// FontLoad(spr, "무료충전", 0, -415, 0.5, 0.5,
		// 	{fontFamily:"Arial", fontSize:'50px', fontWeight:'bold', align:'center', fill:'#ffffff', dropShadow:true, dropShadowColor:'#424242', dropShadowDistance:5, dropShadowAngle:Math.PI/3});
		//페이저----
        var stya = {font:'bold 55px '+"Arial", fill: "#ffffff", stroke:'#342d89', lineJoin:"round", strokeThickness:10}
        var txta = g.add.text(0, -415, "무료충전", stya);
        txta.anchor.setTo(0.5,0.5);
        txta.scale.setTo(1,1);
        spr.addChild(txta);

		//픽시----
		//var spr2 = SpriteSliceLoad(spr, this.imgPath+"shop_naver_info.png", 0, -260, 580, 120);
		//var spr3 = SpriteSliceLoad(spr2, this.imgPath+"point_bg_naver.png", 0, -55, 200, 60);
        //페이저---
        var spr2 = new PhaserNineSlice.NineSlice( g, 0, -260, this.imgPath+"shop_naver_info.png",null,
            580, 120, {top:10, bottom:10, left:10, right:10}
        );
        spr2.anchor.setTo(0.5, 0.5);
        spr.addChild(spr2);
        //페이저---포인트배경
        var spr3 = new PhaserNineSlice.NineSlice( g, 0, -55, this.imgPath+"point_bg_naver.png", null,
            200, 60, {top:10, bottom:10, left:10, right:10}
        );
        spr3.anchor.setTo(0.5, 0.5);
        spr2.addChild(spr3);

		//픽시--
		//this.sprTitleIcon = SpriteLoad(spr3, this.imgPath+"shop_naver_film.png", -80, 0);
		//페이저--하트마크
        this.sprTitleIcon = g.add.sprite(-80, 0, this.imgPath+"shop_naver_film.png");
        this.sprTitleIcon.anchor.setTo(0.5,0.5);
        spr3.addChild(this.sprTitleIcon);

        //픽시--
		//this.txtLifeCnt = FontLoad(this.sprTitleIcon, "10", -12, 0, 0.5, 0.5,
		//	{fontFamily:"Arial", fontSize:'38px', fontWeight:'bold', lineJoin:"round", align:'center', fill:'#ffffff', stroke:'#00877c', strokeThickness:5});
		//페이저--하트갯수
        var styLifeCnt = {font:'bold 35px '+"Arial", fill:'#FFFFFF', stroke:'#000000', lineJoin:"round", strokeThickness:5};
        this.txtLifeCnt = g.add.text(-0,0, "10", styLifeCnt);
        this.txtLifeCnt.anchor.setTo(0.5,0.5);
        this.sprTitleIcon.addChild(this.txtLifeCnt);

        navercount=this.txtLifeCnt;

        //픽시--
		//this.txtTime = FontLoad(spr3, "09:59", 20, 5, 0.5, 0.5,
		//	{fontFamily:"Arial", fontSize:'40px', fontWeight:'bold', align:'center', fill:'#ffffff', dropShadow:true, dropShadowColor:'#424242', dropShadowDistance:5, dropShadowAngle:Math.PI/3});
		//페이저--타이머
        var styTime = {font:'bold 40px '+"Arial", fill:'#FFFFFF', lineJoin:"round"};
        this.txtTime = g.add.text(20, 5, "10:00", styTime);
        this.txtTime.anchor.setTo(0.5,0.5);
        spr3.addChild(this.txtTime);

        navertime=this.txtTime;
        //픽시--
		//FontLoad(spr2, "필름이 부족하시군요!! 그럼 이 게임도 해보시겠어요??\n선물로 필름을 모두 채워드릴게요~", 0, 15, 0.5, 0.5,
		//	{fontFamily:"Arial", fontSize:'20px', fontWeight:'bold', align:'center', fill:'#ffffff', stroke:'#00877c', strokeThickness:5});
		//페이저--설명문구
        var styCmt = {font:'bold 21px '+"Arial", fill:'#FFFFFF', stroke:'#000000', lineJoin:"round", strokeThickness:5};
        this.txtCmt = g.add.text(0, 15, "하트가 부족하시군요!! 그럼 이 게임도 해보시겠어요??\n선물로 하트를 모두 채워드릴게요~", styCmt); spr.addChild(txta);
        this.txtCmt.anchor.setTo(0.5,0.5);
        spr2.addChild(this.txtCmt);

		this.sprIcon = [];
		this.txtTitle = [];
		this.txtContents = [];

        var arr_cb = [this.cbButtonClick0.bind(this)
                    , this.cbButtonClick1.bind(this)
                    , this.cbButtonClick2.bind(this)];
        var arr_ok = [this.cbButtonClose.bind(this)];

		for(var i=0;i<3;++i) {
			//픽시---
			//spr2 = SpriteSliceLoad(spr, this.imgPath + "list_1.png", 0, -100 + (160*i), 600, 160);
			//페이저---
            spr2 = new PhaserNineSlice.NineSlice( g, -300, -100+(160*i), this.imgPath + "list_1.png",null,
                600, 160, {top:50, bottom:50, left:20, right:20}
            );
            spr2.anchor.setTo(0.5, 0.5);//영향없음
            spr.addChild(spr2);

            //픽시---
			//this.sprIcon[i] = SpriteLoad(spr2, this.imgPath + "icon_0001.png", -222, -5);
			//페이저---
            this.sprIcon[i] = g.add.sprite(-222+300, -5, this.imgPath+"icon_0001.png");
            this.sprIcon[i].anchor.setTo(0.5,0.5);
            spr2.addChild(this.sprIcon[i]);

            //픽시---
			//this.txtTitle[i] = FontLoad(spr2, "상하이 쉐프", -150, -40, 0, 0.5,
			//	{fontFamily:"Arial", fontSize:'28px', fontWeight:'bold', align:'center', fill:'#ffffff', stroke:'#00877c', strokeThickness:5});
			//페이저---
            var styTitle = {font:'bold 25px '+"Arial", fill:'#FFFFFF', stroke:'#342d89', lineJoin:"round", strokeThickness:5};
            this.txtTitle[i] = g.add.text(-150+300, -40-25, "상하이 쉐프", styTitle);
            spr2.anchor.setTo(0.0, 0.5);
            spr2.addChild( this.txtTitle[i]);

            //픽시---
			//this.txtContents[i] = FontLoad(spr2, "같은패를 찾는 짝맞추기 게임!\n당신의 손은 눈보다 빠를 수 있습니까?\n어떤 블록을 이을 수 있을지 찾아보세요!", -150, 15, 0, 0.5,
			//	{fontFamily:"Arial", fontSize:'16px', fontWeight:'bold', align:'left', fill:'#000000'});
			//페이저---
            var styContents =  {font:'bold 15px '+"Arial", fill:ColorSet.white, lineJoin:"round"};
            this.txtContents[i] = g.add.text(-150+300, 15-30, "같은패를 찾는 짝맞추기 게임!\n당신의 손은 눈보다 빠를 수 있습니까?\n어떤 블록을 이을 수 있을지 찾아보세요!", styContents);
            spr2.anchor.setTo(0.0, 0.5);
            spr2.addChild(this.txtContents[i]);

            //픽시---
			//spr3 = SpriteSliceLoad(spr2, this.imgPath + "btn_shop_1.png", 0, 0, 110, 110);
            //페이저---
            spr3 = new PhaserNineSlice.NineSlice( g, 0, 0, this.imgPath + "btn_shop_1.png",null,
                110, 110, {top:10, bottom:10, left:10, right:10}
            );
            spr3.anchor.setTo(0.5, 0.5);
            //spr2.addChild(spr3);

            //픽시----
			//var btn = new Button(spr2, this.imgPath + "btn_shop_1.png", 215, 0, eval("this.cbButtonClick"+i+".bind(this)"), "scaleUp", 1, 1, 0.5, 0.5, spr3);
			//페이저----
            var styTitle = {font:'bold 25px '+"Arial", fill:'#FFFFFF', stroke:'#342d89', lineJoin:"round", strokeThickness:5}
            var btntxt = g.add.text(0, -10, "MAX", styTitle);

            var styBtn = {font:'bold 25px '+"Arial", fill:'#FFFFFF', stroke:'#342d89', lineJoin:"round", strokeThickness:5};
            var btn = createbtn(spr3,
                btntxt,
                g.add.sprite(0, -15, this.imgPath+"shop_naver_film.png"),
                215+300, 0,
                styBtn
            );

            btn.slotId = i;
            // fnok(this.slotid);
            btn.fnok = function (_slotid) {
                // eval("this.cbButtonClick"+i+".bind(this)");
                arr_cb[_slotid]();
            };
            spr2.addChild(btn);

            //픽시---
			//spr4 = SpriteLoad(spr3, this.imgPath+"shop_naver_film.png", 0, -17);
			//spr4.scale.set(0.9);
			//페이저---

            //픽시---
			//FontLoad(btn.sprite, "MAX", 0, -12, 0.5, 0.5,
			//	{fontFamily:"Arial", fontSize:'28px', fontWeight:'bold', lineJoin:"round", align:'center', fill:'#ffffff', stroke:'#00877c', strokeThickness:5});
			//페이저---
			// 위로이동

			//픽시----
			//FontLoad(btn.sprite, "바로가기", 0, 25, 0.5, 0.5,
			//	{fontFamily:"Arial", fontSize:'16px', fontWeight:'bold', align:'center', fill:'#ffffff', stroke:'#00877c', strokeThickness:4});
			//페이저---
            var stySmall = {font:'bold 20px '+"Arial", fill:'#FFFFFF', stroke:'#000000', lineJoin:"round", strokeThickness:5}
            smalltxt = g.add.text(0, 25, "바로가기", stySmall);
            smalltxt.anchor.setTo(0.5,0.5);
          	btn.tx.addChild(smalltxt);

        }
		//픽시---
		//var spr3 = SpriteSliceLoad(spr, this.imgPath + "btn_ok.png", 0, 0, 200, 90);
		//btn = new Button(spr, this.imgPath + "btn_ok.png", 0, 370, this.cbButtonClose.bind(this), "scaleUp", 1, 1, 0.5, 0.5, spr3);
		//FontLoad(btn.sprite, "OK", 0, 0, 0.5, 0.5,
		//	{fontFamily:"Arial", fontSize:'50px', fontWeight:'bold', align:'center', fill:'#ffffff', dropShadow:true, dropShadowColor:'#424242', dropShadowDistance:5, dropShadowAngle:Math.PI/3});

		//페이저---
        var sliceok = new PhaserNineSlice.NineSlice( g, 0, 0, this.imgPath + "btn_ok.png", null,
            200, 90, {top:45, bottom:45, left:32, right:32}
        );
        sliceok.anchor.setTo(0.5, 0.5);
        var styok ={font:'bold 35px '+"Arial", fill:'#FFFFFF', stroke:'#7F2D00', lineJoin:"round", strokeThickness:5};
        var txtok = g.add.text(0, 0, "닫기", styok);
        txtok.anchor.setTo(0.5,0.5);

        var btnOk = createbtn(sliceok,
            txtok,
            undefined,
            0, 370,
            styok
        );
        btnOk.fnok = function () {
            arr_ok[0]();
        };
		spr.addChild(btnOk);

		this.main.visible = false;
        //this.main.visible = true;
        // par.addChild(this.main);//혜관님
		par.addChild(this.main);
		this.bInit = true;
	}

	NaverShop.prototype.cbButtonClick0 = function() {
		//	location.href = this.gameList[0].aLNK;
		window.open(this.gameList[0].aLNK);
		this.cbReward();
		this.cbButtonClose();
	}

	NaverShop.prototype.cbButtonClick1 = function() {
	//	location.href = this.gameList[1].aLNK;
		window.open(this.gameList[1].aLNK);
		this.cbReward();
		this.cbButtonClose();
	}

	NaverShop.prototype.cbButtonClick2 = function() {
	//	location.href = this.gameList[2].aLNK;
		window.open(this.gameList[2].aLNK);
		this.cbReward();
		this.cbButtonClose();
	}

	NaverShop.prototype.Update = function(cnt, time) {
		if(this.bInit == true && this.main.visible == true){
			this.txtLifeCnt.text = cnt;
			this.txtTime.text = time;
		}
	}

	NaverShop.prototype.Show = function(_cbReward) {
		this.cbReward = _cbReward;
		if(this.bLoad == false){
			networkManager.GetNaverShop(this.cbGetNaverShopComplete.bind(this));
		}else{
			this.main.visible = true;
		}
	}

	NaverShop.prototype.cbGetNaverShopComplete = function(gamelist) {
		this.gameList = gamelist;
		RandomMix(this.gameList, 50);
	//	var options = {"Access-Control-Allow-Origin":"*"};
	//	var loader = PIXI.loader;
	//	loader.add(this.gameList[0].iconLNK, this.gameList[0].iconLNK, options);
	//	loader.add(this.gameList[1].iconLNK, this.gameList[1].iconLNK, options);
	//	loader.add(this.gameList[2].iconLNK, this.gameList[2].iconLNK, options);
	//	loader.once('complete', this.cbIconLoadComplete);
	//	loader.load();
		this.cbIconLoadComplete();
	}

	NaverShop.prototype.cbIconLoadComplete = function() {
 		for(var i=0;i<3;++i){
            this.sprIcon[i].loadTexture(this.imgPath + this.gameList[i].iconLNK.substring(this.gameList[i].iconLNK.lastIndexOf("/")+1,this.gameList[i].iconLNK.length));
		//	this.sprIcon[i].texture = PIXI.Texture.fromFrame(
		//	     this.imgPath + this.gameList[i].iconLNK.substring(this.gameList[i].iconLNK.lastIndexOf("/")+1,this.gameList[i].iconLNK.length)
        //    );
		////this.sprIcon[i].texture = PIXI.Texture.fromFrame(this.gameList[i].iconLNK);
			this.txtTitle[i].text = this.gameList[i].gName;
			this.txtContents[i].text = this.gameList[i].gContents;
		}
		this.main.visible = true;
	}

	NaverShop.prototype.cbButtonClose = function() {
		this.main.visible = false;
	}
}
function cbNaverShopReward()
{
    if(kData.iHeart < iHeartChargeMax)
        kData.iHeart = iHeartChargeMax;
    console.log("===== navershopreward");
    var sends={}; sends.iHeart=kData.iHeart;//네이버저장하기
    networkManager.AppDataPut(JSON.stringify(sends));
}
function RandomMix(random, mixCnt)
{
    var temp, r1, r2;

    for(var i=0;i<mixCnt;++i)
    {
        r1 = Math.floor(Math.random() * random.length);
        r2 = Math.floor(Math.random() * random.length);

        temp = random[r1];
        random[r1] = random[r2];
        random[r2] = temp;
    }
}

var bubble_levels = [
	{ id:0, balls: [[0,9,7],[1,9,7],[2,9,7],[3,9,7],[4,9,7],[5,9,7],[6,9,7],[7,9,7],[8,9,7],[9,9,7],[10,9,7],[0,8,6],[1,8,6],[2,8,6],[3,8,6],[4,8,6],[5,8,6],[6,8,6],[7,8,6],[8,8,6],[9,8,6],[10,8,6],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,2],[1,6,2],[2,6,2],[3,6,2],[4,6,2],[5,6,2],[6,6,2],[7,6,2],[8,6,2],[9,6,2],[10,6,2],[0,5,1],[1,5,1],[2,5,1],[3,5,1],[4,5,1],[5,5,1],[6,5,1],[7,5,1],[8,5,1],[9,5,1],[10,5,1],[0,4,0],[1,4,0],[2,4,0],[3,4,0],[4,4,0],[5,4,0],[6,4,0],[7,4,0],[8,4,0],[9,4,0],[10,4,0]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:1, balls: [[0,14,0],[1,14,8],[2,14,8],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[8,14,8],[9,14,8],[10,14,8],[1,13,1],[2,13,2],[3,13,3],[4,13,4],[5,13,5],[6,13,6],[7,13,7],[8,13,0],[9,13,1],[10,13,2],[2,12,2],[3,12,3],[4,12,4],[5,12,5],[6,12,6],[7,12,7],[8,12,0],[9,12,1],[10,12,2],[3,11,3],[4,11,4],[5,11,5],[6,11,6],[7,11,7],[8,11,0],[9,11,1],[10,11,2],[4,10,4],[5,10,5],[6,10,6],[7,10,7],[8,10,0],[9,10,1],[10,10,2],[5,9,5],[6,9,6],[7,9,7],[8,9,0],[9,9,1],[10,9,2],[6,8,6],[7,8,7],[8,8,0],[9,8,1],[10,8,2],[7,7,7],[8,7,0],[9,7,1],[10,7,2],[8,6,0],[9,6,1],[10,6,2],[9,5,1],[10,5,2],[10,4,2]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:2, balls: [[0,12,8],[1,12,8],[2,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[8,12,5],[9,12,5],[10,12,5],[0,10,4],[1,10,4],[2,10,4],[3,10,4],[4,10,4],[5,10,4],[6,10,4],[7,10,4],[8,10,4],[9,10,4],[10,10,4],[0,8,3],[1,8,3],[2,8,3],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[10,8,8],[0,6,2],[1,6,2],[2,6,2],[3,6,2],[4,6,2],[5,6,2],[6,6,2],[7,6,2],[8,6,2],[9,6,2],[10,6,2]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:3, balls: [[2,15,2],[3,15,3],[4,15,4],[6,15,4],[7,15,3],[8,15,2],[2,14,1],[3,14,2],[4,14,3],[6,14,3],[7,14,2],[8,14,1],[2,13,0],[3,13,1],[4,13,2],[6,13,2],[7,13,1],[8,13,0],[2,12,8],[3,12,0],[4,12,1],[6,12,1],[7,12,0],[8,12,8],[2,11,7],[3,11,8],[4,11,0],[6,11,0],[7,11,8],[8,11,7],[2,10,6],[3,10,7],[4,10,8],[6,10,8],[7,10,7],[8,10,6],[2,9,5],[3,9,6],[4,9,7],[6,9,7],[7,9,6],[8,9,5],[2,8,4],[3,8,5],[4,8,6],[6,8,6],[7,8,5],[8,8,4],[2,7,3],[3,7,4],[4,7,5],[6,7,5],[7,7,4],[8,7,3],[2,6,2],[3,6,3],[4,6,4],[6,6,4],[7,6,3],[8,6,2],[2,5,8],[3,5,2],[4,5,3],[6,5,3],[7,5,2],[8,5,8],[2,4,1],[3,4,8],[4,4,2],[6,4,2],[7,4,8],[8,4,1]], mask_left: [[2,15],[3,15],[4,15],[2,14],[3,14],[4,14],[2,9],[3,9],[4,9],[2,8],[3,8],[4,8],[2,7],[3,7],[4,7]], mask_right: [[6,15],[7,15],[8,15],[6,14],[7,14],[8,14],[6,9],[7,9],[8,9],[6,8],[7,8],[8,8],[6,7],[7,7],[8,7]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:4, balls: [[1,14,4],[3,14,3],[5,14,6],[7,14,3],[9,14,4],[1,13,0],[3,13,0],[5,13,0],[7,13,0],[9,13,0],[1,12,4],[3,12,3],[5,12,6],[7,12,3],[9,12,4],[1,11,4],[3,11,3],[5,11,6],[7,11,3],[9,11,4],[1,10,4],[3,10,3],[5,10,6],[7,10,3],[9,10,4],[1,9,9],[2,9,0],[3,9,9],[4,9,0],[5,9,9],[6,9,0],[7,9,9],[8,9,0],[9,9,9],[1,8,4],[3,8,3],[5,8,6],[7,8,3],[9,8,4],[1,7,4],[3,7,3],[5,7,6],[7,7,3],[9,7,4],[1,6,4],[3,6,3],[5,6,6],[7,6,3],[9,6,4],[1,5,0],[3,5,0],[5,5,0],[7,5,0],[9,5,0],[1,4,4],[3,4,3],[5,4,6],[7,4,3],[9,4,4]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:5, balls: [[4,17,1],[5,17,0],[6,17,0],[3,16,2],[4,16,1],[5,16,1],[6,16,0],[7,16,0],[2,15,3],[3,15,2],[4,15,2],[5,15,1],[6,15,1],[7,15,0],[8,15,0],[2,14,3],[3,14,3],[4,14,2],[5,14,2],[6,14,1],[7,14,1],[8,14,0],[1,13,4],[2,13,4],[3,13,3],[4,13,3],[5,13,2],[6,13,2],[7,13,1],[8,13,1],[9,13,0],[1,12,5],[2,12,4],[3,12,4],[4,12,3],[5,12,3],[6,12,2],[7,12,2],[8,12,1],[9,12,1],[1,11,5],[2,11,5],[3,11,4],[4,11,4],[5,11,3],[6,11,3],[7,11,2],[8,11,2],[9,11,1],[1,10,6],[2,10,5],[3,10,5],[4,10,4],[5,10,4],[6,10,3],[7,10,3],[8,10,2],[9,10,2],[1,9,6],[2,9,6],[3,9,5],[4,9,5],[5,9,4],[6,9,4],[7,9,3],[8,9,3],[9,9,2],[1,8,7],[2,8,6],[3,8,6],[4,8,5],[5,8,5],[6,8,4],[7,8,4],[8,8,3],[9,8,3],[2,7,7],[3,7,6],[4,7,6],[5,7,5],[6,7,5],[7,7,4],[8,7,4],[2,6,7],[3,6,7],[4,6,6],[5,6,6],[6,6,5],[7,6,5],[8,6,4],[3,5,7],[4,5,7],[5,5,6],[6,5,6],[7,5,5],[4,4,7],[5,4,7],[6,4,6]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:6, balls: [[0,14,9],[2,14,0],[3,14,8],[7,14,8],[8,14,0],[10,14,9],[0,12,0],[4,12,0],[5,12,7],[6,12,0],[10,12,0],[2,11,0],[5,11,4],[8,11,0],[0,10,8],[5,10,1],[10,10,8],[2,9,0],[5,9,2],[8,9,0],[0,8,0],[4,8,0],[5,8,6],[6,8,0],[10,8,0],[0,6,9],[2,6,0],[3,6,8],[7,6,8],[8,6,0],[10,6,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:7, balls: [[1,15,9],[2,15,0],[3,15,9],[7,15,9],[8,15,0],[9,15,9],[1,14,9],[2,14,0],[3,14,9],[7,14,9],[8,14,0],[9,14,9],[4,12,7],[5,12,7],[6,12,7],[4,11,6],[5,11,6],[6,11,6],[4,10,5],[5,10,5],[6,10,5],[4,9,4],[5,9,4],[6,9,4],[4,8,2],[5,8,2],[6,8,2],[4,7,1],[5,7,1],[6,7,1],[1,5,9],[2,5,0],[3,5,9],[7,5,9],[8,5,0],[9,5,9],[1,4,9],[2,4,0],[3,4,9],[7,4,9],[8,4,0],[9,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:8, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,9],[9,16,9],[9,15,9],[9,14,9],[4,13,6],[9,13,9],[3,12,6],[4,12,2],[5,12,6],[9,12,9],[2,11,6],[3,11,2],[4,11,0],[5,11,2],[6,11,6],[9,11,9],[1,10,6],[2,10,2],[3,10,0],[4,10,3],[5,10,0],[6,10,2],[7,10,6],[9,10,9],[1,9,2],[2,9,0],[3,9,3],[4,9,8],[5,9,3],[6,9,0],[7,9,2],[9,9,9],[1,8,6],[2,8,2],[3,8,0],[4,8,3],[5,8,0],[6,8,2],[7,8,6],[9,8,9],[2,7,6],[3,7,2],[4,7,0],[5,7,2],[6,7,6],[9,7,9],[3,6,6],[4,6,2],[5,6,6],[9,6,9],[4,5,6],[9,5,9],[9,4,9],[9,0,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:9, balls: [[2,14,8],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[8,14,8],[1,13,8],[9,13,8],[1,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[9,12,8],[1,11,8],[3,11,8],[7,11,8],[9,11,8],[3,10,8],[5,10,8],[7,10,8],[1,9,8],[3,9,8],[5,9,8],[7,9,8],[9,9,8],[3,8,8],[5,8,8],[7,8,8],[1,7,8],[3,7,8],[7,7,8],[9,7,8],[1,6,8],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[9,6,8],[1,5,8],[9,5,8],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8]], mask_left: [[2,14],[3,14],[3,10],[2,4],[3,4]], mask_right: [[7,14],[8,14],[7,8],[7,4],[8,4]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:10, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,9],[3,16,9],[8,16,2],[9,16,9],[3,15,9],[9,15,9],[0,14,9],[1,14,6],[3,14,9],[5,14,3],[6,14,9],[9,14,9],[0,13,9],[3,13,9],[6,13,9],[9,13,9],[0,12,9],[3,12,9],[6,12,9],[9,12,9],[0,11,9],[3,11,9],[6,11,9],[7,11,1],[9,11,9],[0,10,9],[3,10,9],[6,10,9],[9,10,9],[0,9,9],[3,9,9],[6,9,9],[9,9,9],[0,8,9],[3,8,9],[6,8,9],[9,8,9],[0,7,9],[2,7,5],[3,7,9],[4,7,4],[6,7,9],[8,7,0],[9,7,9],[0,6,9],[6,6,9],[0,5,9],[6,5,9],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[10,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:11, balls: [[0,11,7],[1,11,7],[2,11,7],[4,11,0],[5,11,0],[6,11,0],[8,11,7],[9,11,7],[10,11,7],[0,10,6],[1,10,6],[2,10,6],[4,10,1],[5,10,1],[6,10,1],[8,10,6],[9,10,6],[10,10,6],[0,9,5],[1,9,5],[2,9,5],[4,9,2],[5,9,2],[6,9,2],[8,9,5],[9,9,5],[10,9,5],[0,8,4],[1,8,4],[2,8,4],[4,8,3],[5,8,3],[6,8,3],[8,8,4],[9,8,4],[10,8,4],[0,7,3],[1,7,3],[2,7,3],[4,7,4],[5,7,4],[6,7,4],[8,7,3],[9,7,3],[10,7,3],[0,6,2],[1,6,2],[2,6,2],[4,6,5],[5,6,5],[6,6,5],[8,6,2],[9,6,2],[10,6,2],[0,5,1],[1,5,1],[2,5,1],[4,5,6],[5,5,6],[6,5,6],[8,5,1],[9,5,1],[10,5,1],[0,4,0],[1,4,0],[2,4,0],[4,4,7],[5,4,7],[6,4,7],[8,4,0],[9,4,0],[10,4,0]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:12, balls: [[0,17,9],[10,17,9],[0,16,4],[1,16,4],[2,16,4],[3,16,4],[4,16,4],[5,16,4],[6,16,4],[7,16,4],[8,16,4],[9,16,4],[10,16,4],[0,15,9],[10,15,9],[0,14,4],[1,14,4],[2,14,4],[3,14,4],[4,14,4],[5,14,4],[6,14,4],[7,14,4],[8,14,4],[9,14,4],[10,14,4],[0,13,9],[10,13,9],[0,12,3],[1,12,8],[2,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[8,12,8],[9,12,8],[10,12,3],[0,11,9],[10,11,9],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,9],[10,9,9],[0,8,3],[1,8,8],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[10,8,3],[0,7,9],[10,7,9],[0,6,1],[1,6,1],[2,6,1],[3,6,1],[4,6,1],[5,6,1],[6,6,1],[7,6,1],[8,6,1],[9,6,1],[10,6,1],[0,5,9],[10,5,9],[0,4,1],[1,4,1],[2,4,1],[3,4,1],[4,4,1],[5,4,1],[6,4,1],[7,4,1],[8,4,1],[9,4,1],[10,4,1],[0,3,9],[10,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:13, balls: [[0,17,1],[1,17,1],[2,17,1],[3,17,1],[4,17,8],[5,17,0],[6,17,8],[7,17,1],[8,17,1],[9,17,1],[10,17,1],[0,16,1],[1,16,1],[2,16,1],[3,16,8],[4,16,4],[5,16,0],[6,16,3],[7,16,8],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,8],[3,15,4],[4,15,4],[5,15,0],[6,15,3],[7,15,3],[8,15,8],[9,15,1],[10,15,1],[0,14,1],[1,14,8],[2,14,4],[3,14,4],[4,14,4],[5,14,0],[6,14,3],[7,14,3],[8,14,3],[9,14,8],[10,14,1],[0,13,8],[1,13,4],[2,13,4],[3,13,4],[4,13,4],[5,13,0],[6,13,3],[7,13,3],[8,13,3],[9,13,3],[10,13,8],[0,12,0],[1,12,4],[2,12,4],[3,12,4],[4,12,4],[5,12,0],[6,12,3],[7,12,3],[8,12,3],[9,12,3],[10,12,0],[0,11,0],[1,11,4],[2,11,4],[3,11,4],[4,11,4],[5,11,0],[6,11,3],[7,11,3],[8,11,3],[9,11,3],[10,11,0],[0,10,0],[1,10,4],[2,10,4],[3,10,4],[4,10,4],[5,10,0],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,0],[0,9,0],[1,9,4],[2,9,4],[3,9,4],[4,9,9],[5,9,0],[6,9,9],[7,9,3],[8,9,3],[9,9,3],[10,9,0],[0,8,0],[1,8,4],[2,8,4],[3,8,9],[4,8,1],[5,8,1],[6,8,1],[7,8,9],[8,8,3],[9,8,3],[10,8,0],[0,7,0],[1,7,4],[2,7,9],[3,7,1],[4,7,1],[5,7,1],[6,7,1],[7,7,1],[8,7,9],[9,7,3],[10,7,0],[0,6,0],[1,6,9],[2,6,1],[3,6,1],[4,6,1],[5,6,1],[6,6,1],[7,6,1],[8,6,1],[9,6,9],[10,6,0]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:14, balls: [[0,17,7],[1,17,7],[9,17,7],[10,17,7],[2,16,7],[8,16,7],[0,15,6],[1,15,6],[3,15,7],[4,15,7],[6,15,7],[7,15,7],[9,15,6],[10,15,6],[2,14,6],[5,14,9],[8,14,6],[0,13,4],[1,13,4],[3,13,6],[4,13,6],[6,13,6],[7,13,6],[9,13,4],[10,13,4],[2,12,4],[5,12,9],[8,12,4],[0,11,3],[1,11,3],[3,11,4],[4,11,4],[6,11,4],[7,11,4],[9,11,3],[10,11,3],[2,10,3],[5,10,9],[8,10,3],[0,9,2],[1,9,2],[3,9,3],[4,9,3],[6,9,3],[7,9,3],[9,9,2],[10,9,2],[2,8,2],[5,8,9],[8,8,2],[0,7,1],[1,7,1],[3,7,2],[4,7,2],[6,7,2],[7,7,2],[9,7,1],[10,7,1],[2,6,1],[5,6,9],[8,6,1],[3,5,1],[4,5,1],[6,5,1],[7,5,1],[5,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:15, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,5,23,34,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:16, balls: [[6,17,9],[5,16,9],[6,16,9],[7,16,9],[5,15,9],[7,15,9],[5,14,8],[5,13,8],[5,12,8],[1,11,8],[3,11,8],[5,11,8],[7,11,8],[9,11,8],[1,10,1],[2,10,1],[3,10,0],[4,10,0],[5,10,0],[6,10,0],[7,10,0],[8,10,6],[9,10,6],[1,9,1],[2,9,1],[3,9,0],[4,9,0],[5,9,0],[6,9,0],[7,9,0],[8,9,6],[9,9,6],[1,8,1],[2,8,1],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,6],[9,8,6],[1,7,1],[2,7,1],[3,7,0],[4,7,0],[5,7,0],[6,7,0],[7,7,0],[8,7,6],[9,7,6],[2,6,1],[3,6,1],[4,6,0],[5,6,0],[6,6,0],[7,6,6],[8,6,6],[3,5,1],[4,5,1],[5,5,8],[6,5,6],[7,5,6],[5,4,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:17, balls: [[0,13,3],[2,13,9],[3,13,0],[4,13,0],[5,13,0],[6,13,0],[7,13,0],[8,13,9],[10,13,3],[0,12,3],[2,12,9],[3,12,9],[4,12,0],[5,12,0],[6,12,0],[7,12,9],[8,12,9],[10,12,3],[0,11,3],[2,11,9],[3,11,4],[4,11,9],[5,11,0],[6,11,9],[7,11,2],[8,11,9],[10,11,3],[0,10,3],[2,10,9],[3,10,4],[5,10,8],[7,10,2],[8,10,9],[10,10,3],[0,9,3],[2,9,9],[3,9,4],[5,9,5],[7,9,2],[8,9,9],[10,9,3],[0,8,3],[2,8,9],[3,8,4],[5,8,5],[7,8,2],[8,8,9],[10,8,3],[0,7,3],[2,7,9],[3,7,4],[5,7,5],[7,7,2],[8,7,9],[10,7,3],[0,6,3],[2,6,9],[3,6,4],[5,6,5],[7,6,2],[8,6,9],[10,6,3],[0,5,3],[2,5,9],[3,5,4],[5,5,5],[7,5,2],[8,5,9],[10,5,3],[0,4,3],[1,4,9],[2,4,9],[3,4,4],[4,4,4],[5,4,5],[6,4,2],[7,4,2],[8,4,9],[9,4,9],[10,4,3]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:18, balls: [[1,12,9],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[8,12,9],[9,12,9],[1,11,1],[2,11,4],[3,11,6],[4,11,7],[5,11,9],[6,11,7],[7,11,6],[8,11,4],[9,11,1],[1,10,1],[2,10,4],[3,10,6],[4,10,7],[5,10,9],[6,10,7],[7,10,6],[8,10,4],[9,10,1],[1,9,1],[2,9,4],[3,9,6],[4,9,7],[5,9,9],[6,9,7],[7,9,6],[8,9,4],[9,9,1],[1,8,1],[2,8,4],[3,8,6],[4,8,7],[5,8,3],[6,8,7],[7,8,6],[8,8,4],[9,8,1],[1,7,1],[2,7,4],[3,7,6],[4,7,7],[5,7,9],[6,7,7],[7,7,6],[8,7,4],[9,7,1],[1,6,1],[2,6,4],[3,6,6],[4,6,7],[5,6,9],[6,6,7],[7,6,6],[8,6,4],[9,6,1],[1,5,1],[2,5,4],[3,5,6],[4,5,7],[5,5,9],[6,5,7],[7,5,6],[8,5,4],[9,5,1],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:19, balls: [[0,17,0],[1,17,9],[2,17,8],[3,17,9],[4,17,8],[5,17,9],[6,17,8],[7,17,9],[8,17,8],[9,17,9],[10,17,0],[0,16,1],[1,16,9],[2,16,2],[3,16,9],[4,16,3],[5,16,9],[6,16,4],[7,16,9],[8,16,6],[9,16,9],[10,16,7],[1,14,9],[3,14,9],[5,14,9],[7,14,9],[9,14,9],[10,14,0],[1,13,9],[3,13,9],[5,13,9],[7,13,9],[8,13,0],[9,13,9],[1,12,9],[3,12,9],[5,12,9],[6,12,0],[7,12,9],[9,12,9],[1,11,9],[3,11,9],[4,11,0],[5,11,9],[7,11,9],[9,11,9],[1,10,9],[2,10,0],[3,10,9],[5,10,9],[7,10,9],[9,10,9],[0,9,0],[1,8,9],[3,8,9],[5,8,9],[7,8,9],[9,8,9],[1,7,9],[2,7,0],[3,7,9],[5,7,9],[7,7,9],[9,7,9],[1,6,9],[3,6,9],[4,6,0],[5,6,9],[7,6,9],[9,6,9],[3,5,9],[5,5,9],[6,5,0],[7,5,9],[5,4,9],[8,4,0],[10,3,0]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:20, balls: [[1,17,9],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,9],[1,16,9],[9,16,9],[1,15,9],[9,15,9],[1,14,9],[3,14,9],[4,14,5],[5,14,5],[6,14,5],[7,14,9],[9,14,9],[1,13,9],[3,13,9],[7,13,9],[9,13,9],[1,12,9],[3,12,9],[5,12,0],[7,12,9],[9,12,9],[1,11,9],[3,11,9],[5,11,2],[7,11,9],[9,11,9],[1,10,9],[3,10,9],[5,10,6],[7,10,9],[9,10,9],[1,9,9],[3,9,9],[5,9,7],[7,9,9],[9,9,9],[1,8,9],[3,8,9],[5,8,1],[7,8,9],[9,8,9],[1,7,9],[3,7,9],[7,7,9],[9,7,9],[1,6,9],[3,6,9],[4,6,9],[5,6,9],[6,6,9],[7,6,9],[9,6,9],[1,5,9],[9,5,9],[1,4,9],[2,4,3],[3,4,3],[4,4,3],[5,4,3],[6,4,3],[7,4,3],[8,4,3],[9,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:21, balls: [[0,13,7],[1,13,7],[2,13,7],[3,13,7],[4,13,7],[5,13,7],[6,13,7],[7,13,7],[8,13,7],[9,13,7],[10,13,7],[0,12,7],[1,12,7],[2,12,7],[3,12,7],[4,12,7],[5,12,7],[6,12,7],[7,12,7],[8,12,7],[9,12,7],[10,12,7],[0,10,0],[1,10,0],[2,10,9],[4,10,9],[5,10,0],[6,10,9],[8,10,9],[9,10,0],[10,10,0],[0,9,0],[1,9,0],[2,9,9],[4,9,9],[5,9,0],[6,9,9],[8,9,9],[9,9,0],[10,9,0],[0,8,0],[1,8,0],[2,8,9],[4,8,9],[5,8,0],[6,8,9],[8,8,9],[9,8,0],[10,8,0],[0,7,0],[1,7,0],[2,7,9],[4,7,9],[5,7,0],[6,7,9],[8,7,9],[9,7,0],[10,7,0],[0,5,4],[1,5,4],[2,5,4],[3,5,4],[4,5,4],[5,5,4],[6,5,4],[7,5,4],[8,5,4],[9,5,4],[10,5,4],[0,4,4],[1,4,4],[2,4,4],[3,4,4],[4,4,4],[5,4,4],[6,4,4],[7,4,4],[8,4,4],[9,4,4],[10,4,4]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:22, balls: [[1,16,8],[2,16,8],[3,16,8],[5,16,8],[6,16,8],[7,16,8],[9,16,8],[10,16,8],[1,15,8],[2,15,4],[3,15,8],[5,15,8],[6,15,4],[7,15,8],[9,15,8],[10,15,4],[1,14,8],[2,14,8],[3,14,8],[5,14,8],[6,14,8],[7,14,8],[9,14,8],[10,14,8],[0,12,8],[1,12,8],[2,12,8],[4,12,8],[5,12,8],[6,12,8],[8,12,8],[9,12,8],[10,12,8],[0,11,8],[1,11,3],[2,11,8],[4,11,8],[5,11,3],[6,11,8],[8,11,8],[9,11,3],[10,11,8],[0,10,8],[1,10,8],[2,10,8],[4,10,8],[5,10,8],[6,10,8],[8,10,8],[9,10,8],[10,10,8],[0,8,8],[1,8,8],[3,8,8],[4,8,8],[5,8,8],[7,8,8],[8,8,8],[9,8,8],[0,7,1],[1,7,8],[3,7,8],[4,7,1],[5,7,8],[7,7,8],[8,7,1],[9,7,8],[0,6,8],[1,6,8],[3,6,8],[4,6,8],[5,6,8],[7,6,8],[8,6,8],[9,6,8],[0,4,7],[1,4,7],[2,4,7],[3,4,7],[4,4,7],[5,4,7],[6,4,7],[7,4,7],[8,4,7],[9,4,7],[10,4,7]], mask_left: [[1,16],[2,16],[3,16],[1,15],[2,15],[3,15],[1,14],[2,14],[3,14]], mask_right: [[7,8],[8,8],[9,8],[7,7],[8,7],[9,7],[7,6],[8,6],[9,6]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:23, balls: [[0,16,4],[1,16,4],[2,16,4],[3,16,4],[4,16,4],[5,16,4],[6,16,4],[7,16,4],[8,16,4],[9,16,4],[10,16,4],[1,15,4],[2,15,4],[3,15,4],[4,15,4],[5,15,4],[6,15,4],[7,15,4],[8,15,4],[9,15,4],[1,14,4],[2,14,4],[3,14,4],[4,14,4],[5,14,4],[6,14,4],[7,14,4],[8,14,4],[9,14,4],[2,13,4],[3,13,4],[4,13,4],[5,13,4],[6,13,4],[7,13,4],[8,13,4],[2,12,4],[3,12,4],[4,12,4],[5,12,4],[6,12,4],[7,12,4],[8,12,4],[3,11,4],[4,11,4],[5,11,4],[6,11,4],[7,11,4],[3,10,0],[4,10,4],[5,10,0],[6,10,4],[7,10,0],[4,9,0],[5,9,0],[6,9,0],[4,8,0],[5,8,0],[6,8,0],[4,7,0],[5,7,0],[6,7,0],[5,6,0]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:24, balls: [[0,14,2],[1,14,2],[2,14,2],[3,14,2],[4,14,2],[5,14,2],[6,14,2],[7,14,2],[8,14,2],[9,14,2],[10,14,2],[0,13,9],[1,13,8],[2,13,8],[3,13,9],[4,13,9],[5,13,9],[6,13,9],[7,13,9],[8,13,8],[9,13,8],[10,13,9],[0,12,9],[3,12,9],[4,12,1],[5,12,1],[6,12,1],[7,12,9],[10,12,9],[0,11,9],[3,11,9],[4,11,1],[5,11,1],[6,11,1],[7,11,9],[10,11,9],[0,10,9],[10,10,9],[0,9,9],[10,9,9],[0,8,9],[1,8,6],[2,8,6],[3,8,9],[7,8,9],[8,8,4],[9,8,4],[10,8,9],[0,7,9],[1,7,6],[2,7,6],[3,7,9],[7,7,9],[8,7,4],[9,7,4],[10,7,9],[0,6,9],[1,6,9],[2,6,9],[3,6,9],[4,6,8],[5,6,8],[6,6,8],[7,6,9],[8,6,9],[9,6,9],[10,6,9],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,3],[1,4,3],[2,4,3],[3,4,3],[4,4,3],[5,4,3],[6,4,3],[7,4,3],[8,4,3],[9,4,3],[10,4,3]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:25, balls: [[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[2,10,9],[8,10,9],[1,9,9],[4,9,6],[5,9,6],[6,9,6],[9,9,9],[1,8,9],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[9,8,9],[1,7,9],[3,7,1],[4,7,1],[5,7,1],[6,7,1],[7,7,1],[9,7,9],[1,6,9],[4,6,2],[5,6,2],[6,6,2],[9,6,9],[2,5,9],[8,5,9],[3,4,9],[4,4,8],[5,4,8],[6,4,8],[7,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:26, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,6],[1,16,6],[2,16,6],[3,16,6],[4,16,6],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[0,15,9],[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,9],[6,15,8],[7,15,8],[8,15,8],[9,15,8],[10,15,8],[0,13,8],[1,13,8],[2,13,8],[3,13,8],[4,13,8],[5,13,9],[6,13,9],[7,13,9],[8,13,9],[9,13,9],[10,13,9],[0,12,9],[1,12,9],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,1],[7,12,1],[8,12,1],[9,12,1],[10,12,1],[0,11,8],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,9],[6,11,9],[7,11,9],[8,11,9],[9,11,9],[10,11,9]], mask_left: [[0,17],[1,17],[2,17],[3,17],[4,17],[5,17],[6,17],[7,17],[8,17],[9,17],[10,17],[0,15],[1,15],[2,15],[3,15],[4,15],[5,15],[6,15],[7,15],[8,15],[9,15],[10,15],[0,12],[1,12],[2,12],[3,12],[4,12],[5,12],[6,12],[7,12],[8,12],[9,12],[10,12]], mask_right: [[0,16],[1,16],[2,16],[3,16],[4,16],[5,16],[6,16],[7,16],[8,16],[9,16],[10,16],[0,13],[1,13],[2,13],[3,13],[4,13],[5,13],[6,13],[7,13],[8,13],[9,13],[10,13],[0,11],[1,11],[2,11],[3,11],[4,11],[5,11],[6,11],[7,11],[8,11],[9,11],[10,11]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:27, balls: [[5,14,1],[4,13,1],[5,13,0],[6,13,1],[3,12,1],[4,12,9],[5,12,0],[6,12,9],[7,12,1],[2,11,1],[3,11,9],[4,11,0],[5,11,0],[6,11,0],[7,11,9],[8,11,1],[1,10,1],[2,10,9],[3,10,0],[4,10,0],[5,10,0],[6,10,0],[7,10,0],[8,10,9],[9,10,1],[0,9,1],[1,9,9],[2,9,0],[3,9,0],[4,9,0],[6,9,0],[7,9,0],[8,9,0],[9,9,9],[10,9,1],[0,8,9],[1,8,0],[2,8,0],[3,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,9],[0,7,9],[1,7,0],[2,7,0],[8,7,0],[9,7,0],[10,7,9],[0,6,9],[1,6,0],[9,6,0],[10,6,9],[0,5,9],[10,5,9],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,0],[5,4,9],[6,4,0],[7,4,9],[8,4,9],[9,4,9],[10,4,9],[0,3,1],[1,3,1],[2,3,1],[3,3,1],[4,3,1],[5,3,1],[6,3,1],[7,3,1],[8,3,1],[9,3,1],[10,3,1]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:28, balls: [[0,13,7],[1,13,7],[2,13,7],[3,13,7],[4,13,9],[6,13,9],[7,13,0],[8,13,0],[9,13,0],[10,13,0],[0,12,6],[1,12,6],[2,12,6],[3,12,6],[4,12,9],[6,12,9],[7,12,1],[8,12,1],[9,12,1],[10,12,1],[0,11,5],[1,11,5],[2,11,5],[3,11,5],[4,11,9],[6,11,9],[7,11,2],[8,11,2],[9,11,2],[10,11,2],[0,10,9],[1,10,8],[2,10,9],[3,10,9],[4,10,9],[6,10,9],[7,10,9],[8,10,9],[9,10,8],[10,10,9],[0,9,4],[1,9,4],[2,9,4],[3,9,4],[4,9,9],[6,9,9],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,3],[1,8,3],[2,8,3],[3,8,3],[4,8,9],[6,8,9],[7,8,4],[8,8,4],[9,8,4],[10,8,4],[0,7,2],[1,7,2],[2,7,2],[3,7,2],[4,7,9],[6,7,9],[7,7,5],[8,7,5],[9,7,5],[10,7,5],[0,6,8],[1,6,8],[2,6,8],[3,6,8],[4,6,9],[6,6,9],[7,6,8],[8,6,8],[9,6,8],[10,6,8],[0,5,1],[1,5,1],[2,5,1],[3,5,1],[4,5,9],[6,5,9],[7,5,6],[8,5,6],[9,5,6],[10,5,6],[0,4,0],[1,4,0],[2,4,0],[3,4,0],[4,4,9],[6,4,9],[7,4,7],[8,4,7],[9,4,7],[10,4,7]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:29, balls: [[0,15,8],[1,15,9],[0,14,1],[1,14,2],[2,14,8],[3,14,9],[0,13,1],[1,13,2],[2,13,3],[3,13,4],[4,13,8],[5,13,9],[0,12,1],[1,12,2],[2,12,3],[3,12,4],[4,12,6],[5,12,7],[6,12,8],[7,12,9],[0,11,1],[1,11,2],[2,11,3],[3,11,4],[4,11,6],[5,11,7],[6,11,6],[7,11,4],[8,11,8],[9,11,9],[0,10,1],[1,10,2],[2,10,3],[3,10,4],[4,10,6],[5,10,7],[6,10,6],[7,10,4],[8,10,3],[9,10,2],[10,10,8],[1,9,2],[2,9,3],[3,9,4],[4,9,6],[5,9,7],[6,9,6],[7,9,4],[8,9,3],[9,9,2],[10,9,1],[3,8,4],[4,8,6],[5,8,7],[6,8,6],[7,8,4],[8,8,3],[9,8,2],[10,8,1],[5,7,7],[6,7,6],[7,7,4],[8,7,3],[9,7,2],[10,7,1],[7,6,4],[8,6,3],[9,6,2],[10,6,1],[9,5,2],[10,5,1]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:30, balls: [[0,17,8],[2,17,8],[4,17,8],[6,17,8],[8,17,8],[10,17,8],[0,16,0],[2,16,1],[4,16,2],[6,16,3],[8,16,4],[10,16,5],[1,15,8],[3,15,8],[5,15,8],[7,15,8],[9,15,8],[1,14,1],[3,14,2],[5,14,3],[7,14,4],[9,14,5],[0,13,8],[2,13,8],[4,13,8],[6,13,8],[8,13,8],[10,13,8],[0,12,1],[2,12,2],[4,12,3],[6,12,4],[8,12,5],[10,12,6],[1,11,8],[3,11,8],[5,11,8],[7,11,8],[9,11,8],[1,10,2],[3,10,3],[5,10,4],[7,10,5],[9,10,6],[0,9,8],[2,9,8],[4,9,8],[6,9,8],[8,9,8],[10,9,8],[0,8,2],[2,8,3],[4,8,4],[6,8,5],[8,8,6],[10,8,7],[1,7,8],[3,7,8],[5,7,8],[7,7,8],[9,7,8],[1,6,3],[3,6,4],[5,6,5],[7,6,6],[9,6,7],[0,5,8],[2,5,8],[4,5,8],[6,5,8],[8,5,8],[10,5,8],[0,4,3],[2,4,4],[4,4,5],[6,4,6],[8,4,7],[10,4,0]], mask_left: [[1,15],[3,15],[1,14],[3,14],[1,11],[3,11],[1,10],[3,10],[1,7],[3,7],[1,6],[3,6]], mask_right: [[7,15],[9,15],[7,14],[9,14],[7,11],[9,11],[7,10],[9,10],[7,7],[9,7],[7,6],[9,6]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:31, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,9,27,32,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:32, balls: [[1,15,7],[2,15,7],[3,15,7],[4,15,7],[5,15,7],[6,15,7],[7,15,7],[8,15,7],[9,15,7],[1,14,9],[3,14,9],[5,14,9],[7,14,9],[9,14,9],[1,13,9],[3,13,9],[5,13,9],[7,13,9],[9,13,9],[1,12,1],[2,12,1],[3,12,9],[5,12,9],[7,12,9],[9,12,9],[1,11,9],[3,11,9],[5,11,9],[7,11,9],[9,11,9],[1,10,2],[2,10,2],[3,10,2],[4,10,2],[5,10,9],[7,10,9],[9,10,9],[1,9,9],[3,9,9],[5,9,9],[7,9,9],[9,9,9],[1,8,4],[2,8,4],[3,8,4],[4,8,4],[5,8,4],[6,8,4],[7,8,9],[9,8,9],[1,7,9],[3,7,9],[5,7,9],[7,7,9],[9,7,9],[1,6,6],[2,6,6],[3,6,6],[4,6,6],[5,6,6],[6,6,6],[7,6,6],[8,6,6],[9,6,9],[1,5,9],[3,5,9],[5,5,9],[7,5,9],[9,5,9],[1,4,9],[3,4,9],[5,4,9],[7,4,9],[9,4,9],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:33, balls: [[0,11,8],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[10,11,8],[0,10,0],[1,10,0],[2,10,0],[3,10,0],[4,10,0],[5,10,8],[6,10,0],[7,10,0],[8,10,0],[9,10,0],[10,10,0],[0,9,0],[1,9,0],[2,9,6],[3,9,0],[4,9,0],[5,9,8],[6,9,0],[7,9,1],[8,9,0],[9,9,1],[10,9,0],[0,8,0],[1,8,6],[2,8,0],[3,8,6],[4,8,0],[5,8,8],[6,8,0],[7,8,1],[8,8,0],[9,8,1],[10,8,0],[0,7,0],[1,7,6],[2,7,0],[3,7,6],[4,7,0],[5,7,8],[6,7,0],[7,7,0],[8,7,1],[9,7,0],[10,7,0],[0,6,0],[1,6,6],[2,6,0],[3,6,6],[4,6,0],[5,6,8],[6,6,0],[7,6,1],[8,6,0],[9,6,1],[10,6,0],[0,5,0],[1,5,0],[2,5,6],[3,5,0],[4,5,0],[5,5,8],[6,5,0],[7,5,1],[8,5,0],[9,5,1],[10,5,0],[0,4,0],[1,4,0],[2,4,0],[3,4,0],[4,4,0],[5,4,8],[6,4,0],[7,4,0],[8,4,0],[9,4,0],[10,4,0],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:34, balls: [[0,16,9],[1,16,9],[2,16,3],[3,16,3],[4,16,4],[5,16,4],[6,16,5],[7,16,5],[8,16,6],[9,16,9],[10,16,9],[0,15,9],[1,15,9],[2,15,2],[3,15,3],[4,15,3],[5,15,4],[6,15,4],[7,15,5],[8,15,5],[9,15,9],[10,15,9],[0,14,9],[1,14,9],[2,14,2],[3,14,2],[4,14,3],[5,14,3],[6,14,4],[7,14,4],[8,14,5],[9,14,9],[10,14,9],[0,13,9],[1,13,9],[2,13,1],[3,13,2],[4,13,2],[5,13,3],[6,13,3],[7,13,4],[8,13,4],[9,13,9],[10,13,9],[0,12,8],[1,12,8],[2,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[8,12,8],[9,12,8],[10,12,8],[0,11,0],[4,11,0],[5,11,8],[6,11,0],[10,11,0],[0,10,7],[4,10,7],[5,10,8],[6,10,7],[10,10,7],[0,9,6],[4,9,6],[5,9,8],[6,9,6],[10,9,6],[0,8,5],[4,8,5],[5,8,8],[6,8,5],[10,8,5],[0,7,4],[4,7,4],[5,7,8],[6,7,4],[10,7,4],[0,6,3],[4,6,3],[5,6,8],[6,6,3],[10,6,3],[0,5,2],[4,5,2],[5,5,8],[6,5,2],[10,5,2],[0,4,1],[4,4,1],[5,4,8],[6,4,1],[10,4,1],[0,3,0],[4,3,0],[5,3,8],[6,3,0],[10,3,0],[0,2,8],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,8],[10,2,8]], mask_left: [[0,16],[1,16],[2,16],[3,16],[0,15],[1,15],[2,15],[3,15],[4,15],[0,14],[1,14],[2,14],[3,14],[4,14],[5,14],[0,13],[1,13],[2,13],[3,13],[4,13],[5,13],[6,13]], mask_right: [[4,16],[5,16],[6,16],[7,16],[8,16],[9,16],[10,16],[5,15],[6,15],[7,15],[8,15],[9,15],[10,15],[6,14],[7,14],[8,14],[9,14],[10,14],[7,13],[8,13],[9,13],[10,13]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:35, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[5,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,2],[1,16,3],[2,16,5],[8,16,5],[9,16,3],[10,16,2],[0,15,2],[1,15,3],[2,15,5],[8,15,5],[9,15,3],[10,15,2],[0,14,2],[1,14,3],[2,14,5],[8,14,5],[9,14,3],[10,14,2],[0,13,2],[1,13,3],[2,13,5],[8,13,5],[9,13,3],[10,13,2],[0,12,2],[1,12,3],[2,12,5],[8,12,5],[9,12,3],[10,12,2],[0,11,2],[1,11,3],[2,11,5],[3,11,9],[7,11,9],[8,11,5],[9,11,3],[10,11,2],[0,10,1],[1,10,2],[2,10,3],[3,10,5],[7,10,5],[8,10,3],[9,10,2],[10,10,1],[0,9,1],[1,9,2],[2,9,3],[3,9,5],[4,9,5],[5,9,5],[6,9,5],[7,9,5],[8,9,3],[9,9,2],[10,9,1],[0,8,1],[1,8,2],[2,8,2],[3,8,3],[4,8,5],[5,8,5],[6,8,5],[7,8,3],[8,8,2],[9,8,2],[10,8,1],[0,7,1],[1,7,1],[2,7,2],[3,7,2],[4,7,3],[5,7,3],[6,7,3],[7,7,2],[8,7,2],[9,7,1],[10,7,1],[1,6,1],[2,6,1],[3,6,2],[4,6,2],[5,6,2],[6,6,2],[7,6,2],[8,6,1],[9,6,1],[1,5,1],[2,5,1],[3,5,2],[4,5,2],[5,5,2],[6,5,2],[7,5,2],[8,5,1],[9,5,1],[2,4,1],[3,4,1],[4,4,1],[5,4,1],[6,4,1],[7,4,1],[8,4,1],[3,3,1],[4,3,1],[5,3,1],[6,3,1],[7,3,1]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:36, balls: [[0,15,0],[1,15,1],[2,15,1],[3,15,2],[4,15,2],[5,15,9],[6,15,2],[7,15,2],[8,15,1],[9,15,1],[10,15,0],[0,14,0],[1,14,1],[2,14,1],[3,14,2],[4,14,2],[5,14,9],[6,14,2],[7,14,2],[8,14,1],[9,14,1],[10,14,0],[0,13,1],[1,13,2],[2,13,2],[3,13,3],[4,13,3],[5,13,9],[6,13,3],[7,13,3],[8,13,2],[9,13,2],[10,13,1],[0,12,1],[1,12,2],[2,12,2],[3,12,3],[4,12,3],[5,12,9],[6,12,3],[7,12,3],[8,12,2],[9,12,2],[10,12,1],[0,11,2],[1,11,3],[2,11,3],[3,11,4],[4,11,4],[5,11,9],[6,11,4],[7,11,4],[8,11,3],[9,11,3],[10,11,2],[0,10,2],[1,10,3],[2,10,3],[3,10,4],[4,10,4],[5,10,9],[6,10,4],[7,10,4],[8,10,3],[9,10,3],[10,10,2],[0,9,3],[1,9,4],[2,9,4],[3,9,5],[4,9,5],[5,9,9],[6,9,5],[7,9,5],[8,9,4],[9,9,4],[10,9,3],[0,8,3],[1,8,4],[2,8,4],[3,8,5],[4,8,5],[5,8,9],[6,8,5],[7,8,5],[8,8,4],[9,8,4],[10,8,3],[0,7,4],[1,7,5],[2,7,5],[3,7,6],[4,7,6],[5,7,9],[6,7,6],[7,7,6],[8,7,5],[9,7,5],[10,7,4],[0,6,4],[1,6,5],[2,6,5],[3,6,6],[4,6,6],[5,6,9],[6,6,6],[7,6,6],[8,6,5],[9,6,5],[10,6,4],[0,5,5],[1,5,6],[2,5,6],[3,5,7],[4,5,7],[5,5,9],[6,5,7],[7,5,7],[8,5,6],[9,5,6],[10,5,5],[0,4,5],[1,4,6],[2,4,6],[3,4,7],[4,4,7],[5,4,9],[6,4,7],[7,4,7],[8,4,6],[9,4,6],[10,4,5],[0,3,6],[1,3,7],[2,3,7],[3,3,0],[4,3,0],[5,3,9],[6,3,0],[7,3,0],[8,3,7],[9,3,7],[10,3,6],[0,2,6],[1,2,7],[2,2,7],[3,2,0],[4,2,0],[5,2,9],[6,2,0],[7,2,0],[8,2,7],[9,2,7],[10,2,6]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:37, balls: [[1,14,9],[5,14,9],[9,14,9],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[3,11,1],[4,11,1],[5,11,1],[6,11,1],[7,11,1],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[3,9,4],[4,9,4],[5,9,4],[6,9,4],[7,9,4],[3,8,6],[4,8,6],[5,8,6],[6,8,6],[7,8,6],[3,7,7],[4,7,7],[5,7,7],[6,7,7],[7,7,7],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8]], mask_left: [[3,11],[4,11],[5,11],[6,11],[7,11],[3,8],[4,8],[5,8],[6,8],[7,8]], mask_right: [[3,10],[4,10],[5,10],[6,10],[7,10],[3,7],[4,7],[5,7],[6,7],[7,7]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:38, balls: [[3,15,9],[4,15,9],[5,15,9],[6,15,9],[7,15,9],[3,14,1],[4,14,1],[5,14,1],[6,14,1],[7,14,1],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[8,12,9],[2,11,2],[3,11,2],[4,11,2],[5,11,2],[6,11,2],[7,11,2],[8,11,2],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[1,8,3],[2,8,3],[3,8,3],[4,8,3],[5,8,3],[6,8,3],[7,8,3],[8,8,3],[9,8,3],[2,6,9],[3,6,9],[4,6,9],[5,6,9],[6,6,9],[7,6,9],[8,6,9],[2,5,4],[3,5,4],[4,5,4],[5,5,4],[6,5,4],[7,5,4],[8,5,4],[3,3,9],[4,3,9],[5,3,9],[6,3,9],[7,3,9],[3,2,5],[4,2,5],[5,2,5],[6,2,5],[7,2,5]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:39, balls: [[6,15,9],[7,15,6],[8,15,9],[6,14,9],[7,14,6],[8,14,9],[2,13,8],[3,13,8],[4,13,8],[5,13,8],[6,13,9],[7,13,6],[8,13,9],[9,13,8],[10,13,8],[2,12,8],[3,12,1],[4,12,1],[5,12,1],[6,12,9],[7,12,6],[8,12,9],[9,12,1],[10,12,1],[2,11,8],[3,11,1],[4,11,1],[5,11,1],[6,11,9],[7,11,6],[8,11,9],[9,11,1],[10,11,1],[2,10,8],[3,10,1],[4,10,8],[5,10,8],[6,10,9],[7,10,6],[8,10,9],[9,10,8],[10,10,8],[2,9,8],[3,9,1],[4,9,8],[6,9,9],[7,9,6],[8,9,9],[2,8,8],[3,8,1],[4,8,8],[6,8,9],[7,8,6],[8,8,9],[0,7,9],[1,7,9],[2,7,8],[3,7,1],[4,7,8],[5,7,9],[6,7,9],[7,7,6],[8,7,9],[0,6,6],[1,6,6],[2,6,8],[3,6,1],[4,6,8],[5,6,6],[6,6,6],[7,6,6],[8,6,9],[0,5,6],[1,5,6],[2,5,8],[3,5,1],[4,5,8],[5,5,6],[6,5,6],[7,5,6],[8,5,9],[0,4,9],[1,4,9],[2,4,8],[3,4,1],[4,4,8],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[2,3,8],[3,3,1],[4,3,8],[2,2,8],[3,2,1],[4,2,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:40, balls: [[4,17,4],[5,17,4],[6,17,4],[4,16,4],[5,16,4],[6,16,4],[2,15,4],[3,15,4],[4,15,4],[5,15,4],[6,15,4],[7,15,4],[8,15,4],[0,14,4],[1,14,4],[2,14,4],[3,14,1],[4,14,4],[5,14,1],[6,14,4],[7,14,1],[8,14,4],[9,14,4],[10,14,4],[0,13,4],[1,13,1],[2,13,4],[3,13,1],[4,13,4],[5,13,1],[6,13,4],[7,13,1],[8,13,4],[9,13,1],[10,13,4],[0,12,4],[1,12,1],[2,12,1],[3,12,1],[4,12,1],[5,12,1],[6,12,1],[7,12,1],[8,12,1],[9,12,1],[10,12,4],[0,11,4],[1,11,4],[2,11,1],[3,11,4],[4,11,1],[5,11,4],[6,11,1],[7,11,4],[8,11,1],[9,11,4],[10,11,4],[0,10,4],[1,10,4],[2,10,1],[3,10,4],[4,10,1],[5,10,4],[6,10,1],[7,10,4],[8,10,1],[9,10,4],[10,10,4],[1,9,4],[2,9,4],[3,9,4],[4,9,4],[5,9,4],[6,9,4],[7,9,4],[8,9,4],[9,9,4],[1,8,4],[2,8,4],[3,8,4],[4,8,4],[5,8,4],[6,8,4],[7,8,4],[8,8,4],[9,8,4],[1,7,9],[2,7,0],[3,7,0],[4,7,0],[5,7,9],[6,7,0],[7,7,0],[8,7,0],[9,7,9],[1,6,9],[2,6,0],[3,6,6],[4,6,0],[5,6,9],[6,6,0],[7,6,6],[8,6,0],[9,6,9],[1,5,9],[2,5,0],[3,5,6],[4,5,0],[5,5,9],[6,5,0],[7,5,6],[8,5,0],[9,5,9],[1,4,9],[2,4,0],[3,4,0],[4,4,0],[5,4,9],[6,4,0],[7,4,0],[8,4,0],[9,4,9],[2,3,9],[3,3,9],[4,3,9],[6,3,9],[7,3,9],[8,3,9]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:41, balls: [[2,17,9],[3,17,9],[7,17,9],[8,17,9],[4,16,9],[5,16,7],[6,16,9],[4,15,2],[5,15,2],[6,15,2],[3,14,7],[4,14,7],[5,14,7],[6,14,7],[7,14,7],[1,13,9],[2,13,9],[3,13,9],[4,13,2],[5,13,2],[6,13,2],[7,13,9],[8,13,9],[9,13,9],[3,12,7],[4,12,7],[5,12,7],[6,12,7],[7,12,7],[3,11,2],[4,11,2],[5,11,2],[6,11,2],[7,11,2],[1,10,9],[2,10,9],[3,10,9],[4,10,7],[5,10,7],[6,10,7],[7,10,9],[8,10,9],[9,10,9],[0,9,9],[3,9,2],[4,9,2],[5,9,2],[6,9,2],[7,9,2],[10,9,9],[3,8,7],[4,8,7],[5,8,7],[6,8,7],[7,8,7],[1,7,9],[2,7,9],[3,7,9],[4,7,2],[5,7,2],[6,7,2],[7,7,9],[8,7,9],[9,7,9],[0,6,9],[3,6,3],[4,6,3],[5,6,7],[6,6,3],[7,6,3],[10,6,9],[3,5,3],[4,5,3],[5,5,3],[6,5,3],[7,5,3],[4,4,3],[5,4,3],[6,4,3],[4,3,9],[6,3,9],[2,2,9],[3,2,9],[7,2,9],[8,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:42, balls: [[5,17,9],[5,16,9],[3,15,9],[5,15,9],[7,15,9],[3,14,9],[5,14,9],[7,14,9],[1,13,9],[3,13,9],[5,13,9],[7,13,9],[9,13,9],[1,12,9],[3,12,9],[5,12,9],[7,12,9],[9,12,9],[1,11,9],[3,11,9],[5,11,9],[7,11,9],[9,11,9],[1,10,9],[3,10,9],[5,10,9],[7,10,9],[9,10,9],[1,9,9],[3,9,9],[5,9,9],[7,9,9],[9,9,9],[1,8,9],[3,8,9],[4,8,4],[5,8,9],[6,8,6],[7,8,9],[9,8,9],[1,7,9],[3,7,9],[4,7,4],[5,7,9],[6,7,6],[7,7,9],[9,7,9],[1,6,9],[2,6,1],[3,6,9],[4,6,4],[5,6,9],[6,6,6],[7,6,9],[8,6,2],[9,6,9],[1,5,9],[2,5,1],[3,5,9],[4,5,9],[5,5,7],[6,5,9],[7,5,9],[8,5,2],[9,5,9],[1,4,9],[2,4,1],[3,4,9],[4,4,7],[5,4,7],[6,4,7],[7,4,9],[8,4,2],[9,4,9],[1,3,9],[2,3,9],[8,3,9],[9,3,9],[1,2,9],[9,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:43, balls: [[1,13,4],[2,13,4],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[8,13,4],[9,13,4],[0,12,3],[1,12,0],[2,12,0],[3,12,6],[4,12,6],[5,12,6],[6,12,6],[7,12,6],[8,12,0],[9,12,0],[10,12,3],[0,11,5],[1,11,5],[2,11,5],[3,11,5],[4,11,5],[5,11,5],[6,11,5],[7,11,5],[8,11,5],[9,11,5],[10,11,5],[0,10,3],[1,10,0],[2,10,0],[3,10,5],[4,10,5],[5,10,5],[6,10,5],[7,10,5],[8,10,0],[9,10,0],[10,10,3],[0,9,1],[1,9,4],[2,9,4],[3,9,6],[4,9,6],[5,9,6],[6,9,6],[7,9,6],[8,9,4],[9,9,4],[10,9,1],[0,8,1],[1,8,2],[2,8,2],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,2],[9,8,2],[10,8,1],[0,7,1],[1,7,2],[2,7,2],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,2],[9,7,2],[10,7,1],[1,6,2],[2,6,2],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[8,6,2],[9,6,2]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:44, balls: [[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[4,15,9],[5,15,6],[6,15,9],[5,14,6],[0,13,8],[1,13,8],[2,13,8],[3,13,8],[4,13,9],[5,13,6],[6,13,9],[7,13,8],[8,13,8],[9,13,8],[10,13,8],[1,12,6],[2,12,6],[3,12,6],[4,12,6],[5,12,6],[6,12,6],[7,12,6],[8,12,6],[9,12,6],[4,11,9],[5,11,6],[6,11,9],[2,10,8],[3,10,8],[4,10,6],[5,10,6],[6,10,6],[7,10,8],[8,10,8],[3,9,6],[4,9,9],[5,9,6],[6,9,9],[7,9,6],[4,8,6],[5,8,6],[6,8,6],[5,7,6],[5,6,6],[5,5,6],[5,4,6],[5,3,8],[5,2,6],[5,1,8],[5,0,6]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:45, balls: [[4,17,9],[6,17,9],[1,16,9],[4,16,4],[6,16,6],[9,16,9],[1,15,4],[9,15,6],[3,14,4],[7,14,6],[2,13,4],[3,13,4],[4,13,4],[5,13,0],[6,13,6],[7,13,6],[8,13,6],[0,12,9],[2,12,4],[3,12,4],[4,12,4],[5,12,0],[6,12,6],[7,12,6],[8,12,6],[10,12,9],[0,11,4],[3,11,4],[4,11,4],[6,11,6],[7,11,6],[10,11,6],[3,10,0],[7,10,0],[3,9,0],[7,9,0],[3,8,1],[4,8,1],[6,8,3],[7,8,3],[0,7,9],[2,7,1],[3,7,1],[4,7,1],[5,7,0],[6,7,3],[7,7,3],[8,7,3],[10,7,9],[0,6,1],[2,6,1],[3,6,1],[4,6,1],[5,6,0],[6,6,3],[7,6,3],[8,6,3],[10,6,3],[3,5,1],[7,5,3],[1,4,9],[9,4,9],[1,3,1],[4,3,9],[6,3,9],[9,3,3],[4,2,1],[6,2,3]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:46, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,9],[5,16,1],[9,16,9],[1,15,9],[2,15,6],[8,15,4],[9,15,9],[1,14,9],[4,14,7],[6,14,0],[9,14,9],[1,13,9],[4,13,9],[6,13,9],[9,13,9],[1,12,9],[4,12,9],[6,12,9],[9,12,9],[1,11,9],[4,11,9],[5,11,2],[6,11,9],[9,11,9],[1,10,9],[4,10,9],[5,10,7],[6,10,9],[9,10,9],[1,9,9],[4,9,9],[6,9,9],[9,9,9],[1,8,9],[4,8,9],[6,8,9],[9,8,9],[1,7,9],[4,7,0],[6,7,2],[9,7,9],[1,6,9],[2,6,4],[8,6,6],[9,6,9],[1,5,3],[5,5,1],[9,5,3],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[10,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:47, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,14,32,31,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:48, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,9],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,4],[1,16,4],[2,16,0],[3,16,0],[4,16,0],[5,16,0],[6,16,0],[7,16,0],[8,16,0],[9,16,4],[10,16,4],[1,15,4],[2,15,4],[3,15,0],[4,15,0],[5,15,0],[6,15,0],[7,15,0],[8,15,4],[9,15,4],[2,14,4],[3,14,4],[4,14,0],[5,14,0],[6,14,0],[7,14,4],[8,14,4],[3,13,4],[4,13,4],[5,13,0],[6,13,4],[7,13,4],[0,12,3],[4,12,4],[5,12,4],[6,12,4],[10,12,3],[0,11,3],[1,11,3],[5,11,4],[9,11,3],[10,11,3],[0,10,0],[1,10,3],[2,10,3],[8,10,3],[9,10,3],[10,10,0],[0,9,0],[1,9,0],[2,9,3],[3,9,3],[5,9,8],[7,9,3],[8,9,3],[9,9,0],[10,9,0],[0,8,0],[1,8,3],[2,8,3],[8,8,3],[9,8,3],[10,8,0],[0,7,3],[1,7,3],[5,7,4],[9,7,3],[10,7,3],[0,6,3],[4,6,4],[5,6,4],[6,6,4],[10,6,3],[3,5,4],[4,5,4],[5,5,0],[6,5,4],[7,5,4],[2,4,4],[3,4,4],[4,4,0],[5,4,0],[6,4,0],[7,4,4],[8,4,4],[1,3,4],[2,3,4],[3,3,0],[4,3,0],[5,3,0],[6,3,0],[7,3,0],[8,3,4],[9,3,4],[0,2,4],[1,2,4],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,4],[10,2,4]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:49, balls: [[2,16,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[2,15,9],[3,15,0],[4,15,0],[5,15,0],[6,15,0],[7,15,0],[8,15,9],[2,14,9],[3,14,6],[4,14,6],[5,14,6],[6,14,6],[7,14,6],[8,14,9],[2,13,9],[3,13,9],[4,13,6],[5,13,6],[6,13,6],[7,13,9],[8,13,9],[3,12,9],[5,12,5],[7,12,9],[5,11,5],[5,10,5],[5,9,5],[4,8,9],[5,8,5],[6,8,9],[3,7,9],[4,7,7],[6,7,7],[7,7,9],[2,6,9],[3,6,7],[4,6,1],[6,6,1],[7,6,7],[8,6,9],[1,5,9],[2,5,7],[3,5,1],[4,5,2],[6,5,2],[7,5,1],[8,5,7],[9,5,9],[0,4,9],[1,4,7],[2,4,1],[3,4,3],[4,4,3],[6,4,3],[7,4,3],[8,4,1],[9,4,7],[10,4,9],[0,3,7],[1,3,1],[2,3,4],[3,3,4],[4,3,4],[6,3,4],[7,3,4],[8,3,4],[9,3,1],[10,3,7]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:50, balls: [[0,17,9],[1,17,9],[2,17,9],[0,16,9],[1,16,9],[2,16,9],[0,15,9],[1,15,9],[2,15,9],[5,15,8],[6,15,8],[7,15,8],[0,14,9],[1,14,9],[4,14,8],[5,14,0],[7,14,0],[8,14,8],[3,13,8],[4,13,0],[5,13,0],[6,13,0],[7,13,0],[8,13,0],[9,13,8],[3,12,8],[5,12,0],[7,12,0],[9,12,8],[3,11,8],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,8],[3,10,8],[5,10,0],[7,10,0],[9,10,8],[3,9,8],[4,9,0],[5,9,0],[6,9,0],[7,9,0],[8,9,0],[9,9,8],[4,8,8],[5,8,0],[7,8,0],[8,8,8],[5,7,8],[6,7,8],[7,7,8],[6,6,8],[6,5,8],[6,4,8],[6,3,9],[6,2,9],[6,1,9],[6,0,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:51, balls: [[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[4,15,9],[6,15,9],[3,14,8],[5,14,8],[7,14,8],[3,13,8],[5,13,8],[7,13,8],[2,12,8],[4,12,1],[5,12,0],[6,12,4],[8,12,8],[2,11,8],[3,11,1],[4,11,1],[5,11,0],[6,11,4],[7,11,4],[8,11,8],[2,10,3],[3,10,1],[4,10,0],[5,10,0],[6,10,0],[7,10,4],[8,10,5],[2,9,3],[3,9,1],[4,9,0],[5,9,0],[6,9,0],[7,9,4],[8,9,5],[1,8,3],[2,8,1],[3,8,1],[4,8,0],[5,8,0],[6,8,0],[7,8,4],[8,8,4],[9,8,5],[1,7,3],[2,7,1],[3,7,1],[4,7,0],[5,7,0],[6,7,0],[7,7,4],[8,7,4],[9,7,5],[1,6,3],[2,6,1],[3,6,1],[4,6,0],[5,6,0],[6,6,0],[7,6,4],[8,6,4],[9,6,5],[1,5,3],[2,5,1],[3,5,1],[4,5,0],[5,5,0],[6,5,0],[7,5,4],[8,5,4],[9,5,5],[2,4,3],[3,4,1],[4,4,0],[5,4,0],[6,4,0],[7,4,4],[8,4,5],[2,3,3],[3,3,1],[4,3,0],[5,3,0],[6,3,0],[7,3,4],[8,3,5],[3,2,1],[4,2,1],[5,2,0],[6,2,4],[7,2,4],[4,1,1],[5,1,0],[6,1,4]], mask_left: [[3,17],[4,17],[5,17],[6,17],[7,17]], mask_right: [[3,16],[4,16],[5,16],[6,16],[7,16]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:52, balls: [[0,15,8],[1,15,8],[2,15,8],[4,15,8],[5,15,8],[6,15,8],[8,15,8],[9,15,8],[10,15,8],[0,14,8],[1,14,4],[2,14,8],[4,14,8],[5,14,1],[6,14,8],[8,14,8],[9,14,4],[10,14,8],[0,13,8],[1,13,4],[2,13,8],[4,13,8],[5,13,1],[6,13,8],[8,13,8],[9,13,4],[10,13,8],[0,12,8],[1,12,8],[2,12,8],[4,12,8],[5,12,8],[6,12,8],[8,12,8],[9,12,8],[10,12,8],[3,11,9],[7,11,9],[0,10,8],[1,10,8],[2,10,8],[4,10,9],[5,10,9],[6,10,9],[8,10,8],[9,10,8],[10,10,8],[0,9,8],[1,9,6],[2,9,8],[4,9,8],[5,9,7],[6,9,8],[8,9,8],[9,9,6],[10,9,8],[0,8,8],[1,8,6],[2,8,8],[4,8,8],[5,8,7],[6,8,8],[8,8,8],[9,8,6],[10,8,8],[0,7,8],[1,7,8],[2,7,8],[4,7,9],[5,7,9],[6,7,9],[8,7,8],[9,7,8],[10,7,8],[3,6,9],[7,6,9],[0,5,9],[1,5,8],[2,5,9],[4,5,8],[5,5,8],[6,5,8],[8,5,9],[9,5,8],[10,5,9],[0,4,9],[1,4,3],[2,4,9],[4,4,8],[5,4,1],[6,4,8],[8,4,9],[9,4,3],[10,4,9],[0,3,9],[1,3,3],[2,3,9],[4,3,8],[5,3,1],[6,3,8],[8,3,9],[9,3,3],[10,3,9],[0,2,9],[1,2,8],[2,2,9],[4,2,8],[5,2,8],[6,2,8],[8,2,9],[9,2,8],[10,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:53, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,8],[1,16,8],[2,16,8],[3,16,8],[4,16,9],[6,16,9],[7,16,8],[8,16,8],[9,16,8],[10,16,8],[0,15,8],[2,15,3],[3,15,8],[4,15,9],[5,15,8],[6,15,9],[7,15,8],[8,15,7],[10,15,8],[0,14,8],[1,14,8],[3,14,8],[4,14,9],[6,14,9],[7,14,8],[9,14,8],[10,14,8],[0,13,8],[2,13,2],[3,13,8],[4,13,9],[5,13,8],[6,13,9],[7,13,8],[8,13,6],[10,13,8],[0,12,8],[1,12,8],[5,12,9],[9,12,8],[10,12,8],[0,11,8],[2,11,1],[3,11,8],[4,11,9],[5,11,8],[6,11,9],[7,11,8],[8,11,5],[10,11,8],[0,10,8],[1,10,8],[3,10,8],[4,10,9],[6,10,9],[7,10,8],[9,10,8],[10,10,8],[0,9,8],[2,9,7],[3,9,8],[4,9,9],[5,9,8],[6,9,9],[7,9,8],[8,9,3],[10,9,8],[0,8,8],[1,8,8],[2,8,8],[3,8,8],[4,8,9],[6,8,9],[7,8,8],[8,8,8],[9,8,8],[10,8,8],[0,7,8],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,8],[10,7,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:54, balls: [[4,15,9],[5,15,8],[6,15,9],[3,14,9],[4,14,3],[6,14,4],[7,14,9],[2,13,9],[3,13,2],[4,13,3],[6,13,4],[7,13,5],[8,13,9],[1,12,9],[2,12,1],[3,12,2],[4,12,3],[6,12,4],[7,12,5],[8,12,6],[9,12,9],[1,11,0],[2,11,1],[3,11,2],[4,11,3],[6,11,4],[7,11,5],[8,11,6],[9,11,7],[1,10,0],[2,10,1],[3,10,2],[4,10,3],[6,10,4],[7,10,5],[8,10,6],[9,10,7],[1,9,0],[2,9,1],[3,9,2],[4,9,3],[6,9,4],[7,9,5],[8,9,6],[9,9,7],[1,8,0],[2,8,1],[3,8,2],[4,8,3],[6,8,4],[7,8,5],[8,8,6],[9,8,7],[1,7,0],[2,7,1],[3,7,2],[4,7,3],[5,7,8],[6,7,4],[7,7,5],[8,7,6],[9,7,7],[1,6,0],[2,6,1],[3,6,2],[4,6,9],[6,6,9],[7,6,5],[8,6,6],[9,6,7],[1,5,0],[2,5,1],[3,5,9],[7,5,9],[8,5,6],[9,5,7],[1,4,0],[2,4,9],[8,4,9],[9,4,7],[1,3,9],[9,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:55, balls: [[0,15,1],[1,15,9],[2,15,9],[3,15,2],[5,15,6],[7,15,3],[8,15,9],[9,15,9],[10,15,4],[0,14,1],[1,14,9],[3,14,2],[5,14,6],[7,14,3],[9,14,9],[10,14,4],[0,13,1],[1,13,9],[3,13,2],[5,13,6],[7,13,3],[9,13,9],[10,13,4],[0,12,1],[1,12,9],[3,12,2],[5,12,6],[7,12,3],[9,12,9],[10,12,4],[0,11,1],[1,11,9],[3,11,2],[4,11,9],[5,11,9],[6,11,9],[7,11,3],[9,11,9],[10,11,4],[0,10,1],[1,10,9],[2,10,8],[3,10,9],[4,10,0],[5,10,0],[6,10,0],[7,10,9],[8,10,8],[9,10,9],[10,10,4],[0,9,1],[1,9,9],[2,9,0],[3,9,0],[4,9,0],[5,9,0],[6,9,0],[7,9,0],[8,9,0],[9,9,9],[10,9,4],[0,8,1],[1,8,9],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,9],[10,8,4],[0,7,1],[1,7,9],[2,7,0],[3,7,0],[4,7,0],[5,7,0],[6,7,0],[7,7,0],[8,7,0],[9,7,9],[10,7,4],[0,6,1],[1,6,9],[2,6,0],[3,6,0],[4,6,0],[5,6,0],[6,6,0],[7,6,0],[8,6,0],[9,6,9],[10,6,4],[2,5,9],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,9],[3,4,9],[4,4,8],[5,4,8],[6,4,8],[7,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:56, balls: [[5,16,8],[4,15,8],[5,15,1],[6,15,8],[3,14,8],[4,14,1],[5,14,1],[6,14,1],[7,14,8],[2,13,8],[3,13,1],[4,13,1],[5,13,1],[6,13,1],[7,13,1],[8,13,8],[1,12,8],[2,12,1],[3,12,1],[4,12,1],[5,12,1],[6,12,1],[7,12,1],[8,12,1],[9,12,8],[1,11,8],[2,11,1],[3,11,1],[4,11,1],[5,11,1],[6,11,1],[7,11,1],[8,11,1],[9,11,8],[0,10,8],[1,10,1],[2,10,1],[3,10,1],[4,10,1],[5,10,1],[6,10,1],[7,10,1],[8,10,1],[9,10,1],[10,10,8],[0,9,8],[1,9,1],[2,9,1],[3,9,1],[4,9,1],[5,9,1],[6,9,1],[7,9,1],[8,9,1],[9,9,1],[10,9,8],[0,8,8],[1,8,1],[2,8,1],[3,8,1],[4,8,1],[5,8,1],[6,8,1],[7,8,1],[8,8,1],[9,8,1],[10,8,8],[0,7,8],[1,7,1],[2,7,1],[3,7,1],[4,7,1],[5,7,1],[6,7,1],[7,7,1],[8,7,1],[9,7,1],[10,7,8],[1,6,8],[2,6,1],[3,6,1],[4,6,1],[5,6,1],[6,6,1],[7,6,1],[8,6,1],[9,6,8],[1,5,8],[2,5,1],[3,5,1],[4,5,1],[5,5,8],[6,5,1],[7,5,1],[8,5,1],[9,5,8],[2,4,8],[3,4,1],[4,4,8],[6,4,8],[7,4,1],[8,4,8],[3,3,8],[7,3,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:57, balls: [[0,15,8],[1,15,8],[2,15,8],[4,15,8],[5,15,8],[6,15,8],[8,15,8],[9,15,8],[10,15,8],[0,14,8],[1,14,1],[2,14,8],[4,14,8],[5,14,2],[6,14,8],[8,14,8],[9,14,3],[10,14,8],[0,13,8],[1,13,8],[2,13,8],[4,13,8],[5,13,8],[6,13,8],[8,13,8],[9,13,8],[10,13,8],[1,10,8],[2,10,8],[3,10,8],[4,10,8],[6,10,8],[7,10,8],[8,10,8],[9,10,8],[1,9,8],[2,9,4],[3,9,5],[4,9,8],[6,9,8],[7,9,6],[8,9,7],[9,9,8],[1,8,8],[2,8,8],[3,8,8],[4,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[0,5,8],[1,5,8],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,8],[10,5,8],[0,4,8],[1,4,0],[2,4,1],[3,4,2],[4,4,3],[5,4,4],[6,4,5],[7,4,6],[8,4,7],[9,4,0],[10,4,8],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
    { id:58, balls: [[0,16,8],[2,16,8],[4,16,8],[6,16,8],[8,16,8],[10,16,8],[0,15,9],[2,15,0],[4,15,0],[6,15,0],[8,15,0],[10,15,9],[0,14,8],[2,14,8],[4,14,8],[6,14,8],[8,14,8],[10,14,8],[0,13,9],[2,13,1],[4,13,1],[6,13,1],[8,13,1],[10,13,9],[0,12,8],[2,12,8],[4,12,8],[6,12,8],[8,12,8],[10,12,8],[0,11,9],[2,11,2],[4,11,2],[6,11,2],[8,11,2],[10,11,9],[0,10,8],[2,10,8],[4,10,8],[6,10,8],[8,10,8],[10,10,8],[0,9,9],[2,9,3],[4,9,3],[6,9,3],[8,9,3],[10,9,9],[0,8,8],[2,8,8],[4,8,8],[6,8,8],[8,8,8],[10,8,8],[0,7,9],[2,7,4],[4,7,4],[6,7,4],[8,7,4],[10,7,9],[0,6,8],[2,6,8],[4,6,8],[6,6,8],[8,6,8],[10,6,8],[0,5,9],[2,5,5],[4,5,5],[6,5,5],[8,5,5],[10,5,9],[0,4,8],[2,4,8],[4,4,8],[6,4,8],[8,4,8],[10,4,8],[0,3,9],[2,3,6],[4,3,6],[6,3,6],[8,3,6],[10,3,9],[0,2,8],[2,2,8],[4,2,8],[6,2,8],[8,2,8],[10,2,8],[0,1,9],[2,1,7],[4,1,7],[6,1,7],[8,1,7],[10,1,9],[0,0,8],[2,0,8],[4,0,8],[6,0,8],[8,0,8],[10,0,8]], mask_left: [[0,13],[2,13],[4,13],[6,13],[8,13],[10,13],[0,9],[2,9],[4,9],[6,9],[8,9],[10,9],[0,5],[2,5],[4,5],[6,5],[8,5],[10,5],[0,1],[2,1],[4,1],[6,1],[8,1],[10,1]], mask_right: [[0,15],[2,15],[4,15],[6,15],[8,15],[10,15],[0,11],[2,11],[4,11],[6,11],[8,11],[10,11],[0,7],[2,7],[4,7],[6,7],[8,7],[10,7],[0,3],[2,3],[4,3],[6,3],[8,3],[10,3]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:59, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[0,15,2],[1,15,2],[2,15,2],[3,15,2],[4,15,9],[6,15,9],[7,15,7],[8,15,7],[9,15,7],[10,15,7],[0,14,3],[1,14,3],[2,14,3],[3,14,3],[4,14,9],[6,14,9],[7,14,4],[8,14,4],[9,14,4],[10,14,4],[0,13,3],[1,13,1],[2,13,1],[3,13,1],[4,13,9],[6,13,9],[7,13,6],[8,13,6],[9,13,6],[10,13,4],[0,12,3],[1,12,1],[2,12,8],[3,12,8],[4,12,9],[6,12,9],[7,12,8],[8,12,8],[9,12,6],[10,12,4],[0,11,3],[1,11,1],[2,11,8],[8,11,8],[9,11,6],[10,11,4],[0,10,3],[1,10,1],[2,10,8],[8,10,8],[9,10,6],[10,10,4],[0,9,3],[1,9,1],[2,9,8],[8,9,8],[9,9,6],[10,9,4],[0,8,3],[1,8,1],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,6],[10,8,4],[0,7,3],[1,7,1],[2,7,1],[3,7,1],[4,7,1],[5,7,0],[6,7,6],[7,7,6],[8,7,6],[9,7,6],[10,7,4],[0,6,3],[1,6,3],[2,6,3],[3,6,3],[4,6,3],[5,6,0],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,2],[1,5,2],[2,5,2],[3,5,2],[4,5,2],[5,5,0],[6,5,7],[7,5,7],[8,5,7],[9,5,7],[10,5,7],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[10,4,9],[0,3,9],[1,3,9],[2,3,9],[3,3,9],[4,3,9],[6,3,9],[7,3,9],[8,3,9],[9,3,9],[10,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:60, balls: [[2,17,9],[5,17,9],[8,17,9],[0,16,8],[1,16,8],[3,16,8],[4,16,8],[6,16,8],[7,16,8],[9,16,8],[10,16,8],[0,15,0],[1,15,7],[2,15,9],[3,15,7],[4,15,0],[5,15,9],[6,15,0],[7,15,7],[8,15,9],[9,15,7],[10,15,0],[0,14,0],[1,14,6],[3,14,6],[4,14,0],[6,14,0],[7,14,6],[9,14,6],[10,14,0],[0,13,0],[1,13,5],[2,13,9],[3,13,5],[4,13,0],[5,13,9],[6,13,0],[7,13,5],[8,13,9],[9,13,5],[10,13,0],[0,12,0],[1,12,4],[3,12,4],[4,12,0],[6,12,0],[7,12,4],[9,12,4],[10,12,0],[0,11,0],[1,11,3],[2,11,9],[3,11,3],[4,11,0],[5,11,9],[6,11,0],[7,11,3],[8,11,9],[9,11,3],[10,11,0],[0,10,0],[1,10,2],[3,10,2],[4,10,0],[6,10,0],[7,10,2],[9,10,2],[10,10,0],[0,9,0],[1,9,1],[2,9,9],[3,9,1],[4,9,0],[5,9,9],[6,9,0],[7,9,1],[8,9,9],[9,9,1],[10,9,0],[0,8,8],[1,8,8],[3,8,8],[4,8,8],[6,8,8],[7,8,8],[9,8,8],[10,8,8],[2,7,9],[5,7,9],[8,7,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:61, balls: [[3,15,9],[4,15,8],[5,15,8],[6,15,8],[7,15,9],[1,14,9],[3,14,9],[4,14,5],[5,14,0],[6,14,5],[7,14,9],[9,14,9],[1,13,5],[2,13,9],[3,13,9],[4,13,0],[5,13,0],[6,13,0],[7,13,9],[8,13,9],[9,13,5],[1,12,5],[2,12,5],[3,12,0],[4,12,0],[5,12,0],[6,12,0],[7,12,0],[8,12,5],[9,12,5],[1,11,5],[2,11,5],[3,11,5],[4,11,5],[5,11,5],[6,11,5],[7,11,5],[8,11,5],[9,11,5],[1,10,5],[2,10,0],[3,10,0],[4,10,0],[5,10,0],[6,10,0],[7,10,0],[8,10,0],[9,10,5],[1,9,5],[2,9,5],[3,9,5],[4,9,5],[5,9,5],[6,9,5],[7,9,5],[8,9,5],[9,9,5],[1,8,5],[2,8,9],[3,8,9],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,5],[1,7,9],[9,7,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:62, balls: [[1,15,8],[2,15,4],[3,15,4],[4,15,4],[5,15,4],[6,15,4],[7,15,4],[8,15,4],[9,15,4],[1,14,8],[2,14,5],[3,14,5],[4,14,5],[5,14,5],[6,14,5],[7,14,5],[8,14,5],[9,14,5],[1,13,8],[2,13,4],[3,13,4],[4,13,8],[5,13,8],[6,13,8],[7,13,4],[8,13,4],[9,13,4],[1,12,8],[2,12,5],[3,12,5],[4,12,8],[5,12,7],[6,12,8],[7,12,5],[8,12,5],[9,12,5],[1,11,8],[2,11,4],[3,11,4],[4,11,8],[5,11,8],[6,11,8],[7,11,4],[8,11,4],[9,11,4],[1,10,8],[2,10,5],[3,10,5],[4,10,8],[5,10,7],[6,10,8],[7,10,5],[8,10,5],[9,10,5],[1,9,8],[2,9,4],[3,9,4],[4,9,8],[5,9,8],[6,9,8],[7,9,4],[8,9,4],[9,9,4],[1,8,8],[2,8,5],[3,8,5],[4,8,5],[5,8,5],[6,8,5],[7,8,5],[8,8,5],[9,8,5],[10,8,3],[1,7,3],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,3],[1,6,8],[2,6,3],[3,6,5],[4,6,5],[5,6,5],[6,6,5],[7,6,5],[8,6,3],[1,5,8],[3,5,3],[4,5,5],[5,5,5],[6,5,5],[7,5,3],[1,4,8],[4,4,3],[5,4,5],[6,4,3],[5,3,3]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:63, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,18,36,29,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:64, balls: [[1,15,9],[2,15,9],[3,15,9],[4,15,9],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[1,14,9],[5,14,9],[9,14,9],[1,13,9],[5,13,9],[9,13,9],[1,12,9],[5,12,9],[9,12,9],[0,11,8],[1,11,9],[5,11,9],[9,11,9],[10,11,8],[1,10,9],[5,10,9],[9,10,9],[1,9,9],[5,9,9],[9,9,9],[1,8,9],[5,8,9],[9,8,9],[1,7,9],[2,7,9],[3,7,9],[4,7,9],[6,7,9],[7,7,9],[8,7,9],[9,7,9],[1,5,2],[2,5,2],[4,5,4],[5,5,4],[6,5,4],[8,5,6],[9,5,6],[1,4,1],[2,4,1],[4,4,3],[5,4,3],[6,4,3],[8,4,5],[9,4,5],[1,3,1],[2,3,1],[4,3,3],[5,3,3],[6,3,3],[8,3,5],[9,3,5],[1,2,0],[2,2,0],[4,2,0],[5,2,0],[6,2,0],[8,2,0],[9,2,0]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:65, balls: [[0,17,9],[3,17,9],[4,17,1],[5,17,1],[6,17,1],[7,17,9],[10,17,9],[0,16,9],[3,16,9],[4,16,1],[5,16,1],[6,16,1],[7,16,9],[10,16,9],[0,15,9],[3,15,9],[4,15,1],[5,15,1],[6,15,1],[7,15,9],[10,15,9],[0,14,9],[3,14,9],[4,14,2],[5,14,2],[6,14,2],[7,14,9],[10,14,9],[0,13,9],[3,13,9],[4,13,2],[5,13,2],[6,13,2],[7,13,9],[10,13,9],[0,12,9],[3,12,9],[4,12,2],[5,12,2],[6,12,2],[7,12,9],[10,12,9],[0,11,9],[3,11,9],[4,11,3],[5,11,3],[6,11,3],[7,11,9],[10,11,9],[0,10,9],[3,10,9],[4,10,3],[5,10,3],[6,10,3],[7,10,9],[10,10,9],[0,9,9],[3,9,9],[4,9,3],[5,9,3],[6,9,3],[7,9,9],[10,9,9],[0,8,9],[3,8,9],[4,8,4],[5,8,4],[6,8,4],[7,8,9],[10,8,9],[0,7,9],[3,7,9],[4,7,4],[5,7,4],[6,7,4],[7,7,9],[10,7,9],[0,6,9],[3,6,9],[4,6,4],[5,6,4],[6,6,4],[7,6,9],[10,6,9],[0,5,9],[3,5,9],[4,5,5],[5,5,5],[6,5,5],[7,5,9],[10,5,9],[0,4,9],[3,4,9],[4,4,5],[5,4,5],[6,4,5],[7,4,9],[10,4,9],[0,3,9],[3,3,9],[4,3,5],[5,3,5],[6,3,5],[7,3,9],[10,3,9],[0,2,9],[1,2,7],[2,2,7],[3,2,9],[4,2,6],[5,2,6],[6,2,6],[7,2,9],[8,2,7],[9,2,7],[10,2,9],[0,1,9],[1,1,7],[2,1,7],[3,1,9],[4,1,6],[5,1,6],[6,1,6],[7,1,9],[8,1,7],[9,1,7],[10,1,9],[0,0,9],[1,0,7],[2,0,7],[3,0,9],[4,0,6],[5,0,6],[6,0,6],[7,0,9],[8,0,7],[9,0,7],[10,0,9]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:66, balls: [[0,17,8],[1,17,8],[2,17,8],[4,17,8],[5,17,8],[6,17,8],[8,17,8],[9,17,9],[10,17,9],[0,16,2],[1,16,9],[2,16,2],[4,16,1],[5,16,9],[6,16,1],[8,16,6],[9,16,9],[10,16,6],[0,15,9],[1,15,9],[2,15,8],[4,15,8],[5,15,8],[6,15,8],[8,15,8],[9,15,8],[10,15,8],[0,14,4],[1,14,9],[2,14,4],[4,14,0],[5,14,9],[6,14,0],[8,14,7],[9,14,9],[10,14,7],[0,13,8],[1,13,8],[2,13,8],[4,13,8],[5,13,8],[6,13,8],[8,13,8],[9,13,9],[10,13,9],[0,12,2],[1,12,9],[2,12,2],[4,12,1],[5,12,9],[6,12,1],[8,12,6],[9,12,9],[10,12,6],[0,11,9],[1,11,9],[2,11,8],[4,11,8],[5,11,8],[6,11,8],[8,11,8],[9,11,8],[10,11,8],[0,10,4],[1,10,9],[2,10,4],[4,10,0],[5,10,9],[6,10,0],[8,10,7],[9,10,9],[10,10,7],[0,9,8],[1,9,8],[2,9,8],[4,9,8],[5,9,8],[6,9,8],[8,9,8],[9,9,9],[10,9,9],[0,8,2],[1,8,9],[2,8,2],[4,8,1],[5,8,9],[6,8,1],[8,8,6],[9,8,9],[10,8,6],[0,7,9],[1,7,9],[2,7,8],[4,7,8],[5,7,8],[6,7,8],[8,7,8],[9,7,8],[10,7,8],[0,6,4],[1,6,9],[2,6,4],[4,6,0],[5,6,9],[6,6,0],[8,6,7],[9,6,9],[10,6,7],[0,5,8],[1,5,8],[2,5,8],[4,5,8],[5,5,8],[6,5,8],[8,5,8],[9,5,9],[10,5,9],[0,4,2],[1,4,9],[2,4,2],[4,4,1],[5,4,9],[6,4,1],[8,4,6],[9,4,9],[10,4,6],[0,3,9],[1,3,9],[2,3,8],[4,3,8],[5,3,8],[6,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [[0,15],[1,15],[2,15],[4,15],[5,15],[6,15],[8,15],[9,15],[10,15],[0,11],[1,11],[2,11],[4,11],[5,11],[6,11],[8,11],[9,11],[10,11],[0,7],[1,7],[2,7],[4,7],[5,7],[6,7],[8,7],[9,7],[10,7],[0,3],[1,3],[2,3],[4,3],[5,3],[6,3],[8,3],[9,3],[10,3]], mask_right: [[0,17],[1,17],[2,17],[4,17],[5,17],[6,17],[8,17],[9,17],[10,17],[0,13],[1,13],[2,13],[4,13],[5,13],[6,13],[8,13],[9,13],[10,13],[0,9],[1,9],[2,9],[4,9],[5,9],[6,9],[8,9],[9,9],[10,9],[0,5],[1,5],[2,5],[4,5],[5,5],[6,5],[8,5],[9,5],[10,5]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:67, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,14,8],[1,14,8],[2,14,8],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[8,14,8],[9,14,8],[10,14,8],[0,11,8],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[10,11,8],[1,9,6],[2,9,4],[3,9,2],[4,9,1],[5,9,9],[6,9,1],[7,9,2],[8,9,4],[9,9,6],[1,8,6],[2,8,4],[3,8,2],[4,8,1],[5,8,9],[6,8,1],[7,8,2],[8,8,4],[9,8,6],[1,7,6],[2,7,4],[3,7,2],[4,7,1],[5,7,9],[6,7,1],[7,7,2],[8,7,4],[9,7,6],[1,6,6],[2,6,4],[3,6,2],[4,6,1],[5,6,0],[6,6,1],[7,6,2],[8,6,4],[9,6,6],[1,5,6],[2,5,4],[3,5,2],[4,5,1],[5,5,9],[6,5,1],[7,5,2],[8,5,4],[9,5,6],[1,4,6],[2,4,4],[3,4,2],[4,4,1],[5,4,9],[6,4,1],[7,4,2],[8,4,4],[9,4,6],[1,3,6],[2,3,4],[3,3,2],[4,3,1],[5,3,9],[6,3,1],[7,3,2],[8,3,4],[9,3,6]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:68, balls: [[4,16,7],[5,16,9],[6,16,0],[4,15,7],[5,15,9],[6,15,0],[4,14,7],[5,14,9],[6,14,1],[4,13,6],[5,13,9],[6,13,1],[4,12,6],[5,12,9],[6,12,2],[4,11,5],[5,11,9],[6,11,2],[4,10,5],[5,10,9],[6,10,3],[4,9,4],[5,9,9],[6,9,3],[4,8,4],[5,8,9],[6,8,4],[4,7,3],[5,7,9],[6,7,4],[4,6,3],[5,6,9],[6,6,5],[4,5,2],[5,5,9],[6,5,5],[4,4,2],[5,4,9],[6,4,6],[4,3,1],[5,3,9],[6,3,6],[4,2,1],[5,2,9],[6,2,7],[4,1,0],[5,1,9],[6,1,7],[4,0,0],[5,0,9],[6,0,7]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:69, balls: [[5,15,1],[5,14,1],[4,13,1],[5,13,1],[6,13,1],[4,12,1],[5,12,1],[6,12,1],[3,11,1],[4,11,1],[5,11,3],[6,11,1],[7,11,1],[3,10,1],[4,10,1],[5,10,3],[6,10,1],[7,10,1],[2,9,1],[3,9,1],[4,9,3],[5,9,3],[6,9,3],[7,9,1],[8,9,1],[2,8,1],[3,8,1],[4,8,3],[5,8,3],[6,8,3],[7,8,1],[8,8,1],[1,7,1],[2,7,1],[3,7,3],[4,7,3],[5,7,3],[6,7,3],[7,7,3],[8,7,1],[9,7,1],[1,6,1],[2,6,1],[3,6,3],[4,6,3],[5,6,3],[6,6,3],[7,6,3],[8,6,1],[9,6,1],[0,5,1],[1,5,1],[2,5,3],[3,5,3],[4,5,3],[5,5,3],[6,5,3],[7,5,3],[8,5,3],[9,5,1],[10,5,1],[0,4,1],[1,4,1],[2,4,3],[3,4,3],[4,4,3],[5,4,3],[6,4,3],[7,4,3],[8,4,3],[9,4,1],[10,4,1],[0,3,1],[1,3,1],[2,3,1],[3,3,1],[4,3,1],[5,3,1],[6,3,1],[7,3,1],[8,3,1],[9,3,1],[10,3,1],[0,2,1],[1,2,1],[2,2,1],[3,2,1],[4,2,1],[5,2,1],[6,2,1],[7,2,1],[8,2,1],[9,2,1],[10,2,1]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:70, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[1,15,8],[2,15,0],[3,15,0],[4,15,0],[5,15,0],[6,15,0],[7,15,0],[8,15,0],[9,15,8],[1,14,8],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,8],[1,13,8],[2,13,0],[3,13,0],[4,13,0],[5,13,1],[6,13,0],[7,13,0],[8,13,0],[9,13,8],[1,12,8],[2,12,0],[3,12,0],[4,12,1],[5,12,1],[6,12,1],[7,12,0],[8,12,0],[9,12,8],[1,11,8],[2,11,0],[3,11,0],[4,11,1],[5,11,1],[6,11,1],[7,11,0],[8,11,0],[9,11,8],[1,10,8],[2,10,0],[3,10,8],[4,10,1],[5,10,0],[6,10,1],[7,10,8],[8,10,0],[9,10,8],[1,9,8],[2,9,8],[3,9,0],[4,9,0],[5,9,0],[6,9,0],[7,9,0],[8,9,8],[9,9,8],[1,8,8],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[0,7,9],[1,7,9],[2,7,9],[3,7,9],[4,7,9],[5,7,9],[6,7,9],[7,7,9],[8,7,9],[9,7,9],[10,7,9]], mask_left: [[0,17],[0,7]], mask_right: [[10,17],[10,7]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:71, balls: [[0,15,8],[1,15,8],[2,15,8],[8,15,8],[9,15,8],[10,15,8],[0,14,8],[1,14,1],[2,14,1],[8,14,6],[9,14,6],[10,14,8],[0,13,0],[1,13,8],[2,13,1],[4,13,8],[5,13,7],[6,13,8],[8,13,6],[9,13,8],[10,13,5],[0,12,0],[1,12,0],[2,12,8],[4,12,8],[5,12,6],[6,12,8],[8,12,8],[9,12,5],[10,12,5],[0,11,8],[1,11,8],[2,11,8],[4,11,8],[5,11,5],[6,11,8],[8,11,8],[9,11,8],[10,11,8],[4,10,8],[5,10,4],[6,10,8],[4,9,8],[5,9,3],[6,9,8],[0,8,8],[1,8,8],[2,8,8],[4,8,8],[5,8,2],[6,8,8],[8,8,8],[9,8,8],[10,8,8],[0,7,3],[1,7,3],[2,7,8],[4,7,8],[5,7,1],[6,7,8],[8,7,8],[9,7,7],[10,7,7],[0,6,3],[1,6,8],[2,6,2],[4,6,8],[5,6,0],[6,6,8],[8,6,4],[9,6,8],[10,6,7],[0,5,8],[1,5,2],[2,5,2],[8,5,4],[9,5,4],[10,5,8],[0,4,8],[1,4,8],[2,4,8],[8,4,8],[9,4,8],[10,4,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:72, balls: [[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,8],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[1,14,9],[2,14,4],[3,14,4],[4,14,8],[6,14,8],[7,14,3],[8,14,3],[9,14,9],[1,13,9],[2,13,4],[3,13,4],[4,13,8],[6,13,8],[7,13,3],[8,13,3],[9,13,9],[1,12,9],[2,12,4],[3,12,4],[4,12,8],[6,12,8],[7,12,3],[8,12,3],[9,12,9],[1,11,9],[2,11,8],[3,11,8],[4,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,9],[1,10,9],[9,10,9],[1,9,9],[2,9,8],[3,9,8],[4,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,9],[1,8,9],[2,8,1],[3,8,1],[4,8,8],[6,8,8],[7,8,6],[8,8,6],[9,8,9],[1,7,9],[2,7,1],[3,7,1],[4,7,8],[6,7,8],[7,7,6],[8,7,6],[9,7,9],[1,6,9],[2,6,1],[3,6,1],[4,6,8],[6,6,8],[7,6,6],[8,6,6],[9,6,9],[1,5,9],[2,5,9],[3,5,9],[4,5,9],[5,5,8],[6,5,9],[7,5,9],[8,5,9],[9,5,9]], mask_left: [[1,10]], mask_right: [[9,10]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:73, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,9],[9,16,9],[1,15,9],[9,15,9],[1,14,9],[9,14,9],[1,13,9],[5,13,6],[9,13,9],[1,12,9],[4,12,6],[5,12,4],[6,12,6],[9,12,9],[1,11,9],[3,11,6],[4,11,4],[5,11,6],[6,11,4],[7,11,6],[9,11,9],[2,10,6],[3,10,4],[4,10,6],[5,10,8],[6,10,6],[7,10,4],[8,10,6],[1,9,9],[3,9,6],[4,9,4],[5,9,6],[6,9,4],[7,9,6],[9,9,9],[1,8,9],[4,8,6],[5,8,4],[6,8,6],[9,8,9],[1,7,9],[5,7,6],[9,7,9],[1,6,9],[9,6,9],[1,5,9],[9,5,9],[1,4,9],[9,4,9],[1,3,9],[2,3,9],[3,3,9],[4,3,9],[5,3,9],[6,3,9],[7,3,9],[8,3,9],[9,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:74, balls: [[0,17,8],[1,17,9],[2,17,9],[3,17,8],[4,17,8],[5,17,9],[6,17,8],[7,17,8],[8,17,9],[9,17,9],[10,17,8],[0,16,6],[1,16,4],[2,16,1],[5,16,9],[8,16,2],[9,16,5],[10,16,7],[0,15,6],[1,15,4],[2,15,1],[5,15,9],[8,15,2],[9,15,5],[10,15,7],[0,14,6],[1,14,4],[2,14,1],[5,14,9],[8,14,2],[9,14,5],[10,14,7],[0,13,6],[1,13,4],[2,13,1],[5,13,9],[8,13,2],[9,13,5],[10,13,7],[0,12,6],[1,12,4],[2,12,1],[5,12,9],[8,12,2],[9,12,5],[10,12,7],[0,11,6],[1,11,4],[2,11,1],[5,11,9],[8,11,2],[9,11,5],[10,11,7],[0,10,9],[1,10,9],[2,10,9],[5,10,3],[8,10,9],[9,10,9],[10,10,9],[0,9,6],[1,9,4],[2,9,1],[5,9,9],[8,9,2],[9,9,5],[10,9,7],[0,8,6],[1,8,4],[2,8,1],[5,8,9],[8,8,2],[9,8,5],[10,8,7],[0,7,6],[1,7,4],[2,7,1],[5,7,9],[8,7,2],[9,7,5],[10,7,7],[0,6,6],[1,6,4],[2,6,1],[5,6,9],[8,6,2],[9,6,5],[10,6,7],[0,5,6],[1,5,4],[2,5,1],[5,5,9],[8,5,2],[9,5,5],[10,5,7],[0,4,6],[1,4,4],[2,4,1],[5,4,9],[8,4,2],[9,4,5],[10,4,7],[0,3,6],[1,3,4],[2,3,1],[5,3,9],[8,3,2],[9,3,5],[10,3,7]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:75, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,9],[9,16,9],[1,15,9],[3,15,4],[4,15,5],[5,15,6],[6,15,7],[7,15,0],[9,15,9],[1,14,9],[3,14,3],[4,14,4],[5,14,5],[6,14,6],[7,14,7],[9,14,9],[1,13,9],[3,13,2],[4,13,3],[5,13,4],[6,13,5],[7,13,6],[9,13,9],[1,12,9],[3,12,1],[4,12,2],[5,12,3],[6,12,4],[7,12,5],[9,12,9],[1,11,9],[3,11,0],[4,11,1],[5,11,2],[6,11,3],[7,11,4],[9,11,9],[1,10,9],[9,10,9],[1,9,9],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,9],[3,8,0],[4,8,0],[6,8,0],[7,8,0],[1,7,9],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,9],[1,6,9],[9,6,9],[1,5,9],[3,5,4],[4,5,5],[5,5,6],[6,5,7],[7,5,0],[9,5,9],[1,4,9],[3,4,3],[4,4,4],[5,4,5],[6,4,6],[7,4,7],[9,4,9],[1,3,9],[3,3,2],[4,3,3],[5,3,4],[6,3,5],[7,3,6],[9,3,9],[1,2,9],[3,2,1],[4,2,2],[5,2,3],[6,2,4],[7,2,5],[9,2,9],[1,1,9],[3,1,0],[4,1,1],[5,1,2],[6,1,3],[7,1,4],[9,1,9],[1,0,9],[9,0,9]], mask_left: [[3,8],[4,8]], mask_right: [[6,8],[7,8]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:76, balls: [[0,16,8],[1,16,8],[2,16,8],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[0,14,7],[1,14,7],[2,14,7],[3,14,7],[4,14,7],[5,14,8],[6,14,7],[7,14,7],[8,14,7],[9,14,7],[10,14,7],[0,12,9],[1,12,9],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[0,10,6],[1,10,6],[2,10,6],[3,10,6],[4,10,6],[5,10,8],[6,10,6],[7,10,6],[8,10,6],[9,10,6],[10,10,6],[3,8,9],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[10,8,9],[0,6,1],[1,6,1],[2,6,1],[3,6,1],[4,6,1],[5,6,8],[6,6,1],[7,6,1],[8,6,1],[9,6,1],[10,6,1],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[5,4,3],[7,4,9],[8,4,9],[9,4,9],[10,4,9],[0,2,4],[1,2,4],[2,2,4],[3,2,4],[4,2,4],[5,2,4],[6,2,4],[7,2,4],[8,2,4],[9,2,4],[10,2,4]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:77, balls: [[4,17,8],[5,17,3],[6,17,8],[3,16,3],[4,16,2],[5,16,2],[6,16,2],[7,16,3],[2,15,8],[3,15,2],[4,15,2],[5,15,2],[6,15,2],[7,15,2],[8,15,8],[2,14,3],[3,14,2],[4,14,4],[5,14,4],[6,14,4],[7,14,2],[8,14,3],[1,13,8],[2,13,2],[3,13,2],[4,13,4],[5,13,4],[6,13,4],[7,13,2],[8,13,2],[9,13,8],[1,12,3],[2,12,2],[3,12,4],[4,12,0],[5,12,0],[6,12,0],[7,12,4],[8,12,2],[9,12,3],[1,11,8],[2,11,2],[3,11,4],[4,11,0],[5,11,7],[6,11,0],[7,11,4],[8,11,2],[9,11,8],[1,10,3],[2,10,2],[3,10,4],[4,10,0],[5,10,0],[6,10,0],[7,10,4],[8,10,2],[9,10,3],[1,9,8],[2,9,2],[3,9,2],[4,9,4],[5,9,4],[6,9,4],[7,9,2],[8,9,2],[9,9,8],[2,8,3],[3,8,2],[4,8,4],[5,8,4],[6,8,4],[7,8,2],[8,8,3],[2,7,8],[3,7,2],[4,7,2],[5,7,2],[6,7,2],[7,7,2],[8,7,8],[3,6,3],[4,6,2],[5,6,2],[6,6,2],[7,6,3],[4,5,8],[5,5,3],[6,5,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:78, balls: [[3,17,1],[4,17,1],[5,17,1],[6,17,1],[7,17,1],[2,16,1],[3,16,0],[4,16,0],[5,16,0],[6,16,0],[7,16,0],[8,16,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[1,14,1],[9,14,1],[3,12,2],[4,12,9],[5,12,2],[6,12,9],[7,12,2],[3,11,2],[4,11,2],[5,11,2],[6,11,2],[7,11,2],[4,10,2],[5,10,2],[6,10,2],[4,9,2],[5,9,2],[6,9,2],[5,8,2],[1,7,8],[2,7,8],[3,7,8],[5,7,2],[7,7,8],[8,7,8],[9,7,8],[0,6,8],[1,6,5],[2,6,5],[3,6,5],[4,6,8],[6,6,8],[7,6,5],[8,6,5],[9,6,5],[10,6,8],[0,5,8],[1,5,5],[2,5,5],[3,5,5],[4,5,8],[6,5,8],[7,5,5],[8,5,5],[9,5,5],[10,5,8],[0,4,8],[1,4,0],[2,4,5],[3,4,0],[4,4,8],[5,4,8],[6,4,8],[7,4,0],[8,4,5],[9,4,0],[10,4,8],[0,3,8],[1,3,5],[2,3,0],[3,3,5],[4,3,8],[6,3,8],[7,3,5],[8,3,0],[9,3,5],[10,3,8],[0,2,8],[1,2,5],[2,2,5],[3,2,5],[4,2,8],[6,2,8],[7,2,5],[8,2,5],[9,2,5],[10,2,8],[1,1,8],[2,1,8],[3,1,8],[7,1,8],[8,1,8],[9,1,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:79, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,23,41,28,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:80, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,9],[9,16,9],[1,15,9],[9,15,9],[1,14,9],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[9,14,9],[1,13,9],[3,13,8],[7,13,8],[9,13,9],[1,12,9],[3,12,8],[5,12,9],[7,12,8],[9,12,9],[1,11,9],[3,11,8],[5,11,9],[7,11,8],[9,11,9],[1,10,9],[3,10,8],[5,10,0],[7,10,8],[9,10,9],[1,9,3],[3,9,8],[5,9,0],[7,9,8],[9,9,3],[1,8,9],[3,8,8],[5,8,9],[7,8,8],[9,8,9],[1,7,9],[3,7,8],[5,7,9],[7,7,8],[9,7,9],[1,6,9],[3,6,8],[7,6,8],[9,6,9],[1,5,9],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[9,5,9],[1,4,9],[9,4,9],[1,3,9],[9,3,9],[1,2,9],[2,2,9],[3,2,3],[4,2,9],[5,2,9],[6,2,9],[7,2,3],[8,2,9],[9,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:81, balls: [[1,15,8],[2,15,8],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[8,15,8],[9,15,8],[1,14,8],[9,14,8],[1,13,8],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[9,13,8],[1,12,8],[9,12,8],[1,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[9,11,8],[1,10,8],[9,10,8],[1,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[9,9,8],[1,8,8],[9,8,8],[1,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[9,7,8],[1,6,8],[9,6,8],[1,5,8],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,8]], mask_left: [[1,11],[3,11],[4,11],[5,11],[6,11],[7,11],[1,7],[3,7],[4,7],[5,7],[6,7],[7,7]], mask_right: [[3,13],[4,13],[5,13],[6,13],[7,13],[9,13],[3,9],[4,9],[5,9],[6,9],[7,9],[9,9]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:82, balls: [[0,17,9],[2,17,4],[4,17,0],[6,17,0],[8,17,4],[10,17,9],[1,16,9],[3,16,5],[5,16,7],[7,16,5],[9,16,9],[0,15,9],[2,15,4],[4,15,0],[6,15,0],[8,15,4],[10,15,9],[1,14,9],[3,14,5],[5,14,7],[7,14,5],[9,14,9],[0,13,9],[2,13,4],[4,13,0],[6,13,0],[8,13,4],[10,13,9],[1,12,9],[3,12,5],[5,12,7],[7,12,5],[9,12,9],[0,11,9],[2,11,4],[4,11,0],[6,11,0],[8,11,4],[10,11,9],[1,10,9],[3,10,5],[5,10,9],[7,10,5],[9,10,9],[0,9,9],[2,9,4],[4,9,8],[5,9,7],[6,9,8],[8,9,4],[10,9,9],[1,8,9],[3,8,5],[5,8,9],[7,8,5],[9,8,9],[0,7,9],[2,7,4],[4,7,0],[6,7,0],[8,7,4],[10,7,9],[1,6,9],[3,6,5],[5,6,7],[7,6,5],[9,6,9],[0,5,9],[2,5,4],[4,5,0],[6,5,0],[8,5,4],[10,5,9],[1,4,9],[3,4,5],[5,4,7],[7,4,5],[9,4,9],[0,3,9],[2,3,4],[4,3,0],[6,3,0],[8,3,4],[10,3,9],[1,2,9],[3,2,5],[5,2,7],[7,2,5],[9,2,9],[0,1,9],[2,1,4],[4,1,0],[6,1,0],[8,1,4],[10,1,9]], mask_left: [[0,17],[2,17],[4,17],[6,17],[8,17],[10,17],[0,15],[2,15],[4,15],[6,15],[8,15],[10,15],[0,13],[2,13],[4,13],[6,13],[8,13],[10,13],[0,11],[2,11],[4,11],[6,11],[8,11],[10,11],[0,7],[2,7],[4,7],[6,7],[8,7],[10,7],[0,5],[2,5],[4,5],[6,5],[8,5],[10,5],[0,3],[2,3],[4,3],[6,3],[8,3],[10,3],[0,1],[2,1],[4,1],[6,1],[8,1],[10,1]], mask_right: [[1,16],[3,16],[5,16],[7,16],[9,16],[1,14],[3,14],[5,14],[7,14],[9,14],[1,12],[3,12],[5,12],[7,12],[9,12],[1,6],[3,6],[5,6],[7,6],[9,6],[1,4],[3,4],[5,4],[7,4],[9,4],[1,2],[3,2],[5,2],[7,2],[9,2]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:83, balls: [[0,17,8],[1,17,8],[2,17,9],[3,17,9],[4,17,8],[5,17,8],[6,17,8],[7,17,9],[8,17,9],[9,17,8],[10,17,8],[0,16,0],[1,16,0],[2,16,0],[3,16,0],[4,16,0],[5,16,0],[6,16,0],[7,16,0],[8,16,0],[9,16,0],[10,16,0],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,2],[1,14,2],[2,14,2],[3,14,2],[4,14,2],[5,14,2],[6,14,2],[7,14,2],[8,14,2],[9,14,2],[10,14,2],[0,13,3],[1,13,3],[2,13,3],[3,13,3],[4,13,3],[5,13,3],[6,13,3],[7,13,3],[8,13,3],[9,13,3],[10,13,3],[0,12,4],[1,12,4],[2,12,4],[3,12,4],[4,12,4],[5,12,4],[6,12,4],[7,12,4],[8,12,4],[9,12,4],[10,12,4],[0,11,5],[1,11,5],[2,11,5],[3,11,5],[4,11,5],[5,11,5],[6,11,5],[7,11,5],[8,11,5],[9,11,5],[10,11,5],[0,10,6],[1,10,6],[2,10,6],[3,10,6],[4,10,6],[5,10,6],[6,10,6],[7,10,6],[8,10,6],[9,10,6],[10,10,6],[0,9,7],[1,9,7],[2,9,7],[3,9,7],[4,9,7],[5,9,7],[6,9,7],[7,9,7],[8,9,7],[9,9,7],[10,9,7],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,7],[1,7,7],[2,7,7],[3,7,7],[4,7,7],[5,7,7],[6,7,7],[7,7,7],[8,7,7],[9,7,7],[10,7,7],[0,6,6],[1,6,6],[2,6,6],[3,6,6],[4,6,6],[5,6,6],[6,6,6],[7,6,6],[8,6,6],[9,6,6],[10,6,6],[0,5,5],[1,5,5],[2,5,5],[3,5,5],[4,5,5],[5,5,5],[6,5,5],[7,5,5],[8,5,5],[9,5,5],[10,5,5],[0,4,4],[1,4,4],[2,4,4],[3,4,4],[4,4,4],[5,4,4],[6,4,4],[7,4,4],[8,4,4],[9,4,4],[10,4,4],[0,3,3],[1,3,3],[2,3,3],[3,3,3],[4,3,3],[5,3,3],[6,3,3],[7,3,3],[8,3,3],[9,3,3],[10,3,3],[0,2,2],[1,2,2],[2,2,2],[3,2,2],[4,2,2],[5,2,2],[6,2,2],[7,2,2],[8,2,2],[9,2,2],[10,2,2],[0,1,1],[1,1,1],[2,1,1],[3,1,1],[4,1,1],[5,1,1],[6,1,1],[7,1,1],[8,1,1],[9,1,1],[10,1,1],[0,0,0],[1,0,0],[2,0,0],[3,0,0],[4,0,0],[5,0,0],[6,0,0],[7,0,0],[8,0,0],[9,0,0],[10,0,0]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:84, balls: [[0,9,9],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,3],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[10,9,9],[0,8,7],[1,8,7],[2,8,7],[3,8,7],[4,8,7],[5,8,7],[6,8,7],[7,8,7],[8,8,7],[9,8,7],[10,8,7],[0,7,6],[1,7,6],[2,7,6],[3,7,6],[4,7,6],[5,7,6],[6,7,6],[7,7,6],[8,7,6],[9,7,6],[10,7,6],[0,6,1],[1,6,1],[2,6,1],[3,6,1],[4,6,1],[5,6,1],[6,6,1],[7,6,1],[8,6,1],[9,6,1],[10,6,1],[0,5,4],[1,5,4],[2,5,4],[3,5,4],[4,5,4],[5,5,4],[6,5,4],[7,5,4],[8,5,4],[9,5,4],[10,5,4],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,2],[1,3,2],[2,3,2],[3,3,2],[4,3,2],[5,3,2],[6,3,2],[7,3,2],[8,3,2],[9,3,2],[10,3,2],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:85, balls: [[3,15,9],[4,15,8],[5,15,9],[6,15,8],[7,15,9],[3,14,9],[4,14,3],[5,14,3],[6,14,3],[7,14,9],[2,13,8],[3,13,9],[4,13,3],[5,13,3],[6,13,3],[7,13,9],[1,12,8],[3,12,9],[4,12,3],[5,12,3],[6,12,3],[7,12,9],[1,11,8],[3,11,9],[4,11,3],[5,11,3],[6,11,3],[7,11,9],[1,10,8],[3,10,9],[4,10,3],[5,10,3],[6,10,3],[7,10,9],[1,9,8],[3,9,9],[4,9,3],[5,9,3],[6,9,3],[7,9,9],[1,8,8],[3,8,9],[4,8,3],[5,8,3],[6,8,3],[7,8,9],[1,7,8],[3,7,9],[4,7,3],[5,7,0],[6,7,3],[7,7,9],[2,6,8],[3,6,9],[4,6,0],[5,6,0],[6,6,0],[7,6,9],[3,5,9],[4,5,0],[5,5,0],[6,5,0],[7,5,9],[3,4,9],[7,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:86, balls: [[1,14,9],[2,14,9],[3,14,9],[4,14,9],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[1,13,9],[2,13,0],[3,13,5],[4,13,9],[6,13,9],[7,13,5],[8,13,0],[9,13,9],[1,12,9],[2,12,0],[3,12,5],[4,12,9],[6,12,9],[7,12,5],[8,12,0],[9,12,9],[1,11,9],[2,11,5],[3,11,0],[4,11,9],[6,11,9],[7,11,0],[8,11,5],[9,11,9],[1,10,9],[2,10,5],[3,10,0],[4,10,9],[6,10,9],[7,10,0],[8,10,5],[9,10,9],[1,7,9],[2,7,9],[3,7,9],[4,7,9],[6,7,9],[7,7,9],[8,7,9],[9,7,9],[1,6,9],[2,6,5],[3,6,0],[4,6,9],[6,6,9],[7,6,0],[8,6,5],[9,6,9],[1,5,9],[2,5,5],[3,5,0],[4,5,9],[6,5,9],[7,5,0],[8,5,5],[9,5,9],[1,4,9],[2,4,0],[3,4,5],[4,4,9],[6,4,9],[7,4,5],[8,4,0],[9,4,9],[1,3,9],[2,3,0],[3,3,5],[4,3,9],[6,3,9],[7,3,5],[8,3,0],[9,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:87, balls: [[0,17,8],[1,17,8],[2,17,9],[8,17,9],[9,17,8],[10,17,8],[2,16,9],[8,16,9],[0,15,8],[1,15,8],[2,15,9],[8,15,9],[9,15,8],[10,15,8],[2,14,9],[8,14,9],[0,13,8],[1,13,8],[2,13,9],[8,13,9],[9,13,8],[10,13,8],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[8,12,9],[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[6,7,0],[8,7,0],[10,7,0],[1,6,1],[2,6,1],[3,6,1],[4,6,1],[5,6,1],[6,6,1],[7,6,1],[8,6,1],[9,6,1],[0,5,2],[1,5,2],[2,5,2],[3,5,2],[4,5,2],[5,5,2],[6,5,2],[7,5,2],[8,5,2],[9,5,5],[10,5,5],[0,4,1],[1,4,1],[4,4,1],[5,4,1],[6,4,1],[7,4,1],[8,4,1],[9,4,5],[10,4,5],[0,3,1],[5,3,1],[6,3,1],[7,3,1],[8,3,1],[9,3,5],[6,2,5],[2,1,0],[3,1,0],[4,1,0],[5,1,0],[6,1,0],[7,1,0],[8,1,0],[9,1,0],[10,1,0]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:88, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[0,16,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[0,15,9],[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,9],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[0,14,9],[1,14,9],[2,14,9],[3,14,9],[4,14,9],[5,14,9],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[0,13,9],[9,13,8],[1,12,3],[2,12,7],[3,12,6],[4,12,8],[5,12,8],[6,12,4],[7,12,5],[8,12,2],[9,11,8],[1,10,9],[2,10,9],[3,10,9],[4,10,9],[5,10,9],[6,10,9],[7,10,9],[8,10,9],[9,10,9],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[9,8,8],[1,7,0],[2,7,2],[3,7,5],[4,7,8],[5,7,8],[6,7,1],[7,7,6],[8,7,7],[0,6,9],[9,6,8],[0,5,9],[1,5,9],[2,5,9],[3,5,9],[4,5,9],[5,5,9],[6,5,9],[7,5,9],[8,5,9],[9,5,9],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[0,3,9],[1,3,9],[2,3,9],[3,3,9],[4,3,9],[5,3,9],[6,3,9],[7,3,9],[8,3,9],[9,3,9],[0,2,9],[1,2,9],[2,2,9],[3,2,9],[4,2,9],[5,2,9],[6,2,9],[7,2,9],[8,2,9],[9,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:89, balls: [[0,16,8],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[10,16,8],[0,15,8],[1,15,8],[2,15,8],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[8,15,8],[9,15,8],[10,15,8],[0,14,8],[1,14,8],[2,14,8],[3,14,8],[4,14,2],[5,14,2],[6,14,2],[7,14,8],[8,14,8],[9,14,8],[10,14,8],[0,13,8],[1,13,8],[2,13,8],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,8],[9,13,8],[10,13,8],[0,12,8],[1,12,8],[2,12,8],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,8],[9,12,8],[10,12,8],[0,11,8],[1,11,8],[2,11,2],[3,11,2],[4,11,2],[5,11,2],[6,11,2],[7,11,2],[8,11,2],[9,11,8],[10,11,8],[0,10,8],[1,10,8],[2,10,2],[3,10,2],[4,10,2],[5,10,2],[6,10,2],[7,10,2],[8,10,2],[9,10,8],[10,10,8],[0,9,8],[1,9,8],[2,9,2],[3,9,2],[4,9,2],[5,9,2],[6,9,2],[7,9,2],[8,9,2],[9,9,8],[10,9,8],[0,8,8],[1,8,8],[2,8,2],[3,8,2],[4,8,2],[5,8,2],[6,8,2],[7,8,2],[8,8,2],[9,8,8],[10,8,8],[0,7,8],[1,7,8],[2,7,2],[3,7,2],[4,7,4],[5,7,2],[6,7,4],[7,7,2],[8,7,2],[9,7,8],[10,7,8],[0,6,8],[1,6,8],[2,6,8],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,8],[9,6,8],[10,6,8],[0,5,8],[1,5,8],[2,5,8],[3,5,8],[4,5,4],[5,5,3],[6,5,4],[7,5,8],[8,5,8],[9,5,8],[10,5,8],[0,4,8],[1,4,8],[2,4,8],[3,4,8],[4,4,8],[5,4,3],[6,4,8],[7,4,8],[8,4,8],[9,4,8],[10,4,8],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8],[0,2,8],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,8],[10,2,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:90, balls: [[0,16,2],[1,16,2],[2,16,2],[4,16,3],[5,16,3],[6,16,3],[8,16,2],[9,16,2],[10,16,2],[1,15,2],[3,15,3],[4,15,4],[5,15,7],[6,15,4],[7,15,3],[9,15,2],[1,14,9],[2,14,3],[3,14,4],[4,14,4],[5,14,7],[6,14,4],[7,14,4],[8,14,3],[9,14,9],[1,13,9],[2,13,3],[3,13,4],[4,13,4],[5,13,7],[6,13,4],[7,13,4],[8,13,3],[9,13,9],[1,12,3],[2,12,4],[3,12,4],[4,12,4],[5,12,7],[6,12,4],[7,12,4],[8,12,4],[9,12,3],[1,11,3],[2,11,4],[3,11,4],[4,11,4],[5,11,7],[6,11,4],[7,11,4],[8,11,4],[9,11,3],[1,10,3],[2,10,4],[3,10,7],[4,10,7],[5,10,8],[6,10,4],[7,10,4],[8,10,4],[9,10,3],[1,9,3],[2,9,4],[3,9,4],[4,9,4],[5,9,4],[6,9,4],[7,9,4],[8,9,4],[9,9,3],[1,8,3],[2,8,4],[3,8,4],[4,8,4],[5,8,4],[6,8,4],[7,8,4],[8,8,4],[9,8,3],[2,7,3],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,3],[2,6,3],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,3],[0,5,3],[2,5,9],[3,5,3],[4,5,4],[5,5,4],[6,5,4],[7,5,3],[8,5,9],[10,5,3],[0,4,3],[1,4,3],[2,4,9],[4,4,3],[5,4,3],[6,4,3],[8,4,9],[9,4,3],[10,4,3],[0,3,3],[1,3,3],[2,3,3],[3,3,3],[7,3,3],[8,3,3],[9,3,3],[10,3,3],[0,2,3],[1,2,3],[2,2,3],[3,2,3],[5,2,9],[7,2,3],[8,2,3],[9,2,3],[10,2,3],[1,1,3],[2,1,3],[8,1,3],[9,1,3]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:91, balls: [[2,16,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[9,15,9],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[9,14,9],[9,13,9],[1,12,9],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,8],[8,12,8],[9,12,9],[1,11,9],[9,11,9],[1,10,9],[3,10,0],[4,10,7],[5,10,0],[6,10,7],[7,10,0],[9,10,9],[1,9,9],[9,9,9],[1,8,9],[2,8,8],[3,8,8],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[1,7,9],[1,6,9],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[1,5,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:92, balls: [[0,17,8],[2,17,8],[4,17,8],[6,17,8],[8,17,8],[10,17,8],[0,16,4],[2,16,4],[4,16,4],[6,16,4],[8,16,4],[10,16,4],[0,15,8],[2,15,8],[4,15,8],[6,15,8],[8,15,8],[10,15,8],[1,13,8],[3,13,8],[5,13,8],[7,13,8],[9,13,8],[1,12,2],[3,12,2],[5,12,2],[7,12,2],[9,12,2],[1,11,8],[3,11,8],[5,11,8],[7,11,8],[9,11,8],[0,9,9],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[10,9,9],[1,7,8],[3,7,8],[5,7,8],[7,7,8],[9,7,8],[1,6,1],[3,6,1],[5,6,1],[7,6,1],[9,6,1],[1,5,8],[3,5,8],[5,5,8],[7,5,8],[9,5,8],[0,3,8],[2,3,8],[4,3,8],[6,3,8],[8,3,8],[10,3,8],[0,2,6],[2,2,6],[4,2,6],[6,2,6],[8,2,6],[10,2,6],[0,1,8],[2,1,8],[4,1,8],[6,1,8],[8,1,8],[10,1,8]], mask_left: [[0,9]], mask_right: [[10,9]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:93, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,1],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[5,16,1],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,1],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[1,14,9],[2,14,9],[3,14,9],[4,14,9],[5,14,1],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[1,13,9],[2,13,1],[3,13,1],[4,13,1],[5,13,1],[6,13,1],[7,13,1],[8,13,1],[9,13,9],[1,12,9],[2,12,1],[3,12,1],[4,12,1],[5,12,1],[6,12,1],[7,12,1],[8,12,1],[9,12,9],[1,11,9],[2,11,9],[3,11,9],[4,11,9],[5,11,1],[6,11,9],[7,11,9],[8,11,9],[9,11,9],[1,10,9],[2,10,9],[3,10,9],[4,10,9],[5,10,1],[6,10,9],[7,10,9],[8,10,9],[9,10,9],[1,9,9],[2,9,9],[3,9,9],[4,9,1],[5,9,1],[6,9,1],[7,9,9],[8,9,9],[9,9,9],[1,8,9],[2,8,9],[3,8,1],[4,8,0],[5,8,0],[6,8,0],[7,8,1],[8,8,9],[9,8,9],[1,7,9],[2,7,1],[3,7,0],[4,7,0],[5,7,0],[6,7,0],[7,7,0],[8,7,1],[9,7,9],[1,6,9],[2,6,1],[3,6,0],[4,6,0],[5,6,0],[6,6,0],[7,6,0],[8,6,1],[9,6,9],[1,5,9],[2,5,1],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,1],[9,5,9],[1,4,9],[2,4,1],[3,4,0],[4,4,0],[5,4,0],[6,4,0],[7,4,0],[8,4,1],[9,4,9],[1,3,9],[2,3,9],[3,3,1],[4,3,0],[5,3,0],[6,3,0],[7,3,1],[8,3,9],[9,3,9],[1,2,9],[2,2,9],[3,2,9],[4,2,1],[5,2,1],[6,2,1],[7,2,9],[8,2,9],[9,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:94, balls: [[1,16,9],[2,16,9],[3,16,9],[4,16,6],[5,16,6],[6,16,6],[7,16,9],[8,16,9],[9,16,9],[1,15,9],[2,15,9],[3,15,6],[4,15,0],[5,15,0],[6,15,0],[7,15,6],[8,15,9],[9,15,9],[1,14,9],[2,14,6],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,6],[9,14,9],[1,13,9],[2,13,6],[3,13,0],[4,13,0],[5,13,0],[6,13,0],[7,13,0],[8,13,6],[9,13,9],[1,12,9],[2,12,6],[3,12,0],[4,12,0],[5,12,0],[6,12,0],[7,12,0],[8,12,6],[9,12,9],[1,11,9],[2,11,6],[3,11,6],[4,11,0],[5,11,0],[6,11,0],[7,11,6],[8,11,6],[9,11,9],[1,10,9],[2,10,9],[3,10,6],[4,10,0],[5,10,0],[6,10,0],[7,10,6],[8,10,9],[9,10,9],[1,9,9],[2,9,9],[3,9,9],[4,9,6],[5,9,6],[6,9,6],[7,9,9],[8,9,9],[9,9,9],[1,8,9],[2,8,9],[3,8,9],[4,8,9],[5,8,6],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[1,7,9],[2,7,9],[3,7,9],[4,7,9],[5,7,6],[6,7,9],[7,7,9],[8,7,9],[9,7,9],[1,6,9],[2,6,9],[3,6,9],[4,6,9],[5,6,6],[6,6,9],[7,6,9],[8,6,9],[9,6,9],[1,5,9],[2,5,6],[3,5,9],[4,5,9],[5,5,6],[6,5,9],[7,5,9],[8,5,6],[9,5,9],[1,4,9],[2,4,6],[3,4,6],[4,4,9],[5,4,6],[6,4,9],[7,4,6],[8,4,6],[9,4,9],[1,3,9],[2,3,9],[3,3,6],[4,3,6],[5,3,6],[6,3,6],[7,3,6],[8,3,9],[9,3,9],[1,2,9],[2,2,9],[3,2,9],[4,2,6],[5,2,6],[6,2,6],[7,2,9],[8,2,9],[9,2,9],[1,1,9],[2,1,9],[3,1,9],[4,1,9],[5,1,6],[6,1,9],[7,1,9],[8,1,9],[9,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:95, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,27,45,26,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:96, balls: [[4,17,9],[6,17,9],[5,16,9],[5,15,9],[5,14,9],[4,13,9],[5,13,9],[6,13,9],[1,12,9],[2,12,9],[3,12,9],[4,12,7],[5,12,7],[6,12,7],[7,12,9],[8,12,9],[9,12,9],[4,11,6],[5,11,6],[6,11,6],[1,10,9],[2,10,9],[3,10,9],[4,10,5],[5,10,5],[6,10,5],[7,10,9],[8,10,9],[9,10,9],[4,9,4],[5,9,4],[6,9,4],[1,8,9],[2,8,9],[3,8,9],[4,8,3],[5,8,3],[6,8,3],[7,8,9],[8,8,9],[9,8,9],[4,7,2],[5,7,2],[6,7,2],[1,6,9],[2,6,9],[3,6,9],[4,6,1],[5,6,1],[6,6,1],[7,6,9],[8,6,9],[9,6,9],[4,5,9],[5,5,9],[6,5,9],[5,4,9],[5,3,9],[5,2,9],[4,1,9],[6,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:97, balls: [[0,17,9],[2,17,9],[4,17,9],[6,17,9],[8,17,9],[10,17,9],[0,16,7],[2,16,7],[4,16,7],[6,16,7],[8,16,7],[10,16,7],[1,15,9],[3,15,9],[5,15,9],[7,15,9],[9,15,9],[1,14,6],[3,14,6],[5,14,6],[7,14,6],[9,14,6],[0,13,9],[2,13,9],[4,13,9],[6,13,9],[8,13,9],[10,13,9],[0,12,5],[2,12,5],[4,12,5],[6,12,5],[8,12,5],[10,12,5],[1,11,9],[3,11,9],[5,11,9],[7,11,9],[9,11,9],[1,10,4],[3,10,4],[5,10,4],[7,10,4],[9,10,4],[0,9,9],[2,9,9],[4,9,9],[6,9,9],[8,9,9],[10,9,9],[0,8,3],[2,8,3],[4,8,3],[6,8,3],[8,8,3],[10,8,3],[1,7,9],[3,7,9],[5,7,9],[7,7,9],[9,7,9],[1,6,2],[3,6,2],[5,6,2],[7,6,2],[9,6,2],[0,5,9],[2,5,9],[4,5,9],[6,5,9],[8,5,9],[10,5,9],[0,4,1],[2,4,1],[4,4,1],[6,4,1],[8,4,1],[10,4,1],[1,3,9],[3,3,9],[5,3,9],[7,3,9],[9,3,9],[1,2,0],[3,2,0],[5,2,0],[7,2,0],[9,2,0]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:98, balls: [[2,15,9],[3,15,6],[4,15,9],[5,15,0],[6,15,9],[7,15,1],[8,15,9],[2,14,9],[3,14,6],[4,14,9],[5,14,0],[6,14,9],[7,14,1],[8,14,9],[2,13,9],[3,13,9],[4,13,9],[5,13,9],[6,13,9],[7,13,9],[8,13,9],[2,12,4],[5,12,0],[8,12,2],[2,11,9],[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[8,11,9],[2,10,7],[5,10,0],[8,10,3],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[2,8,3],[5,8,0],[8,8,7],[2,7,9],[3,7,9],[4,7,9],[5,7,9],[6,7,9],[7,7,9],[8,7,9],[2,6,2],[5,6,0],[8,6,4],[2,5,9],[3,5,9],[4,5,9],[5,5,9],[6,5,9],[7,5,9],[8,5,9],[2,4,9],[3,4,1],[4,4,9],[5,4,0],[6,4,9],[7,4,6],[8,4,9],[2,3,9],[3,3,1],[4,3,9],[5,3,0],[6,3,9],[7,3,6],[8,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:99, balls: [[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[3,15,6],[4,15,6],[5,15,6],[6,15,6],[7,15,6],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[2,13,9],[3,13,9],[4,13,9],[5,13,9],[6,13,9],[7,13,9],[8,13,9],[2,12,1],[3,12,1],[4,12,1],[5,12,1],[6,12,1],[7,12,1],[8,12,1],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[1,10,9],[2,10,9],[3,10,9],[4,10,9],[5,10,9],[6,10,9],[7,10,9],[8,10,9],[9,10,9],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[2,8,9],[3,8,8],[4,8,9],[5,8,8],[6,8,9],[7,8,8],[8,8,9],[2,7,4],[4,7,4],[6,7,4],[8,7,4],[2,6,9],[3,6,8],[4,6,9],[5,6,8],[6,6,9],[7,6,8],[8,6,9],[4,5,0],[6,5,0],[4,4,9],[6,4,9],[4,3,7],[6,3,7],[4,2,9],[5,2,8],[6,2,9],[5,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:100, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[1,15,0],[2,15,0],[3,15,0],[4,15,0],[5,15,0],[6,15,0],[7,15,0],[8,15,0],[9,15,0],[1,14,9],[2,14,8],[3,14,9],[4,14,8],[5,14,9],[6,14,8],[7,14,9],[8,14,8],[9,14,9],[1,13,2],[3,13,6],[5,13,1],[7,13,4],[9,13,7],[1,12,9],[2,12,8],[3,12,9],[4,12,8],[5,12,9],[6,12,8],[7,12,9],[8,12,8],[9,12,9],[1,11,2],[3,11,6],[5,11,1],[7,11,4],[9,11,7],[1,10,9],[2,10,8],[3,10,9],[4,10,8],[5,10,9],[6,10,8],[7,10,9],[8,10,8],[9,10,9],[1,9,2],[3,9,6],[5,9,1],[7,9,4],[9,9,7],[1,8,9],[2,8,8],[3,8,9],[4,8,8],[5,8,9],[6,8,8],[7,8,9],[8,8,8],[9,8,9],[1,7,2],[3,7,6],[5,7,1],[7,7,4],[9,7,7],[1,6,9],[2,6,8],[3,6,9],[4,6,8],[5,6,9],[6,6,8],[7,6,9],[8,6,8],[9,6,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:101, balls: [[0,17,8],[1,17,8],[2,17,8],[8,17,7],[9,17,7],[10,17,7],[0,16,8],[1,16,8],[9,16,7],[10,16,7],[0,15,8],[6,15,9],[10,15,7],[5,14,9],[6,14,6],[7,14,9],[4,13,9],[5,13,6],[6,13,6],[8,13,9],[5,12,9],[6,12,6],[2,11,9],[6,11,9],[8,11,9],[1,10,9],[2,10,2],[3,10,9],[7,10,9],[0,9,9],[1,9,2],[2,9,2],[4,9,9],[7,9,4],[8,9,9],[1,8,9],[2,8,2],[5,8,9],[7,8,4],[8,8,4],[9,8,9],[2,7,9],[6,7,9],[7,7,4],[8,7,9],[1,6,9],[3,6,9],[7,6,9],[3,5,1],[4,5,9],[1,4,9],[3,4,1],[4,4,1],[5,4,9],[2,3,9],[3,3,1],[4,3,9],[0,2,5],[3,2,9],[10,2,3],[0,1,5],[1,1,5],[9,1,3],[10,1,3],[0,0,5],[1,0,5],[2,0,5],[8,0,3],[9,0,3],[10,0,3]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:102, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,1],[5,16,0],[10,16,1],[0,15,1],[5,15,0],[10,15,1],[0,14,9],[1,14,9],[2,14,9],[3,14,9],[4,14,9],[5,14,9],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[10,14,9],[0,13,2],[5,13,0],[10,13,2],[0,12,2],[5,12,0],[10,12,2],[0,11,9],[1,11,9],[2,11,9],[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[8,11,9],[9,11,9],[10,11,9],[0,10,3],[5,10,0],[10,10,3],[0,9,3],[5,9,0],[10,9,3],[0,8,9],[1,8,9],[2,8,9],[3,8,9],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[10,8,9],[0,7,4],[5,7,0],[10,7,4],[0,6,4],[5,6,0],[10,6,4],[0,5,9],[1,5,9],[2,5,9],[3,5,9],[4,5,9],[5,5,9],[6,5,9],[7,5,9],[8,5,9],[9,5,9],[10,5,9],[0,4,6],[5,4,0],[10,4,6],[0,3,6],[5,3,0],[10,3,6],[0,2,9],[1,2,9],[2,2,9],[3,2,9],[4,2,9],[5,2,9],[6,2,9],[7,2,9],[8,2,9],[9,2,9],[10,2,9],[0,1,7],[5,1,0],[10,1,7],[0,0,7],[5,0,0],[10,0,7]], mask_left: [[0,17],[0,11],[0,5]], mask_right: [[10,14],[10,8],[10,2]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:103, balls: [[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[2,16,9],[3,16,7],[4,16,7],[5,16,8],[6,16,6],[7,16,6],[8,16,9],[2,15,9],[3,15,7],[4,15,9],[5,15,0],[6,15,9],[7,15,6],[8,15,9],[2,14,9],[3,14,7],[4,14,9],[5,14,0],[6,14,9],[7,14,6],[8,14,9],[1,13,9],[2,13,7],[3,13,7],[4,13,9],[5,13,0],[6,13,9],[7,13,6],[8,13,6],[9,13,9],[1,12,7],[2,12,7],[3,12,9],[4,12,8],[5,12,0],[6,12,8],[7,12,9],[8,12,6],[9,12,6],[1,11,7],[2,11,7],[3,11,7],[4,11,8],[5,11,0],[6,11,8],[7,11,6],[8,11,6],[9,11,6],[0,10,9],[1,10,9],[2,10,9],[3,10,9],[4,10,8],[5,10,0],[6,10,8],[7,10,9],[8,10,9],[9,10,9],[10,10,9],[0,9,4],[1,9,4],[2,9,4],[3,9,4],[4,9,8],[5,9,0],[6,9,8],[7,9,4],[8,9,4],[9,9,4],[10,9,4],[0,8,9],[1,8,9],[2,8,9],[3,8,9],[4,8,8],[5,8,0],[6,8,8],[7,8,9],[8,8,9],[9,8,9],[10,8,9],[1,7,1],[2,7,1],[3,7,1],[4,7,8],[5,7,0],[6,7,8],[7,7,2],[8,7,2],[9,7,2],[1,6,1],[2,6,1],[3,6,9],[4,6,8],[5,6,0],[6,6,8],[7,6,9],[8,6,2],[9,6,2],[1,5,9],[2,5,1],[3,5,1],[4,5,9],[5,5,0],[6,5,9],[7,5,2],[8,5,2],[9,5,9],[2,4,9],[3,4,1],[4,4,9],[5,4,0],[6,4,9],[7,4,2],[8,4,9],[2,3,9],[3,3,1],[4,3,9],[5,3,0],[6,3,9],[7,3,2],[8,3,9],[2,2,9],[3,2,1],[4,2,1],[5,2,8],[6,2,2],[7,2,2],[8,2,9],[3,1,9],[4,1,9],[5,1,9],[6,1,9],[7,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:104, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,7],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[5,16,7],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[0,15,9],[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,7],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[10,15,9],[0,14,9],[1,14,9],[2,14,9],[3,14,9],[4,14,6],[5,14,6],[6,14,6],[7,14,9],[8,14,9],[9,14,9],[10,14,9],[0,13,9],[1,13,9],[2,13,9],[3,13,9],[4,13,6],[5,13,6],[6,13,6],[7,13,9],[8,13,9],[9,13,9],[10,13,9],[0,12,9],[1,12,9],[2,12,9],[3,12,9],[4,12,6],[5,12,6],[6,12,6],[7,12,9],[8,12,9],[9,12,9],[10,12,9],[0,11,9],[1,11,9],[2,11,9],[3,11,4],[4,11,4],[5,11,4],[6,11,4],[7,11,4],[8,11,9],[9,11,9],[10,11,9],[0,10,9],[1,10,9],[2,10,9],[3,10,4],[4,10,4],[5,10,4],[6,10,4],[7,10,4],[8,10,9],[9,10,9],[10,10,9],[0,9,9],[1,9,9],[2,9,9],[3,9,4],[4,9,4],[5,9,4],[6,9,4],[7,9,4],[8,9,9],[9,9,9],[10,9,9],[0,8,9],[1,8,9],[2,8,3],[3,8,3],[4,8,3],[5,8,3],[6,8,3],[7,8,3],[8,8,3],[9,8,9],[10,8,9],[0,7,9],[1,7,9],[2,7,3],[3,7,3],[4,7,3],[5,7,3],[6,7,3],[7,7,3],[8,7,3],[9,7,9],[10,7,9],[0,6,9],[1,6,9],[2,6,3],[3,6,3],[4,6,3],[5,6,3],[6,6,3],[7,6,3],[8,6,3],[9,6,9],[10,6,9],[0,5,9],[1,5,2],[2,5,2],[3,5,2],[4,5,2],[5,5,2],[6,5,2],[7,5,2],[8,5,2],[9,5,2],[10,5,9],[0,4,9],[1,4,2],[2,4,2],[3,4,2],[4,4,2],[5,4,2],[6,4,2],[7,4,2],[8,4,2],[9,4,2],[10,4,9],[0,3,9],[1,3,2],[2,3,2],[3,3,2],[4,3,2],[5,3,2],[6,3,2],[7,3,2],[8,3,2],[9,3,2],[10,3,9],[0,2,1],[1,2,1],[2,2,1],[3,2,1],[4,2,1],[5,2,1],[6,2,1],[7,2,1],[8,2,1],[9,2,1],[10,2,1],[0,1,1],[1,1,1],[2,1,1],[3,1,1],[4,1,1],[5,1,1],[6,1,1],[7,1,1],[8,1,1],[9,1,1],[10,1,1],[0,0,1],[1,0,1],[2,0,1],[3,0,1],[4,0,1],[5,0,1],[6,0,1],[7,0,1],[8,0,1],[9,0,1],[10,0,1]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:105, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,8],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[10,16,8],[0,15,7],[1,15,7],[2,15,7],[3,15,8],[4,15,8],[5,15,7],[6,15,8],[7,15,8],[8,15,8],[9,15,7],[10,15,8],[0,14,8],[1,14,7],[2,14,8],[3,14,8],[4,14,7],[5,14,8],[6,14,7],[7,14,8],[8,14,7],[9,14,8],[10,14,7],[0,13,8],[1,13,6],[2,13,8],[3,13,8],[4,13,6],[5,13,8],[6,13,6],[7,13,8],[8,13,6],[9,13,8],[10,13,6],[0,12,8],[1,12,6],[2,12,8],[3,12,8],[4,12,6],[5,12,8],[6,12,6],[7,12,8],[8,12,6],[9,12,8],[10,12,6],[0,11,8],[1,11,5],[2,11,8],[3,11,8],[4,11,5],[5,11,8],[6,11,5],[7,11,8],[8,11,5],[9,11,8],[10,11,5],[0,10,8],[1,10,5],[2,10,8],[3,10,8],[4,10,5],[5,10,8],[6,10,5],[7,10,8],[8,10,5],[9,10,8],[10,10,5],[0,9,8],[1,9,4],[2,9,8],[3,9,8],[4,9,4],[5,9,8],[6,9,4],[7,9,8],[8,9,4],[9,9,8],[10,9,4],[0,8,8],[1,8,4],[2,8,8],[3,8,8],[4,8,4],[5,8,8],[6,8,4],[7,8,8],[8,8,4],[9,8,8],[10,8,4],[0,7,8],[1,7,3],[2,7,8],[3,7,8],[4,7,3],[5,7,8],[6,7,3],[7,7,8],[8,7,3],[9,7,8],[10,7,3],[0,6,8],[1,6,3],[2,6,8],[3,6,8],[4,6,3],[5,6,8],[6,6,3],[7,6,8],[8,6,3],[9,6,8],[10,6,3],[0,5,8],[1,5,2],[2,5,8],[3,5,8],[4,5,2],[5,5,8],[6,5,2],[7,5,8],[8,5,2],[9,5,8],[10,5,2],[0,4,8],[1,4,2],[2,4,8],[3,4,8],[4,4,2],[5,4,8],[6,4,2],[7,4,8],[8,4,2],[9,4,8],[10,4,2],[0,3,1],[1,3,1],[2,3,8],[3,3,8],[4,3,1],[5,3,8],[6,3,1],[7,3,8],[8,3,1],[9,3,8],[10,3,1],[0,2,8],[1,2,1],[2,2,8],[3,2,8],[4,2,8],[5,2,1],[6,2,8],[7,2,8],[8,2,8],[9,2,1],[10,2,8],[0,1,8],[1,1,8],[2,1,8],[3,1,8],[4,1,8],[5,1,8],[6,1,8],[7,1,8],[8,1,8],[9,1,8],[10,1,8],[0,0,8],[1,0,8],[2,0,8],[3,0,8],[4,0,8],[5,0,8],[6,0,8],[7,0,8],[8,0,8],[9,0,8],[10,0,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:106, balls: [[0,10,8],[1,10,8],[2,10,8],[3,10,8],[4,10,8],[5,10,8],[6,10,8],[7,10,8],[8,10,8],[9,10,8],[10,10,8],[0,9,7],[1,9,7],[2,9,7],[3,9,7],[4,9,7],[5,9,7],[6,9,7],[7,9,7],[8,9,7],[9,9,7],[10,9,7],[0,8,6],[1,8,6],[2,8,6],[3,8,6],[4,8,6],[5,8,6],[6,8,6],[7,8,6],[8,8,6],[9,8,6],[10,8,6],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,2],[1,6,2],[2,6,2],[3,6,2],[4,6,2],[5,6,2],[6,6,2],[7,6,2],[8,6,2],[9,6,2],[10,6,2],[0,5,1],[1,5,1],[2,5,1],[3,5,1],[4,5,1],[5,5,1],[6,5,1],[7,5,1],[8,5,1],[9,5,1],[10,5,1],[0,4,0],[1,4,0],[2,4,0],[3,4,0],[4,4,0],[5,4,0],[6,4,0],[7,4,0],[8,4,0],[9,4,0],[10,4,0],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:107, balls: [[0,14,0],[1,14,8],[2,14,8],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[8,14,8],[9,14,8],[10,14,8],[0,13,8],[1,13,1],[2,13,2],[3,13,3],[4,13,4],[5,13,5],[6,13,6],[7,13,7],[8,13,0],[9,13,1],[10,13,2],[1,12,8],[2,12,2],[3,12,3],[4,12,4],[5,12,5],[6,12,6],[7,12,7],[8,12,0],[9,12,1],[10,12,2],[2,11,8],[3,11,3],[4,11,4],[5,11,5],[6,11,6],[7,11,7],[8,11,0],[9,11,1],[10,11,2],[3,10,8],[4,10,4],[5,10,5],[6,10,6],[7,10,7],[8,10,0],[9,10,1],[10,10,2],[4,9,8],[5,9,5],[6,9,6],[7,9,7],[8,9,0],[9,9,1],[10,9,2],[5,8,8],[6,8,6],[7,8,7],[8,8,0],[9,8,1],[10,8,2],[6,7,8],[7,7,7],[8,7,0],[9,7,1],[10,7,2],[7,6,8],[8,6,0],[9,6,1],[10,6,2],[8,5,8],[9,5,1],[10,5,2],[9,4,8],[10,4,2],[10,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:108, balls: [[0,16,7],[1,16,8],[2,16,7],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[0,14,6],[1,14,6],[2,14,8],[3,14,6],[4,14,8],[5,14,6],[6,14,8],[7,14,6],[8,14,8],[9,14,6],[10,14,6],[0,12,9],[1,12,9],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[8,12,5],[9,12,8],[10,12,5],[0,10,4],[1,10,4],[2,10,8],[3,10,4],[4,10,8],[5,10,4],[6,10,8],[7,10,4],[8,10,8],[9,10,4],[10,10,4],[0,8,3],[1,8,8],[2,8,3],[3,8,9],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[10,8,9],[0,6,2],[1,6,2],[2,6,8],[3,6,2],[4,6,8],[5,6,2],[6,6,8],[7,6,2],[8,6,8],[9,6,2],[10,6,2],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,1],[9,4,8],[10,4,1],[0,2,0],[1,2,0],[2,2,8],[3,2,0],[4,2,8],[5,2,0],[6,2,8],[7,2,0],[8,2,8],[9,2,0],[10,2,0]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:109, balls: [[1,17,8],[2,17,8],[3,17,8],[4,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[1,15,1],[2,15,2],[3,15,3],[4,15,4],[6,15,4],[7,15,3],[8,15,2],[9,15,1],[1,14,0],[2,14,1],[3,14,2],[4,14,3],[6,14,3],[7,14,2],[8,14,1],[9,14,0],[1,13,8],[2,13,0],[3,13,1],[4,13,2],[6,13,2],[7,13,1],[8,13,0],[9,13,8],[1,12,7],[2,12,8],[3,12,0],[4,12,1],[6,12,1],[7,12,0],[8,12,8],[9,12,7],[1,11,6],[2,11,7],[3,11,8],[4,11,0],[6,11,0],[7,11,8],[8,11,7],[9,11,6],[1,10,5],[2,10,6],[3,10,7],[4,10,8],[6,10,8],[7,10,7],[8,10,6],[9,10,5],[1,9,4],[2,9,5],[3,9,6],[4,9,7],[6,9,7],[7,9,6],[8,9,5],[9,9,4],[1,8,3],[2,8,4],[3,8,5],[4,8,6],[6,8,6],[7,8,5],[8,8,4],[9,8,3],[1,7,2],[2,7,3],[3,7,4],[4,7,5],[6,7,5],[7,7,4],[8,7,3],[9,7,2],[1,6,8],[2,6,2],[3,6,3],[4,6,4],[6,6,4],[7,6,3],[8,6,2],[9,6,8],[1,5,1],[2,5,8],[3,5,2],[4,5,3],[6,5,3],[7,5,2],[8,5,8],[9,5,1],[1,4,0],[2,4,1],[3,4,8],[4,4,2],[6,4,2],[7,4,8],[8,4,1],[9,4,0],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,8]], mask_left: [[1,15],[2,15],[3,15],[4,15],[1,14],[2,14],[3,14],[4,14],[1,9],[2,9],[3,9],[4,9],[1,8],[2,8],[3,8],[4,8],[1,7],[2,7],[3,7],[4,7]], mask_right: [[6,15],[7,15],[8,15],[9,15],[6,14],[7,14],[8,14],[9,14],[6,9],[7,9],[8,9],[9,9],[6,8],[7,8],[8,8],[9,8],[6,7],[7,7],[8,7],[9,7]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:110, balls: [[1,17,8],[3,17,8],[5,17,8],[7,17,8],[9,17,8],[1,16,8],[3,16,8],[5,16,8],[7,16,8],[9,16,8],[1,15,8],[3,15,8],[5,15,8],[7,15,8],[9,15,8],[1,14,4],[3,14,3],[5,14,6],[7,14,3],[9,14,4],[1,13,0],[3,13,0],[5,13,0],[7,13,0],[9,13,0],[1,12,4],[3,12,3],[5,12,6],[7,12,3],[9,12,4],[1,11,4],[3,11,3],[5,11,6],[7,11,3],[9,11,4],[1,10,4],[3,10,3],[5,10,6],[7,10,3],[9,10,4],[1,9,9],[2,9,0],[3,9,9],[4,9,0],[5,9,9],[6,9,0],[7,9,9],[8,9,0],[9,9,9],[1,8,4],[3,8,3],[5,8,6],[7,8,3],[9,8,4],[1,7,4],[3,7,3],[5,7,6],[7,7,3],[9,7,4],[1,6,4],[3,6,3],[5,6,6],[7,6,3],[9,6,4],[1,5,0],[3,5,0],[5,5,0],[7,5,0],[9,5,0],[1,4,4],[3,4,3],[5,4,6],[7,4,3],[9,4,4],[1,3,8],[3,3,8],[5,3,8],[7,3,8],[9,3,8],[1,2,8],[3,2,8],[5,2,8],[7,2,8],[9,2,8],[1,1,8],[3,1,8],[5,1,8],[7,1,8],[9,1,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:111, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,32,50,25,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:112, balls: [[1,17,8],[2,17,8],[3,17,8],[4,17,1],[5,17,0],[6,17,0],[7,17,8],[8,17,8],[9,17,8],[1,16,8],[2,16,8],[3,16,2],[4,16,1],[5,16,1],[6,16,0],[7,16,0],[8,16,8],[9,16,8],[1,15,8],[2,15,3],[3,15,2],[4,15,2],[5,15,1],[6,15,1],[7,15,0],[8,15,0],[9,15,8],[1,14,8],[2,14,3],[3,14,3],[4,14,2],[5,14,2],[6,14,1],[7,14,1],[8,14,0],[9,14,8],[1,13,4],[2,13,4],[3,13,3],[4,13,3],[5,13,2],[6,13,2],[7,13,1],[8,13,1],[9,13,0],[1,12,5],[2,12,4],[3,12,4],[4,12,3],[5,12,3],[6,12,2],[7,12,2],[8,12,1],[9,12,1],[1,11,5],[2,11,5],[3,11,4],[4,11,4],[5,11,3],[6,11,3],[7,11,2],[8,11,2],[9,11,1],[1,10,6],[2,10,5],[3,10,5],[4,10,4],[5,10,4],[6,10,3],[7,10,3],[8,10,2],[9,10,2],[1,9,6],[2,9,6],[3,9,5],[4,9,5],[5,9,4],[6,9,4],[7,9,3],[8,9,3],[9,9,2],[1,8,7],[2,8,6],[3,8,6],[4,8,5],[5,8,5],[6,8,4],[7,8,4],[8,8,3],[9,8,3],[1,7,8],[2,7,7],[3,7,6],[4,7,6],[5,7,5],[6,7,5],[7,7,4],[8,7,4],[9,7,8],[1,6,8],[2,6,7],[3,6,7],[4,6,6],[5,6,6],[6,6,5],[7,6,5],[8,6,4],[9,6,8],[1,5,8],[2,5,8],[3,5,7],[4,5,7],[5,5,6],[6,5,6],[7,5,5],[8,5,8],[9,5,8],[1,4,8],[2,4,8],[3,4,8],[4,4,7],[5,4,7],[6,4,6],[7,4,8],[8,4,8],[9,4,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:113, balls: [[2,16,9],[4,16,9],[6,16,9],[8,16,9],[0,15,9],[10,15,9],[0,14,9],[1,14,9],[2,14,8],[3,14,9],[7,14,9],[8,14,8],[9,14,9],[10,14,9],[0,12,9],[4,12,9],[5,12,7],[6,12,9],[10,12,9],[2,11,9],[5,11,4],[8,11,9],[0,10,8],[5,10,1],[10,10,8],[2,9,9],[5,9,2],[8,9,9],[0,8,9],[4,8,9],[5,8,6],[6,8,9],[10,8,9],[0,6,9],[1,6,9],[2,6,8],[3,6,9],[7,6,9],[8,6,8],[9,6,9],[10,6,9],[0,5,9],[10,5,9],[2,4,9],[4,4,9],[6,4,9],[8,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:114, balls: [[1,17,9],[3,17,9],[7,17,9],[9,17,9],[1,16,9],[2,16,8],[3,16,9],[7,16,9],[8,16,8],[9,16,9],[1,15,9],[2,15,0],[3,15,9],[7,15,9],[8,15,0],[9,15,9],[1,14,9],[2,14,9],[3,14,9],[7,14,9],[8,14,9],[9,14,9],[4,12,7],[5,12,7],[6,12,7],[4,11,6],[5,11,6],[6,11,6],[4,10,5],[5,10,5],[6,10,5],[4,9,4],[5,9,4],[6,9,4],[4,8,2],[5,8,2],[6,8,2],[4,7,1],[5,7,1],[6,7,1],[1,5,9],[2,5,9],[3,5,9],[7,5,9],[8,5,9],[9,5,9],[1,4,9],[2,4,0],[3,4,9],[7,4,9],[8,4,0],[9,4,9],[1,3,9],[2,3,8],[3,3,9],[7,3,9],[8,3,8],[9,3,9],[1,2,9],[3,2,9],[7,2,9],[9,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:115, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[9,16,9],[9,15,9],[9,14,9],[4,13,6],[9,13,9],[3,12,6],[4,12,2],[5,12,6],[9,12,9],[2,11,8],[3,11,2],[4,11,0],[5,11,2],[6,11,8],[9,11,9],[1,10,6],[2,10,2],[3,10,8],[4,10,3],[5,10,8],[6,10,2],[7,10,6],[9,10,9],[1,9,2],[2,9,0],[3,9,3],[4,9,8],[5,9,3],[6,9,0],[7,9,2],[9,9,9],[1,8,6],[2,8,2],[3,8,8],[4,8,3],[5,8,8],[6,8,2],[7,8,6],[9,8,9],[2,7,8],[3,7,2],[4,7,0],[5,7,2],[6,7,8],[9,7,9],[3,6,6],[4,6,2],[5,6,6],[9,6,9],[4,5,6],[9,5,9],[9,4,9],[9,3,9],[9,2,8],[9,1,9],[9,0,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:116, balls: [[0,16,8],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[10,16,8],[0,15,8],[10,15,8],[1,14,8],[2,14,8],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[8,14,8],[9,14,8],[1,13,8],[2,13,8],[8,13,8],[9,13,8],[0,12,8],[1,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[9,12,8],[10,12,8],[1,11,8],[3,11,8],[4,11,8],[6,11,8],[7,11,8],[9,11,8],[1,10,8],[3,10,8],[5,10,8],[7,10,8],[9,10,8],[0,9,8],[1,9,8],[3,9,8],[5,9,8],[7,9,8],[9,9,8],[10,9,8],[1,8,8],[3,8,8],[5,8,8],[7,8,8],[9,8,8],[1,7,8],[3,7,8],[4,7,8],[6,7,8],[7,7,8],[9,7,8],[0,6,8],[1,6,8],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[9,6,8],[10,6,8],[1,5,8],[2,5,8],[8,5,8],[9,5,8],[1,4,8],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,8],[0,3,8],[10,3,8],[0,2,8],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,8],[10,2,8]], mask_left: [[1,14],[2,14],[3,14],[4,14],[1,10],[3,10],[5,10],[7,10],[9,10],[1,4],[2,4],[3,4],[4,4]], mask_right: [[6,14],[7,14],[8,14],[9,14],[1,8],[3,8],[5,8],[7,8],[9,8],[6,4],[7,4],[8,4],[9,4]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:117, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[0,16,7],[2,16,7],[3,16,9],[4,16,2],[8,16,2],[9,16,9],[3,15,9],[9,15,9],[0,14,9],[1,14,6],[2,14,6],[3,14,9],[4,14,3],[5,14,3],[6,14,9],[9,14,9],[0,13,9],[3,13,9],[6,13,9],[9,13,9],[0,12,9],[3,12,9],[6,12,9],[9,12,9],[0,11,9],[3,11,9],[6,11,9],[7,11,1],[8,11,1],[9,11,9],[0,10,9],[3,10,9],[6,10,9],[9,10,9],[0,9,9],[3,9,9],[6,9,9],[9,9,9],[0,8,9],[3,8,9],[6,8,9],[9,8,9],[0,7,9],[1,7,5],[2,7,5],[3,7,9],[4,7,4],[5,7,4],[6,7,9],[9,7,9],[0,6,9],[6,6,9],[7,6,0],[8,6,0],[9,6,9],[0,5,9],[6,5,9],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[10,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:118, balls: [[0,13,8],[1,13,8],[2,13,8],[4,13,8],[5,13,8],[6,13,8],[8,13,8],[9,13,8],[10,13,8],[0,12,8],[1,12,8],[2,12,8],[4,12,8],[5,12,8],[6,12,8],[8,12,8],[9,12,8],[10,12,8],[0,11,7],[1,11,7],[2,11,7],[4,11,0],[5,11,0],[6,11,0],[8,11,7],[9,11,7],[10,11,7],[0,10,6],[1,10,6],[2,10,6],[4,10,1],[5,10,1],[6,10,1],[8,10,6],[9,10,6],[10,10,6],[0,9,5],[1,9,5],[2,9,5],[4,9,2],[5,9,2],[6,9,2],[8,9,5],[9,9,5],[10,9,5],[0,8,4],[1,8,4],[2,8,4],[4,8,3],[5,8,3],[6,8,3],[8,8,4],[9,8,4],[10,8,4],[0,7,3],[1,7,3],[2,7,3],[4,7,4],[5,7,4],[6,7,4],[8,7,3],[9,7,3],[10,7,3],[0,6,2],[1,6,2],[2,6,2],[4,6,5],[5,6,5],[6,6,5],[8,6,2],[9,6,2],[10,6,2],[0,5,1],[1,5,1],[2,5,1],[4,5,6],[5,5,6],[6,5,6],[8,5,1],[9,5,1],[10,5,1],[0,4,0],[1,4,0],[2,4,0],[4,4,7],[5,4,7],[6,4,7],[8,4,0],[9,4,0],[10,4,0],[0,3,8],[1,3,8],[2,3,8],[4,3,8],[5,3,8],[6,3,8],[8,3,8],[9,3,8],[10,3,8],[0,2,8],[1,2,8],[2,2,8],[4,2,8],[5,2,8],[6,2,8],[8,2,8],[9,2,8],[10,2,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:119, balls: [[0,17,9],[10,17,9],[0,16,4],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[10,16,4],[0,15,9],[10,15,9],[0,14,4],[1,14,4],[2,14,4],[3,14,4],[4,14,4],[5,14,4],[6,14,4],[7,14,4],[8,14,4],[9,14,4],[10,14,4],[0,13,9],[10,13,9],[0,12,3],[1,12,8],[2,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[8,12,8],[9,12,8],[10,12,3],[0,11,9],[10,11,9],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,9],[10,9,9],[0,8,3],[1,8,8],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[10,8,3],[0,7,9],[10,7,9],[0,6,1],[1,6,1],[2,6,1],[3,6,1],[4,6,1],[5,6,1],[6,6,1],[7,6,1],[8,6,1],[9,6,1],[10,6,1],[0,5,9],[10,5,9],[0,4,1],[1,4,8],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,8],[10,4,1],[0,3,9],[10,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:120, balls: [[0,17,9],[1,17,1],[2,17,1],[3,17,1],[4,17,9],[5,17,0],[6,17,9],[7,17,1],[8,17,1],[9,17,1],[10,17,9],[0,16,1],[1,16,1],[2,16,1],[3,16,9],[4,16,4],[5,16,0],[6,16,3],[7,16,9],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,9],[3,15,4],[4,15,4],[5,15,0],[6,15,3],[7,15,3],[8,15,9],[9,15,1],[10,15,1],[0,14,1],[1,14,9],[2,14,4],[3,14,4],[4,14,4],[5,14,0],[6,14,3],[7,14,3],[8,14,3],[9,14,9],[10,14,1],[0,13,9],[1,13,4],[2,13,4],[3,13,4],[4,13,4],[5,13,0],[6,13,3],[7,13,3],[8,13,3],[9,13,3],[10,13,9],[0,12,0],[1,12,4],[2,12,4],[3,12,4],[4,12,4],[5,12,0],[6,12,3],[7,12,3],[8,12,3],[9,12,3],[10,12,0],[0,11,0],[1,11,4],[2,11,4],[3,11,4],[4,11,4],[5,11,0],[6,11,3],[7,11,3],[8,11,3],[9,11,3],[10,11,0],[0,10,0],[1,10,4],[2,10,4],[3,10,4],[4,10,4],[5,10,0],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,0],[0,9,0],[1,9,4],[2,9,4],[3,9,4],[4,9,9],[5,9,0],[6,9,9],[7,9,3],[8,9,3],[9,9,3],[10,9,0],[0,8,0],[1,8,4],[2,8,4],[3,8,9],[4,8,1],[5,8,1],[6,8,1],[7,8,9],[8,8,3],[9,8,3],[10,8,0],[0,7,0],[1,7,4],[2,7,9],[3,7,1],[4,7,1],[5,7,1],[6,7,1],[7,7,1],[8,7,9],[9,7,3],[10,7,0],[0,6,0],[1,6,9],[2,6,1],[3,6,1],[4,6,1],[5,6,1],[6,6,1],[7,6,1],[8,6,1],[9,6,9],[10,6,0]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:121, balls: [[0,17,7],[1,17,7],[9,17,7],[10,17,7],[2,16,7],[8,16,7],[0,15,6],[1,15,6],[3,15,7],[4,15,7],[5,15,8],[6,15,7],[7,15,7],[9,15,6],[10,15,6],[2,14,6],[5,14,9],[8,14,6],[0,13,4],[1,13,4],[3,13,6],[4,13,6],[5,13,8],[6,13,6],[7,13,6],[9,13,4],[10,13,4],[2,12,4],[5,12,9],[8,12,4],[0,11,3],[1,11,3],[3,11,4],[4,11,4],[5,11,8],[6,11,4],[7,11,4],[9,11,3],[10,11,3],[2,10,3],[5,10,9],[8,10,3],[0,9,2],[1,9,2],[3,9,3],[4,9,3],[5,9,8],[6,9,3],[7,9,3],[9,9,2],[10,9,2],[2,8,2],[5,8,9],[8,8,2],[0,7,1],[1,7,1],[3,7,2],[4,7,2],[5,7,8],[6,7,2],[7,7,2],[9,7,1],[10,7,1],[2,6,1],[5,6,9],[8,6,1],[3,5,1],[4,5,1],[5,5,8],[6,5,1],[7,5,1],[5,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:122, balls: [[6,17,9],[5,16,9],[6,16,9],[7,16,9],[5,15,9],[7,15,9],[5,14,8],[5,13,8],[5,12,8],[1,11,9],[3,11,9],[5,11,9],[7,11,9],[9,11,9],[1,10,1],[2,10,1],[3,10,0],[4,10,0],[5,10,0],[6,10,0],[7,10,0],[8,10,6],[9,10,6],[1,9,1],[2,9,1],[3,9,0],[4,9,0],[5,9,0],[6,9,0],[7,9,0],[8,9,6],[9,9,6],[1,8,1],[2,8,1],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,6],[9,8,6],[1,7,1],[2,7,1],[3,7,0],[4,7,0],[5,7,0],[6,7,0],[7,7,0],[8,7,6],[9,7,6],[2,6,1],[3,6,1],[4,6,0],[5,6,0],[6,6,0],[7,6,6],[8,6,6],[1,5,8],[3,5,1],[4,5,1],[5,5,8],[6,5,6],[7,5,6],[9,5,8],[5,4,9],[0,3,8],[2,3,8],[4,3,8],[6,3,8],[8,3,8],[10,3,8],[1,1,8],[3,1,8],[5,1,8],[7,1,8],[9,1,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:123, balls: [[0,13,8],[2,13,9],[3,13,0],[4,13,8],[5,13,8],[6,13,8],[7,13,0],[8,13,9],[10,13,8],[0,12,3],[2,12,9],[3,12,9],[4,12,0],[5,12,8],[6,12,0],[7,12,9],[8,12,9],[10,12,3],[0,11,3],[2,11,9],[3,11,8],[4,11,9],[5,11,0],[6,11,9],[7,11,8],[8,11,9],[10,11,3],[0,10,8],[2,10,9],[3,10,4],[5,10,8],[7,10,2],[8,10,9],[10,10,8],[0,9,8],[2,9,9],[3,9,4],[5,9,8],[7,9,2],[8,9,9],[10,9,8],[0,8,8],[2,8,9],[3,8,4],[5,8,8],[7,8,2],[8,8,9],[10,8,8],[0,7,8],[2,7,9],[3,7,4],[5,7,5],[7,7,2],[8,7,9],[10,7,8],[0,6,3],[2,6,9],[3,6,4],[5,6,5],[7,6,2],[8,6,9],[10,6,3],[0,5,3],[2,5,9],[3,5,4],[5,5,5],[7,5,2],[8,5,9],[10,5,3],[0,4,8],[1,4,9],[2,4,9],[3,4,8],[4,4,4],[5,4,8],[6,4,2],[7,4,8],[8,4,9],[9,4,9],[10,4,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:124, balls: [[1,13,8],[2,13,8],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[8,13,8],[9,13,8],[1,12,9],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[8,12,9],[9,12,9],[1,11,1],[2,11,4],[3,11,6],[4,11,7],[5,11,9],[6,11,7],[7,11,6],[8,11,4],[9,11,1],[1,10,1],[2,10,4],[3,10,6],[4,10,7],[5,10,9],[6,10,7],[7,10,6],[8,10,4],[9,10,1],[1,9,1],[2,9,4],[3,9,6],[4,9,7],[5,9,9],[6,9,7],[7,9,6],[8,9,4],[9,9,1],[1,8,8],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[1,7,1],[2,7,4],[3,7,6],[4,7,7],[5,7,9],[6,7,7],[7,7,6],[8,7,4],[9,7,1],[1,6,1],[2,6,4],[3,6,6],[4,6,7],[5,6,9],[6,6,7],[7,6,6],[8,6,4],[9,6,1],[1,5,1],[2,5,4],[3,5,6],[4,5,7],[5,5,9],[6,5,7],[7,5,6],[8,5,4],[9,5,1],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:125, balls: [[0,17,8],[1,17,9],[2,17,8],[3,17,9],[4,17,8],[5,17,9],[6,17,8],[7,17,9],[8,17,8],[9,17,9],[10,17,8],[0,16,1],[1,16,9],[2,16,2],[3,16,9],[4,16,3],[5,16,9],[6,16,4],[7,16,9],[8,16,6],[9,16,9],[10,16,7],[1,14,9],[3,14,9],[5,14,9],[7,14,9],[9,14,9],[10,14,8],[1,13,9],[3,13,9],[5,13,9],[7,13,9],[8,13,8],[9,13,9],[1,12,9],[3,12,9],[5,12,9],[6,12,8],[7,12,9],[9,12,9],[1,11,9],[3,11,9],[4,11,8],[5,11,9],[7,11,9],[9,11,9],[1,10,9],[2,10,8],[3,10,9],[5,10,9],[7,10,9],[9,10,9],[0,9,8],[1,8,9],[3,8,9],[5,8,9],[7,8,9],[9,8,9],[1,7,9],[2,7,8],[3,7,9],[5,7,9],[7,7,9],[9,7,9],[1,6,9],[3,6,9],[4,6,8],[5,6,9],[7,6,9],[9,6,9],[3,5,9],[5,5,9],[6,5,8],[7,5,9],[5,4,9],[8,4,8],[10,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:126, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,9],[9,16,9],[1,15,9],[9,15,9],[1,14,9],[3,14,9],[4,14,8],[5,14,8],[6,14,8],[7,14,9],[9,14,9],[1,13,9],[3,13,9],[7,13,9],[9,13,9],[1,12,9],[3,12,9],[5,12,0],[7,12,9],[9,12,9],[1,11,9],[3,11,9],[5,11,2],[7,11,9],[9,11,9],[1,10,9],[3,10,9],[5,10,8],[7,10,9],[9,10,9],[1,9,9],[3,9,9],[5,9,7],[7,9,9],[9,9,9],[1,8,9],[3,8,9],[5,8,1],[7,8,9],[9,8,9],[1,7,9],[3,7,9],[7,7,9],[9,7,9],[1,6,9],[3,6,9],[4,6,9],[5,6,9],[6,6,9],[7,6,9],[9,6,9],[1,5,9],[9,5,9],[1,4,9],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:127, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,36,54,23,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:128, balls: [[0,14,8],[1,14,8],[2,14,8],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[8,14,8],[9,14,8],[10,14,8],[0,13,7],[1,13,7],[2,13,7],[3,13,7],[4,13,7],[5,13,7],[6,13,7],[7,13,7],[8,13,7],[9,13,7],[10,13,7],[0,12,7],[1,12,7],[2,12,7],[3,12,7],[4,12,7],[5,12,7],[6,12,7],[7,12,7],[8,12,7],[9,12,7],[10,12,7],[0,10,0],[1,10,0],[2,10,9],[4,10,9],[5,10,0],[6,10,9],[8,10,9],[9,10,0],[10,10,0],[0,9,0],[1,9,0],[2,9,9],[4,9,9],[5,9,0],[6,9,9],[8,9,9],[9,9,0],[10,9,0],[0,8,0],[1,8,0],[2,8,9],[4,8,9],[5,8,0],[6,8,9],[8,8,9],[9,8,0],[10,8,0],[0,7,0],[1,7,0],[2,7,9],[4,7,9],[5,7,0],[6,7,9],[8,7,9],[9,7,0],[10,7,0],[0,5,4],[1,5,4],[2,5,4],[3,5,4],[4,5,4],[5,5,4],[6,5,4],[7,5,4],[8,5,4],[9,5,4],[10,5,4],[0,4,4],[1,4,4],[2,4,4],[3,4,4],[4,4,4],[5,4,4],[6,4,4],[7,4,4],[8,4,4],[9,4,4],[10,4,4],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:129, balls: [[0,17,8],[4,17,8],[8,17,8],[1,16,8],[2,16,8],[3,16,8],[5,16,8],[6,16,8],[7,16,8],[9,16,8],[10,16,8],[1,15,8],[2,15,4],[3,15,8],[5,15,8],[6,15,4],[7,15,8],[9,15,8],[10,15,4],[1,14,8],[2,14,8],[3,14,8],[5,14,8],[6,14,8],[7,14,8],[9,14,8],[10,14,8],[3,13,8],[7,13,8],[0,12,8],[1,12,8],[2,12,8],[4,12,8],[5,12,8],[6,12,8],[8,12,8],[9,12,8],[10,12,8],[0,11,8],[1,11,3],[2,11,8],[4,11,8],[5,11,3],[6,11,8],[8,11,8],[9,11,3],[10,11,8],[0,10,8],[1,10,8],[2,10,8],[4,10,8],[5,10,8],[6,10,8],[8,10,8],[9,10,8],[10,10,8],[2,9,8],[6,9,8],[10,9,8],[0,8,8],[1,8,8],[3,8,8],[4,8,8],[5,8,8],[7,8,8],[8,8,8],[9,8,8],[0,7,1],[1,7,8],[3,7,8],[4,7,1],[5,7,8],[7,7,8],[8,7,1],[9,7,8],[0,6,8],[1,6,8],[3,6,8],[4,6,8],[5,6,8],[7,6,8],[8,6,8],[9,6,8],[0,4,8],[1,4,8],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,8],[10,4,8]], mask_left: [[1,16],[2,16],[3,16],[5,16],[6,16],[7,16],[9,16],[10,16],[1,15],[2,15],[3,15],[5,15],[6,15],[7,15],[9,15],[10,15],[1,14],[2,14],[3,14],[5,14],[6,14],[7,14],[9,14],[10,14]], mask_right: [[0,8],[1,8],[3,8],[4,8],[5,8],[7,8],[8,8],[9,8],[0,7],[1,7],[3,7],[4,7],[5,7],[7,7],[8,7],[9,7],[0,6],[1,6],[3,6],[4,6],[5,6],[7,6],[8,6],[9,6]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:130, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,4],[1,16,4],[2,16,4],[3,16,4],[4,16,4],[5,16,4],[6,16,4],[7,16,4],[8,16,4],[9,16,4],[10,16,4],[1,15,4],[2,15,4],[3,15,4],[4,15,4],[5,15,4],[6,15,4],[7,15,4],[8,15,4],[9,15,4],[1,14,4],[2,14,4],[3,14,4],[4,14,4],[5,14,4],[6,14,4],[7,14,4],[8,14,4],[9,14,4],[2,13,4],[3,13,4],[4,13,4],[5,13,4],[6,13,4],[7,13,4],[8,13,4],[2,12,4],[3,12,4],[4,12,4],[5,12,4],[6,12,4],[7,12,4],[8,12,4],[3,11,4],[4,11,4],[5,11,4],[6,11,4],[7,11,4],[3,10,8],[4,10,4],[5,10,8],[6,10,4],[7,10,8],[4,9,8],[5,9,8],[6,9,8],[4,8,8],[5,8,8],[6,8,8],[4,7,8],[5,7,8],[6,7,8],[5,6,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:131, balls: [[0,15,8],[1,15,8],[2,15,8],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[8,15,8],[9,15,8],[10,15,8],[0,14,2],[1,14,2],[2,14,2],[3,14,2],[4,14,2],[5,14,2],[6,14,2],[7,14,2],[8,14,2],[9,14,2],[10,14,2],[0,13,9],[1,13,8],[2,13,8],[3,13,9],[4,13,9],[5,13,9],[6,13,9],[7,13,9],[8,13,8],[9,13,8],[10,13,9],[0,12,9],[1,12,8],[2,12,8],[3,12,9],[4,12,1],[5,12,1],[6,12,1],[7,12,9],[8,12,8],[9,12,8],[10,12,9],[0,11,9],[1,11,8],[2,11,8],[3,11,9],[4,11,1],[5,11,1],[6,11,1],[7,11,9],[8,11,8],[9,11,8],[10,11,9],[0,10,9],[3,10,8],[7,10,8],[10,10,9],[0,9,9],[3,9,8],[7,9,8],[10,9,9],[0,8,9],[1,8,6],[2,8,6],[3,8,9],[4,8,8],[5,8,8],[6,8,8],[7,8,9],[8,8,4],[9,8,4],[10,8,9],[0,7,9],[1,7,6],[2,7,6],[3,7,9],[4,7,8],[5,7,8],[6,7,8],[7,7,9],[8,7,4],[9,7,4],[10,7,9],[0,6,9],[1,6,9],[2,6,9],[3,6,9],[4,6,8],[5,6,8],[6,6,8],[7,6,9],[8,6,9],[9,6,9],[10,6,9],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,3],[1,4,3],[2,4,3],[3,4,3],[4,4,3],[5,4,3],[6,4,3],[7,4,3],[8,4,3],[9,4,3],[10,4,3]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:132, balls: [[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[0,10,8],[2,10,9],[8,10,9],[10,10,8],[1,9,9],[4,9,6],[5,9,8],[6,9,6],[9,9,9],[1,8,9],[3,8,0],[4,8,0],[5,8,8],[6,8,0],[7,8,0],[9,8,9],[1,7,9],[3,7,1],[4,7,1],[5,7,8],[6,7,1],[7,7,1],[9,7,9],[1,6,9],[4,6,2],[5,6,8],[6,6,2],[9,6,9],[0,5,8],[2,5,9],[8,5,9],[10,5,8],[3,4,9],[4,4,8],[5,4,8],[6,4,8],[7,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:133, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,6],[1,16,6],[2,16,6],[3,16,6],[4,16,6],[5,16,6],[6,16,6],[7,16,6],[8,16,6],[9,16,6],[10,16,6],[0,15,8],[1,15,8],[2,15,8],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[8,15,8],[9,15,8],[10,15,8],[0,13,8],[1,13,8],[2,13,8],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[8,13,8],[9,13,8],[10,13,8],[0,12,1],[1,12,1],[2,12,1],[3,12,1],[4,12,1],[5,12,1],[6,12,1],[7,12,1],[8,12,1],[9,12,1],[10,12,1],[0,11,8],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[10,11,8],[0,9,8],[1,9,8],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,8],[10,9,8],[0,8,4],[1,8,4],[2,8,4],[3,8,4],[4,8,4],[5,8,4],[6,8,4],[7,8,4],[8,8,4],[9,8,4],[10,8,4],[0,7,8],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,8],[10,7,8]], mask_left: [[0,17],[1,17],[2,17],[3,17],[4,17],[5,17],[6,17],[7,17],[8,17],[9,17],[10,17],[0,15],[1,15],[2,15],[3,15],[4,15],[5,15],[6,15],[7,15],[8,15],[9,15],[10,15],[0,12],[1,12],[2,12],[3,12],[4,12],[5,12],[6,12],[7,12],[8,12],[9,12],[10,12],[0,9],[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9],[9,9],[10,9],[0,7],[1,7],[2,7],[3,7],[4,7],[5,7],[6,7],[7,7],[8,7],[9,7],[10,7]], mask_right: [[0,16],[1,16],[2,16],[3,16],[4,16],[5,16],[6,16],[7,16],[8,16],[9,16],[10,16],[0,13],[1,13],[2,13],[3,13],[4,13],[5,13],[6,13],[7,13],[8,13],[9,13],[10,13],[0,11],[1,11],[2,11],[3,11],[4,11],[5,11],[6,11],[7,11],[8,11],[9,11],[10,11],[0,8],[1,8],[2,8],[3,8],[4,8],[5,8],[6,8],[7,8],[8,8],[9,8],[10,8]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:134, balls: [[5,15,8],[4,14,8],[5,14,1],[6,14,8],[3,13,8],[4,13,1],[5,13,0],[6,13,1],[7,13,8],[2,12,8],[3,12,1],[4,12,9],[5,12,0],[6,12,9],[7,12,1],[8,12,8],[1,11,8],[2,11,1],[3,11,9],[4,11,0],[5,11,0],[6,11,0],[7,11,9],[8,11,1],[9,11,8],[0,10,8],[1,10,1],[2,10,9],[3,10,0],[4,10,0],[5,10,0],[6,10,0],[7,10,0],[8,10,9],[9,10,1],[10,10,8],[0,9,1],[1,9,9],[2,9,0],[3,9,0],[4,9,0],[6,9,0],[7,9,0],[8,9,0],[9,9,9],[10,9,1],[0,8,9],[1,8,0],[2,8,0],[3,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,9],[0,7,9],[1,7,0],[2,7,0],[8,7,0],[9,7,0],[10,7,9],[0,6,9],[1,6,0],[9,6,0],[10,6,9],[0,5,9],[1,5,8],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,8],[10,5,9],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,0],[5,4,9],[6,4,0],[7,4,9],[8,4,9],[9,4,9],[10,4,9],[0,3,1],[1,3,1],[2,3,1],[3,3,1],[4,3,1],[5,3,1],[6,3,1],[7,3,1],[8,3,1],[9,3,1],[10,3,1]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:135, balls: [[0,14,8],[1,14,8],[2,14,8],[3,14,8],[4,14,9],[6,14,9],[7,14,8],[8,14,8],[9,14,8],[10,14,8],[0,13,7],[1,13,7],[2,13,7],[3,13,7],[4,13,9],[6,13,9],[7,13,0],[8,13,0],[9,13,0],[10,13,0],[0,12,6],[1,12,6],[2,12,6],[3,12,6],[4,12,9],[6,12,9],[7,12,1],[8,12,1],[9,12,1],[10,12,1],[0,11,5],[1,11,5],[2,11,5],[3,11,5],[4,11,9],[6,11,9],[7,11,2],[8,11,2],[9,11,2],[10,11,2],[0,10,9],[1,10,8],[2,10,9],[3,10,9],[4,10,9],[6,10,9],[7,10,9],[8,10,9],[9,10,8],[10,10,9],[0,9,4],[1,9,4],[2,9,4],[3,9,4],[4,9,9],[6,9,9],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,3],[1,8,3],[2,8,3],[3,8,3],[4,8,9],[6,8,9],[7,8,4],[8,8,4],[9,8,4],[10,8,4],[0,7,2],[1,7,2],[2,7,2],[3,7,2],[4,7,9],[6,7,9],[7,7,5],[8,7,5],[9,7,5],[10,7,5],[0,6,8],[1,6,8],[2,6,8],[3,6,8],[4,6,9],[6,6,9],[7,6,8],[8,6,8],[9,6,8],[10,6,8],[0,5,1],[1,5,1],[2,5,1],[3,5,1],[4,5,9],[6,5,9],[7,5,6],[8,5,6],[9,5,6],[10,5,6],[0,4,0],[1,4,0],[2,4,0],[3,4,0],[4,4,9],[6,4,9],[7,4,7],[8,4,7],[9,4,7],[10,4,7],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,9],[6,3,9],[7,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:136, balls: [[0,15,8],[1,15,9],[0,14,1],[1,14,2],[2,14,8],[3,14,9],[0,13,1],[1,13,2],[2,13,3],[3,13,4],[4,13,8],[5,13,9],[0,12,1],[1,12,2],[2,12,3],[3,12,4],[4,12,6],[5,12,7],[6,12,8],[7,12,9],[0,11,1],[1,11,2],[2,11,3],[3,11,4],[4,11,6],[5,11,7],[6,11,6],[7,11,4],[8,11,8],[9,11,9],[0,10,1],[1,10,2],[2,10,3],[3,10,4],[4,10,6],[5,10,7],[6,10,6],[7,10,4],[8,10,3],[9,10,2],[10,10,8],[0,9,9],[1,9,2],[2,9,3],[3,9,4],[4,9,6],[5,9,7],[6,9,6],[7,9,4],[8,9,3],[9,9,2],[10,9,1],[1,8,8],[2,8,9],[3,8,4],[4,8,6],[5,8,7],[6,8,6],[7,8,4],[8,8,3],[9,8,2],[10,8,1],[3,7,8],[4,7,9],[5,7,7],[6,7,6],[7,7,4],[8,7,3],[9,7,2],[10,7,1],[5,6,8],[6,6,9],[7,6,4],[8,6,3],[9,6,2],[10,6,1],[7,5,8],[8,5,9],[9,5,2],[10,5,1],[9,4,8],[10,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:137, balls: [[0,17,8],[1,17,9],[2,17,8],[3,17,9],[4,17,8],[5,17,9],[6,17,8],[7,17,9],[8,17,8],[9,17,9],[10,17,8],[0,16,0],[2,16,1],[4,16,2],[6,16,3],[8,16,4],[10,16,5],[1,15,8],[3,15,8],[5,15,8],[7,15,8],[9,15,8],[1,14,1],[3,14,2],[5,14,3],[7,14,4],[9,14,5],[0,13,8],[2,13,8],[4,13,8],[6,13,8],[8,13,8],[10,13,8],[0,12,1],[2,12,2],[4,12,3],[6,12,4],[8,12,5],[10,12,6],[1,11,8],[3,11,8],[5,11,8],[7,11,8],[9,11,8],[1,10,2],[3,10,3],[5,10,4],[7,10,5],[9,10,6],[0,9,8],[2,9,8],[4,9,8],[6,9,8],[8,9,8],[10,9,8],[0,8,2],[2,8,3],[4,8,4],[6,8,5],[8,8,6],[10,8,7],[1,7,8],[3,7,8],[5,7,8],[7,7,8],[9,7,8],[1,6,3],[3,6,4],[5,6,5],[7,6,6],[9,6,7],[0,5,8],[1,5,9],[2,5,8],[3,5,9],[4,5,8],[5,5,9],[6,5,8],[7,5,9],[8,5,8],[9,5,9],[10,5,8],[0,4,3],[2,4,4],[4,4,5],[6,4,6],[8,4,7],[10,4,0]], mask_left: [[0,17],[1,17],[2,17],[3,17],[4,17],[5,17],[6,17],[7,17],[8,17],[9,17],[10,17],[0,16],[2,16],[4,16],[6,16],[8,16],[10,16],[0,13],[2,13],[4,13],[6,13],[8,13],[10,13],[0,12],[2,12],[4,12],[6,12],[8,12],[10,12],[0,9],[2,9],[4,9],[6,9],[8,9],[10,9],[0,8],[2,8],[4,8],[6,8],[8,8],[10,8],[0,5],[1,5],[2,5],[3,5],[4,5],[5,5],[6,5],[7,5],[8,5],[9,5],[10,5],[0,4],[2,4],[4,4],[6,4],[8,4],[10,4]], mask_right: [[1,15],[3,15],[5,15],[7,15],[9,15],[1,14],[3,14],[5,14],[7,14],[9,14],[1,11],[3,11],[5,11],[7,11],[9,11],[1,10],[3,10],[5,10],[7,10],[9,10],[1,7],[3,7],[5,7],[7,7],[9,7],[1,6],[3,6],[5,6],[7,6],[9,6]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:138, balls: [[0,15,8],[1,15,7],[2,15,7],[3,15,7],[4,15,7],[5,15,7],[6,15,7],[7,15,7],[8,15,7],[9,15,7],[10,15,8],[1,14,9],[3,14,9],[5,14,9],[7,14,9],[9,14,9],[1,13,9],[3,13,9],[5,13,9],[7,13,9],[9,13,9],[0,12,8],[1,12,1],[2,12,1],[3,12,9],[5,12,9],[7,12,9],[9,12,9],[10,12,8],[1,11,9],[3,11,9],[5,11,9],[7,11,9],[9,11,9],[0,10,8],[1,10,2],[2,10,2],[3,10,2],[4,10,2],[5,10,9],[7,10,9],[9,10,9],[10,10,8],[1,9,9],[3,9,9],[5,9,9],[7,9,9],[9,9,9],[0,8,8],[1,8,4],[2,8,4],[3,8,4],[4,8,4],[5,8,4],[6,8,4],[7,8,9],[9,8,9],[10,8,8],[1,7,9],[3,7,9],[5,7,9],[7,7,9],[9,7,9],[0,6,8],[1,6,6],[2,6,6],[3,6,6],[4,6,6],[5,6,6],[6,6,6],[7,6,6],[8,6,6],[9,6,9],[10,6,8],[1,5,9],[3,5,9],[5,5,9],[7,5,9],[9,5,9],[1,4,9],[3,4,9],[5,4,9],[7,4,9],[9,4,9],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:139, balls: [[0,11,8],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[10,11,8],[0,10,8],[1,10,8],[2,10,8],[3,10,8],[4,10,8],[5,10,8],[6,10,8],[7,10,8],[8,10,8],[9,10,8],[10,10,8],[0,9,8],[1,9,8],[2,9,3],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,3],[8,9,8],[9,9,3],[10,9,8],[0,8,8],[1,8,3],[2,8,8],[3,8,3],[4,8,8],[5,8,8],[6,8,8],[7,8,3],[8,8,8],[9,8,3],[10,8,8],[0,7,8],[1,7,3],[2,7,8],[3,7,3],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,3],[9,7,8],[10,7,8],[0,6,8],[1,6,3],[2,6,8],[3,6,3],[4,6,8],[5,6,8],[6,6,8],[7,6,3],[8,6,8],[9,6,3],[10,6,8],[0,5,8],[1,5,8],[2,5,3],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,3],[8,5,8],[9,5,3],[10,5,8],[0,4,8],[1,4,8],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,8],[10,4,8],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:140, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,2],[1,16,2],[2,16,3],[3,16,3],[4,16,4],[5,16,4],[6,16,5],[7,16,5],[8,16,6],[9,16,6],[10,16,7],[0,15,1],[1,15,2],[2,15,2],[3,15,3],[4,15,3],[5,15,4],[6,15,4],[7,15,5],[8,15,5],[9,15,6],[10,15,6],[0,14,1],[1,14,1],[2,14,2],[3,14,2],[4,14,3],[5,14,3],[6,14,4],[7,14,4],[8,14,5],[9,14,5],[10,14,6],[0,13,0],[1,13,1],[2,13,1],[3,13,2],[4,13,2],[5,13,3],[6,13,3],[7,13,4],[8,13,4],[9,13,5],[10,13,5],[0,12,8],[1,12,8],[2,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[8,12,8],[9,12,8],[10,12,8],[0,11,0],[1,11,8],[3,11,8],[4,11,0],[5,11,8],[6,11,0],[7,11,8],[9,11,8],[10,11,0],[0,10,7],[1,10,8],[3,10,8],[4,10,7],[5,10,8],[6,10,7],[7,10,8],[9,10,8],[10,10,7],[0,9,6],[1,9,8],[3,9,8],[4,9,6],[5,9,8],[6,9,6],[7,9,8],[9,9,8],[10,9,6],[0,8,5],[1,8,8],[3,8,8],[4,8,5],[5,8,8],[6,8,5],[7,8,8],[9,8,8],[10,8,5],[0,7,4],[1,7,8],[3,7,8],[4,7,4],[5,7,8],[6,7,4],[7,7,8],[9,7,8],[10,7,4],[0,6,3],[1,6,8],[3,6,8],[4,6,3],[5,6,8],[6,6,3],[7,6,8],[9,6,8],[10,6,3],[0,5,2],[1,5,8],[3,5,8],[4,5,2],[5,5,8],[6,5,2],[7,5,8],[9,5,8],[10,5,2],[0,4,1],[1,4,8],[3,4,8],[4,4,1],[5,4,8],[6,4,1],[7,4,8],[9,4,8],[10,4,1],[0,3,0],[1,3,8],[3,3,8],[4,3,0],[5,3,8],[6,3,0],[7,3,8],[9,3,8],[10,3,0],[0,2,8],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,8],[10,2,8]], mask_left: [[0,16],[1,16],[2,16],[3,16],[0,15],[1,15],[2,15],[3,15],[4,15],[0,14],[1,14],[2,14],[3,14],[4,14],[5,14],[0,13],[1,13],[2,13],[3,13],[4,13],[5,13],[6,13],[0,11],[0,10],[0,9],[0,8],[0,7],[0,6],[0,5],[0,4],[0,3]], mask_right: [[4,16],[5,16],[6,16],[7,16],[8,16],[9,16],[10,16],[5,15],[6,15],[7,15],[8,15],[9,15],[10,15],[6,14],[7,14],[8,14],[9,14],[10,14],[7,13],[8,13],[9,13],[10,13],[10,11],[10,10],[10,9],[10,8],[10,7],[10,6],[10,5],[10,4],[10,3]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:141, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[5,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,2],[1,16,3],[2,16,5],[8,16,5],[9,16,3],[10,16,2],[0,15,2],[1,15,3],[2,15,5],[8,15,5],[9,15,3],[10,15,2],[0,14,2],[1,14,3],[2,14,5],[8,14,5],[9,14,3],[10,14,2],[0,13,2],[1,13,3],[2,13,5],[8,13,5],[9,13,3],[10,13,2],[0,12,2],[1,12,3],[2,12,5],[8,12,5],[9,12,3],[10,12,2],[0,11,2],[1,11,3],[2,11,5],[3,11,9],[7,11,9],[8,11,5],[9,11,3],[10,11,2],[0,10,1],[1,10,2],[2,10,3],[3,10,5],[7,10,5],[8,10,3],[9,10,2],[10,10,1],[0,9,1],[1,9,2],[2,9,3],[3,9,5],[4,9,5],[5,9,5],[6,9,5],[7,9,5],[8,9,3],[9,9,2],[10,9,1],[0,8,1],[1,8,2],[2,8,2],[3,8,3],[4,8,5],[5,8,5],[6,8,5],[7,8,3],[8,8,2],[9,8,2],[10,8,1],[0,7,1],[1,7,1],[2,7,2],[3,7,2],[4,7,3],[5,7,3],[6,7,3],[7,7,2],[8,7,2],[9,7,1],[10,7,1],[1,6,1],[2,6,1],[3,6,2],[4,6,2],[5,6,2],[6,6,2],[7,6,2],[8,6,1],[9,6,1],[1,5,1],[2,5,1],[3,5,2],[4,5,2],[5,5,2],[6,5,2],[7,5,2],[8,5,1],[9,5,1],[2,4,1],[3,4,1],[4,4,1],[5,4,1],[6,4,1],[7,4,1],[8,4,1],[3,3,1],[4,3,1],[5,3,1],[6,3,1],[7,3,1]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:142, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,9],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,8],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,9],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[10,16,8],[0,15,0],[1,15,1],[2,15,1],[3,15,2],[4,15,2],[5,15,9],[6,15,2],[7,15,2],[8,15,1],[9,15,1],[10,15,0],[0,14,0],[1,14,1],[2,14,1],[3,14,2],[4,14,2],[5,14,9],[6,14,2],[7,14,2],[8,14,1],[9,14,1],[10,14,0],[0,13,1],[1,13,2],[2,13,2],[3,13,3],[4,13,3],[5,13,9],[6,13,3],[7,13,3],[8,13,2],[9,13,2],[10,13,1],[0,12,1],[1,12,2],[2,12,2],[3,12,3],[4,12,3],[5,12,9],[6,12,3],[7,12,3],[8,12,2],[9,12,2],[10,12,1],[0,11,2],[1,11,3],[2,11,3],[3,11,4],[4,11,4],[5,11,9],[6,11,4],[7,11,4],[8,11,3],[9,11,3],[10,11,2],[0,10,2],[1,10,3],[2,10,3],[3,10,4],[4,10,4],[5,10,9],[6,10,4],[7,10,4],[8,10,3],[9,10,3],[10,10,2],[0,9,3],[1,9,4],[2,9,4],[3,9,5],[4,9,5],[5,9,9],[6,9,5],[7,9,5],[8,9,4],[9,9,4],[10,9,3],[0,8,3],[1,8,4],[2,8,4],[3,8,5],[4,8,5],[5,8,9],[6,8,5],[7,8,5],[8,8,4],[9,8,4],[10,8,3],[0,7,4],[1,7,5],[2,7,5],[3,7,6],[4,7,6],[5,7,9],[6,7,6],[7,7,6],[8,7,5],[9,7,5],[10,7,4],[0,6,4],[1,6,5],[2,6,5],[3,6,6],[4,6,6],[5,6,9],[6,6,6],[7,6,6],[8,6,5],[9,6,5],[10,6,4],[0,5,5],[1,5,6],[2,5,6],[3,5,7],[4,5,7],[5,5,9],[6,5,7],[7,5,7],[8,5,6],[9,5,6],[10,5,5],[0,4,5],[1,4,6],[2,4,6],[3,4,7],[4,4,7],[5,4,9],[6,4,7],[7,4,7],[8,4,6],[9,4,6],[10,4,5],[0,3,6],[1,3,7],[2,3,7],[3,3,0],[4,3,0],[5,3,9],[6,3,0],[7,3,0],[8,3,7],[9,3,7],[10,3,6],[0,2,6],[1,2,7],[2,2,7],[3,2,0],[4,2,0],[5,2,9],[6,2,0],[7,2,0],[8,2,7],[9,2,7],[10,2,6],[0,1,8],[1,1,8],[2,1,8],[3,1,8],[4,1,8],[5,1,9],[6,1,8],[7,1,8],[8,1,8],[9,1,8],[10,1,8],[0,0,8],[1,0,8],[2,0,8],[3,0,8],[4,0,8],[5,0,9],[6,0,8],[7,0,8],[8,0,8],[9,0,8],[10,0,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:143, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,41,59,22,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:144, balls: [[3,17,9],[7,17,9],[1,14,9],[5,14,9],[9,14,9],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[3,11,1],[4,11,1],[5,11,1],[6,11,1],[7,11,1],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[0,9,9],[2,9,9],[3,9,4],[4,9,4],[5,9,4],[6,9,4],[7,9,4],[8,9,9],[10,9,9],[3,8,6],[4,8,6],[5,8,6],[6,8,6],[7,8,6],[3,7,7],[4,7,7],[5,7,7],[6,7,7],[7,7,7],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[1,4,9],[5,4,9],[9,4,9],[3,1,9],[7,1,9]], mask_left: [[3,11],[4,11],[5,11],[6,11],[7,11],[3,8],[4,8],[5,8],[6,8],[7,8]], mask_right: [[3,10],[4,10],[5,10],[6,10],[7,10],[3,7],[4,7],[5,7],[6,7],[7,7]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:145, balls: [[2,15,8],[3,15,9],[4,15,9],[5,15,9],[6,15,9],[7,15,9],[8,15,8],[2,14,8],[3,14,1],[4,14,1],[5,14,1],[6,14,1],[7,14,1],[8,14,8],[1,12,8],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[8,12,9],[9,12,8],[1,11,8],[2,11,2],[3,11,2],[4,11,2],[5,11,2],[6,11,2],[7,11,2],[8,11,2],[9,11,8],[0,9,8],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[10,9,8],[0,8,8],[1,8,3],[2,8,3],[3,8,3],[4,8,3],[5,8,3],[6,8,3],[7,8,3],[8,8,3],[9,8,3],[10,8,8],[1,6,8],[2,6,9],[3,6,9],[4,6,9],[5,6,9],[6,6,9],[7,6,9],[8,6,9],[9,6,8],[1,5,8],[2,5,4],[3,5,4],[4,5,4],[5,5,4],[6,5,4],[7,5,4],[8,5,4],[9,5,8],[2,3,8],[3,3,9],[4,3,9],[5,3,9],[6,3,9],[7,3,9],[8,3,8],[2,2,8],[3,2,5],[4,2,5],[5,2,5],[6,2,5],[7,2,5],[8,2,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:146, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[6,15,9],[7,15,6],[8,15,9],[6,14,9],[7,14,6],[8,14,9],[2,13,8],[3,13,8],[4,13,8],[5,13,8],[6,13,9],[7,13,6],[8,13,9],[9,13,8],[10,13,8],[2,12,8],[3,12,1],[4,12,1],[5,12,1],[6,12,9],[7,12,6],[8,12,9],[9,12,1],[10,12,1],[2,11,8],[3,11,1],[4,11,1],[5,11,1],[6,11,9],[7,11,6],[8,11,9],[9,11,1],[10,11,1],[2,10,8],[3,10,1],[4,10,8],[5,10,8],[6,10,9],[7,10,6],[8,10,9],[9,10,8],[10,10,8],[2,9,8],[3,9,1],[4,9,8],[6,9,9],[7,9,6],[8,9,9],[2,8,8],[3,8,1],[4,8,8],[6,8,9],[7,8,6],[8,8,9],[0,7,9],[1,7,9],[2,7,8],[3,7,1],[4,7,8],[5,7,9],[6,7,9],[7,7,6],[8,7,9],[0,6,6],[1,6,6],[2,6,8],[3,6,1],[4,6,8],[5,6,6],[6,6,6],[7,6,6],[8,6,9],[0,5,6],[1,5,6],[2,5,8],[3,5,1],[4,5,8],[5,5,6],[6,5,6],[7,5,6],[8,5,9],[0,4,9],[1,4,9],[2,4,8],[3,4,1],[4,4,8],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[2,3,8],[3,3,1],[4,3,8],[2,2,8],[3,2,1],[4,2,8],[0,0,9],[1,0,9],[2,0,9],[3,0,9],[4,0,9],[6,0,8],[7,0,8],[8,0,8],[9,0,8],[10,0,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:147, balls: [[4,17,4],[5,17,4],[6,17,4],[4,16,4],[5,16,4],[6,16,4],[2,15,4],[3,15,4],[4,15,4],[5,15,4],[6,15,4],[7,15,4],[8,15,4],[0,14,4],[1,14,4],[2,14,8],[3,14,1],[4,14,8],[5,14,1],[6,14,8],[7,14,1],[8,14,8],[9,14,4],[10,14,4],[0,13,4],[1,13,1],[2,13,8],[3,13,1],[4,13,8],[5,13,1],[6,13,8],[7,13,1],[8,13,8],[9,13,1],[10,13,4],[0,12,4],[1,12,1],[2,12,1],[3,12,1],[4,12,1],[5,12,1],[6,12,1],[7,12,1],[8,12,1],[9,12,1],[10,12,4],[0,11,4],[1,11,8],[2,11,1],[3,11,8],[4,11,1],[5,11,8],[6,11,1],[7,11,8],[8,11,1],[9,11,8],[10,11,4],[0,10,4],[1,10,8],[2,10,1],[3,10,8],[4,10,1],[5,10,8],[6,10,1],[7,10,8],[8,10,1],[9,10,8],[10,10,4],[1,9,4],[2,9,4],[3,9,4],[4,9,4],[5,9,4],[6,9,4],[7,9,4],[8,9,4],[9,9,4],[1,8,4],[2,8,4],[3,8,4],[4,8,4],[5,8,4],[6,8,4],[7,8,4],[8,8,4],[9,8,4],[1,7,9],[2,7,0],[3,7,0],[4,7,0],[5,7,9],[6,7,0],[7,7,0],[8,7,0],[9,7,9],[1,6,9],[2,6,0],[3,6,6],[4,6,0],[5,6,9],[6,6,0],[7,6,6],[8,6,0],[9,6,9],[1,5,9],[2,5,0],[3,5,6],[4,5,0],[5,5,9],[6,5,0],[7,5,6],[8,5,0],[9,5,9],[1,4,9],[2,4,0],[3,4,0],[4,4,0],[5,4,9],[6,4,0],[7,4,0],[8,4,0],[9,4,9],[2,3,9],[3,3,9],[4,3,9],[6,3,9],[7,3,9],[8,3,9]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:148, balls: [[2,17,9],[3,17,9],[7,17,9],[8,17,9],[4,16,9],[5,16,7],[6,16,9],[4,15,8],[5,15,8],[6,15,8],[3,14,7],[4,14,7],[5,14,7],[6,14,7],[7,14,7],[1,13,9],[2,13,9],[3,13,9],[4,13,8],[5,13,8],[6,13,8],[7,13,9],[8,13,9],[9,13,9],[3,12,7],[4,12,7],[5,12,7],[6,12,7],[7,12,7],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[1,10,9],[2,10,9],[3,10,9],[4,10,7],[5,10,7],[6,10,7],[7,10,9],[8,10,9],[9,10,9],[0,9,9],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[10,9,9],[3,8,7],[4,8,7],[5,8,7],[6,8,7],[7,8,7],[1,7,9],[2,7,9],[3,7,9],[4,7,8],[5,7,8],[6,7,8],[7,7,9],[8,7,9],[9,7,9],[0,6,9],[3,6,3],[4,6,3],[5,6,7],[6,6,3],[7,6,3],[10,6,9],[3,5,3],[4,5,3],[5,5,3],[6,5,3],[7,5,3],[4,4,3],[5,4,3],[6,4,3],[4,3,9],[6,3,9],[2,2,9],[3,2,9],[7,2,9],[8,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:149, balls: [[5,17,9],[5,16,9],[3,15,9],[5,15,9],[7,15,9],[3,14,9],[5,14,9],[7,14,9],[1,13,9],[3,13,9],[5,13,9],[7,13,9],[9,13,9],[1,12,9],[3,12,9],[5,12,9],[7,12,9],[9,12,9],[1,11,9],[3,11,9],[5,11,9],[7,11,9],[9,11,9],[1,10,9],[3,10,9],[5,10,9],[7,10,9],[9,10,9],[1,9,9],[3,9,9],[4,9,8],[5,9,9],[6,9,8],[7,9,9],[9,9,9],[1,8,9],[3,8,9],[4,8,4],[5,8,9],[6,8,6],[7,8,9],[9,8,9],[1,7,9],[2,7,8],[3,7,9],[4,7,4],[5,7,9],[6,7,6],[7,7,9],[8,7,8],[9,7,9],[1,6,9],[2,6,1],[3,6,9],[4,6,4],[5,6,9],[6,6,6],[7,6,9],[8,6,2],[9,6,9],[1,5,9],[2,5,1],[3,5,9],[4,5,9],[5,5,8],[6,5,9],[7,5,9],[8,5,2],[9,5,9],[1,4,9],[2,4,1],[3,4,9],[4,4,8],[5,4,8],[6,4,8],[7,4,9],[8,4,2],[9,4,9],[1,3,9],[2,3,9],[8,3,9],[9,3,9],[1,2,9],[9,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:150, balls: [[1,14,8],[2,14,8],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[8,14,8],[9,14,8],[0,13,8],[1,13,4],[2,13,4],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[8,13,4],[9,13,4],[10,13,8],[0,12,3],[1,12,0],[2,12,0],[3,12,6],[4,12,6],[5,12,6],[6,12,6],[7,12,6],[8,12,0],[9,12,0],[10,12,3],[0,11,5],[1,11,5],[2,11,5],[3,11,5],[4,11,5],[5,11,5],[6,11,5],[7,11,5],[8,11,5],[9,11,5],[10,11,5],[0,10,3],[1,10,0],[2,10,0],[3,10,5],[4,10,5],[5,10,5],[6,10,5],[7,10,5],[8,10,0],[9,10,0],[10,10,3],[0,9,1],[1,9,4],[2,9,4],[3,9,6],[4,9,6],[5,9,6],[6,9,6],[7,9,6],[8,9,4],[9,9,4],[10,9,1],[0,8,1],[1,8,2],[2,8,2],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,2],[9,8,2],[10,8,1],[0,7,1],[1,7,2],[2,7,2],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,2],[9,7,2],[10,7,1],[0,6,8],[1,6,2],[2,6,2],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[8,6,2],[9,6,2],[10,6,8],[1,5,8],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:151, balls: [[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[4,15,9],[5,15,6],[6,15,9],[0,14,9],[1,14,9],[5,14,6],[9,14,9],[10,14,9],[0,13,8],[1,13,8],[2,13,8],[3,13,8],[4,13,9],[5,13,6],[6,13,9],[7,13,8],[8,13,8],[9,13,8],[10,13,8],[1,12,6],[2,12,6],[3,12,6],[4,12,6],[5,12,6],[6,12,6],[7,12,6],[8,12,6],[9,12,6],[2,11,9],[3,11,9],[5,11,6],[7,11,9],[8,11,9],[2,10,8],[3,10,8],[4,10,6],[5,10,6],[6,10,6],[7,10,8],[8,10,8],[3,9,6],[4,9,9],[5,9,6],[6,9,9],[7,9,6],[4,8,6],[5,8,6],[6,8,6],[5,7,6],[5,6,6],[5,5,6],[5,4,6],[5,3,8],[5,2,6],[5,1,8],[5,0,6]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:152, balls: [[4,17,9],[6,17,9],[1,16,9],[4,16,4],[6,16,6],[9,16,9],[1,15,4],[4,15,8],[6,15,8],[9,15,6],[1,14,8],[3,14,4],[7,14,6],[9,14,8],[2,13,4],[3,13,4],[4,13,4],[5,13,0],[6,13,6],[7,13,6],[8,13,6],[0,12,9],[2,12,4],[3,12,4],[4,12,4],[5,12,0],[6,12,6],[7,12,6],[8,12,6],[10,12,9],[0,11,4],[3,11,4],[4,11,4],[6,11,6],[7,11,6],[10,11,6],[0,10,8],[3,10,0],[5,10,8],[7,10,0],[10,10,8],[3,9,0],[5,9,8],[7,9,0],[0,8,8],[3,8,1],[4,8,1],[6,8,3],[7,8,3],[10,8,8],[0,7,9],[2,7,1],[3,7,1],[4,7,1],[5,7,0],[6,7,3],[7,7,3],[8,7,3],[10,7,9],[0,6,1],[2,6,1],[3,6,1],[4,6,1],[5,6,0],[6,6,3],[7,6,3],[8,6,3],[10,6,3],[1,5,8],[3,5,1],[7,5,3],[9,5,8],[1,4,9],[4,4,8],[6,4,8],[9,4,9],[1,3,1],[4,3,9],[6,3,9],[9,3,3],[4,2,1],[6,2,3]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:153, balls: [[0,17,8],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,8],[1,16,9],[5,16,1],[9,16,9],[1,15,9],[2,15,6],[8,15,4],[9,15,9],[1,14,9],[4,14,7],[6,14,0],[9,14,9],[1,13,9],[4,13,9],[6,13,9],[9,13,9],[1,12,9],[4,12,9],[6,12,9],[9,12,9],[1,11,9],[4,11,9],[5,11,2],[6,11,9],[9,11,9],[1,10,9],[4,10,9],[5,10,7],[6,10,9],[9,10,9],[1,9,9],[4,9,9],[6,9,9],[9,9,9],[1,8,9],[4,8,9],[6,8,9],[9,8,9],[1,7,9],[4,7,0],[6,7,2],[9,7,9],[1,6,9],[2,6,4],[8,6,6],[9,6,9],[0,5,8],[1,5,3],[5,5,1],[9,5,3],[10,5,8],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[10,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:154, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,9],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,4],[1,16,4],[2,16,0],[3,16,0],[4,16,0],[5,16,0],[6,16,0],[7,16,0],[8,16,0],[9,16,4],[10,16,4],[0,15,8],[1,15,4],[2,15,4],[3,15,0],[4,15,0],[5,15,0],[6,15,0],[7,15,0],[8,15,4],[9,15,4],[10,15,8],[1,14,8],[2,14,4],[3,14,4],[4,14,0],[5,14,0],[6,14,0],[7,14,4],[8,14,4],[9,14,8],[0,13,8],[2,13,8],[3,13,4],[4,13,4],[5,13,0],[6,13,4],[7,13,4],[8,13,8],[10,13,8],[0,12,3],[1,12,8],[3,12,8],[4,12,4],[5,12,4],[6,12,4],[7,12,8],[9,12,8],[10,12,3],[0,11,3],[1,11,3],[2,11,8],[4,11,8],[5,11,4],[6,11,8],[8,11,8],[9,11,3],[10,11,3],[0,10,0],[1,10,3],[2,10,3],[3,10,8],[7,10,8],[8,10,3],[9,10,3],[10,10,0],[0,9,0],[1,9,0],[2,9,3],[3,9,3],[5,9,8],[7,9,3],[8,9,3],[9,9,0],[10,9,0],[0,8,0],[1,8,3],[2,8,3],[3,8,8],[7,8,8],[8,8,3],[9,8,3],[10,8,0],[0,7,3],[1,7,3],[2,7,8],[4,7,8],[5,7,4],[6,7,8],[8,7,8],[9,7,3],[10,7,3],[0,6,3],[1,6,8],[3,6,8],[4,6,4],[5,6,4],[6,6,4],[7,6,8],[9,6,8],[10,6,3],[0,5,8],[2,5,8],[3,5,4],[4,5,4],[5,5,0],[6,5,4],[7,5,4],[8,5,8],[10,5,8],[1,4,8],[2,4,4],[3,4,4],[4,4,0],[5,4,0],[6,4,0],[7,4,4],[8,4,4],[9,4,8],[0,3,8],[1,3,4],[2,3,4],[3,3,0],[4,3,0],[5,3,0],[6,3,0],[7,3,0],[8,3,4],[9,3,4],[10,3,8],[0,2,4],[1,2,4],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,4],[10,2,4],[0,1,8],[1,1,8],[2,1,8],[3,1,8],[4,1,8],[5,1,9],[6,1,8],[7,1,8],[8,1,8],[9,1,8],[10,1,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:155, balls: [[2,16,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[2,15,9],[3,15,0],[4,15,0],[5,15,0],[6,15,0],[7,15,0],[8,15,9],[2,14,9],[3,14,6],[4,14,6],[5,14,6],[6,14,6],[7,14,6],[8,14,9],[2,13,9],[3,13,9],[4,13,6],[5,13,6],[6,13,6],[7,13,9],[8,13,9],[3,12,9],[4,12,8],[5,12,5],[6,12,8],[7,12,9],[4,11,8],[5,11,5],[6,11,8],[4,10,8],[5,10,5],[6,10,8],[4,9,8],[5,9,5],[6,9,8],[4,8,9],[5,8,5],[6,8,9],[3,7,9],[4,7,7],[5,7,8],[6,7,7],[7,7,9],[2,6,9],[3,6,7],[4,6,1],[5,6,8],[6,6,1],[7,6,7],[8,6,9],[1,5,9],[2,5,7],[3,5,1],[4,5,2],[5,5,8],[6,5,2],[7,5,1],[8,5,7],[9,5,9],[0,4,9],[1,4,7],[2,4,1],[3,4,3],[4,4,3],[5,4,8],[6,4,3],[7,4,3],[8,4,1],[9,4,7],[10,4,9],[0,3,7],[1,3,1],[2,3,4],[3,3,4],[4,3,4],[5,3,8],[6,3,4],[7,3,4],[8,3,4],[9,3,1],[10,3,7]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:156, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,8],[4,17,9],[8,17,9],[0,16,9],[1,16,9],[2,16,9],[3,16,9],[9,16,9],[0,15,9],[1,15,9],[2,15,9],[5,15,8],[6,15,8],[7,15,8],[10,15,9],[0,14,9],[1,14,9],[4,14,8],[5,14,0],[7,14,0],[8,14,8],[3,13,8],[4,13,0],[5,13,0],[6,13,0],[7,13,0],[8,13,0],[9,13,8],[3,12,8],[5,12,0],[7,12,0],[9,12,8],[3,11,8],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,8],[3,10,8],[5,10,0],[7,10,0],[9,10,8],[3,9,8],[4,9,0],[5,9,0],[6,9,0],[7,9,0],[8,9,0],[9,9,8],[4,8,8],[5,8,0],[7,8,0],[8,8,8],[2,7,9],[5,7,8],[6,7,8],[7,7,8],[10,7,9],[3,6,9],[6,6,8],[9,6,9],[4,5,9],[6,5,8],[8,5,9],[5,4,9],[6,4,8],[7,4,9],[6,3,9],[6,2,8],[6,1,8],[6,0,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:157, balls: [[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[4,15,9],[6,15,9],[3,14,8],[5,14,8],[7,14,8],[3,13,8],[5,13,8],[7,13,8],[2,12,8],[4,12,1],[5,12,9],[6,12,4],[8,12,8],[2,11,8],[3,11,1],[4,11,1],[5,11,9],[6,11,4],[7,11,4],[8,11,8],[2,10,9],[3,10,1],[4,10,9],[5,10,9],[6,10,9],[7,10,4],[8,10,9],[2,9,9],[3,9,1],[4,9,9],[5,9,9],[6,9,9],[7,9,4],[8,9,9],[1,8,9],[2,8,1],[3,8,1],[4,8,9],[5,8,9],[6,8,9],[7,8,4],[8,8,4],[9,8,9],[1,7,9],[2,7,1],[3,7,1],[4,7,9],[5,7,9],[6,7,9],[7,7,4],[8,7,4],[9,7,9],[1,6,9],[2,6,1],[3,6,1],[4,6,9],[5,6,9],[6,6,9],[7,6,4],[8,6,4],[9,6,9],[1,5,9],[2,5,1],[3,5,1],[4,5,9],[5,5,9],[6,5,9],[7,5,4],[8,5,4],[9,5,9],[2,4,9],[3,4,1],[4,4,9],[5,4,9],[6,4,9],[7,4,4],[8,4,9],[2,3,9],[3,3,1],[4,3,9],[5,3,9],[6,3,9],[7,3,4],[8,3,9],[3,2,1],[4,2,1],[5,2,9],[6,2,4],[7,2,4],[4,1,1],[5,1,9],[6,1,4]], mask_left: [[3,17],[4,17],[5,17],[6,17],[7,17]], mask_right: [[3,16],[4,16],[5,16],[6,16],[7,16]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:158, balls: [[0,15,9],[1,15,8],[2,15,9],[4,15,8],[5,15,8],[6,15,8],[8,15,9],[9,15,8],[10,15,9],[0,14,9],[1,14,4],[2,14,9],[4,14,8],[5,14,1],[6,14,8],[8,14,9],[9,14,4],[10,14,9],[0,13,9],[1,13,4],[2,13,9],[4,13,8],[5,13,1],[6,13,8],[8,13,9],[9,13,4],[10,13,9],[0,12,9],[1,12,8],[2,12,9],[4,12,8],[5,12,8],[6,12,8],[8,12,9],[9,12,8],[10,12,9],[3,11,9],[7,11,9],[0,10,8],[1,10,8],[2,10,8],[4,10,9],[5,10,9],[6,10,9],[8,10,8],[9,10,8],[10,10,8],[0,9,8],[1,9,6],[2,9,8],[4,9,8],[5,9,7],[6,9,8],[8,9,8],[9,9,6],[10,9,8],[0,8,8],[1,8,6],[2,8,8],[4,8,8],[5,8,7],[6,8,8],[8,8,8],[9,8,6],[10,8,8],[0,7,8],[1,7,8],[2,7,8],[4,7,9],[5,7,9],[6,7,9],[8,7,8],[9,7,8],[10,7,8],[3,6,9],[7,6,9],[0,5,9],[1,5,8],[2,5,9],[4,5,8],[5,5,8],[6,5,8],[8,5,9],[9,5,8],[10,5,9],[0,4,9],[1,4,3],[2,4,9],[4,4,8],[5,4,1],[6,4,8],[8,4,9],[9,4,3],[10,4,9],[0,3,9],[1,3,3],[2,3,9],[4,3,8],[5,3,1],[6,3,8],[8,3,9],[9,3,3],[10,3,9],[0,2,9],[1,2,8],[2,2,9],[4,2,8],[5,2,8],[6,2,8],[8,2,9],[9,2,8],[10,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:159, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,45,63,20,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:160, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,8],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,8],[0,15,8],[2,15,3],[3,15,8],[4,15,9],[5,15,8],[6,15,9],[7,15,8],[8,15,7],[10,15,8],[0,14,8],[1,14,8],[3,14,8],[4,14,9],[6,14,9],[7,14,8],[9,14,8],[10,14,8],[0,13,8],[2,13,2],[3,13,8],[4,13,9],[5,13,8],[6,13,9],[7,13,8],[8,13,6],[10,13,8],[0,12,8],[1,12,8],[5,12,9],[9,12,8],[10,12,8],[0,11,8],[2,11,1],[3,11,8],[4,11,9],[5,11,8],[6,11,9],[7,11,8],[8,11,5],[10,11,8],[0,10,8],[1,10,8],[3,10,8],[4,10,9],[6,10,9],[7,10,8],[9,10,8],[10,10,8],[0,9,8],[2,9,7],[3,9,8],[4,9,9],[5,9,8],[6,9,9],[7,9,8],[8,9,3],[10,9,8],[0,8,8],[1,8,9],[2,8,9],[3,8,9],[4,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[10,8,8],[0,7,8],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,8],[10,7,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:161, balls: [[4,15,9],[5,15,8],[6,15,9],[3,14,9],[4,14,3],[6,14,4],[7,14,9],[2,13,9],[3,13,2],[4,13,3],[6,13,4],[7,13,5],[8,13,9],[1,12,9],[2,12,1],[3,12,2],[4,12,3],[6,12,4],[7,12,5],[8,12,6],[9,12,9],[1,11,0],[2,11,1],[3,11,2],[4,11,3],[6,11,4],[7,11,5],[8,11,6],[9,11,7],[0,10,8],[1,10,0],[2,10,1],[3,10,2],[4,10,3],[6,10,4],[7,10,5],[8,10,6],[9,10,7],[10,10,8],[0,9,8],[1,9,0],[2,9,1],[3,9,2],[4,9,3],[6,9,4],[7,9,5],[8,9,6],[9,9,7],[10,9,8],[0,8,8],[1,8,0],[2,8,1],[3,8,2],[4,8,3],[6,8,4],[7,8,5],[8,8,6],[9,8,7],[10,8,8],[0,7,8],[1,7,0],[2,7,1],[3,7,2],[4,7,3],[5,7,8],[6,7,4],[7,7,5],[8,7,6],[9,7,7],[10,7,8],[0,6,8],[1,6,0],[2,6,1],[3,6,2],[4,6,9],[6,6,9],[7,6,5],[8,6,6],[9,6,7],[10,6,8],[0,5,8],[1,5,0],[2,5,1],[3,5,9],[7,5,9],[8,5,6],[9,5,7],[10,5,8],[0,4,8],[1,4,0],[2,4,9],[8,4,9],[9,4,7],[10,4,8],[0,3,8],[1,3,9],[9,3,9],[10,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:162, balls: [[0,15,1],[1,15,9],[2,15,9],[3,15,2],[5,15,6],[7,15,3],[8,15,9],[9,15,9],[10,15,4],[0,14,1],[1,14,9],[2,14,8],[3,14,2],[5,14,6],[7,14,3],[8,14,8],[9,14,9],[10,14,4],[0,13,1],[1,13,9],[2,13,8],[3,13,2],[5,13,6],[7,13,3],[8,13,8],[9,13,9],[10,13,4],[0,12,1],[1,12,9],[2,12,8],[3,12,2],[5,12,6],[7,12,3],[8,12,8],[9,12,9],[10,12,4],[0,11,1],[1,11,9],[2,11,8],[3,11,2],[4,11,9],[5,11,9],[6,11,9],[7,11,3],[8,11,8],[9,11,9],[10,11,4],[0,10,1],[1,10,9],[2,10,8],[3,10,9],[4,10,0],[5,10,0],[6,10,0],[7,10,9],[8,10,8],[9,10,9],[10,10,4],[0,9,1],[1,9,9],[2,9,0],[3,9,0],[4,9,0],[5,9,0],[6,9,0],[7,9,0],[8,9,0],[9,9,9],[10,9,4],[0,8,1],[1,8,9],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,9],[10,8,4],[0,7,1],[1,7,9],[2,7,0],[3,7,0],[4,7,0],[5,7,0],[6,7,0],[7,7,0],[8,7,0],[9,7,9],[10,7,4],[0,6,1],[1,6,9],[2,6,0],[3,6,0],[4,6,0],[5,6,0],[6,6,0],[7,6,0],[8,6,0],[9,6,9],[10,6,4],[2,5,9],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,9],[3,4,9],[4,4,8],[5,4,8],[6,4,8],[7,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:163, balls: [[5,16,9],[4,15,8],[5,15,1],[6,15,8],[3,14,9],[4,14,1],[5,14,1],[6,14,1],[7,14,9],[2,13,8],[3,13,1],[4,13,1],[5,13,1],[6,13,1],[7,13,1],[8,13,8],[1,12,9],[2,12,1],[3,12,1],[4,12,1],[5,12,1],[6,12,1],[7,12,1],[8,12,1],[9,12,9],[1,11,8],[2,11,1],[3,11,1],[4,11,1],[5,11,1],[6,11,1],[7,11,1],[8,11,1],[9,11,8],[0,10,9],[1,10,1],[2,10,1],[3,10,1],[4,10,1],[5,10,1],[6,10,1],[7,10,1],[8,10,1],[9,10,1],[10,10,9],[0,9,8],[1,9,1],[2,9,1],[3,9,1],[4,9,1],[5,9,1],[6,9,1],[7,9,1],[8,9,1],[9,9,1],[10,9,8],[0,8,8],[1,8,1],[2,8,1],[3,8,1],[4,8,1],[5,8,1],[6,8,1],[7,8,1],[8,8,1],[9,8,1],[10,8,8],[0,7,8],[1,7,1],[2,7,1],[3,7,1],[4,7,1],[5,7,1],[6,7,1],[7,7,1],[8,7,1],[9,7,1],[10,7,8],[1,6,8],[2,6,1],[3,6,1],[4,6,1],[5,6,1],[6,6,1],[7,6,1],[8,6,1],[9,6,8],[1,5,8],[2,5,1],[3,5,1],[4,5,1],[5,5,8],[6,5,1],[7,5,1],[8,5,1],[9,5,8],[2,4,8],[3,4,1],[4,4,8],[6,4,8],[7,4,1],[8,4,8],[3,3,8],[7,3,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:164, balls: [[0,15,8],[1,15,8],[2,15,8],[3,15,9],[4,15,8],[5,15,8],[6,15,8],[7,15,9],[8,15,8],[9,15,8],[10,15,8],[0,14,8],[1,14,1],[2,14,8],[3,14,9],[4,14,8],[5,14,2],[6,14,8],[7,14,9],[8,14,8],[9,14,3],[10,14,8],[0,13,8],[1,13,8],[2,13,8],[3,13,9],[4,13,8],[5,13,8],[6,13,8],[7,13,9],[8,13,8],[9,13,8],[10,13,8],[0,10,9],[1,10,8],[2,10,8],[3,10,8],[4,10,8],[5,10,9],[6,10,8],[7,10,8],[8,10,8],[9,10,8],[10,10,9],[0,9,9],[1,9,8],[2,9,4],[3,9,5],[4,9,8],[5,9,9],[6,9,8],[7,9,6],[8,9,7],[9,9,8],[10,9,9],[0,8,9],[1,8,8],[2,8,8],[3,8,8],[4,8,8],[5,8,9],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[10,8,9],[0,5,8],[1,5,8],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,8],[10,5,8],[0,4,8],[1,4,0],[2,4,1],[3,4,2],[4,4,3],[5,4,4],[6,4,5],[7,4,6],[8,4,7],[9,4,0],[10,4,8],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:165, balls: [[0,16,9],[2,16,9],[4,16,9],[6,16,9],[8,16,9],[10,16,9],[0,15,0],[2,15,0],[4,15,0],[6,15,0],[8,15,0],[10,15,0],[0,14,9],[2,14,9],[4,14,9],[6,14,9],[8,14,9],[10,14,9],[0,13,1],[2,13,1],[4,13,1],[6,13,1],[8,13,1],[10,13,1],[0,12,9],[2,12,9],[4,12,9],[6,12,9],[8,12,9],[10,12,9],[0,11,2],[2,11,2],[4,11,2],[6,11,2],[8,11,2],[10,11,2],[0,10,9],[2,10,9],[4,10,9],[6,10,9],[8,10,9],[10,10,9],[0,9,3],[2,9,3],[4,9,3],[6,9,3],[8,9,3],[10,9,3],[0,8,9],[2,8,9],[4,8,9],[6,8,9],[8,8,9],[10,8,9],[0,7,4],[2,7,4],[4,7,4],[6,7,4],[8,7,4],[10,7,4],[0,6,9],[2,6,9],[4,6,9],[6,6,9],[8,6,9],[10,6,9],[0,5,5],[2,5,5],[4,5,5],[6,5,5],[8,5,5],[10,5,5],[0,4,9],[2,4,9],[4,4,9],[6,4,9],[8,4,9],[10,4,9],[0,3,6],[2,3,6],[4,3,6],[6,3,6],[8,3,6],[10,3,6],[0,2,9],[2,2,9],[4,2,9],[6,2,9],[8,2,9],[10,2,9],[0,1,7],[2,1,7],[4,1,7],[6,1,7],[8,1,7],[10,1,7],[0,0,9],[2,0,9],[4,0,9],[6,0,9],[8,0,9],[10,0,9]], mask_left: [[0,13],[2,13],[4,13],[6,13],[8,13],[10,13],[0,9],[2,9],[4,9],[6,9],[8,9],[10,9],[0,5],[2,5],[4,5],[6,5],[8,5],[10,5],[0,1],[2,1],[4,1],[6,1],[8,1],[10,1]], mask_right: [[0,15],[2,15],[4,15],[6,15],[8,15],[10,15],[0,11],[2,11],[4,11],[6,11],[8,11],[10,11],[0,7],[2,7],[4,7],[6,7],[8,7],[10,7],[0,3],[2,3],[4,3],[6,3],[8,3],[10,3]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:166, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,0],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[5,16,0],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[0,15,2],[1,15,2],[2,15,2],[3,15,2],[4,15,9],[5,15,0],[6,15,9],[7,15,7],[8,15,7],[9,15,7],[10,15,7],[0,14,3],[1,14,3],[2,14,3],[3,14,3],[4,14,9],[5,14,0],[6,14,9],[7,14,4],[8,14,4],[9,14,4],[10,14,4],[0,13,3],[1,13,1],[2,13,1],[3,13,1],[4,13,9],[5,13,0],[6,13,9],[7,13,6],[8,13,6],[9,13,6],[10,13,4],[0,12,3],[1,12,1],[2,12,8],[3,12,8],[4,12,9],[5,12,0],[6,12,9],[7,12,8],[8,12,8],[9,12,6],[10,12,4],[0,11,3],[1,11,1],[2,11,8],[8,11,8],[9,11,6],[10,11,4],[0,10,3],[1,10,1],[2,10,8],[8,10,8],[9,10,6],[10,10,4],[0,9,3],[1,9,1],[2,9,8],[8,9,8],[9,9,6],[10,9,4],[0,8,3],[1,8,1],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,6],[10,8,4],[0,7,3],[1,7,1],[2,7,1],[3,7,1],[4,7,1],[5,7,8],[6,7,6],[7,7,6],[8,7,6],[9,7,6],[10,7,4],[0,6,3],[1,6,3],[2,6,3],[3,6,3],[4,6,3],[5,6,8],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,2],[1,5,2],[2,5,2],[3,5,2],[4,5,2],[5,5,8],[6,5,7],[7,5,7],[8,5,7],[9,5,7],[10,5,7],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[10,4,9],[0,3,9],[1,3,9],[2,3,9],[3,3,9],[4,3,9],[6,3,9],[7,3,9],[8,3,9],[9,3,9],[10,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:167, balls: [[2,17,9],[5,17,9],[8,17,9],[0,16,8],[1,16,8],[3,16,9],[4,16,9],[6,16,9],[7,16,9],[9,16,8],[10,16,8],[0,15,0],[1,15,7],[2,15,9],[3,15,7],[4,15,0],[5,15,9],[6,15,0],[7,15,7],[8,15,9],[9,15,7],[10,15,0],[0,14,0],[1,14,6],[3,14,6],[4,14,0],[6,14,0],[7,14,6],[9,14,6],[10,14,0],[0,13,0],[1,13,5],[2,13,9],[3,13,5],[4,13,0],[5,13,9],[6,13,0],[7,13,5],[8,13,9],[9,13,5],[10,13,0],[0,12,0],[1,12,4],[3,12,4],[4,12,0],[6,12,0],[7,12,4],[9,12,4],[10,12,0],[0,11,0],[1,11,3],[2,11,9],[3,11,3],[4,11,0],[5,11,9],[6,11,0],[7,11,3],[8,11,9],[9,11,3],[10,11,0],[0,10,0],[1,10,2],[3,10,2],[4,10,0],[6,10,0],[7,10,2],[9,10,2],[10,10,0],[0,9,0],[1,9,1],[2,9,9],[3,9,1],[4,9,0],[5,9,9],[6,9,0],[7,9,1],[8,9,9],[9,9,1],[10,9,0],[0,8,8],[1,8,9],[3,8,9],[4,8,8],[6,8,8],[7,8,9],[9,8,9],[10,8,8],[2,7,9],[5,7,9],[8,7,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:168, balls: [[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[3,15,9],[4,15,8],[5,15,8],[6,15,8],[7,15,9],[0,14,8],[1,14,9],[3,14,9],[4,14,5],[5,14,0],[6,14,5],[7,14,9],[9,14,9],[10,14,8],[0,13,8],[1,13,5],[2,13,9],[3,13,9],[4,13,0],[5,13,0],[6,13,0],[7,13,9],[8,13,9],[9,13,5],[10,13,8],[0,12,8],[1,12,5],[2,12,5],[3,12,0],[4,12,0],[5,12,0],[6,12,0],[7,12,0],[8,12,5],[9,12,5],[10,12,8],[0,11,8],[1,11,5],[2,11,5],[3,11,5],[4,11,5],[5,11,5],[6,11,5],[7,11,5],[8,11,5],[9,11,5],[10,11,8],[0,10,8],[1,10,5],[2,10,0],[3,10,0],[4,10,0],[5,10,0],[6,10,0],[7,10,0],[8,10,0],[9,10,5],[10,10,8],[0,9,8],[1,9,5],[2,9,5],[3,9,5],[4,9,5],[5,9,5],[6,9,5],[7,9,5],[8,9,5],[9,9,5],[10,9,8],[0,8,8],[1,8,5],[2,8,9],[3,8,9],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,5],[10,8,8],[0,7,8],[1,7,9],[9,7,9],[10,7,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:169, balls: [[1,15,8],[2,15,4],[3,15,4],[4,15,4],[5,15,4],[6,15,4],[7,15,4],[8,15,4],[9,15,4],[1,14,8],[2,14,5],[3,14,5],[4,14,5],[5,14,5],[6,14,5],[7,14,5],[8,14,5],[9,14,5],[1,13,8],[2,13,4],[3,13,4],[4,13,8],[5,13,8],[6,13,8],[7,13,4],[8,13,4],[9,13,4],[1,12,8],[2,12,5],[3,12,5],[4,12,8],[5,12,7],[6,12,8],[7,12,5],[8,12,5],[9,12,5],[1,11,8],[2,11,4],[3,11,4],[4,11,8],[5,11,8],[6,11,8],[7,11,4],[8,11,4],[9,11,4],[1,10,8],[2,10,5],[3,10,5],[4,10,8],[5,10,7],[6,10,8],[7,10,5],[8,10,5],[9,10,5],[1,9,8],[2,9,4],[3,9,4],[4,9,8],[5,9,8],[6,9,8],[7,9,4],[8,9,4],[9,9,4],[1,8,8],[2,8,5],[3,8,5],[4,8,5],[5,8,5],[6,8,5],[7,8,5],[8,8,5],[9,8,5],[10,8,9],[1,7,9],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,9],[1,6,8],[2,6,9],[3,6,5],[4,6,5],[5,6,5],[6,6,5],[7,6,5],[8,6,9],[1,5,8],[3,5,9],[4,5,5],[5,5,5],[6,5,5],[7,5,9],[1,4,8],[4,4,9],[5,4,5],[6,4,9],[5,3,9]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:170, balls: [[0,15,8],[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,8],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[10,15,8],[1,14,9],[5,14,9],[9,14,9],[1,13,9],[5,13,9],[9,13,9],[1,12,9],[5,12,9],[9,12,9],[0,11,8],[1,11,9],[5,11,9],[9,11,9],[10,11,8],[1,10,9],[5,10,9],[9,10,9],[1,9,9],[5,9,9],[9,9,9],[1,8,9],[5,8,9],[9,8,9],[0,7,8],[1,7,9],[2,7,9],[3,7,9],[4,7,9],[5,7,8],[6,7,9],[7,7,9],[8,7,9],[9,7,9],[10,7,8],[1,5,2],[2,5,8],[4,5,4],[5,5,8],[6,5,4],[8,5,8],[9,5,6],[1,4,1],[2,4,8],[4,4,3],[5,4,8],[6,4,3],[8,4,8],[9,4,5],[1,3,1],[2,3,8],[4,3,3],[5,3,8],[6,3,3],[8,3,8],[9,3,5],[1,2,0],[2,2,8],[4,2,0],[5,2,8],[6,2,0],[8,2,8],[9,2,0]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:171, balls: [[0,17,9],[3,17,9],[4,17,1],[5,17,1],[6,17,1],[7,17,9],[10,17,9],[0,16,9],[3,16,9],[4,16,1],[5,16,1],[6,16,1],[7,16,9],[10,16,9],[0,15,9],[3,15,9],[4,15,1],[5,15,1],[6,15,1],[7,15,9],[10,15,9],[0,14,9],[3,14,9],[4,14,2],[5,14,2],[6,14,2],[7,14,9],[10,14,9],[0,13,9],[3,13,9],[4,13,2],[5,13,2],[6,13,2],[7,13,9],[10,13,9],[0,12,9],[3,12,9],[4,12,2],[5,12,2],[6,12,2],[7,12,9],[10,12,9],[0,11,9],[3,11,9],[4,11,3],[5,11,3],[6,11,3],[7,11,9],[10,11,9],[0,10,9],[3,10,9],[4,10,3],[5,10,3],[6,10,3],[7,10,9],[10,10,9],[0,9,9],[3,9,9],[4,9,3],[5,9,3],[6,9,3],[7,9,9],[10,9,9],[0,8,9],[1,8,8],[2,8,8],[3,8,9],[4,8,4],[5,8,4],[6,8,4],[7,8,9],[8,8,8],[9,8,8],[10,8,9],[0,7,9],[1,7,8],[2,7,8],[3,7,9],[4,7,4],[5,7,4],[6,7,4],[7,7,9],[8,7,8],[9,7,8],[10,7,9],[0,6,9],[1,6,8],[2,6,8],[3,6,9],[4,6,4],[5,6,4],[6,6,4],[7,6,9],[8,6,8],[9,6,8],[10,6,9],[0,5,9],[1,5,0],[2,5,0],[3,5,9],[4,5,5],[5,5,5],[6,5,5],[7,5,9],[8,5,0],[9,5,0],[10,5,9],[0,4,9],[1,4,0],[2,4,0],[3,4,9],[4,4,5],[5,4,5],[6,4,5],[7,4,9],[8,4,0],[9,4,0],[10,4,9],[0,3,9],[1,3,0],[2,3,0],[3,3,9],[4,3,5],[5,3,5],[6,3,5],[7,3,9],[8,3,0],[9,3,0],[10,3,9],[0,2,9],[1,2,7],[2,2,7],[3,2,9],[4,2,6],[5,2,6],[6,2,6],[7,2,9],[8,2,7],[9,2,7],[10,2,9],[0,1,9],[1,1,7],[2,1,7],[3,1,9],[4,1,6],[5,1,6],[6,1,6],[7,1,9],[8,1,7],[9,1,7],[10,1,9],[0,0,9],[1,0,7],[2,0,7],[3,0,9],[4,0,6],[5,0,6],[6,0,6],[7,0,9],[8,0,7],[9,0,7],[10,0,9]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:172, balls: [[0,17,8],[1,17,8],[2,17,8],[4,17,8],[5,17,8],[6,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,2],[1,16,9],[2,16,2],[3,16,8],[4,16,1],[5,16,9],[6,16,1],[7,16,8],[8,16,6],[9,16,9],[10,16,6],[0,15,8],[1,15,8],[2,15,8],[4,15,8],[5,15,8],[6,15,8],[8,15,8],[9,15,8],[10,15,8],[0,14,4],[1,14,9],[2,14,4],[3,14,8],[4,14,0],[5,14,9],[6,14,0],[7,14,8],[8,14,7],[9,14,9],[10,14,7],[0,13,8],[1,13,8],[2,13,8],[4,13,8],[5,13,8],[6,13,8],[8,13,8],[9,13,8],[10,13,8],[0,12,2],[1,12,9],[2,12,2],[3,12,8],[4,12,1],[5,12,9],[6,12,1],[7,12,8],[8,12,6],[9,12,9],[10,12,6],[0,11,8],[1,11,8],[2,11,8],[4,11,8],[5,11,8],[6,11,8],[8,11,8],[9,11,8],[10,11,8],[0,10,4],[1,10,9],[2,10,4],[3,10,8],[4,10,0],[5,10,9],[6,10,0],[7,10,8],[8,10,7],[9,10,9],[10,10,7],[0,9,8],[1,9,8],[2,9,8],[4,9,8],[5,9,8],[6,9,8],[8,9,8],[9,9,8],[10,9,8],[0,8,2],[1,8,9],[2,8,2],[3,8,8],[4,8,1],[5,8,9],[6,8,1],[7,8,8],[8,8,6],[9,8,9],[10,8,6],[0,7,8],[1,7,8],[2,7,8],[4,7,8],[5,7,8],[6,7,8],[8,7,8],[9,7,8],[10,7,8],[0,6,4],[1,6,9],[2,6,4],[3,6,8],[4,6,0],[5,6,9],[6,6,0],[7,6,8],[8,6,7],[9,6,9],[10,6,7],[0,5,8],[1,5,8],[2,5,8],[4,5,8],[5,5,8],[6,5,8],[8,5,8],[9,5,8],[10,5,8],[0,4,2],[1,4,9],[2,4,2],[3,4,8],[4,4,1],[5,4,9],[6,4,1],[7,4,8],[8,4,6],[9,4,9],[10,4,6],[0,3,8],[1,3,8],[2,3,8],[4,3,8],[5,3,8],[6,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [[0,15],[1,15],[2,15],[4,15],[5,15],[6,15],[8,15],[9,15],[10,15],[0,11],[1,11],[2,11],[4,11],[5,11],[6,11],[8,11],[9,11],[10,11],[0,7],[1,7],[2,7],[4,7],[5,7],[6,7],[8,7],[9,7],[10,7],[0,3],[1,3],[2,3],[4,3],[5,3],[6,3],[8,3],[9,3],[10,3]], mask_right: [[0,17],[1,17],[2,17],[4,17],[5,17],[6,17],[8,17],[9,17],[10,17],[0,13],[1,13],[2,13],[4,13],[5,13],[6,13],[8,13],[9,13],[10,13],[0,9],[1,9],[2,9],[4,9],[5,9],[6,9],[8,9],[9,9],[10,9],[0,5],[1,5],[2,5],[4,5],[5,5],[6,5],[8,5],[9,5],[10,5]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:173, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[2,16,9],[4,16,9],[6,16,9],[8,16,9],[0,14,8],[1,14,8],[2,14,8],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[8,14,8],[9,14,8],[10,14,8],[1,13,9],[3,13,9],[7,13,9],[9,13,9],[0,11,8],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[10,11,8],[2,10,9],[4,10,9],[6,10,9],[8,10,9],[1,9,6],[2,9,4],[3,9,2],[4,9,1],[5,9,9],[6,9,1],[7,9,2],[8,9,4],[9,9,6],[1,8,6],[2,8,4],[3,8,2],[4,8,1],[5,8,9],[6,8,1],[7,8,2],[8,8,4],[9,8,6],[1,7,6],[2,7,4],[3,7,2],[4,7,1],[5,7,9],[6,7,1],[7,7,2],[8,7,4],[9,7,6],[1,6,6],[2,6,4],[3,6,2],[4,6,1],[5,6,0],[6,6,1],[7,6,2],[8,6,4],[9,6,6],[1,5,6],[2,5,4],[3,5,2],[4,5,1],[5,5,9],[6,5,1],[7,5,2],[8,5,4],[9,5,6],[1,4,6],[2,4,4],[3,4,2],[4,4,1],[5,4,9],[6,4,1],[7,4,2],[8,4,4],[9,4,6],[1,3,6],[2,3,4],[3,3,2],[4,3,1],[5,3,9],[6,3,1],[7,3,2],[8,3,4],[9,3,6]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:174, balls: [[4,16,8],[5,16,9],[6,16,8],[4,15,8],[5,15,9],[6,15,8],[4,14,8],[5,14,9],[6,14,8],[4,13,8],[5,13,9],[6,13,8],[4,12,8],[5,12,9],[6,12,8],[4,11,8],[5,11,9],[6,11,8],[4,10,8],[5,10,9],[6,10,8],[4,9,8],[5,9,9],[6,9,8],[4,8,8],[5,8,9],[6,8,8],[4,7,8],[5,7,9],[6,7,8],[4,6,8],[5,6,9],[6,6,8],[4,5,8],[5,5,9],[6,5,8],[4,4,8],[5,4,9],[6,4,8],[4,3,8],[5,3,9],[6,3,8],[4,2,8],[5,2,9],[6,2,8],[4,1,8],[5,1,9],[6,1,8],[4,0,8],[5,0,9],[6,0,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:175, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,50,68,19,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:176, balls: [[5,15,1],[5,14,1],[4,13,1],[5,13,1],[6,13,1],[4,12,1],[5,12,1],[6,12,1],[3,11,1],[4,11,1],[5,11,8],[6,11,1],[7,11,1],[3,10,1],[4,10,1],[5,10,8],[6,10,1],[7,10,1],[2,9,1],[3,9,1],[4,9,8],[5,9,8],[6,9,8],[7,9,1],[8,9,1],[2,8,1],[3,8,1],[4,8,8],[5,8,8],[6,8,8],[7,8,1],[8,8,1],[1,7,1],[2,7,1],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,1],[9,7,1],[1,6,1],[2,6,1],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[8,6,1],[9,6,1],[0,5,1],[1,5,1],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,1],[10,5,1],[0,4,1],[1,4,1],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,1],[10,4,1],[0,3,9],[1,3,9],[2,3,9],[3,3,9],[4,3,9],[5,3,1],[6,3,9],[7,3,9],[8,3,9],[9,3,9],[10,3,9],[0,2,1],[1,2,1],[2,2,1],[3,2,1],[4,2,1],[5,2,1],[6,2,1],[7,2,1],[8,2,1],[9,2,1],[10,2,1]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:177, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[1,15,8],[2,15,0],[3,15,0],[4,15,0],[5,15,0],[6,15,0],[7,15,0],[8,15,0],[9,15,8],[0,14,9],[1,14,9],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,9],[10,14,9],[1,13,8],[2,13,0],[3,13,0],[4,13,0],[5,13,1],[6,13,0],[7,13,0],[8,13,0],[9,13,8],[1,12,8],[2,12,0],[3,12,0],[4,12,1],[5,12,1],[6,12,1],[7,12,0],[8,12,0],[9,12,8],[1,11,8],[2,11,0],[3,11,0],[4,11,1],[5,11,1],[6,11,1],[7,11,0],[8,11,0],[9,11,8],[0,10,9],[1,10,9],[2,10,0],[3,10,8],[4,10,1],[5,10,0],[6,10,1],[7,10,8],[8,10,0],[9,10,9],[10,10,9],[1,9,8],[2,9,8],[3,9,0],[4,9,0],[5,9,0],[6,9,0],[7,9,0],[8,9,8],[9,9,8],[1,8,8],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[0,7,9],[1,7,9],[2,7,9],[3,7,9],[4,7,9],[5,7,9],[6,7,9],[7,7,9],[8,7,9],[9,7,9],[10,7,9]], mask_left: [[0,17],[0,14],[0,10],[0,7]], mask_right: [[10,17],[10,14],[10,10],[10,7]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:178, balls: [[0,15,8],[1,15,8],[2,15,8],[8,15,8],[9,15,8],[10,15,8],[0,14,9],[1,14,1],[2,14,1],[8,14,6],[9,14,6],[10,14,9],[0,13,0],[1,13,9],[2,13,1],[4,13,9],[5,13,7],[6,13,9],[8,13,6],[9,13,9],[10,13,5],[0,12,0],[1,12,0],[2,12,9],[4,12,9],[5,12,6],[6,12,9],[8,12,9],[9,12,5],[10,12,5],[0,11,8],[1,11,8],[2,11,8],[4,11,9],[5,11,5],[6,11,9],[8,11,8],[9,11,8],[10,11,8],[4,10,9],[5,10,4],[6,10,9],[4,9,9],[5,9,3],[6,9,9],[0,8,8],[1,8,8],[2,8,8],[4,8,9],[5,8,2],[6,8,9],[8,8,8],[9,8,8],[10,8,8],[0,7,3],[1,7,3],[2,7,9],[4,7,9],[5,7,1],[6,7,9],[8,7,9],[9,7,7],[10,7,7],[0,6,3],[1,6,9],[2,6,2],[4,6,9],[5,6,0],[6,6,9],[8,6,4],[9,6,9],[10,6,7],[0,5,9],[1,5,2],[2,5,2],[8,5,4],[9,5,4],[10,5,9],[0,4,8],[1,4,8],[2,4,8],[8,4,8],[9,4,8],[10,4,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:179, balls: [[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,8],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[1,14,9],[2,14,4],[3,14,4],[4,14,8],[5,14,8],[6,14,8],[7,14,3],[8,14,3],[9,14,9],[1,13,9],[2,13,4],[3,13,4],[4,13,8],[5,13,8],[6,13,8],[7,13,3],[8,13,3],[9,13,9],[1,12,9],[2,12,4],[3,12,4],[4,12,8],[5,12,8],[6,12,8],[7,12,3],[8,12,3],[9,12,9],[1,11,9],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,9],[1,10,9],[9,10,9],[1,9,9],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,9],[1,8,9],[2,8,1],[3,8,1],[4,8,8],[5,8,8],[6,8,8],[7,8,6],[8,8,6],[9,8,9],[1,7,9],[2,7,1],[3,7,1],[4,7,8],[5,7,8],[6,7,8],[7,7,6],[8,7,6],[9,7,9],[1,6,9],[2,6,1],[3,6,1],[4,6,8],[5,6,8],[6,6,8],[7,6,6],[8,6,6],[9,6,9],[1,5,9],[2,5,9],[3,5,9],[4,5,9],[5,5,8],[6,5,9],[7,5,9],[8,5,9],[9,5,9]], mask_left: [[1,10]], mask_right: [[9,10]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:180, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,9],[9,16,9],[1,15,9],[9,15,9],[1,14,9],[9,14,9],[1,13,9],[5,13,6],[9,13,9],[1,12,9],[4,12,6],[5,12,4],[6,12,6],[9,12,9],[1,11,9],[3,11,6],[4,11,4],[5,11,6],[6,11,4],[7,11,6],[9,11,9],[1,10,8],[2,10,6],[3,10,4],[4,10,6],[5,10,8],[6,10,6],[7,10,4],[8,10,6],[9,10,8],[1,9,9],[3,9,6],[4,9,4],[5,9,6],[6,9,4],[7,9,6],[9,9,9],[1,8,9],[4,8,6],[5,8,4],[6,8,6],[9,8,9],[1,7,9],[5,7,6],[9,7,9],[1,6,9],[9,6,9],[1,5,9],[9,5,9],[1,4,9],[9,4,9],[1,3,9],[2,3,9],[3,3,9],[4,3,9],[5,3,9],[6,3,9],[7,3,9],[8,3,9],[9,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:181, balls: [[0,17,8],[1,17,9],[2,17,9],[3,17,8],[4,17,8],[5,17,9],[6,17,8],[7,17,8],[8,17,9],[9,17,9],[10,17,8],[0,16,6],[1,16,4],[2,16,1],[3,16,9],[5,16,9],[7,16,9],[8,16,2],[9,16,5],[10,16,7],[0,15,6],[1,15,4],[2,15,1],[3,15,9],[5,15,9],[7,15,9],[8,15,2],[9,15,5],[10,15,7],[0,14,6],[1,14,4],[2,14,1],[3,14,9],[5,14,9],[7,14,9],[8,14,2],[9,14,5],[10,14,7],[0,13,6],[1,13,4],[2,13,1],[3,13,9],[5,13,9],[7,13,9],[8,13,2],[9,13,5],[10,13,7],[0,12,6],[1,12,4],[2,12,1],[3,12,9],[5,12,9],[7,12,9],[8,12,2],[9,12,5],[10,12,7],[0,11,6],[1,11,4],[2,11,1],[3,11,9],[5,11,9],[7,11,9],[8,11,2],[9,11,5],[10,11,7],[0,10,9],[1,10,9],[2,10,9],[3,10,9],[5,10,3],[7,10,9],[8,10,9],[9,10,9],[10,10,9],[0,9,6],[1,9,4],[2,9,1],[3,9,9],[5,9,9],[7,9,9],[8,9,2],[9,9,5],[10,9,7],[0,8,6],[1,8,4],[2,8,1],[3,8,9],[5,8,9],[7,8,9],[8,8,2],[9,8,5],[10,8,7],[0,7,6],[1,7,4],[2,7,1],[3,7,9],[5,7,9],[7,7,9],[8,7,2],[9,7,5],[10,7,7],[0,6,6],[1,6,4],[2,6,1],[3,6,9],[5,6,9],[7,6,9],[8,6,2],[9,6,5],[10,6,7],[0,5,6],[1,5,4],[2,5,1],[3,5,9],[5,5,9],[7,5,9],[8,5,2],[9,5,5],[10,5,7],[0,4,6],[1,4,4],[2,4,1],[3,4,9],[5,4,9],[7,4,9],[8,4,2],[9,4,5],[10,4,7],[0,3,6],[1,3,4],[2,3,1],[3,3,9],[5,3,9],[7,3,9],[8,3,2],[9,3,5],[10,3,7]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:182, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,9],[9,16,9],[1,15,9],[3,15,4],[4,15,5],[5,15,6],[6,15,7],[7,15,0],[9,15,9],[1,14,9],[3,14,3],[4,14,4],[5,14,5],[6,14,6],[7,14,7],[9,14,9],[1,13,9],[3,13,2],[4,13,3],[5,13,4],[6,13,5],[7,13,6],[9,13,9],[1,12,9],[3,12,1],[4,12,2],[5,12,3],[6,12,4],[7,12,5],[9,12,9],[1,11,9],[3,11,0],[4,11,1],[5,11,2],[6,11,3],[7,11,4],[9,11,9],[1,10,9],[9,10,9],[1,9,9],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,9],[3,8,8],[4,8,8],[6,8,8],[7,8,8],[1,7,9],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,9],[1,6,9],[9,6,9],[1,5,9],[3,5,4],[4,5,5],[5,5,6],[6,5,7],[7,5,0],[9,5,9],[1,4,9],[3,4,3],[4,4,4],[5,4,5],[6,4,6],[7,4,7],[9,4,9],[1,3,9],[3,3,2],[4,3,3],[5,3,4],[6,3,5],[7,3,6],[9,3,9],[1,2,9],[3,2,1],[4,2,2],[5,2,3],[6,2,4],[7,2,5],[9,2,9],[1,1,9],[3,1,0],[4,1,1],[5,1,2],[6,1,3],[7,1,4],[9,1,9],[1,0,9],[9,0,9]], mask_left: [[3,8],[4,8]], mask_right: [[6,8],[7,8]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:183, balls: [[0,16,8],[1,16,8],[2,16,8],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[0,14,7],[1,14,7],[2,14,7],[3,14,7],[4,14,7],[5,14,8],[6,14,7],[7,14,7],[8,14,7],[9,14,7],[10,14,7],[0,12,9],[1,12,9],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[8,12,8],[9,12,8],[10,12,8],[0,10,6],[1,10,6],[2,10,6],[3,10,6],[4,10,6],[5,10,8],[6,10,6],[7,10,6],[8,10,6],[9,10,6],[10,10,6],[0,8,8],[1,8,8],[2,8,8],[3,8,9],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[10,8,9],[0,6,1],[1,6,1],[2,6,1],[3,6,1],[4,6,1],[5,6,8],[6,6,1],[7,6,1],[8,6,1],[9,6,1],[10,6,1],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,8],[5,4,3],[6,4,8],[7,4,9],[8,4,9],[9,4,9],[10,4,9],[0,2,4],[1,2,4],[2,2,4],[3,2,4],[4,2,4],[5,2,4],[6,2,4],[7,2,4],[8,2,4],[9,2,4],[10,2,4]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:184, balls: [[4,17,8],[5,17,3],[6,17,8],[3,16,3],[4,16,2],[5,16,2],[6,16,2],[7,16,3],[2,15,8],[3,15,2],[4,15,2],[5,15,2],[6,15,2],[7,15,2],[8,15,8],[2,14,3],[3,14,2],[4,14,4],[5,14,4],[6,14,4],[7,14,2],[8,14,3],[1,13,8],[2,13,2],[3,13,2],[4,13,4],[5,13,4],[6,13,4],[7,13,2],[8,13,2],[9,13,8],[1,12,3],[2,12,2],[3,12,4],[4,12,0],[5,12,0],[6,12,0],[7,12,4],[8,12,2],[9,12,3],[1,11,8],[2,11,2],[3,11,4],[4,11,0],[5,11,7],[6,11,0],[7,11,4],[8,11,2],[9,11,8],[1,10,9],[2,10,2],[3,10,4],[4,10,0],[5,10,0],[6,10,0],[7,10,4],[8,10,2],[9,10,9],[1,9,8],[2,9,2],[3,9,2],[4,9,4],[5,9,4],[6,9,4],[7,9,2],[8,9,2],[9,9,8],[2,8,9],[3,8,2],[4,8,4],[5,8,4],[6,8,4],[7,8,2],[8,8,9],[2,7,8],[3,7,2],[4,7,2],[5,7,2],[6,7,2],[7,7,2],[8,7,8],[3,6,9],[4,6,2],[5,6,2],[6,6,2],[7,6,9],[4,5,8],[5,5,9],[6,5,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:185, balls: [[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[2,16,9],[3,16,0],[4,16,0],[5,16,0],[6,16,0],[7,16,0],[8,16,9],[1,15,9],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,9],[1,14,9],[9,14,9],[3,12,2],[4,12,9],[5,12,2],[6,12,9],[7,12,2],[3,11,2],[4,11,2],[5,11,2],[6,11,2],[7,11,2],[4,10,2],[5,10,2],[6,10,2],[4,9,2],[5,9,2],[6,9,2],[5,8,2],[1,7,9],[2,7,9],[3,7,9],[5,7,2],[7,7,9],[8,7,9],[9,7,9],[0,6,9],[1,6,5],[2,6,5],[3,6,5],[4,6,9],[6,6,9],[7,6,5],[8,6,5],[9,6,5],[10,6,9],[0,5,9],[1,5,5],[2,5,5],[3,5,5],[4,5,9],[6,5,9],[7,5,5],[8,5,5],[9,5,5],[10,5,9],[0,4,8],[1,4,0],[2,4,5],[3,4,0],[4,4,8],[5,4,8],[6,4,8],[7,4,0],[8,4,5],[9,4,0],[10,4,8],[0,3,8],[1,3,5],[2,3,0],[3,3,5],[4,3,8],[6,3,8],[7,3,5],[8,3,0],[9,3,5],[10,3,8],[0,2,8],[1,2,5],[2,2,5],[3,2,5],[4,2,8],[6,2,8],[7,2,5],[8,2,5],[9,2,5],[10,2,8],[1,1,8],[2,1,8],[3,1,8],[7,1,8],[8,1,8],[9,1,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:186, balls: [[0,17,8],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,8],[1,16,9],[9,16,9],[1,15,9],[9,15,9],[1,14,9],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[9,14,9],[1,13,9],[3,13,8],[7,13,8],[9,13,9],[1,12,9],[3,12,8],[5,12,9],[7,12,8],[9,12,9],[1,11,9],[3,11,8],[5,11,9],[7,11,8],[9,11,9],[1,10,9],[3,10,8],[5,10,0],[7,10,8],[9,10,9],[1,9,9],[3,9,8],[5,9,0],[7,9,8],[9,9,9],[1,8,9],[3,8,8],[5,8,9],[7,8,8],[9,8,9],[1,7,9],[3,7,8],[5,7,9],[7,7,8],[9,7,9],[1,6,9],[3,6,8],[7,6,8],[9,6,9],[1,5,9],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[9,5,9],[1,4,9],[9,4,9],[1,3,9],[9,3,9],[0,2,8],[1,2,9],[2,2,9],[3,2,3],[4,2,9],[5,2,9],[6,2,9],[7,2,3],[8,2,9],[9,2,9],[10,2,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:187, balls: [[1,15,8],[2,15,9],[3,15,9],[4,15,9],[5,15,9],[6,15,9],[7,15,9],[8,15,9],[9,15,8],[1,14,9],[9,14,9],[1,13,9],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[9,13,8],[1,12,9],[9,12,9],[1,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[9,11,9],[1,10,9],[9,10,9],[1,9,9],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[9,9,8],[1,8,9],[9,8,9],[1,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[9,7,9],[1,6,9],[9,6,9],[1,5,8],[2,5,9],[3,5,9],[4,5,9],[5,5,9],[6,5,9],[7,5,9],[8,5,9],[9,5,8]], mask_left: [[1,11],[3,11],[4,11],[5,11],[6,11],[7,11],[1,7],[3,7],[4,7],[5,7],[6,7],[7,7]], mask_right: [[3,13],[4,13],[5,13],[6,13],[7,13],[9,13],[3,9],[4,9],[5,9],[6,9],[7,9],[9,9]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:188, balls: [[0,17,8],[2,17,8],[4,17,8],[6,17,8],[8,17,8],[10,17,8],[1,16,8],[3,16,8],[5,16,8],[7,16,8],[9,16,8],[0,15,8],[2,15,8],[4,15,8],[6,15,8],[8,15,8],[10,15,8],[1,14,8],[3,14,8],[5,14,8],[7,14,8],[9,14,8],[0,13,8],[2,13,8],[4,13,8],[6,13,8],[8,13,8],[10,13,8],[1,12,8],[3,12,8],[5,12,8],[7,12,8],[9,12,8],[0,11,8],[2,11,8],[4,11,8],[6,11,8],[8,11,8],[10,11,8],[1,10,8],[3,10,8],[5,10,9],[7,10,8],[9,10,8],[0,9,8],[2,9,8],[4,9,8],[5,9,8],[6,9,8],[8,9,8],[10,9,8],[1,8,8],[3,8,8],[5,8,9],[7,8,8],[9,8,8],[0,7,8],[2,7,8],[4,7,8],[6,7,8],[8,7,8],[10,7,8],[1,6,8],[3,6,8],[5,6,8],[7,6,8],[9,6,8],[0,5,8],[2,5,8],[4,5,8],[6,5,8],[8,5,8],[10,5,8],[1,4,8],[3,4,8],[5,4,8],[7,4,8],[9,4,8],[0,3,8],[2,3,8],[4,3,8],[6,3,8],[8,3,8],[10,3,8],[1,2,8],[3,2,8],[5,2,8],[7,2,8],[9,2,8],[0,1,8],[2,1,8],[4,1,8],[6,1,8],[8,1,8],[10,1,8]], mask_left: [[0,17],[2,17],[4,17],[6,17],[8,17],[10,17],[0,15],[2,15],[4,15],[6,15],[8,15],[10,15],[0,13],[2,13],[4,13],[6,13],[8,13],[10,13],[0,11],[2,11],[4,11],[6,11],[8,11],[10,11],[0,7],[2,7],[4,7],[6,7],[8,7],[10,7],[0,5],[2,5],[4,5],[6,5],[8,5],[10,5],[0,3],[2,3],[4,3],[6,3],[8,3],[10,3],[0,1],[2,1],[4,1],[6,1],[8,1],[10,1]], mask_right: [[1,16],[3,16],[5,16],[7,16],[9,16],[1,14],[3,14],[5,14],[7,14],[9,14],[1,12],[3,12],[5,12],[7,12],[9,12],[1,6],[3,6],[5,6],[7,6],[9,6],[1,4],[3,4],[5,4],[7,4],[9,4],[1,2],[3,2],[5,2],[7,2],[9,2]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:189, balls: [[0,17,8],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,8],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,8],[0,16,8],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[10,16,8],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,2],[1,14,2],[2,14,2],[3,14,2],[4,14,2],[5,14,2],[6,14,2],[7,14,2],[8,14,2],[9,14,2],[10,14,2],[0,13,3],[1,13,3],[2,13,3],[3,13,3],[4,13,3],[5,13,3],[6,13,3],[7,13,3],[8,13,3],[9,13,3],[10,13,3],[0,12,4],[1,12,4],[2,12,4],[3,12,4],[4,12,4],[5,12,4],[6,12,4],[7,12,4],[8,12,4],[9,12,4],[10,12,4],[0,11,5],[1,11,5],[2,11,5],[3,11,5],[4,11,5],[5,11,5],[6,11,5],[7,11,5],[8,11,5],[9,11,5],[10,11,5],[0,10,6],[1,10,6],[2,10,6],[3,10,6],[4,10,6],[5,10,6],[6,10,6],[7,10,6],[8,10,6],[9,10,6],[10,10,6],[0,9,7],[1,9,7],[2,9,7],[3,9,7],[4,9,7],[5,9,7],[6,9,7],[7,9,7],[8,9,7],[9,9,7],[10,9,7],[0,8,8],[1,8,8],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[10,8,8],[0,7,7],[1,7,7],[2,7,7],[3,7,7],[4,7,7],[5,7,7],[6,7,7],[7,7,7],[8,7,7],[9,7,7],[10,7,7],[0,6,6],[1,6,6],[2,6,6],[3,6,6],[4,6,6],[5,6,6],[6,6,6],[7,6,6],[8,6,6],[9,6,6],[10,6,6],[0,5,5],[1,5,5],[2,5,5],[3,5,5],[4,5,5],[5,5,5],[6,5,5],[7,5,5],[8,5,5],[9,5,5],[10,5,5],[0,4,4],[1,4,4],[2,4,4],[3,4,4],[4,4,4],[5,4,4],[6,4,4],[7,4,4],[8,4,4],[9,4,4],[10,4,4],[0,3,3],[1,3,3],[2,3,3],[3,3,3],[4,3,3],[5,3,3],[6,3,3],[7,3,3],[8,3,3],[9,3,3],[10,3,3],[0,2,2],[1,2,2],[2,2,2],[3,2,2],[4,2,2],[5,2,2],[6,2,2],[7,2,2],[8,2,2],[9,2,2],[10,2,2],[0,1,1],[1,1,1],[2,1,1],[3,1,1],[4,1,1],[5,1,1],[6,1,1],[7,1,1],[8,1,1],[9,1,1],[10,1,1],[0,0,8],[1,0,8],[2,0,8],[3,0,8],[4,0,8],[5,0,8],[6,0,8],[7,0,8],[8,0,8],[9,0,8],[10,0,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:190, balls: [[0,9,9],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,3],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[10,9,9],[0,8,7],[1,8,7],[2,8,7],[3,8,7],[4,8,7],[5,8,7],[6,8,7],[7,8,7],[8,8,7],[9,8,7],[10,8,7],[0,7,6],[1,7,6],[2,7,6],[3,7,6],[4,7,6],[5,7,6],[6,7,6],[7,7,6],[8,7,6],[9,7,6],[10,7,6],[0,6,1],[1,6,1],[2,6,1],[3,6,1],[4,6,1],[5,6,1],[6,6,1],[7,6,1],[8,6,1],[9,6,1],[10,6,1],[0,5,9],[1,5,4],[2,5,9],[3,5,4],[4,5,9],[5,5,4],[6,5,9],[7,5,4],[8,5,9],[9,5,4],[10,5,9],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,2],[1,3,2],[2,3,2],[3,3,2],[4,3,2],[5,3,2],[6,3,2],[7,3,2],[8,3,2],[9,3,2],[10,3,2],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:191, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,54,72,17,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:192, balls: [[0,15,9],[1,15,9],[2,15,9],[3,15,9],[4,15,8],[5,15,9],[6,15,8],[7,15,9],[8,15,9],[9,15,9],[10,15,9],[3,14,9],[4,14,3],[5,14,3],[6,14,3],[7,14,9],[2,13,8],[3,13,9],[4,13,3],[5,13,3],[6,13,3],[7,13,9],[1,12,8],[3,12,9],[4,12,3],[5,12,3],[6,12,3],[7,12,9],[1,11,8],[3,11,9],[4,11,3],[5,11,3],[6,11,3],[7,11,9],[1,10,8],[3,10,9],[4,10,3],[5,10,3],[6,10,3],[7,10,9],[1,9,8],[3,9,9],[4,9,3],[5,9,3],[6,9,3],[7,9,9],[1,8,8],[3,8,9],[4,8,9],[5,8,3],[6,8,9],[7,8,9],[1,7,8],[3,7,9],[4,7,9],[5,7,0],[6,7,9],[7,7,9],[2,6,8],[3,6,9],[4,6,0],[5,6,0],[6,6,0],[7,6,9],[3,5,9],[4,5,0],[5,5,0],[6,5,0],[7,5,9],[3,4,9],[7,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:193, balls: [[1,14,9],[2,14,9],[3,14,9],[4,14,9],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[1,13,9],[2,13,8],[3,13,5],[4,13,9],[6,13,9],[7,13,5],[8,13,8],[9,13,9],[1,12,9],[2,12,8],[3,12,5],[4,12,9],[6,12,9],[7,12,5],[8,12,8],[9,12,9],[1,11,9],[2,11,5],[3,11,8],[4,11,9],[6,11,9],[7,11,8],[8,11,5],[9,11,9],[1,10,9],[2,10,5],[3,10,8],[4,10,9],[6,10,9],[7,10,8],[8,10,5],[9,10,9],[1,7,9],[2,7,9],[3,7,9],[4,7,9],[6,7,9],[7,7,9],[8,7,9],[9,7,9],[1,6,9],[2,6,5],[3,6,8],[4,6,9],[6,6,9],[7,6,8],[8,6,5],[9,6,9],[1,5,9],[2,5,5],[3,5,8],[4,5,9],[6,5,9],[7,5,8],[8,5,5],[9,5,9],[1,4,9],[2,4,8],[3,4,5],[4,4,9],[6,4,9],[7,4,5],[8,4,8],[9,4,9],[1,3,9],[2,3,8],[3,3,5],[4,3,9],[6,3,9],[7,3,5],[8,3,8],[9,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:194, balls: [[0,17,8],[1,17,8],[2,17,9],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,9],[9,17,8],[10,17,8],[0,16,2],[1,16,2],[2,16,9],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,9],[9,16,2],[10,16,2],[0,15,8],[1,15,8],[2,15,9],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[8,15,9],[9,15,8],[10,15,8],[0,14,2],[1,14,2],[2,14,9],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[8,14,9],[9,14,2],[10,14,2],[0,13,8],[1,13,8],[2,13,9],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[8,13,9],[9,13,8],[10,13,8],[0,12,2],[1,12,2],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[8,12,9],[9,12,2],[10,12,2],[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[6,7,0],[8,7,0],[10,7,0],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[0,5,7],[1,5,7],[2,5,7],[3,5,7],[4,5,7],[5,5,7],[6,5,7],[7,5,7],[8,5,7],[9,5,6],[10,5,6],[0,4,4],[1,4,4],[4,4,4],[5,4,4],[6,4,4],[7,4,4],[8,4,4],[9,4,6],[10,4,6],[0,3,4],[5,3,4],[6,3,4],[7,3,4],[8,3,4],[9,3,6],[6,2,6],[2,1,0],[3,1,0],[4,1,0],[5,1,0],[6,1,0],[7,1,0],[8,1,0],[9,1,0],[10,1,0]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:195, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[0,16,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[0,15,9],[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,9],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[0,14,9],[1,14,9],[2,14,9],[3,14,9],[4,14,9],[5,14,9],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[0,13,9],[9,13,8],[1,12,3],[2,12,7],[3,12,6],[4,12,8],[5,12,8],[6,12,4],[7,12,5],[8,12,2],[9,11,8],[1,10,9],[2,10,9],[3,10,9],[4,10,9],[5,10,9],[6,10,9],[7,10,9],[8,10,9],[9,10,9],[10,10,9],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[10,9,9],[9,8,8],[1,7,0],[2,7,2],[3,7,5],[4,7,8],[5,7,8],[6,7,1],[7,7,6],[8,7,7],[0,6,9],[9,6,8],[0,5,9],[1,5,9],[2,5,9],[3,5,9],[4,5,9],[5,5,9],[6,5,9],[7,5,9],[8,5,9],[9,5,9],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[0,3,9],[1,3,9],[2,3,9],[3,3,9],[4,3,9],[5,3,9],[6,3,9],[7,3,9],[8,3,9],[9,3,9],[0,2,9],[1,2,9],[2,2,9],[3,2,9],[4,2,9],[5,2,9],[6,2,9],[7,2,9],[8,2,9],[9,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:196, balls: [[0,16,8],[1,16,9],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,9],[10,16,8],[0,15,8],[1,15,8],[2,15,8],[3,15,8],[4,15,9],[5,15,9],[6,15,9],[7,15,8],[8,15,8],[9,15,8],[10,15,8],[0,14,8],[1,14,8],[2,14,8],[3,14,9],[4,14,2],[5,14,2],[6,14,2],[7,14,9],[8,14,8],[9,14,8],[10,14,8],[0,13,8],[1,13,8],[2,13,8],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,8],[9,13,8],[10,13,8],[0,12,8],[1,12,8],[2,12,9],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,9],[9,12,8],[10,12,8],[0,11,8],[1,11,8],[2,11,2],[3,11,2],[4,11,2],[5,11,2],[6,11,2],[7,11,2],[8,11,2],[9,11,8],[10,11,8],[0,10,8],[1,10,8],[2,10,2],[3,10,2],[4,10,2],[5,10,2],[6,10,2],[7,10,2],[8,10,2],[9,10,8],[10,10,8],[0,9,8],[1,9,8],[2,9,2],[3,9,2],[4,9,2],[5,9,2],[6,9,2],[7,9,2],[8,9,2],[9,9,8],[10,9,8],[0,8,8],[1,8,8],[2,8,2],[3,8,2],[4,8,2],[5,8,2],[6,8,2],[7,8,2],[8,8,2],[9,8,8],[10,8,8],[0,7,8],[1,7,8],[2,7,2],[3,7,2],[4,7,4],[5,7,2],[6,7,4],[7,7,2],[8,7,2],[9,7,8],[10,7,8],[0,6,8],[1,6,8],[2,6,8],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,8],[9,6,8],[10,6,8],[0,5,8],[1,5,8],[2,5,8],[3,5,8],[4,5,4],[5,5,3],[6,5,4],[7,5,8],[8,5,8],[9,5,8],[10,5,8],[0,4,8],[1,4,8],[2,4,8],[3,4,8],[4,4,8],[5,4,3],[6,4,8],[7,4,8],[8,4,8],[9,4,8],[10,4,8],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8],[0,2,8],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,8],[10,2,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:197, balls: [[0,16,2],[1,16,2],[2,16,2],[4,16,9],[5,16,9],[6,16,9],[8,16,2],[9,16,2],[10,16,2],[1,15,2],[3,15,9],[4,15,4],[5,15,7],[6,15,4],[7,15,9],[9,15,2],[1,14,9],[2,14,9],[3,14,4],[4,14,4],[5,14,7],[6,14,4],[7,14,4],[8,14,9],[9,14,9],[1,13,9],[2,13,9],[3,13,4],[4,13,4],[5,13,7],[6,13,4],[7,13,4],[8,13,9],[9,13,9],[1,12,9],[2,12,4],[3,12,4],[4,12,4],[5,12,7],[6,12,4],[7,12,4],[8,12,4],[9,12,9],[1,11,9],[2,11,4],[3,11,4],[4,11,4],[5,11,7],[6,11,4],[7,11,4],[8,11,4],[9,11,9],[1,10,9],[2,10,4],[3,10,7],[4,10,7],[5,10,8],[6,10,4],[7,10,4],[8,10,4],[9,10,9],[1,9,9],[2,9,4],[3,9,4],[4,9,4],[5,9,4],[6,9,4],[7,9,4],[8,9,4],[9,9,9],[1,8,9],[2,8,4],[3,8,4],[4,8,4],[5,8,4],[6,8,4],[7,8,4],[8,8,4],[9,8,9],[2,7,9],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,9],[2,6,9],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,9],[0,5,3],[2,5,9],[3,5,9],[4,5,4],[5,5,4],[6,5,4],[7,5,9],[8,5,9],[10,5,3],[0,4,3],[1,4,3],[2,4,9],[4,4,3],[5,4,3],[6,4,3],[8,4,9],[9,4,3],[10,4,3],[0,3,3],[1,3,3],[2,3,3],[3,3,3],[7,3,3],[8,3,3],[9,3,3],[10,3,3],[0,2,3],[1,2,3],[2,2,3],[3,2,3],[5,2,9],[7,2,3],[8,2,3],[9,2,3],[10,2,3],[1,1,3],[2,1,3],[8,1,3],[9,1,3]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:198, balls: [[0,16,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[1,15,8],[9,15,9],[1,14,8],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[9,14,9],[1,13,8],[9,13,9],[1,12,9],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,8],[8,12,8],[9,12,9],[1,11,9],[9,11,9],[1,10,9],[3,10,8],[4,10,7],[5,10,8],[6,10,7],[7,10,8],[9,10,9],[1,9,9],[9,9,9],[1,8,9],[2,8,8],[3,8,8],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[1,7,9],[9,7,8],[1,6,9],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[9,6,8],[1,5,9],[9,5,8],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[10,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:199, balls: [[0,17,9],[2,17,9],[4,17,9],[6,17,9],[8,17,9],[10,17,9],[0,16,4],[2,16,4],[4,16,4],[6,16,4],[8,16,4],[10,16,4],[0,15,9],[2,15,9],[4,15,9],[6,15,9],[8,15,9],[10,15,9],[1,13,9],[3,13,9],[5,13,9],[7,13,9],[9,13,9],[1,12,2],[3,12,2],[5,12,2],[7,12,2],[9,12,2],[1,11,9],[3,11,9],[5,11,9],[7,11,9],[9,11,9],[0,9,9],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[10,9,9],[1,7,9],[3,7,9],[5,7,9],[7,7,9],[9,7,9],[1,6,1],[3,6,1],[5,6,1],[7,6,1],[9,6,1],[1,5,9],[3,5,9],[5,5,9],[7,5,9],[9,5,9],[0,3,9],[2,3,9],[4,3,9],[6,3,9],[8,3,9],[10,3,9],[0,2,6],[2,2,6],[4,2,6],[6,2,6],[8,2,6],[10,2,6],[0,1,9],[2,1,9],[4,1,9],[6,1,9],[8,1,9],[10,1,9]], mask_left: [[0,9]], mask_right: [[10,9]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:200, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,1],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[5,16,1],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,1],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[1,14,9],[2,14,9],[3,14,9],[4,14,9],[5,14,1],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[1,13,9],[2,13,1],[3,13,1],[4,13,1],[5,13,1],[6,13,1],[7,13,1],[8,13,1],[9,13,9],[1,12,9],[2,12,1],[3,12,1],[4,12,1],[5,12,1],[6,12,1],[7,12,1],[8,12,1],[9,12,9],[1,11,9],[2,11,9],[3,11,9],[4,11,9],[5,11,1],[6,11,9],[7,11,9],[8,11,9],[9,11,9],[1,10,9],[2,10,9],[3,10,9],[4,10,9],[5,10,1],[6,10,9],[7,10,9],[8,10,9],[9,10,9],[1,9,9],[2,9,9],[3,9,9],[4,9,1],[5,9,1],[6,9,1],[7,9,9],[8,9,9],[9,9,9],[1,8,9],[2,8,9],[3,8,1],[4,8,0],[5,8,0],[6,8,0],[7,8,1],[8,8,9],[9,8,9],[1,7,9],[2,7,1],[3,7,0],[4,7,0],[5,7,0],[6,7,0],[7,7,0],[8,7,1],[9,7,9],[1,6,9],[2,6,1],[3,6,0],[4,6,0],[5,6,0],[6,6,0],[7,6,0],[8,6,1],[9,6,9],[1,5,9],[2,5,1],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,1],[9,5,9],[1,4,9],[2,4,1],[3,4,0],[4,4,0],[5,4,0],[6,4,0],[7,4,0],[8,4,1],[9,4,9],[1,3,9],[2,3,9],[3,3,1],[4,3,0],[5,3,0],[6,3,0],[7,3,1],[8,3,9],[9,3,9],[1,2,9],[2,2,9],[3,2,9],[4,2,1],[5,2,1],[6,2,1],[7,2,9],[8,2,9],[9,2,9],[1,1,9],[2,1,9],[3,1,9],[4,1,9],[5,1,9],[6,1,9],[7,1,9],[8,1,9],[9,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:201, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,9],[2,16,9],[3,16,9],[4,16,6],[5,16,6],[6,16,6],[7,16,9],[8,16,9],[9,16,9],[1,15,9],[2,15,9],[3,15,6],[4,15,0],[5,15,0],[6,15,0],[7,15,6],[8,15,9],[9,15,9],[1,14,9],[2,14,6],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,6],[9,14,9],[1,13,9],[2,13,6],[3,13,0],[4,13,0],[5,13,0],[6,13,0],[7,13,0],[8,13,6],[9,13,9],[1,12,9],[2,12,6],[3,12,0],[4,12,0],[5,12,0],[6,12,0],[7,12,0],[8,12,6],[9,12,9],[1,11,9],[2,11,6],[3,11,6],[4,11,0],[5,11,0],[6,11,0],[7,11,6],[8,11,6],[9,11,9],[1,10,9],[2,10,9],[3,10,6],[4,10,0],[5,10,0],[6,10,0],[7,10,6],[8,10,9],[9,10,9],[1,9,9],[2,9,9],[3,9,9],[4,9,6],[5,9,6],[6,9,6],[7,9,9],[8,9,9],[9,9,9],[1,8,9],[2,8,9],[3,8,9],[4,8,9],[5,8,6],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[1,7,9],[2,7,9],[3,7,9],[4,7,9],[5,7,6],[6,7,9],[7,7,9],[8,7,9],[9,7,9],[1,6,9],[2,6,9],[3,6,9],[4,6,9],[5,6,6],[6,6,9],[7,6,9],[8,6,9],[9,6,9],[1,5,9],[2,5,6],[3,5,9],[4,5,9],[5,5,6],[6,5,9],[7,5,9],[8,5,6],[9,5,9],[1,4,9],[2,4,6],[3,4,6],[4,4,9],[5,4,6],[6,4,9],[7,4,6],[8,4,6],[9,4,9],[1,3,9],[2,3,9],[3,3,6],[4,3,6],[5,3,6],[6,3,6],[7,3,6],[8,3,9],[9,3,9],[1,2,9],[2,2,9],[3,2,9],[4,2,6],[5,2,6],[6,2,6],[7,2,9],[8,2,9],[9,2,9],[1,1,9],[2,1,9],[3,1,9],[4,1,9],[5,1,6],[6,1,9],[7,1,9],[8,1,9],[9,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:202, balls: [[4,17,9],[6,17,9],[5,16,9],[5,15,9],[5,14,9],[4,13,9],[5,13,9],[6,13,9],[1,12,9],[2,12,9],[3,12,9],[4,12,8],[5,12,8],[6,12,8],[7,12,9],[8,12,9],[9,12,9],[4,11,8],[5,11,8],[6,11,8],[1,10,9],[2,10,9],[3,10,9],[4,10,8],[5,10,8],[6,10,8],[7,10,9],[8,10,9],[9,10,9],[4,9,8],[5,9,8],[6,9,8],[1,8,9],[2,8,9],[3,8,9],[4,8,8],[5,8,8],[6,8,8],[7,8,9],[8,8,9],[9,8,9],[4,7,8],[5,7,8],[6,7,8],[1,6,9],[2,6,9],[3,6,9],[4,6,8],[5,6,8],[6,6,8],[7,6,9],[8,6,9],[9,6,9],[4,5,9],[5,5,9],[6,5,9],[5,4,9],[5,3,9],[5,2,9],[4,1,9],[6,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:203, balls: [[0,17,9],[2,17,9],[4,17,9],[6,17,9],[8,17,9],[10,17,9],[0,16,8],[2,16,8],[4,16,8],[6,16,8],[8,16,8],[10,16,8],[1,15,9],[3,15,9],[5,15,9],[7,15,9],[9,15,9],[1,14,8],[3,14,8],[5,14,8],[7,14,8],[9,14,8],[0,13,9],[2,13,9],[4,13,9],[6,13,9],[8,13,9],[10,13,9],[0,12,8],[2,12,8],[4,12,8],[6,12,8],[8,12,8],[10,12,8],[1,11,9],[3,11,9],[5,11,9],[7,11,9],[9,11,9],[1,10,8],[3,10,8],[5,10,8],[7,10,8],[9,10,8],[0,9,9],[2,9,9],[4,9,9],[6,9,9],[8,9,9],[10,9,9],[0,8,8],[2,8,8],[4,8,8],[6,8,8],[8,8,8],[10,8,8],[1,7,9],[3,7,9],[5,7,9],[7,7,9],[9,7,9],[1,6,8],[3,6,8],[5,6,8],[7,6,8],[9,6,8],[0,5,9],[2,5,9],[4,5,9],[6,5,9],[8,5,9],[10,5,9],[0,4,8],[2,4,8],[4,4,8],[6,4,8],[8,4,8],[10,4,8],[1,3,9],[3,3,9],[5,3,9],[7,3,9],[9,3,9],[1,2,8],[3,2,8],[5,2,8],[7,2,8],[9,2,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:204, balls: [[2,15,9],[3,15,8],[4,15,9],[5,15,8],[6,15,9],[7,15,8],[8,15,9],[2,14,9],[3,14,8],[4,14,9],[5,14,8],[6,14,9],[7,14,8],[8,14,9],[2,13,9],[3,13,9],[4,13,9],[5,13,9],[6,13,9],[7,13,9],[8,13,9],[2,12,8],[5,12,8],[8,12,8],[2,11,9],[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[8,11,9],[2,10,8],[5,10,8],[8,10,8],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[2,8,8],[5,8,8],[8,8,8],[2,7,9],[3,7,9],[4,7,9],[5,7,9],[6,7,9],[7,7,9],[8,7,9],[2,6,8],[5,6,8],[8,6,8],[2,5,9],[3,5,9],[4,5,9],[5,5,9],[6,5,9],[7,5,9],[8,5,9],[2,4,9],[3,4,8],[4,4,9],[5,4,8],[6,4,9],[7,4,8],[8,4,9],[2,3,9],[3,3,8],[4,3,9],[5,3,8],[6,3,9],[7,3,8],[8,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:205, balls: [[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[2,13,9],[3,13,9],[4,13,9],[5,13,9],[6,13,9],[7,13,9],[8,13,9],[2,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[8,12,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[1,10,9],[2,10,9],[3,10,9],[4,10,9],[5,10,9],[6,10,9],[7,10,9],[8,10,9],[9,10,9],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[2,8,9],[3,8,8],[4,8,9],[5,8,8],[6,8,9],[7,8,8],[8,8,9],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[2,6,9],[3,6,8],[4,6,9],[5,6,8],[6,6,9],[7,6,8],[8,6,9],[4,5,8],[5,5,8],[6,5,8],[4,4,9],[5,4,8],[6,4,9],[4,3,8],[5,3,8],[6,3,8],[4,2,9],[5,2,8],[6,2,9],[5,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:206, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[1,15,8],[2,15,8],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[8,15,8],[9,15,8],[1,14,9],[2,14,8],[3,14,9],[4,14,8],[5,14,9],[6,14,8],[7,14,9],[8,14,8],[9,14,9],[1,13,8],[2,13,8],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[8,13,8],[9,13,8],[1,12,9],[2,12,8],[3,12,9],[4,12,8],[5,12,9],[6,12,8],[7,12,9],[8,12,8],[9,12,9],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[1,10,9],[2,10,8],[3,10,9],[4,10,8],[5,10,9],[6,10,8],[7,10,9],[8,10,8],[9,10,9],[1,9,8],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,8],[1,8,9],[2,8,8],[3,8,9],[4,8,8],[5,8,9],[6,8,8],[7,8,9],[8,8,8],[9,8,9],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,8],[1,6,9],[2,6,8],[3,6,9],[4,6,8],[5,6,9],[6,6,8],[7,6,9],[8,6,8],[9,6,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:207, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,59,77,16,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:208, balls: [[0,17,8],[1,17,8],[2,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,8],[1,16,8],[9,16,8],[10,16,8],[0,15,8],[6,15,9],[10,15,8],[5,14,9],[6,14,8],[7,14,9],[4,13,9],[5,13,8],[6,13,8],[8,13,9],[5,12,9],[6,12,8],[2,11,9],[6,11,9],[8,11,9],[1,10,9],[2,10,8],[3,10,9],[5,10,8],[7,10,9],[0,9,9],[1,9,8],[2,9,8],[4,9,9],[7,9,8],[8,9,9],[1,8,9],[2,8,8],[5,8,9],[7,8,8],[8,8,8],[9,8,9],[2,7,9],[4,7,8],[6,7,9],[7,7,8],[8,7,9],[1,6,9],[3,6,9],[7,6,9],[3,5,8],[4,5,9],[1,4,9],[3,4,8],[4,4,8],[5,4,9],[2,3,9],[3,3,8],[4,3,9],[0,2,8],[3,2,9],[10,2,8],[0,1,8],[1,1,8],[9,1,8],[10,1,8],[0,0,8],[1,0,8],[2,0,8],[8,0,8],[9,0,8],[10,0,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:209, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,8],[5,16,8],[10,16,8],[0,15,8],[5,15,8],[10,15,8],[0,14,9],[1,14,9],[2,14,9],[3,14,9],[4,14,9],[5,14,9],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[10,14,9],[0,13,8],[5,13,8],[10,13,8],[0,12,8],[5,12,8],[10,12,8],[0,11,9],[1,11,9],[2,11,9],[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[8,11,9],[9,11,9],[10,11,9],[0,10,8],[5,10,8],[10,10,8],[0,9,8],[5,9,8],[10,9,8],[0,8,9],[1,8,9],[2,8,9],[3,8,9],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[10,8,9],[0,7,8],[5,7,8],[10,7,8],[0,6,8],[5,6,8],[10,6,8],[0,5,9],[1,5,9],[2,5,9],[3,5,9],[4,5,9],[5,5,9],[6,5,9],[7,5,9],[8,5,9],[9,5,9],[10,5,9],[0,4,8],[5,4,8],[10,4,8],[0,3,8],[5,3,8],[10,3,8],[0,2,9],[1,2,9],[2,2,9],[3,2,9],[4,2,9],[5,2,9],[6,2,9],[7,2,9],[8,2,9],[9,2,9],[10,2,9],[0,1,8],[5,1,8],[10,1,8],[0,0,8],[5,0,8],[10,0,8]], mask_left: [[0,17],[0,11],[0,5]], mask_right: [[10,14],[10,8],[10,2]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:210, balls: [[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[2,16,9],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,9],[2,15,9],[3,15,8],[4,15,9],[5,15,8],[6,15,9],[7,15,8],[8,15,9],[2,14,9],[3,14,8],[4,14,9],[5,14,8],[6,14,9],[7,14,8],[8,14,9],[1,13,9],[2,13,8],[3,13,8],[4,13,9],[5,13,8],[6,13,9],[7,13,8],[8,13,8],[9,13,9],[1,12,8],[2,12,8],[3,12,9],[4,12,8],[5,12,8],[6,12,8],[7,12,9],[8,12,8],[9,12,8],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[0,10,9],[1,10,9],[2,10,9],[3,10,9],[4,10,8],[5,10,8],[6,10,8],[7,10,9],[8,10,9],[9,10,9],[10,10,9],[0,9,8],[1,9,8],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,8],[10,9,8],[0,8,9],[1,8,9],[2,8,9],[3,8,9],[4,8,8],[5,8,8],[6,8,8],[7,8,9],[8,8,9],[9,8,9],[10,8,9],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,8],[1,6,8],[2,6,8],[3,6,9],[4,6,8],[5,6,8],[6,6,8],[7,6,9],[8,6,8],[9,6,8],[1,5,9],[2,5,8],[3,5,8],[4,5,9],[5,5,8],[6,5,9],[7,5,8],[8,5,8],[9,5,9],[2,4,9],[3,4,8],[4,4,9],[5,4,8],[6,4,9],[7,4,8],[8,4,9],[2,3,9],[3,3,8],[4,3,9],[5,3,8],[6,3,9],[7,3,8],[8,3,9],[2,2,9],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,9],[3,1,9],[4,1,9],[5,1,9],[6,1,9],[7,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:211, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,8],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[5,16,8],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[0,15,9],[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,8],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[10,15,9],[0,14,9],[1,14,9],[2,14,9],[3,14,9],[4,14,8],[5,14,8],[6,14,8],[7,14,9],[8,14,9],[9,14,9],[10,14,9],[0,13,9],[1,13,9],[2,13,9],[3,13,9],[4,13,8],[5,13,8],[6,13,8],[7,13,9],[8,13,9],[9,13,9],[10,13,9],[0,12,9],[1,12,9],[2,12,9],[3,12,9],[4,12,8],[5,12,8],[6,12,8],[7,12,9],[8,12,9],[9,12,9],[10,12,9],[0,11,9],[1,11,9],[2,11,9],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,9],[9,11,9],[10,11,9],[0,10,9],[1,10,9],[2,10,9],[3,10,8],[4,10,8],[5,10,8],[6,10,8],[7,10,8],[8,10,9],[9,10,9],[10,10,9],[0,9,9],[1,9,9],[2,9,9],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,9],[9,9,9],[10,9,9],[0,8,9],[1,8,9],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,9],[10,8,9],[0,7,9],[1,7,9],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,9],[10,7,9],[0,6,9],[1,6,9],[2,6,8],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[8,6,8],[9,6,9],[10,6,9],[0,5,9],[1,5,8],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,8],[10,5,9],[0,4,9],[1,4,8],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,8],[10,4,9],[0,3,9],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,9],[0,2,8],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,8],[10,2,8],[0,1,8],[1,1,8],[2,1,8],[3,1,8],[4,1,8],[5,1,8],[6,1,8],[7,1,8],[8,1,8],[9,1,8],[10,1,8],[0,0,8],[1,0,8],[2,0,8],[3,0,8],[4,0,8],[5,0,8],[6,0,8],[7,0,8],[8,0,8],[9,0,8],[10,0,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:212, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,8],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[10,16,8],[0,15,8],[1,15,7],[2,15,7],[3,15,8],[4,15,8],[5,15,7],[6,15,8],[7,15,8],[8,15,8],[9,15,7],[10,15,8],[0,14,7],[1,14,8],[2,14,7],[3,14,8],[4,14,7],[5,14,8],[6,14,7],[7,14,8],[8,14,7],[9,14,8],[10,14,7],[0,13,6],[1,13,8],[2,13,8],[3,13,8],[4,13,6],[5,13,8],[6,13,6],[7,13,8],[8,13,6],[9,13,8],[10,13,6],[0,12,6],[1,12,8],[2,12,8],[3,12,8],[4,12,6],[5,12,8],[6,12,6],[7,12,8],[8,12,6],[9,12,8],[10,12,6],[0,11,5],[1,11,8],[2,11,8],[3,11,8],[4,11,5],[5,11,8],[6,11,5],[7,11,8],[8,11,5],[9,11,8],[10,11,5],[0,10,5],[1,10,8],[2,10,8],[3,10,8],[4,10,5],[5,10,8],[6,10,5],[7,10,8],[8,10,5],[9,10,8],[10,10,5],[0,9,8],[1,9,4],[2,9,8],[3,9,8],[4,9,4],[5,9,8],[6,9,4],[7,9,8],[8,9,4],[9,9,8],[10,9,4],[0,8,8],[1,8,4],[2,8,4],[3,8,8],[4,8,4],[5,8,8],[6,8,4],[7,8,8],[8,8,4],[9,8,8],[10,8,4],[0,7,8],[1,7,8],[2,7,3],[3,7,8],[4,7,3],[5,7,8],[6,7,3],[7,7,8],[8,7,3],[9,7,8],[10,7,3],[0,6,3],[1,6,8],[2,6,3],[3,6,8],[4,6,3],[5,6,8],[6,6,3],[7,6,8],[8,6,3],[9,6,8],[10,6,3],[0,5,2],[1,5,8],[2,5,2],[3,5,8],[4,5,2],[5,5,8],[6,5,2],[7,5,8],[8,5,2],[9,5,8],[10,5,2],[0,4,2],[1,4,8],[2,4,2],[3,4,8],[4,4,2],[5,4,8],[6,4,2],[7,4,8],[8,4,2],[9,4,8],[10,4,2],[0,3,1],[1,3,8],[2,3,1],[3,3,8],[4,3,1],[5,3,8],[6,3,1],[7,3,8],[8,3,1],[9,3,8],[10,3,1],[0,2,8],[1,2,1],[2,2,8],[3,2,8],[4,2,8],[5,2,1],[6,2,8],[7,2,8],[8,2,8],[9,2,1],[10,2,8],[0,1,8],[1,1,8],[2,1,8],[3,1,8],[4,1,8],[5,1,8],[6,1,8],[7,1,8],[8,1,8],[9,1,8],[10,1,8],[0,0,8],[1,0,8],[2,0,8],[3,0,8],[4,0,8],[5,0,8],[6,0,8],[7,0,8],[8,0,8],[9,0,8],[10,0,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:213, balls: [[0,10,8],[1,10,9],[2,10,8],[3,10,9],[4,10,8],[5,10,9],[6,10,8],[7,10,9],[8,10,8],[9,10,9],[10,10,8],[0,9,7],[1,9,7],[2,9,7],[3,9,7],[4,9,7],[5,9,7],[6,9,7],[7,9,7],[8,9,7],[9,9,7],[10,9,7],[0,8,6],[1,8,6],[2,8,6],[3,8,6],[4,8,6],[5,8,6],[6,8,6],[7,8,6],[8,8,6],[9,8,6],[10,8,6],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,2],[1,6,2],[2,6,2],[3,6,2],[4,6,2],[5,6,2],[6,6,2],[7,6,2],[8,6,2],[9,6,2],[10,6,2],[0,5,1],[1,5,1],[2,5,1],[3,5,1],[4,5,1],[5,5,1],[6,5,1],[7,5,1],[8,5,1],[9,5,1],[10,5,1],[0,4,0],[1,4,0],[2,4,0],[3,4,0],[4,4,0],[5,4,0],[6,4,0],[7,4,0],[8,4,0],[9,4,0],[10,4,0],[0,3,9],[1,3,8],[2,3,9],[3,3,8],[4,3,9],[5,3,8],[6,3,9],[7,3,8],[8,3,9],[9,3,8],[10,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:214, balls: [[0,14,0],[1,14,9],[2,14,9],[3,14,9],[4,14,9],[5,14,9],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[10,14,9],[0,13,8],[1,13,1],[2,13,2],[3,13,3],[4,13,4],[5,13,5],[6,13,6],[7,13,7],[8,13,0],[9,13,1],[10,13,2],[1,12,9],[2,12,2],[3,12,3],[4,12,4],[5,12,5],[6,12,6],[7,12,7],[8,12,0],[9,12,1],[10,12,2],[2,11,8],[3,11,3],[4,11,4],[5,11,5],[6,11,6],[7,11,7],[8,11,0],[9,11,1],[10,11,2],[3,10,9],[4,10,4],[5,10,5],[6,10,6],[7,10,7],[8,10,0],[9,10,1],[10,10,2],[4,9,8],[5,9,5],[6,9,6],[7,9,7],[8,9,0],[9,9,1],[10,9,2],[5,8,9],[6,8,6],[7,8,7],[8,8,0],[9,8,1],[10,8,2],[6,7,8],[7,7,7],[8,7,0],[9,7,1],[10,7,2],[7,6,9],[8,6,0],[9,6,1],[10,6,2],[8,5,8],[9,5,1],[10,5,2],[9,4,9],[10,4,2],[10,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:215, balls: [[0,16,7],[1,16,9],[2,16,7],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[0,14,8],[1,14,6],[2,14,8],[3,14,6],[4,14,8],[5,14,6],[6,14,8],[7,14,6],[8,14,8],[9,14,6],[10,14,8],[0,12,9],[1,12,9],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[8,12,5],[9,12,9],[10,12,5],[0,10,8],[1,10,4],[2,10,8],[3,10,4],[4,10,8],[5,10,4],[6,10,8],[7,10,4],[8,10,8],[9,10,4],[10,10,8],[0,8,3],[1,8,9],[2,8,3],[3,8,9],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[10,8,9],[0,6,8],[1,6,2],[2,6,8],[3,6,2],[4,6,8],[5,6,2],[6,6,8],[7,6,2],[8,6,8],[9,6,2],[10,6,8],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,1],[9,4,9],[10,4,1],[0,2,8],[1,2,0],[2,2,8],[3,2,0],[4,2,8],[5,2,0],[6,2,8],[7,2,0],[8,2,8],[9,2,0],[10,2,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:216, balls: [[1,17,8],[2,17,8],[3,17,8],[4,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[1,15,1],[2,15,2],[3,15,3],[4,15,4],[6,15,4],[7,15,3],[8,15,2],[9,15,1],[1,14,0],[2,14,1],[3,14,2],[4,14,3],[6,14,3],[7,14,2],[8,14,1],[9,14,0],[1,13,9],[2,13,0],[3,13,1],[4,13,2],[6,13,2],[7,13,1],[8,13,0],[9,13,9],[1,12,7],[2,12,9],[3,12,0],[4,12,1],[6,12,1],[7,12,0],[8,12,9],[9,12,7],[1,11,6],[2,11,7],[3,11,9],[4,11,0],[6,11,0],[7,11,9],[8,11,7],[9,11,6],[1,10,5],[2,10,6],[3,10,7],[4,10,9],[6,10,9],[7,10,7],[8,10,6],[9,10,5],[1,9,4],[2,9,5],[3,9,6],[4,9,7],[6,9,7],[7,9,6],[8,9,5],[9,9,4],[1,8,3],[2,8,4],[3,8,5],[4,8,6],[6,8,6],[7,8,5],[8,8,4],[9,8,3],[1,7,2],[2,7,3],[3,7,4],[4,7,5],[6,7,5],[7,7,4],[8,7,3],[9,7,2],[1,6,9],[2,6,2],[3,6,3],[4,6,4],[6,6,4],[7,6,3],[8,6,2],[9,6,9],[1,5,1],[2,5,9],[3,5,2],[4,5,3],[6,5,3],[7,5,2],[8,5,9],[9,5,1],[1,4,0],[2,4,1],[3,4,9],[4,4,2],[6,4,2],[7,4,9],[8,4,1],[9,4,0],[1,3,9],[2,3,9],[3,3,9],[4,3,9],[6,3,9],[7,3,9],[8,3,9],[9,3,9],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,8]], mask_left: [[1,15],[2,15],[3,15],[4,15],[1,14],[2,14],[3,14],[4,14],[1,9],[2,9],[3,9],[4,9],[1,8],[2,8],[3,8],[4,8],[1,7],[2,7],[3,7],[4,7]], mask_right: [[6,15],[7,15],[8,15],[9,15],[6,14],[7,14],[8,14],[9,14],[6,9],[7,9],[8,9],[9,9],[6,8],[7,8],[8,8],[9,8],[6,7],[7,7],[8,7],[9,7]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:217, balls: [[1,17,8],[3,17,8],[5,17,8],[7,17,8],[9,17,8],[1,16,9],[3,16,9],[5,16,9],[7,16,9],[9,16,9],[1,15,8],[3,15,8],[5,15,8],[7,15,8],[9,15,8],[1,14,4],[3,14,3],[5,14,6],[7,14,3],[9,14,4],[1,13,0],[3,13,0],[5,13,0],[7,13,0],[9,13,0],[1,12,4],[3,12,3],[5,12,6],[7,12,3],[9,12,4],[1,11,4],[3,11,3],[5,11,6],[7,11,3],[9,11,4],[1,10,4],[3,10,3],[5,10,6],[7,10,3],[9,10,4],[1,9,9],[2,9,0],[3,9,9],[4,9,0],[5,9,9],[6,9,0],[7,9,9],[8,9,0],[9,9,9],[1,8,4],[3,8,3],[5,8,6],[7,8,3],[9,8,4],[1,7,4],[3,7,3],[5,7,6],[7,7,3],[9,7,4],[1,6,4],[3,6,3],[5,6,6],[7,6,3],[9,6,4],[1,5,0],[3,5,0],[5,5,0],[7,5,0],[9,5,0],[1,4,4],[3,4,3],[5,4,6],[7,4,3],[9,4,4],[1,3,8],[3,3,8],[5,3,8],[7,3,8],[9,3,8],[1,2,9],[3,2,9],[5,2,9],[7,2,9],[9,2,9],[1,1,8],[3,1,8],[5,1,8],[7,1,8],[9,1,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:218, balls: [[0,17,9],[1,17,8],[2,17,8],[3,17,8],[4,17,1],[5,17,0],[6,17,0],[7,17,8],[8,17,8],[9,17,8],[10,17,9],[0,16,9],[1,16,8],[2,16,8],[3,16,2],[4,16,1],[5,16,1],[6,16,0],[7,16,0],[8,16,8],[9,16,8],[10,16,9],[0,15,9],[1,15,8],[2,15,3],[3,15,2],[4,15,2],[5,15,1],[6,15,1],[7,15,0],[8,15,0],[9,15,8],[10,15,9],[0,14,9],[1,14,8],[2,14,3],[3,14,3],[4,14,2],[5,14,2],[6,14,1],[7,14,1],[8,14,0],[9,14,8],[10,14,9],[0,13,9],[1,13,4],[2,13,4],[3,13,3],[4,13,3],[5,13,2],[6,13,2],[7,13,1],[8,13,1],[9,13,0],[10,13,9],[0,12,9],[1,12,5],[2,12,4],[3,12,4],[4,12,3],[5,12,3],[6,12,2],[7,12,2],[8,12,1],[9,12,1],[10,12,9],[0,11,9],[1,11,5],[2,11,5],[3,11,4],[4,11,4],[5,11,3],[6,11,3],[7,11,2],[8,11,2],[9,11,1],[10,11,9],[0,10,9],[1,10,6],[2,10,5],[3,10,5],[4,10,4],[5,10,4],[6,10,3],[7,10,3],[8,10,2],[9,10,2],[10,10,9],[0,9,9],[1,9,6],[2,9,6],[3,9,5],[4,9,5],[5,9,4],[6,9,4],[7,9,3],[8,9,3],[9,9,2],[10,9,9],[0,8,9],[1,8,7],[2,8,6],[3,8,6],[4,8,5],[5,8,5],[6,8,4],[7,8,4],[8,8,3],[9,8,3],[10,8,9],[0,7,9],[1,7,8],[2,7,7],[3,7,6],[4,7,6],[5,7,5],[6,7,5],[7,7,4],[8,7,4],[9,7,8],[10,7,9],[0,6,9],[1,6,8],[2,6,7],[3,6,7],[4,6,6],[5,6,6],[6,6,5],[7,6,5],[8,6,4],[9,6,8],[10,6,9],[0,5,9],[1,5,8],[2,5,8],[3,5,7],[4,5,7],[5,5,6],[6,5,6],[7,5,5],[8,5,8],[9,5,8],[10,5,9],[0,4,9],[1,4,8],[2,4,8],[3,4,8],[4,4,7],[5,4,7],[6,4,6],[7,4,8],[8,4,8],[9,4,8],[10,4,9]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:219, balls: [[2,16,9],[4,16,9],[6,16,9],[8,16,9],[0,15,9],[10,15,9],[0,14,9],[1,14,9],[2,14,8],[3,14,9],[7,14,9],[8,14,8],[9,14,9],[10,14,9],[0,12,9],[4,12,9],[5,12,8],[6,12,9],[10,12,9],[2,11,9],[5,11,8],[8,11,9],[0,10,8],[5,10,9],[10,10,8],[2,9,9],[5,9,8],[8,9,9],[0,8,9],[4,8,9],[5,8,8],[6,8,9],[10,8,9],[0,6,9],[1,6,9],[2,6,8],[3,6,9],[7,6,9],[8,6,8],[9,6,9],[10,6,9],[0,5,9],[10,5,9],[2,4,9],[4,4,9],[6,4,9],[8,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:220, balls: [[1,17,9],[3,17,9],[7,17,9],[9,17,9],[1,16,9],[2,16,8],[3,16,9],[7,16,9],[8,16,8],[9,16,9],[1,15,9],[2,15,8],[3,15,9],[7,15,9],[8,15,8],[9,15,9],[1,14,9],[2,14,9],[3,14,9],[7,14,9],[8,14,9],[9,14,9],[4,12,7],[5,12,8],[6,12,7],[4,11,6],[5,11,8],[6,11,6],[4,10,5],[5,10,8],[6,10,5],[4,9,4],[5,9,8],[6,9,4],[4,8,2],[5,8,8],[6,8,2],[4,7,1],[5,7,8],[6,7,1],[1,5,9],[2,5,9],[3,5,9],[7,5,9],[8,5,9],[9,5,9],[1,4,9],[2,4,8],[3,4,9],[7,4,9],[8,4,8],[9,4,9],[1,3,9],[2,3,8],[3,3,9],[7,3,9],[8,3,8],[9,3,9],[1,2,9],[3,2,9],[7,2,9],[9,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:221, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,8],[9,16,9],[9,15,9],[9,14,9],[4,13,8],[9,13,9],[3,12,6],[4,12,2],[5,12,6],[9,12,9],[2,11,9],[3,11,2],[4,11,0],[5,11,2],[6,11,9],[9,11,9],[1,10,6],[2,10,2],[3,10,9],[4,10,3],[5,10,9],[6,10,2],[7,10,6],[9,10,9],[1,9,8],[2,9,0],[3,9,3],[4,9,9],[5,9,3],[6,9,0],[7,9,8],[9,9,9],[1,8,6],[2,8,2],[3,8,9],[4,8,3],[5,8,9],[6,8,2],[7,8,6],[9,8,9],[2,7,9],[3,7,2],[4,7,0],[5,7,2],[6,7,9],[9,7,9],[3,6,6],[4,6,2],[5,6,6],[9,6,9],[4,5,8],[9,5,9],[9,4,9],[9,3,9],[9,2,8],[9,1,9],[9,0,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:222, balls: [[0,16,8],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,9],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[10,16,8],[0,15,9],[10,15,9],[1,14,8],[2,14,8],[3,14,8],[4,14,8],[5,14,9],[6,14,8],[7,14,8],[8,14,8],[9,14,8],[1,13,8],[2,13,9],[8,13,9],[9,13,8],[0,12,8],[1,12,8],[3,12,9],[4,12,8],[5,12,9],[6,12,8],[7,12,9],[9,12,8],[10,12,8],[1,11,8],[3,11,8],[4,11,9],[6,11,9],[7,11,8],[9,11,8],[1,10,8],[3,10,8],[5,10,8],[7,10,8],[9,10,8],[0,9,9],[1,9,9],[3,9,9],[5,9,9],[7,9,9],[9,9,9],[10,9,9],[1,8,8],[3,8,8],[5,8,8],[7,8,8],[9,8,8],[1,7,8],[3,7,8],[4,7,9],[6,7,9],[7,7,8],[9,7,8],[0,6,8],[1,6,8],[3,6,8],[4,6,8],[5,6,9],[6,6,8],[7,6,8],[9,6,8],[10,6,8],[1,5,8],[2,5,9],[8,5,9],[9,5,8],[1,4,8],[2,4,8],[3,4,8],[4,4,8],[5,4,9],[6,4,8],[7,4,8],[8,4,8],[9,4,8],[0,3,9],[10,3,9],[0,2,8],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[5,2,9],[6,2,8],[7,2,8],[8,2,8],[9,2,8],[10,2,8]], mask_left: [[1,14],[2,14],[3,14],[4,14],[1,10],[3,10],[5,10],[7,10],[9,10],[1,4],[2,4],[3,4],[4,4]], mask_right: [[6,14],[7,14],[8,14],[9,14],[1,8],[3,8],[5,8],[7,8],[9,8],[6,4],[7,4],[8,4],[9,4]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:223, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,63,81,14,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:224, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,8],[0,16,8],[2,16,7],[3,16,9],[4,16,2],[8,16,8],[9,16,9],[3,15,9],[9,15,9],[0,14,9],[1,14,8],[2,14,6],[3,14,9],[4,14,3],[5,14,8],[6,14,9],[9,14,9],[0,13,9],[3,13,9],[6,13,9],[9,13,9],[0,12,9],[3,12,9],[6,12,9],[9,12,9],[0,11,9],[3,11,9],[6,11,9],[7,11,8],[8,11,1],[9,11,9],[0,10,9],[3,10,9],[6,10,9],[9,10,9],[0,9,9],[3,9,9],[6,9,9],[9,9,9],[0,8,9],[3,8,9],[6,8,9],[9,8,9],[0,7,9],[1,7,5],[2,7,8],[3,7,9],[4,7,8],[5,7,4],[6,7,9],[9,7,9],[0,6,9],[6,6,9],[7,6,0],[8,6,8],[9,6,9],[10,6,8],[0,5,9],[6,5,9],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[10,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:225, balls: [[0,13,8],[1,13,8],[2,13,8],[3,13,9],[4,13,8],[5,13,8],[6,13,8],[7,13,9],[8,13,8],[9,13,8],[10,13,8],[0,12,8],[1,12,8],[2,12,8],[3,12,9],[4,12,8],[5,12,8],[6,12,8],[7,12,9],[8,12,8],[9,12,8],[10,12,8],[0,11,7],[1,11,7],[2,11,7],[3,11,9],[4,11,0],[5,11,0],[6,11,0],[7,11,9],[8,11,7],[9,11,7],[10,11,7],[0,10,6],[1,10,6],[2,10,6],[3,10,9],[4,10,1],[5,10,1],[6,10,1],[7,10,9],[8,10,6],[9,10,6],[10,10,6],[0,9,5],[1,9,5],[2,9,5],[3,9,9],[4,9,2],[5,9,2],[6,9,2],[7,9,9],[8,9,5],[9,9,5],[10,9,5],[0,8,4],[1,8,4],[2,8,4],[3,8,9],[4,8,3],[5,8,3],[6,8,3],[7,8,9],[8,8,4],[9,8,4],[10,8,4],[0,7,3],[1,7,3],[2,7,3],[3,7,9],[4,7,4],[5,7,4],[6,7,4],[7,7,9],[8,7,3],[9,7,3],[10,7,3],[0,6,2],[1,6,2],[2,6,2],[3,6,9],[4,6,5],[5,6,5],[6,6,5],[7,6,9],[8,6,2],[9,6,2],[10,6,2],[0,5,1],[1,5,1],[2,5,1],[3,5,9],[4,5,6],[5,5,6],[6,5,6],[7,5,9],[8,5,1],[9,5,1],[10,5,1],[0,4,0],[1,4,0],[2,4,0],[3,4,9],[4,4,7],[5,4,7],[6,4,7],[7,4,9],[8,4,0],[9,4,0],[10,4,0],[0,3,8],[1,3,8],[2,3,8],[3,3,9],[4,3,8],[5,3,8],[6,3,8],[7,3,9],[8,3,8],[9,3,8],[10,3,8],[0,2,8],[1,2,8],[2,2,8],[3,2,9],[4,2,8],[5,2,8],[6,2,8],[7,2,9],[8,2,8],[9,2,8],[10,2,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:226, balls: [[0,17,9],[10,17,9],[0,16,4],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[10,16,4],[0,15,9],[10,15,9],[0,14,4],[1,14,4],[2,14,9],[3,14,4],[4,14,9],[5,14,4],[6,14,9],[7,14,4],[8,14,9],[9,14,4],[10,14,4],[0,13,9],[10,13,9],[0,12,3],[1,12,8],[2,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[8,12,8],[9,12,8],[10,12,3],[0,11,9],[10,11,9],[0,10,3],[1,10,3],[2,10,9],[3,10,3],[4,10,9],[5,10,3],[6,10,9],[7,10,3],[8,10,9],[9,10,3],[10,10,3],[0,9,9],[10,9,9],[0,8,3],[1,8,8],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[10,8,3],[0,7,9],[10,7,9],[0,6,1],[1,6,1],[2,6,9],[3,6,1],[4,6,9],[5,6,1],[6,6,9],[7,6,1],[8,6,9],[9,6,1],[10,6,1],[0,5,9],[10,5,9],[0,4,1],[1,4,8],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,8],[10,4,1],[0,3,9],[10,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:227, balls: [[0,17,9],[1,17,8],[2,17,8],[3,17,8],[4,17,9],[5,17,0],[6,17,9],[7,17,8],[8,17,8],[9,17,8],[10,17,9],[0,16,1],[1,16,1],[2,16,1],[3,16,9],[4,16,4],[5,16,0],[6,16,3],[7,16,9],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,9],[3,15,4],[4,15,4],[5,15,0],[6,15,3],[7,15,3],[8,15,9],[9,15,1],[10,15,1],[0,14,1],[1,14,9],[2,14,4],[3,14,4],[4,14,4],[5,14,0],[6,14,3],[7,14,3],[8,14,3],[9,14,9],[10,14,1],[0,13,9],[1,13,4],[2,13,4],[3,13,4],[4,13,4],[5,13,0],[6,13,3],[7,13,3],[8,13,3],[9,13,3],[10,13,9],[0,12,0],[1,12,4],[2,12,4],[3,12,4],[4,12,4],[5,12,0],[6,12,3],[7,12,3],[8,12,3],[9,12,3],[10,12,0],[0,11,0],[1,11,4],[2,11,4],[3,11,4],[4,11,4],[5,11,0],[6,11,3],[7,11,3],[8,11,3],[9,11,3],[10,11,0],[0,10,0],[1,10,4],[2,10,4],[3,10,4],[4,10,4],[5,10,0],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,0],[0,9,0],[1,9,4],[2,9,4],[3,9,4],[4,9,9],[5,9,9],[6,9,9],[7,9,3],[8,9,3],[9,9,3],[10,9,0],[0,8,0],[1,8,4],[2,8,4],[3,8,9],[4,8,1],[5,8,1],[6,8,1],[7,8,9],[8,8,3],[9,8,3],[10,8,0],[0,7,0],[1,7,4],[2,7,9],[3,7,1],[4,7,1],[5,7,1],[6,7,1],[7,7,1],[8,7,9],[9,7,3],[10,7,0],[0,6,0],[1,6,9],[2,6,1],[3,6,1],[4,6,1],[5,6,1],[6,6,1],[7,6,1],[8,6,1],[9,6,9],[10,6,0],[0,5,8],[1,5,8],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,8],[10,5,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:228, balls: [[0,17,7],[1,17,7],[2,17,9],[8,17,9],[9,17,7],[10,17,7],[2,16,7],[5,16,9],[8,16,7],[0,15,6],[1,15,6],[2,15,9],[3,15,7],[4,15,7],[5,15,8],[6,15,7],[7,15,7],[8,15,9],[9,15,6],[10,15,6],[2,14,6],[5,14,9],[8,14,6],[0,13,4],[1,13,4],[2,13,9],[3,13,6],[4,13,6],[5,13,8],[6,13,6],[7,13,6],[8,13,9],[9,13,4],[10,13,4],[2,12,4],[5,12,9],[8,12,4],[0,11,3],[1,11,3],[2,11,9],[3,11,4],[4,11,4],[5,11,8],[6,11,4],[7,11,4],[8,11,9],[9,11,3],[10,11,3],[2,10,3],[5,10,9],[8,10,3],[0,9,2],[1,9,2],[2,9,9],[3,9,3],[4,9,3],[5,9,8],[6,9,3],[7,9,3],[8,9,9],[9,9,2],[10,9,2],[2,8,2],[5,8,9],[8,8,2],[0,7,1],[1,7,1],[2,7,9],[3,7,2],[4,7,2],[5,7,8],[6,7,2],[7,7,2],[8,7,9],[9,7,1],[10,7,1],[2,6,1],[5,6,9],[8,6,1],[2,5,9],[3,5,1],[4,5,1],[5,5,8],[6,5,1],[7,5,1],[8,5,9],[5,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:229, balls: [[6,17,9],[5,16,9],[6,16,9],[7,16,9],[5,15,9],[7,15,9],[5,14,8],[5,13,9],[5,12,8],[1,11,9],[3,11,9],[5,11,9],[7,11,9],[9,11,9],[1,10,1],[2,10,1],[3,10,0],[4,10,0],[5,10,0],[6,10,0],[7,10,0],[8,10,6],[9,10,6],[1,9,1],[2,9,1],[3,9,0],[4,9,0],[5,9,0],[6,9,0],[7,9,0],[8,9,6],[9,9,6],[1,8,1],[2,8,1],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,6],[9,8,6],[1,7,1],[2,7,1],[3,7,0],[4,7,0],[5,7,0],[6,7,0],[7,7,0],[8,7,6],[9,7,6],[2,6,1],[3,6,1],[4,6,0],[5,6,9],[6,6,0],[7,6,6],[8,6,6],[1,5,9],[3,5,1],[4,5,1],[5,5,8],[6,5,6],[7,5,6],[9,5,9],[5,4,9],[0,3,8],[2,3,9],[4,3,8],[6,3,8],[8,3,9],[10,3,8],[1,1,8],[3,1,9],[5,1,8],[7,1,9],[9,1,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:230, balls: [[0,13,8],[2,13,9],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[8,13,9],[10,13,8],[0,12,3],[2,12,9],[3,12,9],[4,12,8],[5,12,8],[6,12,8],[7,12,9],[8,12,9],[10,12,3],[0,11,3],[2,11,9],[3,11,8],[4,11,9],[5,11,9],[6,11,9],[7,11,8],[8,11,9],[10,11,3],[0,10,9],[2,10,9],[3,10,4],[5,10,8],[7,10,2],[8,10,9],[10,10,9],[0,9,8],[2,9,9],[3,9,4],[5,9,8],[7,9,2],[8,9,9],[10,9,8],[0,8,8],[2,8,9],[3,8,4],[5,8,8],[7,8,2],[8,8,9],[10,8,8],[0,7,9],[2,7,9],[3,7,9],[5,7,9],[7,7,9],[8,7,9],[10,7,9],[0,6,3],[2,6,9],[3,6,4],[5,6,5],[7,6,2],[8,6,9],[10,6,3],[0,5,3],[2,5,9],[3,5,4],[5,5,5],[7,5,2],[8,5,9],[10,5,3],[0,4,8],[1,4,9],[2,4,9],[3,4,8],[4,4,9],[5,4,8],[6,4,9],[7,4,8],[8,4,9],[9,4,9],[10,4,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:231, balls: [[1,13,8],[2,13,9],[3,13,8],[4,13,9],[5,13,8],[6,13,9],[7,13,8],[8,13,9],[9,13,8],[1,12,9],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[8,12,9],[9,12,9],[1,11,1],[2,11,4],[3,11,6],[4,11,7],[5,11,9],[6,11,7],[7,11,6],[8,11,4],[9,11,1],[1,10,1],[2,10,4],[3,10,6],[4,10,7],[5,10,9],[6,10,7],[7,10,6],[8,10,4],[9,10,1],[1,9,1],[2,9,4],[3,9,6],[4,9,7],[5,9,9],[6,9,7],[7,9,6],[8,9,4],[9,9,1],[1,8,9],[2,8,8],[3,8,9],[4,8,8],[5,8,8],[6,8,8],[7,8,9],[8,8,8],[9,8,9],[1,7,1],[2,7,4],[3,7,6],[4,7,7],[5,7,9],[6,7,7],[7,7,6],[8,7,4],[9,7,1],[1,6,1],[2,6,4],[3,6,6],[4,6,7],[5,6,9],[6,6,7],[7,6,6],[8,6,4],[9,6,1],[1,5,1],[2,5,4],[3,5,6],[4,5,7],[5,5,9],[6,5,7],[7,5,6],[8,5,4],[9,5,1],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[1,3,8],[2,3,9],[3,3,8],[4,3,9],[5,3,8],[6,3,9],[7,3,8],[8,3,9],[9,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:232, balls: [[0,17,8],[1,17,9],[2,17,8],[3,17,9],[4,17,8],[5,17,9],[6,17,8],[7,17,9],[8,17,8],[9,17,9],[10,17,8],[0,16,1],[1,16,9],[2,16,2],[3,16,9],[4,16,3],[5,16,9],[6,16,4],[7,16,9],[8,16,6],[9,16,9],[10,16,7],[0,15,8],[1,15,8],[2,15,8],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[8,15,8],[9,15,8],[10,15,8],[1,14,9],[3,14,9],[5,14,9],[7,14,9],[9,14,9],[10,14,8],[1,13,9],[3,13,9],[5,13,9],[7,13,9],[8,13,8],[9,13,9],[1,12,9],[3,12,9],[5,12,9],[6,12,8],[7,12,9],[9,12,9],[1,11,9],[3,11,9],[4,11,8],[5,11,9],[7,11,9],[9,11,9],[1,10,9],[2,10,8],[3,10,9],[5,10,9],[7,10,9],[9,10,9],[0,9,8],[1,8,9],[3,8,9],[5,8,9],[7,8,9],[9,8,9],[1,7,9],[2,7,8],[3,7,9],[5,7,9],[7,7,9],[9,7,9],[1,6,9],[3,6,9],[4,6,8],[5,6,9],[7,6,9],[9,6,9],[3,5,9],[5,5,9],[6,5,8],[7,5,9],[5,4,9],[8,4,8],[10,3,8],[0,2,8],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,8],[10,2,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:233, balls: [[0,17,8],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,8],[1,16,9],[9,16,9],[1,15,9],[9,15,9],[1,14,9],[3,14,9],[4,14,8],[5,14,8],[6,14,8],[7,14,9],[9,14,9],[1,13,9],[3,13,9],[7,13,9],[9,13,9],[1,12,9],[3,12,9],[5,12,8],[7,12,9],[9,12,9],[1,11,9],[3,11,9],[5,11,8],[7,11,9],[9,11,9],[1,10,9],[3,10,9],[5,10,9],[7,10,9],[9,10,9],[1,9,9],[3,9,9],[5,9,8],[7,9,9],[9,9,9],[1,8,9],[3,8,9],[5,8,8],[7,8,9],[9,8,9],[1,7,9],[3,7,9],[7,7,9],[9,7,9],[1,6,9],[3,6,9],[4,6,9],[5,6,9],[6,6,9],[7,6,9],[9,6,9],[1,5,9],[9,5,9],[0,4,8],[1,4,9],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,9],[10,4,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:234, balls: [[0,14,8],[1,14,9],[2,14,8],[3,14,9],[4,14,8],[5,14,9],[6,14,8],[7,14,9],[8,14,8],[9,14,9],[10,14,8],[0,13,7],[1,13,7],[2,13,7],[3,13,7],[4,13,7],[5,13,7],[6,13,7],[7,13,7],[8,13,7],[9,13,7],[10,13,7],[0,12,7],[1,12,7],[2,12,7],[3,12,7],[4,12,7],[5,12,7],[6,12,7],[7,12,7],[8,12,7],[9,12,7],[10,12,7],[2,11,9],[8,11,9],[0,10,0],[1,10,0],[2,10,9],[4,10,9],[5,10,0],[6,10,9],[8,10,9],[9,10,0],[10,10,0],[0,9,0],[1,9,0],[2,9,9],[4,9,9],[5,9,0],[6,9,9],[8,9,9],[9,9,0],[10,9,0],[0,8,0],[1,8,0],[2,8,9],[4,8,9],[5,8,0],[6,8,9],[8,8,9],[9,8,0],[10,8,0],[0,7,0],[1,7,0],[2,7,9],[4,7,9],[5,7,0],[6,7,9],[8,7,9],[9,7,0],[10,7,0],[2,6,9],[8,6,9],[0,5,4],[1,5,4],[2,5,4],[3,5,4],[4,5,4],[5,5,4],[6,5,4],[7,5,4],[8,5,4],[9,5,4],[10,5,4],[0,4,4],[1,4,4],[2,4,4],[3,4,4],[4,4,4],[5,4,4],[6,4,4],[7,4,4],[8,4,4],[9,4,4],[10,4,4],[0,3,9],[1,3,8],[2,3,9],[3,3,8],[4,3,9],[5,3,8],[6,3,9],[7,3,8],[8,3,9],[9,3,8],[10,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:235, balls: [[0,17,9],[4,17,9],[8,17,9],[1,16,8],[2,16,8],[3,16,8],[5,16,8],[6,16,8],[7,16,8],[9,16,8],[10,16,8],[1,15,8],[2,15,4],[3,15,8],[5,15,8],[6,15,4],[7,15,8],[9,15,8],[10,15,4],[1,14,8],[2,14,8],[3,14,8],[5,14,8],[6,14,8],[7,14,8],[9,14,8],[10,14,8],[3,13,9],[7,13,9],[0,12,8],[1,12,8],[2,12,8],[4,12,8],[5,12,8],[6,12,8],[8,12,8],[9,12,8],[10,12,8],[0,11,8],[1,11,3],[2,11,8],[4,11,8],[5,11,3],[6,11,8],[8,11,8],[9,11,3],[10,11,8],[0,10,8],[1,10,8],[2,10,8],[4,10,8],[5,10,8],[6,10,8],[8,10,8],[9,10,8],[10,10,8],[2,9,9],[6,9,9],[10,9,9],[0,8,8],[1,8,8],[3,8,8],[4,8,8],[5,8,8],[7,8,8],[8,8,8],[9,8,8],[0,7,1],[1,7,8],[3,7,8],[4,7,1],[5,7,8],[7,7,8],[8,7,1],[9,7,8],[0,6,8],[1,6,8],[3,6,8],[4,6,8],[5,6,8],[7,6,8],[8,6,8],[9,6,8],[1,5,9],[5,5,9],[9,5,9],[0,4,9],[1,4,8],[2,4,9],[3,4,8],[4,4,9],[5,4,8],[6,4,9],[7,4,8],[8,4,9],[9,4,8],[10,4,9]], mask_left: [[1,16],[2,16],[3,16],[5,16],[6,16],[7,16],[9,16],[10,16],[1,15],[2,15],[3,15],[5,15],[6,15],[7,15],[9,15],[10,15],[1,14],[2,14],[3,14],[5,14],[6,14],[7,14],[9,14],[10,14]], mask_right: [[0,8],[1,8],[3,8],[4,8],[5,8],[7,8],[8,8],[9,8],[0,7],[1,7],[3,7],[4,7],[5,7],[7,7],[8,7],[9,7],[0,6],[1,6],[3,6],[4,6],[5,6],[7,6],[8,6],[9,6]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:236, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,9],[1,16,4],[2,16,4],[3,16,4],[4,16,4],[5,16,4],[6,16,4],[7,16,4],[8,16,4],[9,16,4],[10,16,9],[1,15,4],[2,15,4],[3,15,4],[4,15,4],[5,15,4],[6,15,4],[7,15,4],[8,15,4],[9,15,4],[1,14,9],[2,14,4],[3,14,4],[4,14,4],[5,14,4],[6,14,4],[7,14,4],[8,14,4],[9,14,9],[2,13,4],[3,13,4],[4,13,4],[5,13,4],[6,13,4],[7,13,4],[8,13,4],[2,12,9],[3,12,4],[4,12,4],[5,12,4],[6,12,4],[7,12,4],[8,12,9],[3,11,4],[4,11,4],[5,11,4],[6,11,4],[7,11,4],[3,10,9],[4,10,4],[5,10,8],[6,10,4],[7,10,9],[4,9,8],[5,9,8],[6,9,8],[4,8,8],[5,8,8],[6,8,8],[4,7,8],[5,7,8],[6,7,8],[5,6,9]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:237, balls: [[0,15,8],[1,15,9],[2,15,9],[3,15,8],[4,15,8],[5,15,9],[6,15,8],[7,15,8],[8,15,9],[9,15,9],[10,15,8],[0,14,2],[1,14,2],[2,14,2],[3,14,2],[4,14,2],[5,14,2],[6,14,2],[7,14,2],[8,14,2],[9,14,2],[10,14,2],[0,13,9],[1,13,8],[2,13,8],[3,13,9],[4,13,9],[5,13,9],[6,13,9],[7,13,9],[8,13,8],[9,13,8],[10,13,9],[0,12,9],[1,12,8],[2,12,8],[3,12,9],[4,12,1],[5,12,1],[6,12,1],[7,12,9],[8,12,8],[9,12,8],[10,12,9],[0,11,9],[1,11,8],[2,11,8],[3,11,9],[4,11,1],[5,11,1],[6,11,1],[7,11,9],[8,11,8],[9,11,8],[10,11,9],[0,10,9],[3,10,8],[7,10,8],[10,10,9],[0,9,9],[3,9,8],[7,9,8],[10,9,9],[0,8,9],[1,8,6],[2,8,6],[3,8,9],[4,8,8],[5,8,8],[6,8,8],[7,8,9],[8,8,4],[9,8,4],[10,8,9],[0,7,9],[1,7,6],[2,7,6],[3,7,9],[4,7,8],[5,7,9],[6,7,8],[7,7,9],[8,7,4],[9,7,4],[10,7,9],[0,6,9],[1,6,9],[2,6,9],[3,6,9],[4,6,8],[5,6,8],[6,6,8],[7,6,9],[8,6,9],[9,6,9],[10,6,9],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,3],[1,4,3],[2,4,3],[3,4,3],[4,4,3],[5,4,3],[6,4,3],[7,4,3],[8,4,3],[9,4,3],[10,4,3]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:238, balls: [[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[0,10,8],[2,10,9],[8,10,9],[10,10,8],[0,9,8],[1,9,9],[4,9,6],[5,9,8],[6,9,6],[9,9,9],[10,9,8],[0,8,8],[1,8,9],[3,8,0],[4,8,0],[5,8,8],[6,8,0],[7,8,0],[9,8,9],[10,8,8],[0,7,8],[1,7,9],[3,7,1],[4,7,1],[5,7,8],[6,7,1],[7,7,1],[9,7,9],[10,7,8],[0,6,8],[1,6,9],[4,6,2],[5,6,8],[6,6,2],[9,6,9],[10,6,8],[0,5,8],[2,5,9],[8,5,9],[10,5,8],[3,4,9],[4,4,8],[5,4,8],[6,4,8],[7,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:239, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,68,86,13,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:240, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,6],[1,16,6],[2,16,6],[3,16,6],[4,16,6],[5,16,6],[6,16,6],[7,16,6],[8,16,6],[9,16,6],[10,16,6],[0,15,8],[1,15,8],[2,15,8],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[8,15,8],[9,15,8],[10,15,8],[0,13,8],[1,13,8],[2,13,8],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[8,13,8],[9,13,8],[10,13,8],[0,12,1],[1,12,1],[2,12,1],[3,12,1],[4,12,1],[5,12,1],[6,12,1],[7,12,1],[8,12,1],[9,12,1],[10,12,1],[0,11,8],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[10,11,8],[0,9,8],[1,9,8],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,8],[10,9,8],[0,8,4],[1,8,4],[2,8,4],[3,8,4],[4,8,4],[5,8,4],[6,8,4],[7,8,4],[8,8,4],[9,8,4],[10,8,4],[0,7,8],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,8],[10,7,8],[0,5,8],[1,5,8],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,8],[10,5,8],[0,4,3],[1,4,3],[2,4,3],[3,4,3],[4,4,3],[5,4,3],[6,4,3],[7,4,3],[8,4,3],[9,4,3],[10,4,3],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [[0,17],[1,17],[2,17],[3,17],[4,17],[5,17],[6,17],[7,17],[8,17],[9,17],[10,17],[0,15],[1,15],[2,15],[3,15],[4,15],[5,15],[6,15],[7,15],[8,15],[9,15],[10,15],[0,12],[1,12],[2,12],[3,12],[4,12],[5,12],[6,12],[7,12],[8,12],[9,12],[10,12],[0,9],[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9],[9,9],[10,9],[0,7],[1,7],[2,7],[3,7],[4,7],[5,7],[6,7],[7,7],[8,7],[9,7],[10,7],[0,4],[1,4],[2,4],[3,4],[4,4],[5,4],[6,4],[7,4],[8,4],[9,4],[10,4]], mask_right: [[0,16],[1,16],[2,16],[3,16],[4,16],[5,16],[6,16],[7,16],[8,16],[9,16],[10,16],[0,13],[1,13],[2,13],[3,13],[4,13],[5,13],[6,13],[7,13],[8,13],[9,13],[10,13],[0,11],[1,11],[2,11],[3,11],[4,11],[5,11],[6,11],[7,11],[8,11],[9,11],[10,11],[0,8],[1,8],[2,8],[3,8],[4,8],[5,8],[6,8],[7,8],[8,8],[9,8],[10,8],[0,5],[1,5],[2,5],[3,5],[4,5],[5,5],[6,5],[7,5],[8,5],[9,5],[10,5],[0,3],[1,3],[2,3],[3,3],[4,3],[5,3],[6,3],[7,3],[8,3],[9,3],[10,3]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:241, balls: [[5,15,9],[4,14,8],[5,14,1],[6,14,8],[3,13,9],[4,13,1],[5,13,0],[6,13,1],[7,13,9],[2,12,8],[3,12,1],[4,12,9],[5,12,0],[6,12,9],[7,12,1],[8,12,8],[1,11,9],[2,11,1],[3,11,9],[4,11,0],[5,11,0],[6,11,0],[7,11,9],[8,11,1],[9,11,9],[0,10,8],[1,10,1],[2,10,9],[3,10,0],[4,10,9],[5,10,0],[6,10,9],[7,10,0],[8,10,9],[9,10,1],[10,10,8],[0,9,1],[1,9,9],[2,9,0],[3,9,0],[4,9,0],[6,9,0],[7,9,0],[8,9,0],[9,9,9],[10,9,1],[0,8,9],[1,8,0],[2,8,9],[3,8,0],[7,8,0],[8,8,9],[9,8,0],[10,8,9],[0,7,9],[1,7,0],[2,7,0],[8,7,0],[9,7,0],[10,7,9],[0,6,9],[1,6,0],[9,6,0],[10,6,9],[0,5,9],[1,5,8],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,8],[10,5,9],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,8],[5,4,9],[6,4,8],[7,4,9],[8,4,9],[9,4,9],[10,4,9],[0,3,1],[1,3,1],[2,3,1],[3,3,1],[4,3,1],[5,3,1],[6,3,1],[7,3,1],[8,3,1],[9,3,1],[10,3,1]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:242, balls: [[0,14,8],[1,14,8],[2,14,8],[3,14,8],[4,14,9],[5,14,9],[6,14,9],[7,14,8],[8,14,8],[9,14,8],[10,14,8],[0,13,7],[1,13,7],[2,13,7],[3,13,7],[4,13,9],[6,13,9],[7,13,0],[8,13,0],[9,13,0],[10,13,0],[0,12,6],[1,12,6],[2,12,6],[3,12,6],[4,12,9],[6,12,9],[7,12,1],[8,12,1],[9,12,1],[10,12,1],[0,11,5],[1,11,5],[2,11,5],[3,11,5],[4,11,9],[6,11,9],[7,11,2],[8,11,2],[9,11,2],[10,11,2],[0,10,9],[1,10,8],[2,10,9],[3,10,9],[4,10,9],[6,10,9],[7,10,9],[8,10,9],[9,10,8],[10,10,9],[0,9,4],[1,9,4],[2,9,4],[3,9,4],[4,9,9],[6,9,9],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,3],[1,8,3],[2,8,3],[3,8,3],[4,8,9],[6,8,9],[7,8,4],[8,8,4],[9,8,4],[10,8,4],[0,7,2],[1,7,2],[2,7,2],[3,7,2],[4,7,9],[6,7,9],[7,7,5],[8,7,5],[9,7,5],[10,7,5],[0,6,8],[1,6,8],[2,6,8],[3,6,8],[4,6,9],[6,6,9],[7,6,8],[8,6,8],[9,6,8],[10,6,8],[0,5,1],[1,5,1],[2,5,1],[3,5,1],[4,5,9],[6,5,9],[7,5,6],[8,5,6],[9,5,6],[10,5,6],[0,4,0],[1,4,0],[2,4,0],[3,4,0],[4,4,9],[6,4,9],[7,4,7],[8,4,7],[9,4,7],[10,4,7],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,9],[6,3,9],[7,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:243, balls: [[0,15,8],[1,15,9],[0,14,1],[1,14,2],[2,14,8],[3,14,9],[0,13,1],[1,13,2],[2,13,3],[3,13,4],[4,13,8],[5,13,9],[0,12,9],[1,12,8],[2,12,3],[3,12,4],[4,12,6],[5,12,7],[6,12,8],[7,12,9],[0,11,1],[1,11,8],[2,11,9],[3,11,8],[4,11,6],[5,11,7],[6,11,6],[7,11,4],[8,11,8],[9,11,9],[0,10,1],[1,10,2],[2,10,3],[3,10,8],[4,10,9],[5,10,8],[6,10,6],[7,10,4],[8,10,3],[9,10,2],[10,10,8],[0,9,9],[1,9,2],[2,9,3],[3,9,4],[4,9,6],[5,9,8],[6,9,9],[7,9,8],[8,9,3],[9,9,2],[10,9,1],[1,8,8],[2,8,9],[3,8,4],[4,8,6],[5,8,7],[6,8,6],[7,8,8],[8,8,9],[9,8,8],[10,8,1],[3,7,8],[4,7,9],[5,7,7],[6,7,6],[7,7,4],[8,7,3],[9,7,8],[10,7,9],[5,6,8],[6,6,9],[7,6,4],[8,6,3],[9,6,2],[10,6,1],[7,5,8],[8,5,9],[9,5,2],[10,5,1],[9,4,8],[10,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:244, balls: [[0,17,8],[1,17,9],[2,17,8],[3,17,9],[4,17,8],[5,17,9],[6,17,8],[7,17,9],[8,17,8],[9,17,9],[10,17,8],[0,16,0],[2,16,1],[4,16,2],[6,16,3],[8,16,4],[10,16,5],[0,15,9],[1,15,8],[2,15,9],[3,15,8],[4,15,9],[5,15,8],[6,15,9],[7,15,8],[8,15,9],[9,15,8],[10,15,9],[1,14,1],[3,14,2],[5,14,3],[7,14,4],[9,14,5],[0,13,8],[1,13,9],[2,13,8],[3,13,9],[4,13,8],[5,13,9],[6,13,8],[7,13,9],[8,13,8],[9,13,9],[10,13,8],[0,12,1],[2,12,2],[4,12,3],[6,12,4],[8,12,5],[10,12,6],[0,11,9],[1,11,8],[2,11,9],[3,11,8],[4,11,9],[5,11,8],[6,11,9],[7,11,8],[8,11,9],[9,11,8],[10,11,9],[1,10,2],[3,10,3],[5,10,4],[7,10,5],[9,10,6],[0,9,8],[1,9,9],[2,9,8],[3,9,9],[4,9,8],[5,9,9],[6,9,8],[7,9,9],[8,9,8],[9,9,9],[10,9,8],[0,8,2],[2,8,3],[4,8,4],[6,8,5],[8,8,6],[10,8,7],[0,7,9],[1,7,8],[2,7,9],[3,7,8],[4,7,9],[5,7,8],[6,7,9],[7,7,8],[8,7,9],[9,7,8],[10,7,9],[1,6,3],[3,6,4],[5,6,5],[7,6,6],[9,6,7],[0,5,8],[1,5,9],[2,5,8],[3,5,9],[4,5,8],[5,5,9],[6,5,8],[7,5,9],[8,5,8],[9,5,9],[10,5,8],[0,4,3],[2,4,4],[4,4,5],[6,4,6],[8,4,7],[10,4,0]], mask_left: [[0,17],[1,17],[2,17],[3,17],[4,17],[5,17],[6,17],[7,17],[8,17],[9,17],[10,17],[0,16],[2,16],[4,16],[6,16],[8,16],[10,16],[0,13],[1,13],[2,13],[3,13],[4,13],[5,13],[6,13],[7,13],[8,13],[9,13],[10,13],[0,12],[2,12],[4,12],[6,12],[8,12],[10,12],[0,9],[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9],[9,9],[10,9],[0,8],[2,8],[4,8],[6,8],[8,8],[10,8],[0,5],[1,5],[2,5],[3,5],[4,5],[5,5],[6,5],[7,5],[8,5],[9,5],[10,5],[0,4],[2,4],[4,4],[6,4],[8,4],[10,4]], mask_right: [[0,15],[1,15],[2,15],[3,15],[4,15],[5,15],[6,15],[7,15],[8,15],[9,15],[10,15],[1,14],[3,14],[5,14],[7,14],[9,14],[0,11],[1,11],[2,11],[3,11],[4,11],[5,11],[6,11],[7,11],[8,11],[9,11],[10,11],[1,10],[3,10],[5,10],[7,10],[9,10],[0,7],[1,7],[2,7],[3,7],[4,7],[5,7],[6,7],[7,7],[8,7],[9,7],[10,7],[1,6],[3,6],[5,6],[7,6],[9,6]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:245, balls: [[0,15,8],[1,15,8],[2,15,8],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[8,15,8],[9,15,8],[10,15,8],[1,14,9],[3,14,9],[5,14,9],[7,14,9],[9,14,9],[1,13,9],[3,13,9],[5,13,9],[7,13,9],[9,13,9],[0,12,8],[1,12,1],[2,12,1],[3,12,9],[4,12,1],[5,12,1],[6,12,1],[7,12,1],[8,12,1],[9,12,1],[10,12,8],[1,11,9],[3,11,9],[5,11,9],[7,11,9],[9,11,9],[0,10,8],[1,10,2],[2,10,2],[3,10,2],[4,10,2],[5,10,9],[6,10,2],[7,10,2],[8,10,2],[9,10,2],[10,10,8],[1,9,9],[3,9,9],[5,9,9],[7,9,9],[9,9,9],[0,8,8],[1,8,4],[2,8,4],[3,8,4],[4,8,4],[5,8,4],[6,8,4],[7,8,9],[8,8,4],[9,8,4],[10,8,8],[1,7,9],[3,7,9],[5,7,9],[7,7,9],[9,7,9],[0,6,8],[1,6,6],[2,6,6],[3,6,6],[4,6,6],[5,6,6],[6,6,6],[7,6,6],[8,6,6],[9,6,9],[10,6,8],[1,5,9],[3,5,9],[5,5,9],[7,5,9],[9,5,9],[1,4,9],[3,4,9],[5,4,9],[7,4,9],[9,4,9],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:246, balls: [[0,11,8],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[10,11,8],[0,10,8],[1,10,8],[2,10,8],[3,10,8],[4,10,8],[5,10,8],[6,10,8],[7,10,8],[8,10,8],[9,10,8],[10,10,8],[0,9,8],[1,9,8],[2,9,3],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,3],[8,9,8],[9,9,3],[10,9,8],[0,8,8],[1,8,3],[2,8,8],[3,8,3],[4,8,8],[5,8,8],[6,8,8],[7,8,3],[8,8,8],[9,8,3],[10,8,8],[0,7,8],[1,7,3],[2,7,8],[3,7,3],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,3],[9,7,8],[10,7,8],[0,6,8],[1,6,3],[2,6,8],[3,6,3],[4,6,8],[5,6,8],[6,6,8],[7,6,3],[8,6,8],[9,6,3],[10,6,8],[0,5,8],[1,5,8],[2,5,3],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,3],[8,5,8],[9,5,3],[10,5,8],[0,4,8],[1,4,8],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,8],[10,4,8],[0,3,9],[1,3,9],[2,3,9],[3,3,9],[4,3,9],[5,3,9],[6,3,9],[7,3,9],[8,3,9],[9,3,9],[10,3,9]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:247, balls: [[0,17,8],[1,17,9],[2,17,8],[3,17,9],[4,17,8],[5,17,9],[6,17,8],[7,17,9],[8,17,8],[9,17,9],[10,17,8],[0,16,2],[1,16,2],[2,16,3],[3,16,3],[4,16,4],[5,16,4],[6,16,5],[7,16,5],[8,16,6],[9,16,6],[10,16,7],[0,15,1],[1,15,2],[2,15,2],[3,15,3],[4,15,3],[5,15,4],[6,15,4],[7,15,5],[8,15,5],[9,15,6],[10,15,6],[0,14,1],[1,14,1],[2,14,2],[3,14,2],[4,14,3],[5,14,3],[6,14,4],[7,14,4],[8,14,5],[9,14,5],[10,14,6],[0,13,0],[1,13,1],[2,13,1],[3,13,2],[4,13,2],[5,13,3],[6,13,3],[7,13,4],[8,13,4],[9,13,5],[10,13,5],[0,12,9],[1,12,8],[2,12,9],[3,12,8],[4,12,9],[5,12,8],[6,12,9],[7,12,8],[8,12,9],[9,12,8],[10,12,9],[0,11,0],[1,11,8],[3,11,8],[4,11,0],[5,11,8],[6,11,0],[7,11,8],[9,11,8],[10,11,0],[0,10,7],[1,10,8],[3,10,8],[4,10,7],[5,10,8],[6,10,7],[7,10,8],[9,10,8],[10,10,7],[0,9,6],[1,9,8],[3,9,8],[4,9,6],[5,9,8],[6,9,6],[7,9,8],[9,9,8],[10,9,6],[0,8,5],[1,8,8],[3,8,8],[4,8,5],[5,8,8],[6,8,5],[7,8,8],[9,8,8],[10,8,5],[0,7,4],[1,7,8],[3,7,8],[4,7,4],[5,7,8],[6,7,4],[7,7,8],[9,7,8],[10,7,4],[0,6,3],[1,6,8],[3,6,8],[4,6,3],[5,6,8],[6,6,3],[7,6,8],[9,6,8],[10,6,3],[0,5,2],[1,5,8],[3,5,8],[4,5,2],[5,5,8],[6,5,2],[7,5,8],[9,5,8],[10,5,2],[0,4,1],[1,4,8],[3,4,8],[4,4,1],[5,4,8],[6,4,1],[7,4,8],[9,4,8],[10,4,1],[0,3,0],[1,3,8],[3,3,8],[4,3,0],[5,3,8],[6,3,0],[7,3,8],[9,3,8],[10,3,0],[0,2,8],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,8],[10,2,8]], mask_left: [[0,16],[1,16],[2,16],[3,16],[0,15],[1,15],[2,15],[3,15],[4,15],[0,14],[1,14],[2,14],[3,14],[4,14],[5,14],[0,13],[1,13],[2,13],[3,13],[4,13],[5,13],[6,13],[0,11],[0,10],[0,9],[0,8],[0,7],[0,6],[0,5],[0,4],[0,3]], mask_right: [[4,16],[5,16],[6,16],[7,16],[8,16],[9,16],[10,16],[5,15],[6,15],[7,15],[8,15],[9,15],[10,15],[6,14],[7,14],[8,14],[9,14],[10,14],[7,13],[8,13],[9,13],[10,13],[10,11],[10,10],[10,9],[10,8],[10,7],[10,6],[10,5],[10,4],[10,3]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:248, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,8],[5,17,9],[6,17,8],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,2],[1,16,3],[2,16,5],[8,16,5],[9,16,3],[10,16,2],[0,15,2],[1,15,3],[2,15,5],[8,15,5],[9,15,3],[10,15,2],[0,14,2],[1,14,9],[2,14,5],[8,14,5],[9,14,9],[10,14,2],[0,13,2],[1,13,9],[2,13,5],[8,13,5],[9,13,9],[10,13,2],[0,12,2],[1,12,9],[2,12,5],[8,12,5],[9,12,9],[10,12,2],[0,11,2],[1,11,9],[2,11,5],[3,11,9],[7,11,9],[8,11,5],[9,11,9],[10,11,2],[0,10,1],[1,10,2],[2,10,9],[3,10,5],[7,10,5],[8,10,9],[9,10,2],[10,10,1],[0,9,1],[1,9,2],[2,9,9],[3,9,5],[4,9,5],[5,9,5],[6,9,5],[7,9,5],[8,9,9],[9,9,2],[10,9,1],[0,8,1],[1,8,2],[2,8,2],[3,8,9],[4,8,5],[5,8,5],[6,8,5],[7,8,9],[8,8,2],[9,8,2],[10,8,1],[0,7,1],[1,7,1],[2,7,2],[3,7,2],[4,7,3],[5,7,3],[6,7,3],[7,7,2],[8,7,2],[9,7,1],[10,7,1],[1,6,1],[2,6,1],[3,6,2],[4,6,2],[5,6,2],[6,6,2],[7,6,2],[8,6,1],[9,6,1],[1,5,1],[2,5,1],[3,5,2],[4,5,2],[5,5,2],[6,5,2],[7,5,2],[8,5,1],[9,5,1],[2,4,1],[3,4,1],[4,4,1],[5,4,1],[6,4,1],[7,4,1],[8,4,1],[3,3,1],[4,3,1],[5,3,1],[6,3,1],[7,3,1]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:249, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,9],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,8],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,9],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[10,16,8],[0,15,0],[1,15,1],[2,15,1],[3,15,2],[4,15,2],[5,15,9],[6,15,2],[7,15,2],[8,15,1],[9,15,1],[10,15,0],[0,14,0],[1,14,1],[2,14,1],[3,14,2],[4,14,2],[5,14,9],[6,14,2],[7,14,2],[8,14,1],[9,14,1],[10,14,0],[0,13,1],[1,13,2],[2,13,2],[3,13,3],[4,13,3],[5,13,9],[6,13,3],[7,13,3],[8,13,2],[9,13,2],[10,13,1],[0,12,1],[1,12,2],[2,12,2],[3,12,3],[4,12,3],[5,12,9],[6,12,3],[7,12,3],[8,12,2],[9,12,2],[10,12,1],[0,11,2],[1,11,3],[2,11,3],[3,11,4],[4,11,4],[5,11,9],[6,11,4],[7,11,4],[8,11,3],[9,11,3],[10,11,2],[0,10,2],[1,10,3],[2,10,3],[3,10,4],[4,10,4],[5,10,9],[6,10,4],[7,10,4],[8,10,3],[9,10,3],[10,10,2],[0,9,3],[1,9,4],[2,9,4],[3,9,5],[4,9,5],[5,9,9],[6,9,5],[7,9,5],[8,9,4],[9,9,4],[10,9,3],[0,8,3],[1,8,4],[2,8,4],[3,8,5],[4,8,5],[5,8,9],[6,8,5],[7,8,5],[8,8,4],[9,8,4],[10,8,3],[0,7,4],[1,7,5],[2,7,5],[3,7,6],[4,7,6],[5,7,9],[6,7,6],[7,7,6],[8,7,5],[9,7,5],[10,7,4],[0,6,4],[1,6,5],[2,6,5],[3,6,6],[4,6,6],[5,6,9],[6,6,6],[7,6,6],[8,6,5],[9,6,5],[10,6,4],[0,5,5],[1,5,6],[2,5,6],[3,5,7],[4,5,7],[5,5,9],[6,5,7],[7,5,7],[8,5,6],[9,5,6],[10,5,5],[0,4,5],[1,4,6],[2,4,6],[3,4,7],[4,4,7],[5,4,9],[6,4,7],[7,4,7],[8,4,6],[9,4,6],[10,4,5],[0,3,6],[1,3,7],[2,3,7],[3,3,0],[4,3,0],[5,3,9],[6,3,0],[7,3,0],[8,3,7],[9,3,7],[10,3,6],[0,2,6],[1,2,7],[2,2,7],[3,2,0],[4,2,0],[5,2,9],[6,2,0],[7,2,0],[8,2,7],[9,2,7],[10,2,6],[0,1,8],[1,1,9],[2,1,8],[3,1,9],[4,1,8],[5,1,9],[6,1,8],[7,1,9],[8,1,8],[9,1,9],[10,1,8],[0,0,9],[1,0,8],[2,0,8],[3,0,8],[4,0,9],[5,0,9],[6,0,9],[7,0,8],[8,0,8],[9,0,8],[10,0,9]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:250, balls: [[3,17,9],[7,17,9],[1,14,9],[5,14,9],[9,14,9],[3,12,9],[4,12,8],[5,12,9],[6,12,8],[7,12,9],[3,11,1],[4,11,1],[5,11,1],[6,11,1],[7,11,1],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[0,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[10,9,9],[3,8,6],[4,8,6],[5,8,6],[6,8,6],[7,8,6],[3,7,7],[4,7,7],[5,7,7],[6,7,7],[7,7,7],[3,6,9],[4,6,8],[5,6,9],[6,6,8],[7,6,9],[1,4,9],[5,4,9],[9,4,9],[3,1,9],[7,1,9]], mask_left: [[3,11],[4,11],[5,11],[6,11],[7,11],[3,8],[4,8],[5,8],[6,8],[7,8]], mask_right: [[3,10],[4,10],[5,10],[6,10],[7,10],[3,7],[4,7],[5,7],[6,7],[7,7]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:251, balls: [[1,15,9],[2,15,8],[3,15,9],[4,15,9],[5,15,9],[6,15,9],[7,15,9],[8,15,8],[9,15,9],[1,14,9],[2,14,8],[3,14,1],[4,14,1],[5,14,1],[6,14,1],[7,14,1],[8,14,8],[9,14,9],[0,12,9],[1,12,8],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[8,12,9],[9,12,8],[10,12,9],[0,11,9],[1,11,8],[2,11,2],[3,11,2],[4,11,2],[5,11,2],[6,11,2],[7,11,2],[8,11,2],[9,11,8],[10,11,9],[0,9,8],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[10,9,8],[0,8,8],[1,8,3],[2,8,3],[3,8,3],[4,8,3],[5,8,3],[6,8,3],[7,8,3],[8,8,3],[9,8,3],[10,8,8],[0,6,9],[1,6,8],[2,6,9],[3,6,9],[4,6,9],[5,6,9],[6,6,9],[7,6,9],[8,6,9],[9,6,8],[10,6,9],[0,5,9],[1,5,8],[2,5,4],[3,5,4],[4,5,4],[5,5,4],[6,5,4],[7,5,4],[8,5,4],[9,5,8],[10,5,9],[1,3,9],[2,3,8],[3,3,9],[4,3,9],[5,3,9],[6,3,9],[7,3,9],[8,3,8],[9,3,9],[1,2,9],[2,2,8],[3,2,5],[4,2,5],[5,2,5],[6,2,5],[7,2,5],[8,2,8],[9,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:252, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[10,16,8],[6,15,9],[7,15,6],[8,15,9],[6,14,9],[7,14,6],[8,14,9],[2,13,8],[3,13,8],[4,13,8],[5,13,8],[6,13,9],[7,13,6],[8,13,9],[9,13,8],[10,13,8],[2,12,8],[3,12,1],[4,12,1],[5,12,1],[6,12,9],[7,12,6],[8,12,9],[9,12,1],[10,12,1],[2,11,8],[3,11,1],[4,11,1],[5,11,1],[6,11,9],[7,11,6],[8,11,9],[9,11,1],[10,11,1],[2,10,8],[3,10,1],[4,10,8],[5,10,8],[6,10,9],[7,10,6],[8,10,9],[9,10,8],[10,10,8],[2,9,8],[3,9,1],[4,9,8],[6,9,9],[7,9,6],[8,9,9],[2,8,8],[3,8,1],[4,8,8],[6,8,9],[7,8,6],[8,8,9],[0,7,9],[1,7,9],[2,7,8],[3,7,1],[4,7,8],[5,7,9],[6,7,9],[7,7,6],[8,7,9],[0,6,6],[1,6,6],[2,6,8],[3,6,1],[4,6,8],[5,6,6],[6,6,6],[7,6,6],[8,6,9],[0,5,6],[1,5,6],[2,5,8],[3,5,1],[4,5,8],[5,5,6],[6,5,6],[7,5,6],[8,5,9],[0,4,9],[1,4,9],[2,4,8],[3,4,1],[4,4,8],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[2,3,8],[3,3,1],[4,3,8],[2,2,8],[3,2,1],[4,2,8],[0,1,8],[1,1,8],[2,1,8],[3,1,8],[4,1,8],[6,1,3],[7,1,3],[8,1,3],[9,1,3],[10,1,3],[0,0,9],[1,0,9],[2,0,9],[3,0,9],[4,0,9],[6,0,8],[7,0,8],[8,0,8],[9,0,8],[10,0,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:253, balls: [[4,17,9],[5,17,4],[6,17,9],[4,16,9],[5,16,4],[6,16,9],[2,15,9],[3,15,9],[4,15,9],[5,15,4],[6,15,9],[7,15,9],[8,15,9],[0,14,4],[1,14,9],[2,14,8],[3,14,1],[4,14,8],[5,14,1],[6,14,8],[7,14,1],[8,14,8],[9,14,9],[10,14,4],[0,13,4],[1,13,1],[2,13,8],[3,13,1],[4,13,8],[5,13,1],[6,13,8],[7,13,1],[8,13,8],[9,13,1],[10,13,4],[0,12,4],[1,12,1],[2,12,1],[3,12,1],[4,12,1],[5,12,1],[6,12,1],[7,12,1],[8,12,1],[9,12,1],[10,12,4],[0,11,4],[1,11,8],[2,11,1],[3,11,8],[4,11,1],[5,11,8],[6,11,1],[7,11,8],[8,11,1],[9,11,8],[10,11,4],[0,10,4],[1,10,8],[2,10,1],[3,10,8],[4,10,1],[5,10,8],[6,10,1],[7,10,8],[8,10,1],[9,10,8],[10,10,4],[1,9,4],[2,9,4],[3,9,4],[4,9,4],[5,9,4],[6,9,4],[7,9,4],[8,9,4],[9,9,4],[1,8,4],[2,8,4],[3,8,4],[4,8,4],[5,8,4],[6,8,4],[7,8,4],[8,8,4],[9,8,4],[1,7,4],[2,7,8],[3,7,8],[4,7,8],[5,7,4],[6,7,8],[7,7,8],[8,7,8],[9,7,4],[1,6,4],[2,6,8],[3,6,6],[4,6,8],[5,6,4],[6,6,8],[7,6,6],[8,6,8],[9,6,4],[1,5,4],[2,5,8],[3,5,6],[4,5,8],[5,5,4],[6,5,8],[7,5,6],[8,5,8],[9,5,4],[1,4,4],[2,4,8],[3,4,8],[4,4,8],[5,4,4],[6,4,8],[7,4,8],[8,4,8],[9,4,4],[2,3,4],[3,3,4],[4,3,4],[6,3,4],[7,3,4],[8,3,4]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:254, balls: [[2,17,9],[3,17,9],[7,17,9],[8,17,9],[4,16,9],[5,16,9],[6,16,9],[4,15,8],[5,15,9],[6,15,8],[3,14,7],[4,14,7],[5,14,9],[6,14,7],[7,14,7],[1,13,9],[2,13,9],[3,13,9],[4,13,8],[5,13,9],[6,13,8],[7,13,9],[8,13,9],[9,13,9],[3,12,7],[4,12,7],[5,12,9],[6,12,7],[7,12,7],[3,11,8],[4,11,8],[5,11,9],[6,11,8],[7,11,8],[1,10,9],[2,10,9],[3,10,9],[4,10,7],[5,10,9],[6,10,7],[7,10,9],[8,10,9],[9,10,9],[0,9,9],[3,9,8],[4,9,8],[5,9,9],[6,9,8],[7,9,8],[10,9,9],[3,8,7],[4,8,7],[5,8,9],[6,8,7],[7,8,7],[1,7,9],[2,7,9],[3,7,9],[4,7,8],[5,7,9],[6,7,8],[7,7,9],[8,7,9],[9,7,9],[0,6,9],[3,6,3],[4,6,3],[5,6,9],[6,6,3],[7,6,3],[10,6,9],[3,5,3],[4,5,3],[5,5,3],[6,5,3],[7,5,3],[4,4,3],[5,4,3],[6,4,3],[4,3,9],[6,3,9],[2,2,9],[3,2,9],[7,2,9],[8,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:255, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,72,90,11,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:256, balls: [[5,17,9],[5,16,9],[3,15,9],[4,15,8],[5,15,9],[6,15,8],[7,15,9],[3,14,9],[5,14,9],[7,14,9],[1,13,9],[2,13,8],[3,13,9],[5,13,9],[7,13,9],[8,13,8],[9,13,9],[1,12,9],[3,12,9],[4,12,8],[5,12,9],[6,12,8],[7,12,9],[9,12,9],[1,11,9],[3,11,9],[5,11,9],[7,11,9],[9,11,9],[1,10,9],[2,10,8],[3,10,9],[5,10,9],[7,10,9],[8,10,8],[9,10,9],[1,9,9],[3,9,9],[4,9,8],[5,9,9],[6,9,8],[7,9,9],[9,9,9],[1,8,9],[3,8,9],[4,8,4],[5,8,9],[6,8,6],[7,8,9],[9,8,9],[1,7,9],[2,7,8],[3,7,9],[4,7,4],[5,7,9],[6,7,6],[7,7,9],[8,7,8],[9,7,9],[1,6,9],[2,6,1],[3,6,9],[4,6,4],[5,6,9],[6,6,6],[7,6,9],[8,6,2],[9,6,9],[1,5,9],[2,5,1],[3,5,9],[4,5,9],[5,5,8],[6,5,9],[7,5,9],[8,5,2],[9,5,9],[1,4,9],[2,4,1],[3,4,9],[4,4,8],[5,4,8],[6,4,8],[7,4,9],[8,4,2],[9,4,9],[1,3,9],[2,3,9],[8,3,9],[9,3,9],[1,2,9],[3,2,9],[5,2,9],[7,2,9],[9,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:257, balls: [[1,14,9],[2,14,9],[3,14,8],[4,14,8],[5,14,9],[6,14,8],[7,14,8],[8,14,9],[9,14,9],[0,13,9],[1,13,4],[2,13,4],[3,13,9],[4,13,8],[5,13,8],[6,13,8],[7,13,9],[8,13,4],[9,13,4],[10,13,9],[0,12,3],[1,12,0],[2,12,0],[3,12,6],[4,12,6],[5,12,6],[6,12,6],[7,12,6],[8,12,0],[9,12,0],[10,12,3],[0,11,5],[1,11,5],[2,11,5],[3,11,5],[4,11,5],[5,11,5],[6,11,5],[7,11,5],[8,11,5],[9,11,5],[10,11,5],[0,10,3],[1,10,0],[2,10,0],[3,10,5],[4,10,5],[5,10,5],[6,10,5],[7,10,5],[8,10,0],[9,10,0],[10,10,3],[0,9,1],[1,9,4],[2,9,4],[3,9,6],[4,9,6],[5,9,6],[6,9,6],[7,9,6],[8,9,4],[9,9,4],[10,9,1],[0,8,1],[1,8,2],[2,8,2],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,2],[9,8,2],[10,8,1],[0,7,1],[1,7,2],[2,7,2],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,2],[9,7,2],[10,7,1],[0,6,8],[1,6,2],[2,6,2],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[8,6,2],[9,6,2],[10,6,8],[1,5,8],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:258, balls: [[0,17,1],[1,17,8],[2,17,1],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,1],[9,17,8],[10,17,1],[0,16,1],[1,16,8],[2,16,1],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,1],[9,16,8],[10,16,1],[0,15,1],[1,15,8],[2,15,1],[3,15,1],[4,15,9],[5,15,6],[6,15,9],[7,15,1],[8,15,1],[9,15,8],[10,15,1],[0,14,9],[1,14,9],[2,14,1],[3,14,1],[4,14,1],[5,14,6],[6,14,1],[7,14,1],[8,14,1],[9,14,9],[10,14,9],[0,13,8],[1,13,8],[2,13,8],[3,13,8],[4,13,9],[5,13,6],[6,13,9],[7,13,8],[8,13,8],[9,13,8],[10,13,8],[1,12,6],[2,12,6],[3,12,6],[4,12,6],[5,12,6],[6,12,6],[7,12,6],[8,12,6],[9,12,6],[2,11,9],[3,11,9],[4,11,9],[5,11,6],[6,11,9],[7,11,9],[8,11,9],[2,10,8],[3,10,8],[4,10,6],[5,10,6],[6,10,6],[7,10,8],[8,10,8],[3,9,6],[4,9,9],[5,9,6],[6,9,9],[7,9,6],[4,8,6],[5,8,6],[6,8,6],[5,7,6],[5,6,6],[5,5,6],[5,4,6],[5,3,8],[5,2,6],[5,1,8],[5,0,6]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:259, balls: [[4,17,9],[6,17,9],[1,16,9],[4,16,4],[6,16,6],[9,16,9],[1,15,4],[3,15,9],[4,15,8],[5,15,9],[6,15,8],[7,15,9],[9,15,6],[0,14,9],[1,14,8],[3,14,4],[7,14,6],[9,14,8],[10,14,9],[2,13,4],[3,13,4],[4,13,4],[5,13,0],[6,13,6],[7,13,6],[8,13,6],[0,12,9],[2,12,4],[3,12,4],[4,12,4],[5,12,0],[6,12,6],[7,12,6],[8,12,6],[10,12,9],[0,11,4],[3,11,4],[4,11,4],[6,11,6],[7,11,6],[10,11,6],[0,10,8],[3,10,0],[5,10,8],[7,10,0],[10,10,8],[3,9,0],[5,9,8],[7,9,0],[0,8,8],[3,8,1],[4,8,1],[6,8,3],[7,8,3],[10,8,8],[0,7,9],[2,7,1],[3,7,1],[4,7,1],[5,7,0],[6,7,3],[7,7,3],[8,7,3],[10,7,9],[0,6,1],[2,6,1],[3,6,1],[4,6,1],[5,6,0],[6,6,3],[7,6,3],[8,6,3],[10,6,3],[0,5,9],[1,5,8],[3,5,1],[7,5,3],[9,5,8],[10,5,9],[1,4,9],[3,4,9],[4,4,8],[5,4,9],[6,4,8],[7,4,9],[9,4,9],[1,3,1],[4,3,9],[6,3,9],[9,3,3],[4,2,1],[6,2,3]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:260, balls: [[0,17,8],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,8],[1,16,9],[5,16,1],[9,16,9],[1,15,9],[2,15,6],[8,15,4],[9,15,9],[1,14,9],[4,14,7],[6,14,0],[9,14,9],[1,13,9],[4,13,9],[6,13,9],[9,13,9],[1,12,9],[4,12,9],[6,12,9],[9,12,9],[1,11,9],[4,11,9],[5,11,2],[6,11,9],[9,11,9],[1,10,9],[4,10,9],[5,10,7],[6,10,9],[9,10,9],[1,9,9],[4,9,9],[6,9,9],[9,9,9],[1,8,9],[4,8,9],[6,8,9],[9,8,9],[1,7,9],[4,7,0],[6,7,2],[9,7,9],[1,6,9],[2,6,4],[8,6,6],[9,6,9],[0,5,8],[1,5,3],[5,5,1],[9,5,9],[10,5,8],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[10,4,3],[4,2,7],[6,2,3],[4,1,6],[5,1,4],[6,1,2],[4,0,5],[6,0,1]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:261, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,9],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,4],[1,16,4],[2,16,0],[3,16,0],[4,16,0],[5,16,0],[6,16,0],[7,16,0],[8,16,0],[9,16,4],[10,16,4],[0,15,8],[1,15,4],[2,15,4],[3,15,0],[4,15,0],[5,15,0],[6,15,0],[7,15,0],[8,15,4],[9,15,4],[10,15,8],[0,14,9],[1,14,8],[2,14,4],[3,14,4],[4,14,0],[5,14,0],[6,14,0],[7,14,4],[8,14,4],[9,14,8],[10,14,9],[0,13,8],[1,13,9],[2,13,8],[3,13,4],[4,13,4],[5,13,0],[6,13,4],[7,13,4],[8,13,8],[9,13,9],[10,13,8],[0,12,3],[1,12,8],[2,12,9],[3,12,8],[4,12,4],[5,12,4],[6,12,4],[7,12,8],[8,12,9],[9,12,8],[10,12,3],[0,11,3],[1,11,3],[2,11,8],[3,11,9],[4,11,8],[5,11,4],[6,11,8],[7,11,9],[8,11,8],[9,11,3],[10,11,3],[0,10,0],[1,10,3],[2,10,3],[3,10,8],[7,10,8],[8,10,3],[9,10,3],[10,10,0],[0,9,0],[1,9,0],[2,9,3],[3,9,3],[5,9,9],[7,9,3],[8,9,3],[9,9,0],[10,9,0],[0,8,0],[1,8,3],[2,8,3],[3,8,8],[7,8,8],[8,8,3],[9,8,3],[10,8,0],[0,7,3],[1,7,3],[2,7,8],[3,7,9],[4,7,8],[5,7,4],[6,7,8],[7,7,9],[8,7,8],[9,7,3],[10,7,3],[0,6,3],[1,6,8],[2,6,9],[3,6,8],[4,6,4],[5,6,4],[6,6,4],[7,6,8],[8,6,9],[9,6,8],[10,6,3],[0,5,8],[1,5,9],[2,5,8],[3,5,4],[4,5,4],[5,5,0],[6,5,4],[7,5,4],[8,5,8],[9,5,9],[10,5,8],[0,4,9],[1,4,8],[2,4,4],[3,4,4],[4,4,0],[5,4,0],[6,4,0],[7,4,4],[8,4,4],[9,4,8],[10,4,9],[0,3,8],[1,3,4],[2,3,4],[3,3,0],[4,3,0],[5,3,0],[6,3,0],[7,3,0],[8,3,4],[9,3,4],[10,3,8],[0,2,4],[1,2,4],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,4],[10,2,4],[0,1,8],[1,1,8],[2,1,8],[3,1,8],[4,1,8],[5,1,9],[6,1,8],[7,1,8],[8,1,8],[9,1,8],[10,1,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:262, balls: [[2,16,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[2,15,9],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[8,15,9],[2,14,9],[3,14,6],[4,14,6],[5,14,6],[6,14,6],[7,14,6],[8,14,9],[2,13,9],[3,13,9],[4,13,6],[5,13,6],[6,13,6],[7,13,9],[8,13,9],[3,12,9],[4,12,8],[5,12,5],[6,12,8],[7,12,9],[4,11,8],[5,11,5],[6,11,8],[4,10,8],[5,10,5],[6,10,8],[4,9,8],[5,9,5],[6,9,8],[4,8,9],[5,8,5],[6,8,9],[3,7,9],[4,7,7],[5,7,8],[6,7,7],[7,7,9],[2,6,9],[3,6,7],[4,6,1],[5,6,8],[6,6,1],[7,6,7],[8,6,9],[1,5,9],[2,5,7],[3,5,1],[4,5,2],[5,5,8],[6,5,2],[7,5,1],[8,5,7],[9,5,9],[0,4,9],[1,4,7],[2,4,1],[3,4,3],[4,4,3],[5,4,8],[6,4,3],[7,4,3],[8,4,1],[9,4,7],[10,4,9],[0,3,7],[1,3,1],[2,3,4],[3,3,4],[4,3,4],[5,3,8],[6,3,4],[7,3,4],[8,3,4],[9,3,1],[10,3,7],[2,2,9],[3,2,9],[4,2,9],[6,2,9],[7,2,9],[8,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:263, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,8],[4,17,9],[5,17,8],[6,17,8],[7,17,8],[8,17,9],[0,16,9],[1,16,9],[2,16,9],[3,16,9],[9,16,9],[0,15,9],[1,15,9],[2,15,9],[5,15,8],[6,15,8],[7,15,8],[10,15,9],[0,14,9],[1,14,9],[4,14,8],[5,14,0],[6,14,9],[7,14,0],[8,14,8],[1,13,8],[3,13,8],[4,13,0],[5,13,0],[6,13,0],[7,13,0],[8,13,0],[9,13,8],[1,12,8],[3,12,8],[4,12,9],[5,12,0],[6,12,9],[7,12,0],[8,12,9],[9,12,8],[1,11,8],[3,11,8],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,8],[1,10,8],[3,10,8],[4,10,9],[5,10,0],[6,10,9],[7,10,0],[8,10,9],[9,10,8],[1,9,8],[3,9,8],[4,9,0],[5,9,0],[6,9,0],[7,9,0],[8,9,0],[9,9,8],[1,8,8],[4,8,8],[5,8,0],[6,8,9],[7,8,0],[8,8,8],[2,7,9],[5,7,8],[6,7,8],[7,7,8],[10,7,9],[3,6,9],[6,6,8],[9,6,9],[4,5,9],[6,5,8],[8,5,9],[5,4,9],[6,4,8],[7,4,9],[6,3,9],[6,2,8],[6,1,8],[6,0,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:264, balls: [[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[4,15,9],[6,15,9],[3,14,8],[5,14,8],[7,14,8],[3,13,8],[5,13,8],[7,13,8],[2,12,8],[4,12,8],[5,12,9],[6,12,8],[8,12,8],[2,11,8],[3,11,8],[4,11,8],[5,11,9],[6,11,8],[7,11,8],[8,11,8],[2,10,9],[3,10,8],[4,10,9],[5,10,9],[6,10,9],[7,10,8],[8,10,9],[2,9,9],[3,9,8],[4,9,9],[5,9,9],[6,9,9],[7,9,8],[8,9,9],[1,8,9],[2,8,8],[3,8,8],[4,8,9],[5,8,9],[6,8,9],[7,8,8],[8,8,8],[9,8,9],[1,7,9],[2,7,8],[3,7,8],[4,7,9],[5,7,9],[6,7,9],[7,7,8],[8,7,8],[9,7,9],[1,6,9],[2,6,8],[3,6,8],[4,6,9],[5,6,9],[6,6,9],[7,6,8],[8,6,8],[9,6,9],[1,5,9],[2,5,8],[3,5,8],[4,5,9],[5,5,9],[6,5,9],[7,5,8],[8,5,8],[9,5,9],[2,4,9],[3,4,8],[4,4,9],[5,4,9],[6,4,9],[7,4,8],[8,4,9],[2,3,9],[3,3,8],[4,3,9],[5,3,9],[6,3,9],[7,3,8],[8,3,9],[3,2,8],[4,2,8],[5,2,9],[6,2,8],[7,2,8],[4,1,8],[5,1,9],[6,1,8]], mask_left: [[3,17],[4,17],[5,17],[6,17],[7,17]], mask_right: [[3,16],[4,16],[5,16],[6,16],[7,16]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:265, balls: [[0,15,9],[1,15,8],[2,15,9],[4,15,9],[5,15,9],[6,15,9],[8,15,9],[9,15,8],[10,15,9],[0,14,9],[1,14,4],[2,14,9],[4,14,8],[5,14,1],[6,14,8],[8,14,9],[9,14,4],[10,14,9],[0,13,9],[1,13,4],[2,13,9],[4,13,8],[5,13,1],[6,13,8],[8,13,9],[9,13,4],[10,13,9],[0,12,9],[1,12,8],[2,12,9],[4,12,9],[5,12,9],[6,12,9],[8,12,9],[9,12,8],[10,12,9],[3,11,9],[7,11,9],[0,10,8],[1,10,8],[2,10,8],[4,10,9],[5,10,9],[6,10,9],[8,10,8],[9,10,8],[10,10,8],[0,9,8],[1,9,6],[2,9,8],[4,9,8],[5,9,7],[6,9,8],[8,9,8],[9,9,6],[10,9,8],[0,8,8],[1,8,6],[2,8,8],[4,8,8],[5,8,7],[6,8,8],[8,8,8],[9,8,6],[10,8,8],[0,7,8],[1,7,8],[2,7,8],[4,7,9],[5,7,9],[6,7,9],[8,7,8],[9,7,8],[10,7,8],[3,6,9],[7,6,9],[0,5,9],[1,5,8],[2,5,9],[4,5,9],[5,5,9],[6,5,9],[8,5,9],[9,5,8],[10,5,9],[0,4,9],[1,4,3],[2,4,9],[4,4,8],[5,4,1],[6,4,8],[8,4,9],[9,4,3],[10,4,9],[0,3,9],[1,3,3],[2,3,9],[4,3,8],[5,3,1],[6,3,8],[8,3,9],[9,3,3],[10,3,9],[0,2,9],[1,2,8],[2,2,9],[4,2,9],[5,2,9],[6,2,9],[8,2,9],[9,2,8],[10,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:266, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,8],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,8],[0,15,8],[2,15,3],[3,15,8],[4,15,9],[5,15,8],[6,15,9],[7,15,8],[8,15,7],[10,15,8],[0,14,8],[1,14,9],[3,14,8],[4,14,9],[6,14,9],[7,14,8],[9,14,9],[10,14,8],[0,13,8],[2,13,2],[3,13,8],[4,13,9],[5,13,8],[6,13,9],[7,13,8],[8,13,6],[10,13,8],[0,12,8],[1,12,9],[5,12,9],[9,12,9],[10,12,8],[0,11,8],[2,11,1],[3,11,8],[4,11,9],[5,11,8],[6,11,9],[7,11,8],[8,11,5],[10,11,8],[0,10,8],[1,10,9],[3,10,8],[4,10,9],[6,10,9],[7,10,8],[9,10,9],[10,10,8],[0,9,8],[2,9,7],[3,9,8],[4,9,9],[5,9,8],[6,9,9],[7,9,8],[8,9,3],[10,9,8],[0,8,8],[1,8,9],[2,8,9],[3,8,8],[4,8,9],[6,8,9],[7,8,8],[8,8,9],[9,8,9],[10,8,8],[0,7,8],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,8],[10,7,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:267, balls: [[4,15,9],[5,15,8],[6,15,9],[3,14,9],[4,14,3],[6,14,4],[7,14,9],[2,13,9],[3,13,2],[4,13,3],[6,13,4],[7,13,5],[8,13,9],[1,12,9],[2,12,1],[3,12,2],[4,12,3],[6,12,4],[7,12,5],[8,12,6],[9,12,9],[0,11,9],[1,11,0],[2,11,1],[3,11,2],[4,11,3],[6,11,4],[7,11,5],[8,11,6],[9,11,7],[10,11,9],[0,10,8],[1,10,0],[2,10,1],[3,10,2],[4,10,3],[6,10,4],[7,10,5],[8,10,6],[9,10,7],[10,10,8],[0,9,8],[1,9,0],[2,9,1],[3,9,2],[4,9,3],[6,9,4],[7,9,5],[8,9,6],[9,9,7],[10,9,8],[0,8,8],[1,8,0],[2,8,1],[3,8,2],[4,8,3],[6,8,4],[7,8,5],[8,8,6],[9,8,7],[10,8,8],[0,7,8],[1,7,0],[2,7,1],[3,7,2],[4,7,3],[5,7,8],[6,7,4],[7,7,5],[8,7,6],[9,7,7],[10,7,8],[0,6,8],[1,6,0],[2,6,1],[3,6,2],[4,6,9],[6,6,9],[7,6,5],[8,6,6],[9,6,7],[10,6,8],[0,5,8],[1,5,0],[2,5,1],[3,5,9],[7,5,9],[8,5,6],[9,5,7],[10,5,8],[0,4,8],[1,4,0],[2,4,9],[8,4,9],[9,4,7],[10,4,8],[0,3,8],[1,3,9],[9,3,9],[10,3,8],[0,2,9],[10,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:268, balls: [[0,15,1],[1,15,9],[2,15,9],[3,15,2],[4,15,8],[5,15,6],[6,15,8],[7,15,3],[8,15,9],[9,15,9],[10,15,4],[0,14,1],[1,14,9],[2,14,8],[3,14,2],[4,14,8],[5,14,6],[6,14,8],[7,14,3],[8,14,8],[9,14,9],[10,14,4],[0,13,1],[1,13,9],[2,13,8],[3,13,2],[4,13,8],[5,13,6],[6,13,8],[7,13,3],[8,13,8],[9,13,9],[10,13,4],[0,12,1],[1,12,9],[2,12,8],[3,12,2],[4,12,8],[5,12,6],[6,12,8],[7,12,3],[8,12,8],[9,12,9],[10,12,4],[0,11,1],[1,11,9],[2,11,8],[3,11,2],[4,11,9],[5,11,9],[6,11,9],[7,11,3],[8,11,8],[9,11,9],[10,11,4],[0,10,1],[1,10,9],[2,10,8],[3,10,9],[4,10,0],[5,10,0],[6,10,0],[7,10,9],[8,10,8],[9,10,9],[10,10,4],[0,9,1],[1,9,9],[2,9,0],[3,9,0],[4,9,0],[5,9,0],[6,9,0],[7,9,0],[8,9,0],[9,9,9],[10,9,4],[0,8,1],[1,8,9],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,9],[10,8,4],[0,7,1],[1,7,9],[2,7,0],[3,7,0],[4,7,0],[5,7,0],[6,7,0],[7,7,0],[8,7,0],[9,7,9],[10,7,4],[0,6,1],[1,6,9],[2,6,0],[3,6,0],[4,6,0],[5,6,0],[6,6,0],[7,6,0],[8,6,0],[9,6,9],[10,6,4],[0,5,9],[2,5,9],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,9],[10,5,9],[3,4,9],[4,4,8],[5,4,8],[6,4,8],[7,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:269, balls: [[5,16,9],[4,15,1],[5,15,8],[6,15,1],[3,14,9],[4,14,8],[5,14,8],[6,14,8],[7,14,9],[2,13,1],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[8,13,1],[1,12,9],[2,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[8,12,8],[9,12,9],[1,11,1],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,1],[0,10,9],[1,10,8],[2,10,8],[3,10,8],[4,10,8],[5,10,8],[6,10,8],[7,10,8],[8,10,8],[9,10,8],[10,10,9],[0,9,1],[1,9,8],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,8],[10,9,1],[0,8,1],[1,8,8],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[10,8,1],[0,7,1],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,8],[10,7,1],[1,6,1],[2,6,8],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[8,6,8],[9,6,1],[1,5,1],[2,5,8],[3,5,8],[4,5,8],[5,5,1],[6,5,8],[7,5,8],[8,5,8],[9,5,1],[2,4,1],[3,4,8],[4,4,1],[6,4,1],[7,4,8],[8,4,1],[3,3,1],[7,3,1]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:270, balls: [[0,16,9],[1,16,9],[2,16,9],[3,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[0,15,8],[1,15,8],[2,15,8],[3,15,9],[4,15,8],[5,15,8],[6,15,8],[7,15,9],[8,15,8],[9,15,8],[10,15,8],[0,14,8],[1,14,1],[2,14,8],[3,14,9],[4,14,8],[5,14,2],[6,14,8],[7,14,9],[8,14,8],[9,14,3],[10,14,8],[0,13,8],[1,13,8],[2,13,8],[3,13,9],[4,13,8],[5,13,8],[6,13,8],[7,13,9],[8,13,8],[9,13,8],[10,13,8],[0,11,9],[1,11,9],[5,11,9],[9,11,9],[10,11,9],[0,10,9],[1,10,8],[2,10,8],[3,10,8],[4,10,8],[5,10,9],[6,10,8],[7,10,8],[8,10,8],[9,10,8],[10,10,9],[0,9,9],[1,9,8],[2,9,4],[3,9,5],[4,9,8],[5,9,9],[6,9,8],[7,9,6],[8,9,7],[9,9,8],[10,9,9],[0,8,9],[1,8,8],[2,8,8],[3,8,8],[4,8,8],[5,8,9],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[10,8,9],[0,7,9],[1,7,9],[4,7,9],[5,7,9],[6,7,9],[9,7,9],[10,7,9],[0,5,8],[1,5,8],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,8],[10,5,8],[0,4,8],[1,4,0],[2,4,1],[3,4,2],[4,4,3],[5,4,4],[6,4,5],[7,4,6],[8,4,7],[9,4,0],[10,4,8],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8],[2,2,9],[3,2,9],[7,2,9],[8,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:271, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,77,95,10,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:272, balls: [[0,16,9],[1,16,8],[2,16,9],[3,16,8],[4,16,9],[5,16,8],[6,16,9],[7,16,8],[8,16,9],[9,16,8],[10,16,9],[0,15,0],[2,15,0],[4,15,0],[6,15,0],[8,15,0],[10,15,0],[0,14,9],[1,14,8],[2,14,9],[3,14,8],[4,14,9],[5,14,8],[6,14,9],[7,14,8],[8,14,9],[9,14,8],[10,14,9],[0,13,1],[2,13,1],[4,13,1],[6,13,1],[8,13,1],[10,13,1],[0,12,9],[1,12,8],[2,12,9],[3,12,8],[4,12,9],[5,12,8],[6,12,9],[7,12,8],[8,12,9],[9,12,8],[10,12,9],[0,11,2],[2,11,2],[4,11,2],[6,11,2],[8,11,2],[10,11,2],[0,10,9],[1,10,8],[2,10,9],[3,10,8],[4,10,9],[5,10,8],[6,10,9],[7,10,8],[8,10,9],[9,10,8],[10,10,9],[0,9,3],[2,9,3],[4,9,3],[6,9,3],[8,9,3],[10,9,3],[0,8,9],[1,8,8],[2,8,9],[3,8,8],[4,8,9],[5,8,8],[6,8,9],[7,8,8],[8,8,9],[9,8,8],[10,8,9],[0,7,4],[2,7,4],[4,7,4],[6,7,4],[8,7,4],[10,7,4],[0,6,9],[1,6,8],[2,6,9],[3,6,8],[4,6,9],[5,6,8],[6,6,9],[7,6,8],[8,6,9],[9,6,8],[10,6,9],[0,5,5],[2,5,5],[4,5,5],[6,5,5],[8,5,5],[10,5,5],[0,4,9],[1,4,8],[2,4,9],[3,4,8],[4,4,9],[5,4,8],[6,4,9],[7,4,8],[8,4,9],[9,4,8],[10,4,9],[0,3,6],[2,3,6],[4,3,6],[6,3,6],[8,3,6],[10,3,6],[0,2,9],[1,2,8],[2,2,9],[3,2,8],[4,2,9],[5,2,8],[6,2,9],[7,2,8],[8,2,9],[9,2,8],[10,2,9],[0,1,7],[2,1,7],[4,1,7],[6,1,7],[8,1,7],[10,1,7],[0,0,9],[1,0,8],[2,0,9],[3,0,8],[4,0,9],[5,0,8],[6,0,9],[7,0,8],[8,0,9],[9,0,8],[10,0,9]], mask_left: [[0,13],[2,13],[4,13],[6,13],[8,13],[10,13],[0,9],[2,9],[4,9],[6,9],[8,9],[10,9],[0,5],[2,5],[4,5],[6,5],[8,5],[10,5],[0,1],[2,1],[4,1],[6,1],[8,1],[10,1]], mask_right: [[0,15],[2,15],[4,15],[6,15],[8,15],[10,15],[0,11],[2,11],[4,11],[6,11],[8,11],[10,11],[0,7],[2,7],[4,7],[6,7],[8,7],[10,7],[0,3],[2,3],[4,3],[6,3],[8,3],[10,3]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:273, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,8],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[5,16,8],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[0,15,2],[1,15,2],[2,15,2],[3,15,2],[4,15,9],[5,15,8],[6,15,9],[7,15,7],[8,15,7],[9,15,7],[10,15,7],[0,14,3],[1,14,3],[2,14,3],[3,14,3],[4,14,9],[5,14,8],[6,14,9],[7,14,4],[8,14,4],[9,14,4],[10,14,4],[0,13,3],[1,13,1],[2,13,1],[3,13,1],[4,13,9],[5,13,8],[6,13,9],[7,13,6],[8,13,6],[9,13,6],[10,13,4],[0,12,3],[1,12,1],[2,12,8],[3,12,8],[4,12,9],[5,12,8],[6,12,9],[7,12,8],[8,12,8],[9,12,6],[10,12,4],[0,11,3],[1,11,1],[2,11,8],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,8],[9,11,6],[10,11,4],[0,10,3],[1,10,1],[2,10,8],[3,10,0],[4,10,9],[5,10,0],[6,10,9],[7,10,0],[8,10,8],[9,10,6],[10,10,4],[0,9,3],[1,9,1],[2,9,8],[3,9,0],[4,9,0],[5,9,0],[6,9,0],[7,9,0],[8,9,8],[9,9,6],[10,9,4],[0,8,3],[1,8,1],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,6],[10,8,4],[0,7,3],[1,7,1],[2,7,1],[3,7,1],[4,7,1],[5,7,8],[6,7,6],[7,7,6],[8,7,6],[9,7,6],[10,7,4],[0,6,3],[1,6,3],[2,6,3],[3,6,3],[4,6,3],[5,6,8],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,2],[1,5,2],[2,5,2],[3,5,2],[4,5,2],[5,5,8],[6,5,7],[7,5,7],[8,5,7],[9,5,7],[10,5,7],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,0],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[10,4,9],[0,3,9],[1,3,9],[2,3,9],[3,3,9],[4,3,9],[5,3,0],[6,3,9],[7,3,9],[8,3,9],[9,3,9],[10,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:274, balls: [[2,17,9],[5,17,8],[8,17,9],[0,16,8],[1,16,8],[2,16,0],[3,16,9],[4,16,9],[5,16,0],[6,16,9],[7,16,9],[8,16,0],[9,16,8],[10,16,8],[0,15,0],[1,15,7],[2,15,9],[3,15,7],[4,15,0],[5,15,9],[6,15,0],[7,15,7],[8,15,9],[9,15,7],[10,15,0],[0,14,0],[1,14,6],[2,14,0],[3,14,6],[4,14,0],[5,14,0],[6,14,0],[7,14,6],[8,14,0],[9,14,6],[10,14,0],[0,13,0],[1,13,5],[2,13,9],[3,13,5],[4,13,0],[5,13,9],[6,13,0],[7,13,5],[8,13,9],[9,13,5],[10,13,0],[0,12,0],[1,12,4],[2,12,0],[3,12,4],[4,12,0],[5,12,0],[6,12,0],[7,12,4],[8,12,0],[9,12,4],[10,12,0],[0,11,0],[1,11,3],[2,11,9],[3,11,3],[4,11,0],[5,11,9],[6,11,0],[7,11,3],[8,11,9],[9,11,3],[10,11,0],[0,10,0],[1,10,2],[2,10,0],[3,10,2],[4,10,0],[5,10,0],[6,10,0],[7,10,2],[8,10,0],[9,10,2],[10,10,0],[0,9,0],[1,9,1],[2,9,9],[3,9,1],[4,9,0],[5,9,9],[6,9,0],[7,9,1],[8,9,9],[9,9,1],[10,9,0],[0,8,8],[1,8,9],[2,8,0],[3,8,9],[4,8,8],[5,8,0],[6,8,8],[7,8,9],[8,8,0],[9,8,9],[10,8,8],[2,7,9],[5,7,9],[8,7,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:275, balls: [[3,16,8],[4,16,9],[5,16,9],[6,16,9],[7,16,8],[3,15,9],[4,15,8],[5,15,8],[6,15,8],[7,15,9],[0,14,8],[1,14,9],[3,14,9],[4,14,5],[5,14,0],[6,14,5],[7,14,9],[9,14,9],[10,14,8],[0,13,8],[1,13,5],[2,13,9],[3,13,9],[4,13,0],[5,13,0],[6,13,0],[7,13,9],[8,13,9],[9,13,5],[10,13,8],[0,12,8],[1,12,5],[2,12,5],[3,12,0],[4,12,0],[5,12,0],[6,12,0],[7,12,0],[8,12,5],[9,12,5],[10,12,8],[0,11,9],[1,11,5],[2,11,5],[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[8,11,5],[9,11,5],[10,11,9],[0,10,9],[1,10,5],[2,10,0],[3,10,0],[4,10,0],[5,10,0],[6,10,0],[7,10,0],[8,10,0],[9,10,5],[10,10,9],[0,9,8],[1,9,5],[2,9,5],[3,9,5],[4,9,5],[5,9,5],[6,9,5],[7,9,5],[8,9,5],[9,9,5],[10,9,8],[0,8,8],[1,8,5],[2,8,9],[3,8,9],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,5],[10,8,8],[0,7,8],[1,7,9],[9,7,9],[10,7,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:276, balls: [[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,9],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[1,14,8],[2,14,5],[3,14,5],[4,14,5],[5,14,5],[6,14,5],[7,14,5],[8,14,5],[9,14,5],[1,13,8],[2,13,4],[3,13,4],[4,13,8],[5,13,8],[6,13,8],[7,13,4],[8,13,4],[9,13,4],[1,12,8],[2,12,5],[3,12,5],[4,12,8],[5,12,7],[6,12,8],[7,12,5],[8,12,5],[9,12,5],[1,11,8],[2,11,4],[3,11,4],[4,11,8],[5,11,8],[6,11,8],[7,11,4],[8,11,4],[9,11,4],[1,10,8],[2,10,5],[3,10,5],[4,10,8],[5,10,7],[6,10,8],[7,10,5],[8,10,5],[9,10,5],[1,9,8],[2,9,4],[3,9,4],[4,9,8],[5,9,8],[6,9,8],[7,9,4],[8,9,4],[9,9,4],[1,8,8],[2,8,5],[3,8,5],[4,8,5],[5,8,5],[6,8,5],[7,8,5],[8,8,5],[9,8,5],[10,8,9],[1,7,3],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,3],[1,6,8],[2,6,3],[3,6,5],[4,6,5],[5,6,5],[6,6,5],[7,6,5],[8,6,3],[1,5,8],[3,5,3],[4,5,5],[5,5,5],[6,5,5],[7,5,3],[1,4,8],[4,4,3],[5,4,5],[6,4,3],[5,3,3]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:277, balls: [[0,15,8],[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,8],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[10,15,8],[0,14,2],[1,14,9],[5,14,9],[9,14,9],[10,14,6],[0,13,8],[1,13,9],[5,13,9],[9,13,9],[10,13,8],[0,12,1],[1,12,9],[5,12,9],[9,12,9],[10,12,5],[0,11,8],[1,11,9],[5,11,9],[9,11,9],[10,11,8],[0,10,1],[1,10,9],[5,10,9],[9,10,9],[10,10,5],[0,9,8],[1,9,9],[5,9,9],[9,9,9],[10,9,8],[0,8,0],[1,8,9],[5,8,9],[9,8,9],[10,8,0],[0,7,8],[1,7,9],[2,7,9],[3,7,9],[4,7,9],[5,7,8],[6,7,9],[7,7,9],[8,7,9],[9,7,9],[10,7,8],[1,5,2],[2,5,8],[4,5,4],[5,5,8],[6,5,4],[8,5,8],[9,5,6],[1,4,1],[2,4,8],[4,4,3],[5,4,8],[6,4,3],[8,4,8],[9,4,5],[1,3,1],[2,3,8],[4,3,3],[5,3,8],[6,3,3],[8,3,8],[9,3,5],[1,2,0],[2,2,8],[4,2,0],[5,2,8],[6,2,0],[8,2,8],[9,2,0]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:278, balls: [[0,17,9],[1,17,8],[2,17,8],[3,17,9],[4,17,1],[5,17,8],[6,17,1],[7,17,9],[8,17,8],[9,17,8],[10,17,9],[0,16,9],[1,16,8],[2,16,8],[3,16,9],[4,16,1],[5,16,8],[6,16,1],[7,16,9],[8,16,8],[9,16,8],[10,16,9],[0,15,9],[1,15,8],[2,15,8],[3,15,9],[4,15,1],[5,15,8],[6,15,1],[7,15,9],[8,15,8],[9,15,8],[10,15,9],[0,14,9],[1,14,0],[2,14,0],[3,14,9],[4,14,2],[5,14,8],[6,14,2],[7,14,9],[8,14,0],[9,14,0],[10,14,9],[0,13,9],[1,13,0],[2,13,0],[3,13,9],[4,13,2],[5,13,8],[6,13,2],[7,13,9],[8,13,0],[9,13,0],[10,13,9],[0,12,9],[1,12,0],[2,12,0],[3,12,9],[4,12,2],[5,12,8],[6,12,2],[7,12,9],[8,12,0],[9,12,0],[10,12,9],[0,11,9],[1,11,7],[2,11,7],[3,11,9],[4,11,3],[5,11,8],[6,11,3],[7,11,9],[8,11,7],[9,11,7],[10,11,9],[0,10,9],[1,10,7],[2,10,7],[3,10,9],[4,10,3],[5,10,8],[6,10,3],[7,10,9],[8,10,7],[9,10,7],[10,10,9],[0,9,9],[1,9,7],[2,9,7],[3,9,9],[4,9,3],[5,9,8],[6,9,3],[7,9,9],[8,9,7],[9,9,7],[10,9,9],[0,8,9],[1,8,8],[2,8,8],[3,8,9],[4,8,4],[5,8,8],[6,8,4],[7,8,9],[8,8,8],[9,8,8],[10,8,9],[0,7,9],[1,7,8],[2,7,8],[3,7,9],[4,7,4],[5,7,8],[6,7,4],[7,7,9],[8,7,8],[9,7,8],[10,7,9],[0,6,9],[1,6,8],[2,6,8],[3,6,9],[4,6,4],[5,6,8],[6,6,4],[7,6,9],[8,6,8],[9,6,8],[10,6,9],[0,5,9],[1,5,0],[2,5,0],[3,5,9],[4,5,5],[5,5,8],[6,5,5],[7,5,9],[8,5,0],[9,5,0],[10,5,9],[0,4,9],[1,4,0],[2,4,0],[3,4,9],[4,4,5],[5,4,8],[6,4,5],[7,4,9],[8,4,0],[9,4,0],[10,4,9],[0,3,9],[1,3,0],[2,3,0],[3,3,9],[4,3,5],[5,3,8],[6,3,5],[7,3,9],[8,3,0],[9,3,0],[10,3,9],[0,2,9],[1,2,7],[2,2,7],[3,2,9],[4,2,6],[5,2,8],[6,2,6],[7,2,9],[8,2,7],[9,2,7],[10,2,9],[0,1,9],[1,1,7],[2,1,7],[3,1,9],[4,1,6],[5,1,8],[6,1,6],[7,1,9],[8,1,7],[9,1,7],[10,1,9],[0,0,9],[1,0,7],[2,0,7],[3,0,9],[4,0,6],[5,0,8],[6,0,6],[7,0,9],[8,0,7],[9,0,7],[10,0,9]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:279, balls: [[0,17,8],[1,17,8],[2,17,8],[4,17,8],[5,17,8],[6,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,2],[1,16,9],[2,16,2],[3,16,9],[4,16,1],[5,16,9],[6,16,1],[7,16,9],[8,16,6],[9,16,9],[10,16,6],[0,15,8],[1,15,8],[2,15,8],[4,15,8],[5,15,8],[6,15,8],[8,15,8],[9,15,8],[10,15,8],[0,14,4],[1,14,9],[2,14,4],[3,14,9],[4,14,0],[5,14,9],[6,14,0],[7,14,9],[8,14,7],[9,14,9],[10,14,7],[0,13,8],[1,13,8],[2,13,8],[4,13,8],[5,13,8],[6,13,8],[8,13,8],[9,13,8],[10,13,8],[0,12,2],[1,12,9],[2,12,2],[3,12,9],[4,12,1],[5,12,9],[6,12,1],[7,12,9],[8,12,6],[9,12,9],[10,12,6],[0,11,8],[1,11,8],[2,11,8],[4,11,8],[5,11,8],[6,11,8],[8,11,8],[9,11,8],[10,11,8],[0,10,4],[1,10,9],[2,10,4],[3,10,9],[4,10,0],[5,10,9],[6,10,0],[7,10,9],[8,10,7],[9,10,9],[10,10,7],[0,9,8],[1,9,8],[2,9,8],[4,9,8],[5,9,8],[6,9,8],[8,9,8],[9,9,8],[10,9,8],[0,8,2],[1,8,9],[2,8,2],[3,8,9],[4,8,1],[5,8,9],[6,8,1],[7,8,9],[8,8,6],[9,8,9],[10,8,6],[0,7,8],[1,7,8],[2,7,8],[4,7,8],[5,7,8],[6,7,8],[8,7,8],[9,7,8],[10,7,8],[0,6,4],[1,6,9],[2,6,4],[3,6,9],[4,6,0],[5,6,9],[6,6,0],[7,6,9],[8,6,7],[9,6,9],[10,6,7],[0,5,8],[1,5,8],[2,5,8],[4,5,8],[5,5,8],[6,5,8],[8,5,8],[9,5,8],[10,5,8],[0,4,2],[1,4,9],[2,4,2],[3,4,9],[4,4,1],[5,4,9],[6,4,1],[7,4,9],[8,4,6],[9,4,9],[10,4,6],[0,3,8],[1,3,8],[2,3,8],[4,3,8],[5,3,8],[6,3,8],[8,3,8],[9,3,8],[10,3,8]], mask_left: [[0,15],[1,15],[2,15],[4,15],[5,15],[6,15],[8,15],[9,15],[10,15],[0,11],[1,11],[2,11],[4,11],[5,11],[6,11],[8,11],[9,11],[10,11],[0,7],[1,7],[2,7],[4,7],[5,7],[6,7],[8,7],[9,7],[10,7],[0,3],[1,3],[2,3],[4,3],[5,3],[6,3],[8,3],[9,3],[10,3]], mask_right: [[0,17],[1,17],[2,17],[4,17],[5,17],[6,17],[8,17],[9,17],[10,17],[0,13],[1,13],[2,13],[4,13],[5,13],[6,13],[8,13],[9,13],[10,13],[0,9],[1,9],[2,9],[4,9],[5,9],[6,9],[8,9],[9,9],[10,9],[0,5],[1,5],[2,5],[4,5],[5,5],[6,5],[8,5],[9,5],[10,5]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:280, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[2,16,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[0,14,8],[1,14,8],[2,14,8],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[8,14,8],[9,14,8],[10,14,8],[0,13,9],[1,13,9],[2,13,9],[3,13,9],[7,13,9],[8,13,9],[9,13,9],[10,13,9],[0,11,8],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[10,11,8],[2,10,9],[3,10,9],[4,10,9],[5,10,9],[6,10,9],[7,10,9],[8,10,9],[1,9,6],[2,9,4],[3,9,2],[4,9,1],[5,9,9],[6,9,1],[7,9,2],[8,9,4],[9,9,6],[1,8,6],[2,8,4],[3,8,2],[4,8,1],[5,8,9],[6,8,1],[7,8,2],[8,8,4],[9,8,6],[1,7,6],[2,7,4],[3,7,2],[4,7,1],[5,7,9],[6,7,1],[7,7,2],[8,7,4],[9,7,6],[1,6,6],[2,6,4],[3,6,2],[4,6,1],[5,6,0],[6,6,1],[7,6,2],[8,6,4],[9,6,6],[1,5,6],[2,5,4],[3,5,2],[4,5,1],[5,5,9],[6,5,1],[7,5,2],[8,5,4],[9,5,6],[1,4,6],[2,4,4],[3,4,2],[4,4,1],[5,4,9],[6,4,1],[7,4,2],[8,4,4],[9,4,6],[1,3,6],[2,3,4],[3,3,2],[4,3,1],[5,3,9],[6,3,1],[7,3,2],[8,3,4],[9,3,6]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:281, balls: [[4,16,9],[5,16,9],[6,16,8],[4,15,8],[5,15,9],[6,15,9],[4,14,9],[5,14,9],[6,14,8],[4,13,8],[5,13,9],[6,13,9],[4,12,9],[5,12,9],[6,12,8],[4,11,8],[5,11,9],[6,11,9],[4,10,9],[5,10,9],[6,10,8],[4,9,8],[5,9,9],[6,9,9],[4,8,9],[5,8,9],[6,8,8],[4,7,8],[5,7,9],[6,7,9],[4,6,9],[5,6,9],[6,6,8],[4,5,8],[5,5,9],[6,5,9],[4,4,9],[5,4,9],[6,4,8],[4,3,8],[5,3,9],[6,3,9],[4,2,9],[5,2,9],[6,2,8],[4,1,8],[5,1,9],[6,1,9],[4,0,9],[5,0,9],[6,0,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:282, balls: [[5,15,1],[5,14,9],[4,13,1],[5,13,9],[6,13,1],[4,12,9],[5,12,1],[6,12,9],[3,11,1],[4,11,9],[5,11,8],[6,11,9],[7,11,1],[3,10,9],[4,10,1],[5,10,8],[6,10,1],[7,10,9],[2,9,1],[3,9,9],[4,9,8],[5,9,8],[6,9,8],[7,9,9],[8,9,1],[2,8,9],[3,8,1],[4,8,8],[5,8,8],[6,8,8],[7,8,1],[8,8,9],[1,7,1],[2,7,9],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,9],[9,7,1],[1,6,9],[2,6,1],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[8,6,1],[9,6,9],[0,5,1],[1,5,9],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,9],[10,5,1],[0,4,1],[1,4,1],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,1],[10,4,1],[0,3,1],[1,3,1],[2,3,1],[3,3,1],[4,3,1],[5,3,1],[6,3,1],[7,3,1],[8,3,1],[9,3,1],[10,3,1],[0,2,1],[1,2,1],[2,2,1],[3,2,1],[4,2,1],[5,2,1],[6,2,1],[7,2,1],[8,2,1],[9,2,1],[10,2,1]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:283, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[1,16,8],[2,16,8],[3,16,9],[4,16,8],[5,16,9],[6,16,8],[7,16,9],[8,16,8],[9,16,8],[1,15,8],[2,15,0],[3,15,0],[4,15,0],[5,15,0],[6,15,0],[7,15,0],[8,15,0],[9,15,8],[0,14,9],[1,14,9],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,9],[10,14,9],[1,13,9],[2,13,0],[3,13,0],[4,13,0],[5,13,1],[6,13,0],[7,13,0],[8,13,0],[9,13,9],[1,12,9],[2,12,0],[3,12,0],[4,12,1],[5,12,1],[6,12,1],[7,12,0],[8,12,0],[9,12,9],[1,11,9],[2,11,0],[3,11,0],[4,11,1],[5,11,1],[6,11,1],[7,11,0],[8,11,0],[9,11,9],[0,10,9],[1,10,9],[2,10,0],[3,10,9],[4,10,1],[5,10,0],[6,10,1],[7,10,9],[8,10,0],[9,10,9],[10,10,9],[1,9,8],[2,9,9],[3,9,0],[4,9,0],[5,9,0],[6,9,0],[7,9,0],[8,9,9],[9,9,8],[1,8,8],[2,8,8],[3,8,8],[4,8,9],[5,8,8],[6,8,9],[7,8,8],[8,8,8],[9,8,8],[0,7,9],[1,7,9],[2,7,9],[3,7,9],[4,7,9],[5,7,9],[6,7,9],[7,7,9],[8,7,9],[9,7,9],[10,7,9]], mask_left: [[0,17],[0,14],[0,10],[0,7]], mask_right: [[10,17],[10,14],[10,10],[10,7]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:284, balls: [[0,15,9],[1,15,9],[2,15,9],[8,15,9],[9,15,9],[10,15,9],[0,14,9],[1,14,8],[2,14,8],[8,14,8],[9,14,8],[10,14,9],[0,13,8],[1,13,9],[2,13,8],[4,13,9],[5,13,8],[6,13,9],[8,13,8],[9,13,9],[10,13,8],[0,12,8],[1,12,8],[2,12,9],[4,12,9],[5,12,8],[6,12,9],[8,12,9],[9,12,8],[10,12,8],[0,11,0],[1,11,0],[2,11,0],[4,11,9],[5,11,8],[6,11,9],[8,11,5],[9,11,5],[10,11,5],[4,10,9],[5,10,8],[6,10,9],[4,9,9],[5,9,8],[6,9,9],[0,8,2],[1,8,2],[2,8,2],[4,8,9],[5,8,8],[6,8,9],[8,8,7],[9,8,7],[10,8,7],[0,7,8],[1,7,8],[2,7,9],[4,7,9],[5,7,8],[6,7,9],[8,7,9],[9,7,8],[10,7,8],[0,6,8],[1,6,9],[2,6,8],[4,6,9],[5,6,8],[6,6,9],[8,6,8],[9,6,9],[10,6,8],[0,5,9],[1,5,8],[2,5,8],[8,5,8],[9,5,8],[10,5,9],[0,4,9],[1,4,9],[2,4,9],[8,4,9],[9,4,9],[10,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:285, balls: [[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,9],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[1,14,9],[2,14,4],[3,14,4],[4,14,8],[5,14,8],[6,14,8],[7,14,3],[8,14,3],[9,14,9],[1,13,9],[2,13,4],[3,13,4],[4,13,8],[5,13,8],[6,13,8],[7,13,3],[8,13,3],[9,13,9],[1,12,9],[2,12,4],[3,12,4],[4,12,8],[5,12,8],[6,12,8],[7,12,3],[8,12,3],[9,12,9],[1,11,9],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,9],[1,10,9],[9,10,9],[1,9,9],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,9],[1,8,9],[2,8,1],[3,8,1],[4,8,8],[5,8,8],[6,8,8],[7,8,6],[8,8,6],[9,8,9],[1,7,9],[2,7,1],[3,7,1],[4,7,8],[5,7,8],[6,7,8],[7,7,6],[8,7,6],[9,7,9],[1,6,9],[2,6,1],[3,6,1],[4,6,8],[5,6,8],[6,6,8],[7,6,6],[8,6,6],[9,6,9],[1,5,9],[2,5,9],[3,5,9],[4,5,9],[5,5,9],[6,5,9],[7,5,9],[8,5,9],[9,5,9]], mask_left: [[1,10]], mask_right: [[9,10]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:286, balls: [[0,17,3],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[1,16,9],[9,16,9],[1,15,9],[9,15,9],[1,14,9],[9,14,9],[1,13,9],[5,13,6],[9,13,9],[1,12,9],[4,12,6],[5,12,4],[6,12,6],[9,12,9],[1,11,9],[3,11,6],[4,11,4],[5,11,6],[6,11,4],[7,11,6],[9,11,9],[1,10,9],[2,10,6],[3,10,4],[4,10,6],[5,10,8],[6,10,6],[7,10,4],[8,10,6],[9,10,8],[1,9,9],[3,9,6],[4,9,4],[5,9,6],[6,9,4],[7,9,6],[9,9,9],[1,8,9],[4,8,6],[5,8,4],[6,8,6],[9,8,9],[1,7,9],[5,7,6],[9,7,9],[1,6,9],[9,6,9],[1,5,9],[9,5,9],[1,4,9],[9,4,9],[0,3,3],[1,3,9],[2,3,9],[3,3,9],[4,3,9],[5,3,9],[6,3,9],[7,3,9],[8,3,9],[9,3,9],[10,3,3]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:287, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,81,99,8,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:288, balls: [[0,17,8],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,8],[0,16,6],[1,16,4],[2,16,1],[3,16,8],[5,16,9],[7,16,8],[8,16,2],[9,16,5],[10,16,7],[0,15,6],[1,15,4],[2,15,1],[3,15,8],[5,15,9],[7,15,8],[8,15,2],[9,15,5],[10,15,7],[0,14,6],[1,14,4],[2,14,1],[3,14,9],[5,14,9],[7,14,9],[8,14,2],[9,14,5],[10,14,7],[0,13,6],[1,13,4],[2,13,1],[3,13,9],[5,13,9],[7,13,9],[8,13,2],[9,13,5],[10,13,7],[0,12,6],[1,12,4],[2,12,1],[3,12,9],[5,12,9],[7,12,9],[8,12,2],[9,12,5],[10,12,7],[0,11,6],[1,11,4],[2,11,1],[3,11,9],[5,11,9],[7,11,9],[8,11,2],[9,11,5],[10,11,7],[0,10,9],[1,10,9],[2,10,9],[3,10,9],[5,10,8],[7,10,9],[8,10,9],[9,10,9],[10,10,9],[0,9,6],[1,9,4],[2,9,1],[3,9,9],[5,9,9],[7,9,9],[8,9,2],[9,9,5],[10,9,7],[0,8,6],[1,8,4],[2,8,1],[3,8,9],[5,8,9],[7,8,9],[8,8,2],[9,8,5],[10,8,7],[0,7,6],[1,7,4],[2,7,1],[3,7,9],[5,7,9],[7,7,9],[8,7,2],[9,7,5],[10,7,7],[0,6,6],[1,6,4],[2,6,1],[3,6,9],[5,6,9],[7,6,9],[8,6,2],[9,6,5],[10,6,7],[0,5,6],[1,5,4],[2,5,1],[3,5,9],[5,5,9],[7,5,9],[8,5,2],[9,5,5],[10,5,7],[0,4,6],[1,4,4],[2,4,1],[3,4,9],[5,4,9],[7,4,9],[8,4,2],[9,4,5],[10,4,7],[0,3,8],[1,3,8],[2,3,8],[3,3,9],[5,3,9],[7,3,9],[8,3,8],[9,3,8],[10,3,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:289, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,9],[9,16,9],[1,15,9],[3,15,4],[4,15,5],[5,15,6],[6,15,7],[7,15,0],[9,15,9],[1,14,9],[3,14,3],[4,14,4],[5,14,5],[6,14,6],[7,14,7],[9,14,9],[1,13,9],[3,13,2],[4,13,3],[5,13,4],[6,13,5],[7,13,6],[9,13,9],[1,12,9],[3,12,1],[4,12,2],[5,12,3],[6,12,4],[7,12,5],[9,12,9],[1,11,9],[3,11,0],[4,11,1],[5,11,2],[6,11,3],[7,11,4],[9,11,9],[1,10,9],[9,10,9],[1,9,9],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,9],[3,8,9],[4,8,9],[6,8,9],[7,8,9],[1,7,9],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,9],[1,6,9],[9,6,9],[1,5,9],[3,5,4],[4,5,5],[5,5,6],[6,5,7],[7,5,0],[9,5,9],[1,4,9],[3,4,3],[4,4,4],[5,4,5],[6,4,6],[7,4,7],[9,4,9],[1,3,9],[3,3,2],[4,3,3],[5,3,4],[6,3,5],[7,3,6],[9,3,9],[1,2,9],[3,2,1],[4,2,2],[5,2,3],[6,2,4],[7,2,5],[9,2,9],[1,1,9],[3,1,0],[4,1,1],[5,1,2],[6,1,3],[7,1,4],[9,1,9],[1,0,9],[9,0,9]], mask_left: [[3,8],[4,8]], mask_right: [[6,8],[7,8]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:290, balls: [[0,16,8],[1,16,8],[2,16,8],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[0,14,8],[1,14,8],[2,14,8],[3,14,8],[4,14,8],[5,14,9],[6,14,8],[7,14,8],[8,14,8],[9,14,8],[10,14,8],[0,12,9],[1,12,9],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[8,12,8],[9,12,8],[10,12,8],[0,10,8],[1,10,8],[2,10,8],[3,10,8],[4,10,8],[5,10,9],[6,10,8],[7,10,8],[8,10,8],[9,10,8],[10,10,8],[0,8,8],[1,8,8],[2,8,8],[3,8,9],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[10,8,9],[0,6,8],[1,6,8],[2,6,8],[3,6,8],[4,6,8],[5,6,9],[6,6,8],[7,6,8],[8,6,8],[9,6,8],[10,6,8],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,8],[5,4,9],[6,4,8],[7,4,9],[8,4,9],[9,4,9],[10,4,9],[0,2,8],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,8],[10,2,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:291, balls: [[4,17,9],[5,17,9],[6,17,9],[3,16,9],[4,16,2],[5,16,2],[6,16,2],[7,16,9],[2,15,9],[3,15,2],[4,15,2],[5,15,2],[6,15,2],[7,15,2],[8,15,9],[2,14,9],[3,14,2],[4,14,4],[5,14,4],[6,14,4],[7,14,2],[8,14,9],[1,13,9],[2,13,2],[3,13,2],[4,13,4],[5,13,4],[6,13,4],[7,13,2],[8,13,2],[9,13,9],[1,12,9],[2,12,2],[3,12,4],[4,12,0],[5,12,0],[6,12,0],[7,12,4],[8,12,2],[9,12,9],[1,11,9],[2,11,2],[3,11,4],[4,11,0],[5,11,7],[6,11,0],[7,11,4],[8,11,2],[9,11,9],[1,10,9],[2,10,2],[3,10,4],[4,10,0],[5,10,0],[6,10,0],[7,10,4],[8,10,2],[9,10,9],[1,9,9],[2,9,2],[3,9,2],[4,9,4],[5,9,4],[6,9,4],[7,9,2],[8,9,2],[9,9,9],[2,8,8],[3,8,2],[4,8,4],[5,8,4],[6,8,4],[7,8,2],[8,8,8],[2,7,8],[3,7,2],[4,7,2],[5,7,2],[6,7,2],[7,7,2],[8,7,8],[3,6,8],[4,6,2],[5,6,2],[6,6,2],[7,6,8],[4,5,8],[5,5,8],[6,5,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:292, balls: [[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[2,16,9],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,9],[1,15,9],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,9],[1,14,9],[9,14,9],[3,12,2],[4,12,9],[5,12,2],[6,12,9],[7,12,2],[3,11,2],[4,11,2],[5,11,2],[6,11,2],[7,11,2],[4,10,2],[5,10,2],[6,10,2],[4,9,2],[5,9,2],[6,9,2],[5,8,2],[1,7,9],[2,7,9],[3,7,9],[5,7,2],[7,7,9],[8,7,9],[9,7,9],[0,6,9],[1,6,5],[2,6,5],[3,6,5],[4,6,9],[6,6,9],[7,6,5],[8,6,5],[9,6,5],[10,6,9],[0,5,9],[1,5,5],[2,5,5],[3,5,5],[4,5,9],[6,5,9],[7,5,5],[8,5,5],[9,5,5],[10,5,9],[0,4,8],[1,4,0],[2,4,5],[3,4,0],[4,4,8],[5,4,8],[6,4,8],[7,4,0],[8,4,5],[9,4,0],[10,4,8],[0,3,9],[1,3,5],[2,3,0],[3,3,5],[4,3,9],[6,3,9],[7,3,5],[8,3,0],[9,3,5],[10,3,9],[0,2,9],[1,2,5],[2,2,5],[3,2,5],[4,2,9],[6,2,9],[7,2,5],[8,2,5],[9,2,5],[10,2,9],[1,1,9],[2,1,9],[3,1,9],[7,1,9],[8,1,9],[9,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:293, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,8],[9,16,9],[1,15,9],[9,15,9],[1,14,9],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[9,14,9],[1,13,9],[3,13,8],[7,13,8],[9,13,9],[1,12,9],[3,12,8],[5,12,9],[7,12,8],[9,12,9],[1,11,9],[3,11,8],[5,11,9],[7,11,8],[9,11,9],[1,10,9],[3,10,8],[5,10,0],[7,10,8],[9,10,9],[1,9,9],[3,9,8],[5,9,0],[7,9,8],[9,9,9],[1,8,9],[3,8,8],[5,8,9],[7,8,8],[9,8,9],[1,7,9],[3,7,8],[5,7,9],[7,7,8],[9,7,9],[1,6,9],[3,6,8],[7,6,8],[9,6,9],[1,5,9],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[9,5,9],[1,4,9],[9,4,9],[1,3,9],[9,3,9],[1,2,9],[2,2,9],[3,2,9],[4,2,9],[5,2,9],[6,2,9],[7,2,9],[8,2,9],[9,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:294, balls: [[1,15,8],[2,15,9],[3,15,9],[4,15,9],[5,15,9],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[1,14,9],[9,14,8],[0,13,9],[1,13,9],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[9,13,8],[1,12,8],[9,12,9],[10,12,9],[1,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[9,11,9],[1,10,9],[2,10,9],[3,10,9],[4,10,9],[5,10,9],[6,10,9],[7,10,9],[8,10,9],[9,10,9],[1,9,9],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[9,9,8],[1,8,8],[9,8,8],[1,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[9,7,9],[0,6,9],[1,6,9],[9,6,9],[1,5,8],[2,5,9],[3,5,9],[4,5,9],[5,5,9],[6,5,9],[7,5,9],[8,5,9],[9,5,8]], mask_left: [[1,11],[3,11],[4,11],[5,11],[6,11],[7,11],[1,7],[3,7],[4,7],[5,7],[6,7],[7,7]], mask_right: [[3,13],[4,13],[5,13],[6,13],[7,13],[9,13],[3,9],[4,9],[5,9],[6,9],[7,9],[9,9]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:295, balls: [[0,17,8],[2,17,8],[4,17,8],[6,17,8],[8,17,8],[10,17,8],[1,16,9],[3,16,9],[5,16,9],[7,16,9],[9,16,9],[0,15,8],[2,15,8],[4,15,8],[6,15,8],[8,15,8],[10,15,8],[1,14,9],[3,14,9],[5,14,9],[7,14,9],[9,14,9],[0,13,8],[2,13,8],[4,13,8],[6,13,8],[8,13,8],[10,13,8],[1,12,9],[3,12,9],[5,12,9],[7,12,9],[9,12,9],[0,11,8],[2,11,8],[4,11,8],[6,11,8],[8,11,8],[10,11,8],[1,10,8],[3,10,8],[5,10,9],[7,10,8],[9,10,8],[0,9,8],[2,9,8],[4,9,8],[5,9,8],[6,9,8],[8,9,8],[10,9,8],[1,8,8],[3,8,8],[5,8,9],[7,8,8],[9,8,8],[0,7,8],[2,7,8],[4,7,8],[6,7,8],[8,7,8],[10,7,8],[1,6,9],[3,6,9],[5,6,9],[7,6,9],[9,6,9],[0,5,8],[2,5,8],[4,5,8],[6,5,8],[8,5,8],[10,5,8],[1,4,9],[3,4,9],[5,4,9],[7,4,9],[9,4,9],[0,3,8],[2,3,8],[4,3,8],[6,3,8],[8,3,8],[10,3,8],[1,2,9],[3,2,9],[5,2,9],[7,2,9],[9,2,9],[0,1,8],[2,1,8],[4,1,8],[6,1,8],[8,1,8],[10,1,8]], mask_left: [[0,17],[2,17],[4,17],[6,17],[8,17],[10,17],[0,15],[2,15],[4,15],[6,15],[8,15],[10,15],[0,13],[2,13],[4,13],[6,13],[8,13],[10,13],[0,11],[2,11],[4,11],[6,11],[8,11],[10,11],[0,7],[2,7],[4,7],[6,7],[8,7],[10,7],[0,5],[2,5],[4,5],[6,5],[8,5],[10,5],[0,3],[2,3],[4,3],[6,3],[8,3],[10,3],[0,1],[2,1],[4,1],[6,1],[8,1],[10,1]], mask_right: [[1,16],[3,16],[5,16],[7,16],[9,16],[1,14],[3,14],[5,14],[7,14],[9,14],[1,12],[3,12],[5,12],[7,12],[9,12],[1,6],[3,6],[5,6],[7,6],[9,6],[1,4],[3,4],[5,4],[7,4],[9,4],[1,2],[3,2],[5,2],[7,2],[9,2]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:296, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,8],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,8],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[10,16,8],[0,15,8],[1,15,8],[2,15,8],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[8,15,8],[9,15,8],[10,15,8],[0,14,8],[1,14,8],[2,14,8],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[8,14,8],[9,14,8],[10,14,8],[0,13,8],[1,13,8],[2,13,8],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[8,13,8],[9,13,8],[10,13,8],[0,12,8],[1,12,8],[2,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[8,12,8],[9,12,8],[10,12,8],[0,11,8],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[10,11,8],[0,10,8],[1,10,8],[2,10,8],[3,10,8],[4,10,8],[5,10,8],[6,10,8],[7,10,8],[8,10,8],[9,10,8],[10,10,8],[0,9,8],[1,9,8],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,8],[10,9,8],[0,8,8],[1,8,8],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[10,8,8],[0,7,8],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,8],[10,7,8],[0,6,8],[1,6,8],[2,6,8],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[8,6,8],[9,6,8],[10,6,8],[0,5,8],[1,5,8],[2,5,8],[3,5,8],[4,5,8],[5,5,8],[6,5,8],[7,5,8],[8,5,8],[9,5,8],[10,5,8],[0,4,8],[1,4,8],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,8],[10,4,8],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8],[0,2,8],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,8],[10,2,8],[0,1,8],[1,1,8],[2,1,8],[3,1,8],[4,1,8],[5,1,8],[6,1,8],[7,1,8],[8,1,8],[9,1,8],[10,1,8],[0,0,8],[1,0,8],[2,0,8],[3,0,8],[4,0,8],[5,0,8],[6,0,8],[7,0,8],[8,0,8],[9,0,8],[10,0,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:297, balls: [[0,9,9],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,8],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[10,9,9],[0,8,8],[1,8,8],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,8],[10,8,8],[0,7,8],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,8],[10,7,8],[0,6,8],[1,6,8],[2,6,8],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[8,6,8],[9,6,8],[10,6,8],[0,5,9],[1,5,8],[2,5,9],[3,5,8],[4,5,9],[5,5,8],[6,5,9],[7,5,8],[8,5,9],[9,5,8],[10,5,9],[0,4,8],[1,4,8],[2,4,8],[3,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,8],[10,4,8],[0,3,8],[1,3,8],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,8],[10,3,8],[0,2,8],[1,2,8],[2,2,8],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,8],[10,2,8],[0,1,9],[1,1,8],[2,1,9],[3,1,8],[4,1,9],[5,1,8],[6,1,9],[7,1,8],[8,1,9],[9,1,8],[10,1,9]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:298, balls: [[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,9],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[3,14,9],[4,14,3],[5,14,3],[6,14,3],[7,14,9],[2,13,8],[3,13,9],[4,13,3],[5,13,3],[6,13,3],[7,13,9],[1,12,8],[3,12,9],[4,12,3],[5,12,3],[6,12,3],[7,12,9],[1,11,8],[3,11,9],[4,11,3],[5,11,3],[6,11,3],[7,11,9],[1,10,8],[3,10,9],[4,10,3],[5,10,3],[6,10,3],[7,10,9],[1,9,8],[3,9,9],[4,9,3],[5,9,3],[6,9,3],[7,9,9],[1,8,8],[3,8,9],[4,8,9],[5,8,3],[6,8,9],[7,8,9],[1,7,8],[3,7,9],[4,7,9],[5,7,8],[6,7,9],[7,7,9],[2,6,8],[3,6,9],[4,6,8],[5,6,8],[6,6,8],[7,6,9],[3,5,9],[4,5,8],[5,5,8],[6,5,8],[7,5,9],[3,4,9],[7,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:299, balls: [[1,14,9],[2,14,9],[3,14,9],[4,14,9],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[1,13,9],[2,13,8],[3,13,5],[4,13,9],[6,13,9],[7,13,5],[8,13,8],[9,13,9],[1,12,9],[2,12,8],[3,12,5],[4,12,9],[6,12,9],[7,12,5],[8,12,8],[9,12,9],[1,11,9],[2,11,5],[3,11,8],[4,11,9],[6,11,9],[7,11,8],[8,11,5],[9,11,9],[1,10,9],[2,10,5],[3,10,8],[4,10,9],[6,10,9],[7,10,8],[8,10,5],[9,10,9],[1,9,9],[9,9,9],[1,8,9],[9,8,9],[1,7,9],[2,7,9],[3,7,9],[4,7,9],[6,7,9],[7,7,9],[8,7,9],[9,7,9],[1,6,9],[2,6,5],[3,6,8],[4,6,9],[6,6,9],[7,6,8],[8,6,5],[9,6,9],[1,5,9],[2,5,5],[3,5,8],[4,5,9],[6,5,9],[7,5,8],[8,5,5],[9,5,9],[1,4,9],[2,4,8],[3,4,5],[4,4,9],[6,4,9],[7,4,5],[8,4,8],[9,4,9],[1,3,9],[2,3,8],[3,3,5],[4,3,9],[6,3,9],[7,3,5],[8,3,8],[9,3,9],[4,2,9],[6,2,9],[4,1,9],[6,1,9],[4,0,9],[5,0,9],[6,0,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:300, balls: [[0,17,8],[1,17,8],[2,17,9],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,9],[9,17,8],[10,17,8],[0,16,2],[1,16,2],[2,16,9],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,9],[9,16,2],[10,16,2],[0,15,8],[1,15,8],[2,15,9],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[8,15,9],[9,15,8],[10,15,8],[0,14,2],[1,14,2],[2,14,9],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[8,14,9],[9,14,2],[10,14,2],[0,13,8],[1,13,8],[2,13,9],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[8,13,9],[9,13,8],[10,13,8],[0,12,2],[1,12,2],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,9],[8,12,9],[9,12,2],[10,12,2],[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[6,7,9],[8,7,9],[10,7,9],[1,6,8],[2,6,8],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[8,6,8],[9,6,8],[0,5,1],[1,5,1],[2,5,1],[3,5,1],[4,5,1],[5,5,1],[6,5,1],[7,5,1],[8,5,1],[9,5,0],[10,5,0],[0,4,8],[1,4,8],[4,4,8],[5,4,8],[6,4,8],[7,4,8],[8,4,8],[9,4,0],[10,4,0],[0,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,0],[6,2,9],[2,1,9],[3,1,9],[4,1,9],[5,1,9],[6,1,9],[7,1,9],[8,1,9],[9,1,9],[10,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:301, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[0,16,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[0,15,9],[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,9],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[0,14,9],[1,14,9],[2,14,9],[3,14,9],[4,14,9],[5,14,9],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[0,13,9],[9,13,8],[1,12,8],[2,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[8,12,8],[9,12,8],[9,11,8],[1,10,9],[2,10,9],[3,10,9],[4,10,9],[5,10,9],[6,10,9],[7,10,9],[8,10,9],[9,10,9],[10,10,9],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[10,9,9],[9,8,8],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,8],[0,6,9],[9,6,8],[0,5,9],[1,5,9],[2,5,9],[3,5,9],[4,5,9],[5,5,9],[6,5,9],[7,5,9],[8,5,9],[9,5,9],[0,4,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[0,3,9],[1,3,9],[2,3,9],[3,3,9],[4,3,9],[5,3,9],[6,3,9],[7,3,9],[8,3,9],[9,3,9],[0,2,9],[1,2,9],[2,2,9],[3,2,9],[4,2,9],[5,2,9],[6,2,9],[7,2,9],[8,2,9],[9,2,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:302, balls: [[0,16,8],[1,16,9],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,9],[10,16,8],[0,15,8],[1,15,9],[2,15,8],[3,15,8],[4,15,9],[5,15,9],[6,15,9],[7,15,8],[8,15,8],[9,15,9],[10,15,8],[0,14,8],[1,14,9],[2,14,8],[3,14,9],[4,14,2],[5,14,2],[6,14,2],[7,14,9],[8,14,8],[9,14,9],[10,14,8],[0,13,8],[1,13,9],[2,13,8],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,8],[9,13,9],[10,13,8],[0,12,8],[1,12,9],[2,12,9],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,9],[9,12,9],[10,12,8],[0,11,8],[1,11,9],[2,11,2],[3,11,2],[4,11,2],[5,11,2],[6,11,2],[7,11,2],[8,11,2],[9,11,9],[10,11,8],[0,10,8],[1,10,9],[2,10,2],[3,10,2],[4,10,2],[5,10,2],[6,10,2],[7,10,2],[8,10,2],[9,10,9],[10,10,8],[0,9,8],[1,9,9],[2,9,2],[3,9,2],[4,9,2],[5,9,2],[6,9,2],[7,9,2],[8,9,2],[9,9,9],[10,9,8],[0,8,8],[1,8,9],[2,8,2],[3,8,2],[4,8,2],[5,8,2],[6,8,2],[7,8,2],[8,8,2],[9,8,9],[10,8,8],[0,7,8],[1,7,9],[2,7,2],[3,7,2],[4,7,4],[5,7,2],[6,7,4],[7,7,2],[8,7,2],[9,7,9],[10,7,8],[0,6,8],[1,6,9],[2,6,8],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,8],[9,6,9],[10,6,8],[0,5,8],[1,5,9],[2,5,8],[3,5,8],[4,5,4],[5,5,3],[6,5,4],[7,5,8],[8,5,8],[9,5,9],[10,5,8],[0,4,8],[1,4,9],[2,4,8],[3,4,8],[4,4,8],[5,4,3],[6,4,8],[7,4,8],[8,4,8],[9,4,9],[10,4,8],[0,3,8],[1,3,9],[2,3,8],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,8],[9,3,9],[10,3,8],[0,2,8],[1,2,9],[2,2,8],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,8],[9,2,9],[10,2,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:303, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,86,104,7,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:304, balls: [[0,16,8],[1,16,8],[2,16,8],[4,16,9],[5,16,9],[6,16,9],[8,16,8],[9,16,8],[10,16,8],[1,15,8],[3,15,9],[4,15,8],[5,15,7],[6,15,8],[7,15,9],[9,15,8],[1,14,9],[2,14,9],[3,14,8],[4,14,8],[5,14,7],[6,14,8],[7,14,8],[8,14,9],[9,14,9],[1,13,9],[2,13,9],[3,13,8],[4,13,8],[5,13,7],[6,13,8],[7,13,8],[8,13,9],[9,13,9],[1,12,9],[2,12,8],[3,12,8],[4,12,8],[5,12,7],[6,12,8],[7,12,8],[8,12,8],[9,12,9],[1,11,9],[2,11,8],[3,11,8],[4,11,8],[5,11,7],[6,11,8],[7,11,8],[8,11,8],[9,11,9],[1,10,9],[2,10,8],[3,10,7],[4,10,7],[5,10,9],[6,10,8],[7,10,8],[8,10,8],[9,10,9],[1,9,9],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,9],[1,8,9],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[9,8,9],[2,7,9],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,9],[2,6,9],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[8,6,9],[0,5,3],[2,5,9],[3,5,9],[4,5,8],[5,5,8],[6,5,8],[7,5,9],[8,5,9],[10,5,3],[0,4,3],[1,4,3],[2,4,9],[4,4,3],[5,4,3],[6,4,3],[8,4,9],[9,4,3],[10,4,3],[0,3,9],[1,3,3],[2,3,3],[3,3,3],[7,3,3],[8,3,3],[9,3,3],[10,3,9],[0,2,3],[1,2,9],[2,2,3],[3,2,3],[5,2,9],[7,2,3],[8,2,3],[9,2,9],[10,2,3],[1,1,3],[2,1,9],[8,1,9],[9,1,3]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:305, balls: [[1,16,9],[2,16,9],[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[1,15,9],[9,15,8],[1,14,9],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[9,14,8],[1,13,9],[9,13,8],[1,12,9],[2,12,9],[3,12,9],[4,12,9],[5,12,9],[6,12,9],[7,12,8],[8,12,8],[9,12,9],[1,11,8],[9,11,9],[1,10,8],[3,10,8],[4,10,8],[5,10,8],[6,10,8],[7,10,8],[9,10,9],[1,9,8],[9,9,9],[0,8,9],[1,8,9],[2,8,9],[3,8,9],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[1,7,8],[9,7,9],[1,6,8],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[9,6,9],[1,5,8],[9,5,9],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,9],[6,4,9],[7,4,9],[8,4,9],[9,4,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:306, balls: [[0,17,9],[2,17,9],[4,17,9],[6,17,9],[8,17,9],[10,17,9],[0,16,8],[2,16,8],[4,16,8],[6,16,8],[8,16,8],[10,16,8],[0,15,9],[2,15,9],[4,15,9],[6,15,9],[8,15,9],[10,15,9],[1,13,9],[3,13,9],[5,13,9],[7,13,9],[9,13,9],[1,12,8],[3,12,8],[5,12,8],[7,12,8],[9,12,8],[1,11,9],[3,11,9],[5,11,9],[7,11,9],[9,11,9],[0,9,9],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[10,9,9],[1,7,9],[3,7,9],[5,7,9],[7,7,9],[9,7,9],[1,6,8],[3,6,8],[5,6,8],[7,6,8],[9,6,8],[1,5,9],[3,5,9],[5,5,9],[7,5,9],[9,5,9],[0,3,9],[2,3,9],[4,3,9],[6,3,9],[8,3,9],[10,3,9],[0,2,8],[2,2,8],[4,2,8],[6,2,8],[8,2,8],[10,2,8],[0,1,9],[2,1,9],[4,1,9],[6,1,9],[8,1,9],[10,1,9]], mask_left: [[0,9]], mask_right: [[10,9]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:307, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,8],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[5,16,8],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,8],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[1,14,9],[2,14,9],[3,14,9],[4,14,9],[5,14,8],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[1,13,9],[2,13,8],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[8,13,8],[9,13,9],[1,12,9],[2,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[8,12,8],[9,12,9],[1,11,9],[2,11,9],[3,11,9],[4,11,9],[5,11,8],[6,11,9],[7,11,9],[8,11,9],[9,11,9],[1,10,9],[2,10,9],[3,10,9],[4,10,9],[5,10,8],[6,10,9],[7,10,9],[8,10,9],[9,10,9],[1,9,9],[2,9,9],[3,9,9],[4,9,8],[5,9,8],[6,9,8],[7,9,9],[8,9,9],[9,9,9],[1,8,9],[2,8,9],[3,8,8],[4,8,0],[5,8,0],[6,8,0],[7,8,8],[8,8,9],[9,8,9],[1,7,9],[2,7,8],[3,7,0],[4,7,0],[5,7,0],[6,7,0],[7,7,0],[8,7,8],[9,7,9],[1,6,9],[2,6,8],[3,6,0],[4,6,0],[5,6,0],[6,6,0],[7,6,0],[8,6,8],[9,6,9],[1,5,9],[2,5,8],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,8],[9,5,9],[1,4,9],[2,4,8],[3,4,0],[4,4,0],[5,4,0],[6,4,0],[7,4,0],[8,4,8],[9,4,9],[1,3,9],[2,3,9],[3,3,8],[4,3,0],[5,3,0],[6,3,0],[7,3,8],[8,3,9],[9,3,9],[1,2,9],[2,2,9],[3,2,9],[4,2,8],[5,2,8],[6,2,8],[7,2,9],[8,2,9],[9,2,9],[1,1,9],[2,1,9],[3,1,9],[4,1,9],[5,1,9],[6,1,9],[7,1,9],[8,1,9],[9,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:308, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,9],[2,16,9],[3,16,9],[4,16,8],[5,16,8],[6,16,8],[7,16,9],[8,16,9],[9,16,9],[1,15,9],[2,15,9],[3,15,8],[4,15,0],[5,15,0],[6,15,0],[7,15,8],[8,15,9],[9,15,9],[1,14,9],[2,14,8],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,8],[9,14,9],[1,13,9],[2,13,8],[3,13,0],[4,13,0],[5,13,0],[6,13,0],[7,13,0],[8,13,8],[9,13,9],[1,12,9],[2,12,8],[3,12,0],[4,12,0],[5,12,0],[6,12,0],[7,12,0],[8,12,8],[9,12,9],[1,11,9],[2,11,8],[3,11,8],[4,11,0],[5,11,0],[6,11,0],[7,11,8],[8,11,8],[9,11,9],[1,10,9],[2,10,9],[3,10,8],[4,10,0],[5,10,0],[6,10,0],[7,10,8],[8,10,9],[9,10,9],[1,9,9],[2,9,9],[3,9,9],[4,9,8],[5,9,8],[6,9,8],[7,9,9],[8,9,9],[9,9,9],[1,8,9],[2,8,9],[3,8,9],[4,8,9],[5,8,8],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[1,7,9],[2,7,9],[3,7,9],[4,7,9],[5,7,8],[6,7,9],[7,7,9],[8,7,9],[9,7,9],[1,6,9],[2,6,9],[3,6,9],[4,6,9],[5,6,8],[6,6,9],[7,6,9],[8,6,9],[9,6,9],[1,5,9],[2,5,8],[3,5,9],[4,5,9],[5,5,8],[6,5,9],[7,5,9],[8,5,8],[9,5,9],[1,4,9],[2,4,8],[3,4,8],[4,4,9],[5,4,8],[6,4,9],[7,4,8],[8,4,8],[9,4,9],[1,3,9],[2,3,9],[3,3,8],[4,3,8],[5,3,8],[6,3,8],[7,3,8],[8,3,9],[9,3,9],[1,2,9],[2,2,9],[3,2,9],[4,2,8],[5,2,8],[6,2,8],[7,2,9],[8,2,9],[9,2,9],[1,1,9],[2,1,9],[3,1,9],[4,1,9],[5,1,8],[6,1,9],[7,1,9],[8,1,9],[9,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:309, balls: [[4,17,9],[6,17,9],[5,16,9],[5,15,9],[5,14,9],[4,13,9],[5,13,9],[6,13,9],[1,12,9],[2,12,9],[3,12,9],[4,12,8],[5,12,8],[6,12,8],[7,12,9],[8,12,9],[9,12,9],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[1,10,9],[2,10,9],[3,10,9],[4,10,8],[5,10,8],[6,10,8],[7,10,9],[8,10,9],[9,10,9],[1,9,8],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,8],[1,8,9],[2,8,9],[3,8,9],[4,8,8],[5,8,8],[6,8,8],[7,8,9],[8,8,9],[9,8,9],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,8],[1,6,9],[2,6,9],[3,6,9],[4,6,8],[5,6,8],[6,6,8],[7,6,9],[8,6,9],[9,6,9],[4,5,9],[5,5,9],[6,5,9],[5,4,9],[5,3,9],[5,2,9],[4,1,9],[6,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:310, balls: [[0,17,9],[1,17,9],[2,17,9],[4,17,9],[5,17,9],[6,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,8],[2,16,8],[4,16,8],[6,16,8],[8,16,8],[10,16,8],[0,15,9],[1,15,9],[3,15,9],[4,15,9],[5,15,9],[6,15,9],[7,15,9],[9,15,9],[10,15,9],[1,14,8],[3,14,8],[5,14,8],[7,14,8],[9,14,8],[0,13,9],[2,13,9],[3,13,9],[4,13,9],[5,13,9],[6,13,9],[7,13,9],[8,13,9],[10,13,9],[0,12,8],[2,12,8],[4,12,8],[6,12,8],[8,12,8],[10,12,8],[1,11,9],[2,11,9],[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[8,11,9],[9,11,9],[1,10,8],[3,10,8],[5,10,8],[7,10,8],[9,10,8],[0,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[10,9,9],[0,8,8],[2,8,8],[4,8,8],[6,8,8],[8,8,8],[10,8,8],[0,7,9],[1,7,9],[3,7,9],[4,7,9],[5,7,9],[6,7,9],[7,7,9],[9,7,9],[10,7,9],[1,6,8],[3,6,8],[5,6,8],[7,6,8],[9,6,8],[0,5,9],[1,5,9],[2,5,9],[4,5,9],[5,5,9],[6,5,9],[8,5,9],[9,5,9],[10,5,9],[0,4,8],[2,4,8],[4,4,8],[6,4,8],[8,4,8],[10,4,8],[0,3,9],[1,3,9],[2,3,9],[3,3,9],[5,3,9],[7,3,9],[8,3,9],[9,3,9],[10,3,9],[1,2,8],[3,2,8],[5,2,8],[7,2,8],[9,2,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:311, balls: [[2,15,9],[3,15,8],[4,15,9],[5,15,8],[6,15,9],[7,15,8],[8,15,9],[2,14,9],[3,14,8],[4,14,9],[5,14,8],[6,14,9],[7,14,8],[8,14,9],[2,13,9],[3,13,9],[4,13,9],[5,13,9],[6,13,9],[7,13,9],[8,13,9],[2,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[8,12,8],[2,11,9],[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[8,11,9],[2,10,8],[3,10,8],[4,10,8],[5,10,8],[6,10,8],[7,10,8],[8,10,8],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[2,8,8],[3,8,8],[4,8,8],[5,8,8],[6,8,8],[7,8,8],[8,8,8],[2,7,9],[3,7,9],[4,7,9],[5,7,9],[6,7,9],[7,7,9],[8,7,9],[2,6,8],[3,6,8],[4,6,8],[5,6,8],[6,6,8],[7,6,8],[8,6,8],[2,5,9],[3,5,9],[4,5,9],[5,5,9],[6,5,9],[7,5,9],[8,5,9],[2,4,9],[3,4,8],[4,4,9],[5,4,8],[6,4,9],[7,4,8],[8,4,9],[2,3,9],[3,3,8],[4,3,9],[5,3,8],[6,3,9],[7,3,8],[8,3,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:312, balls: [[3,16,9],[4,16,9],[5,16,9],[6,16,9],[7,16,9],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[2,14,9],[3,14,8],[4,14,8],[5,14,8],[6,14,8],[7,14,8],[8,14,9],[2,13,9],[3,13,9],[4,13,9],[5,13,9],[6,13,9],[7,13,9],[8,13,9],[2,12,8],[3,12,8],[4,12,8],[5,12,8],[6,12,8],[7,12,8],[8,12,8],[1,11,9],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,9],[1,10,9],[2,10,9],[3,10,9],[4,10,9],[5,10,9],[6,10,9],[7,10,9],[8,10,9],[9,10,9],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,9],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[2,8,9],[3,8,8],[4,8,9],[5,8,8],[6,8,9],[7,8,8],[8,8,9],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[2,6,9],[3,6,8],[4,6,9],[5,6,8],[6,6,9],[7,6,8],[8,6,9],[3,5,9],[4,5,8],[5,5,8],[6,5,8],[7,5,9],[3,4,9],[4,4,9],[5,4,8],[6,4,9],[7,4,9],[3,3,9],[4,3,8],[5,3,8],[6,3,8],[7,3,9],[4,2,9],[5,2,8],[6,2,9],[5,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:313, balls: [[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[0,15,9],[1,15,8],[2,15,8],[3,15,8],[4,15,8],[5,15,8],[6,15,8],[7,15,8],[8,15,8],[9,15,8],[10,15,9],[1,14,9],[2,14,8],[3,14,9],[4,14,8],[5,14,9],[6,14,8],[7,14,9],[8,14,8],[9,14,9],[0,13,9],[1,13,8],[2,13,8],[3,13,8],[4,13,8],[5,13,8],[6,13,8],[7,13,8],[8,13,8],[9,13,8],[10,13,9],[1,12,9],[2,12,8],[3,12,9],[4,12,8],[5,12,9],[6,12,8],[7,12,9],[8,12,8],[9,12,9],[0,11,9],[1,11,8],[2,11,8],[3,11,8],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[10,11,9],[1,10,9],[2,10,8],[3,10,9],[4,10,8],[5,10,9],[6,10,8],[7,10,9],[8,10,8],[9,10,9],[0,9,9],[1,9,8],[2,9,8],[3,9,8],[4,9,8],[5,9,8],[6,9,8],[7,9,8],[8,9,8],[9,9,8],[10,9,9],[1,8,9],[2,8,8],[3,8,9],[4,8,8],[5,8,9],[6,8,8],[7,8,9],[8,8,8],[9,8,9],[0,7,9],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,8],[8,7,8],[9,7,8],[10,7,9],[1,6,9],[2,6,8],[3,6,9],[4,6,8],[5,6,9],[6,6,8],[7,6,9],[8,6,8],[9,6,9],[2,5,9],[4,5,9],[6,5,9],[8,5,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:314, balls: [[0,17,9],[1,17,9],[2,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,8],[1,16,8],[9,16,8],[10,16,8],[0,15,8],[6,15,9],[10,15,8],[5,14,9],[6,14,8],[7,14,9],[4,13,9],[5,13,8],[6,13,8],[7,13,8],[8,13,9],[4,12,8],[5,12,9],[6,12,8],[7,12,8],[8,12,8],[9,12,8],[2,11,9],[3,11,8],[4,11,8],[5,11,8],[6,11,9],[7,11,8],[8,11,9],[9,11,8],[1,10,9],[2,10,8],[3,10,9],[4,10,8],[5,10,8],[6,10,8],[7,10,9],[8,10,8],[9,10,8],[0,9,9],[1,9,8],[2,9,8],[3,9,8],[4,9,9],[5,9,8],[6,9,8],[7,9,8],[8,9,9],[9,9,8],[0,8,8],[1,8,9],[2,8,8],[3,8,8],[4,8,8],[5,8,9],[6,8,8],[7,8,8],[8,8,8],[9,8,9],[0,7,8],[1,7,8],[2,7,9],[3,7,8],[4,7,8],[5,7,8],[6,7,9],[7,7,8],[8,7,9],[0,6,8],[1,6,9],[2,6,8],[3,6,9],[4,6,8],[5,6,8],[6,6,8],[7,6,9],[0,5,8],[1,5,8],[2,5,8],[3,5,8],[4,5,9],[5,5,8],[1,4,9],[2,4,8],[3,4,8],[4,4,8],[5,4,9],[2,3,9],[3,3,8],[4,3,9],[0,2,9],[3,2,9],[10,2,9],[0,1,8],[1,1,9],[9,1,9],[10,1,8],[0,0,8],[1,0,8],[2,0,8],[8,0,8],[9,0,8],[10,0,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:315, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,8],[5,16,8],[6,16,9],[10,16,9],[0,15,9],[4,15,9],[5,15,8],[10,15,8],[0,14,9],[1,14,9],[2,14,9],[3,14,9],[4,14,9],[5,14,9],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[10,14,9],[0,13,9],[4,13,9],[5,13,8],[10,13,8],[0,12,8],[5,12,8],[6,12,9],[10,12,9],[0,11,9],[1,11,9],[2,11,9],[3,11,9],[4,11,9],[5,11,9],[6,11,9],[7,11,9],[8,11,9],[9,11,9],[10,11,9],[0,10,8],[5,10,8],[6,10,9],[10,10,9],[0,9,9],[4,9,9],[5,9,8],[10,9,8],[0,8,9],[1,8,9],[2,8,9],[3,8,9],[4,8,9],[5,8,9],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[10,8,9],[0,7,9],[4,7,9],[5,7,8],[10,7,8],[0,6,8],[5,6,8],[6,6,9],[10,6,9],[0,5,9],[1,5,9],[2,5,9],[3,5,9],[4,5,9],[5,5,9],[6,5,9],[7,5,9],[8,5,9],[9,5,9],[10,5,9],[0,4,8],[5,4,8],[6,4,9],[10,4,9],[0,3,9],[4,3,9],[5,3,8],[10,3,8],[0,2,9],[1,2,9],[2,2,9],[3,2,9],[4,2,9],[5,2,9],[6,2,9],[7,2,9],[8,2,9],[9,2,9],[10,2,9],[0,1,9],[4,1,9],[5,1,8],[10,1,8],[0,0,8],[5,0,8],[6,0,9],[10,0,9]], mask_left: [[0,17],[0,11],[0,5]], mask_right: [[10,14],[10,8],[10,2]], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:316, balls: [[3,17,9],[4,17,9],[5,17,9],[6,17,9],[7,17,9],[2,16,9],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,9],[2,15,9],[3,15,8],[4,15,9],[5,15,9],[6,15,9],[7,15,8],[8,15,9],[2,14,9],[3,14,8],[4,14,9],[5,14,8],[6,14,9],[7,14,8],[8,14,9],[1,13,9],[2,13,8],[3,13,8],[4,13,9],[5,13,8],[6,13,9],[7,13,8],[8,13,8],[9,13,9],[1,12,8],[2,12,8],[3,12,9],[4,12,8],[5,12,8],[6,12,8],[7,12,9],[8,12,8],[9,12,8],[10,12,9],[0,11,9],[1,11,8],[2,11,8],[3,11,9],[4,11,8],[5,11,8],[6,11,8],[7,11,8],[8,11,8],[9,11,8],[10,11,9],[0,10,9],[1,10,9],[2,10,9],[3,10,9],[4,10,8],[5,10,8],[6,10,8],[7,10,9],[8,10,9],[9,10,9],[10,10,9],[0,9,8],[1,9,8],[2,9,8],[3,9,8],[4,9,8],[5,9,9],[6,9,8],[7,9,8],[8,9,8],[9,9,8],[10,9,8],[0,8,9],[1,8,9],[2,8,9],[3,8,9],[4,8,8],[5,8,8],[6,8,8],[7,8,9],[8,8,9],[9,8,9],[10,8,9],[0,7,9],[1,7,8],[2,7,8],[3,7,8],[4,7,8],[5,7,8],[6,7,8],[7,7,9],[8,7,8],[9,7,8],[10,7,9],[0,6,9],[1,6,8],[2,6,8],[3,6,9],[4,6,8],[5,6,8],[6,6,8],[7,6,9],[8,6,8],[9,6,8],[1,5,9],[2,5,8],[3,5,8],[4,5,9],[5,5,9],[6,5,9],[7,5,8],[8,5,8],[9,5,9],[2,4,9],[3,4,8],[4,4,9],[5,4,8],[6,4,9],[7,4,8],[8,4,9],[2,3,9],[3,3,8],[4,3,9],[5,3,8],[6,3,9],[7,3,8],[8,3,9],[2,2,9],[3,2,8],[4,2,8],[5,2,8],[6,2,8],[7,2,8],[8,2,9],[3,1,9],[4,1,9],[5,1,9],[6,1,9],[7,1,9]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:317, balls: [[0,17,9],[1,17,9],[2,17,9],[3,17,9],[4,17,9],[5,17,8],[6,17,9],[7,17,9],[8,17,9],[9,17,9],[10,17,9],[0,16,9],[1,16,9],[2,16,9],[3,16,9],[4,16,9],[5,16,8],[6,16,9],[7,16,9],[8,16,9],[9,16,9],[10,16,9],[0,15,9],[1,15,9],[2,15,9],[3,15,9],[4,15,9],[5,15,8],[6,15,9],[7,15,9],[8,15,9],[9,15,9],[10,15,9],[0,14,9],[1,14,9],[2,14,9],[3,14,9],[4,14,9],[5,14,8],[6,14,9],[7,14,9],[8,14,9],[9,14,9],[10,14,9],[0,13,9],[1,13,9],[2,13,9],[3,13,9],[4,13,9],[5,13,8],[6,13,9],[7,13,9],[8,13,9],[9,13,9],[10,13,9],[0,12,9],[1,12,9],[2,12,9],[3,12,9],[4,12,9],[5,12,8],[6,12,9],[7,12,9],[8,12,9],[9,12,9],[10,12,9],[0,11,9],[1,11,9],[2,11,9],[3,11,9],[4,11,9],[5,11,8],[6,11,9],[7,11,9],[8,11,9],[9,11,9],[10,11,9],[0,10,9],[1,10,9],[2,10,9],[3,10,9],[4,10,9],[5,10,8],[6,10,9],[7,10,9],[8,10,9],[9,10,9],[10,10,9],[0,9,9],[1,9,9],[2,9,9],[3,9,9],[4,9,9],[5,9,8],[6,9,9],[7,9,9],[8,9,9],[9,9,9],[10,9,9],[0,8,9],[1,8,9],[2,8,9],[3,8,9],[4,8,9],[5,8,8],[6,8,9],[7,8,9],[8,8,9],[9,8,9],[10,8,9],[0,7,9],[1,7,9],[2,7,9],[3,7,9],[4,7,9],[5,7,8],[6,7,9],[7,7,9],[8,7,9],[9,7,9],[10,7,9],[0,6,9],[1,6,9],[2,6,9],[3,6,9],[4,6,9],[5,6,8],[6,6,9],[7,6,9],[8,6,9],[9,6,9],[10,6,9],[0,5,9],[1,5,9],[2,5,9],[3,5,9],[4,5,9],[5,5,8],[6,5,9],[7,5,9],[8,5,9],[9,5,9],[10,5,9],[0,4,8],[1,4,9],[2,4,9],[3,4,9],[4,4,9],[5,4,8],[6,4,9],[7,4,9],[8,4,9],[9,4,9],[10,4,8],[0,3,8],[1,3,8],[2,3,9],[3,3,9],[4,3,9],[5,3,8],[6,3,9],[7,3,9],[8,3,9],[9,3,8],[10,3,8],[0,2,8],[1,2,8],[2,2,8],[3,2,9],[4,2,9],[5,2,8],[6,2,9],[7,2,9],[8,2,8],[9,2,8],[10,2,8],[0,1,8],[1,1,8],[2,1,8],[3,1,8],[4,1,9],[5,1,8],[6,1,9],[7,1,8],[8,1,8],[9,1,8],[10,1,8],[0,0,8],[1,0,8],[2,0,8],[3,0,8],[4,0,8],[5,0,8],[6,0,8],[7,0,8],[8,0,8],[9,0,8],[10,0,8]], mask_left: [], mask_right: [], option: [1,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:318, balls: [[0,17,8],[1,17,8],[2,17,8],[3,17,8],[4,17,8],[5,17,8],[6,17,8],[7,17,8],[8,17,8],[9,17,8],[10,17,8],[0,16,8],[1,16,8],[2,16,8],[3,16,8],[4,16,8],[5,16,8],[6,16,8],[7,16,8],[8,16,8],[9,16,8],[10,16,8],[0,15,8],[1,15,7],[2,15,8],[3,15,8],[4,15,8],[5,15,7],[6,15,8],[7,15,8],[8,15,8],[9,15,7],[10,15,8],[0,14,7],[1,14,8],[2,14,7],[3,14,8],[4,14,7],[5,14,8],[6,14,7],[7,14,8],[8,14,7],[9,14,8],[10,14,7],[0,13,8],[1,13,8],[2,13,6],[3,13,8],[4,13,6],[5,13,8],[6,13,6],[7,13,8],[8,13,6],[9,13,8],[10,13,6],[0,12,8],[1,12,8],[2,12,6],[3,12,8],[4,12,6],[5,12,8],[6,12,6],[7,12,8],[8,12,6],[9,12,8],[10,12,6],[0,11,8],[1,11,8],[2,11,5],[3,11,8],[4,11,5],[5,11,8],[6,11,5],[7,11,8],[8,11,5],[9,11,8],[10,11,5],[0,10,8],[1,10,8],[2,10,5],[3,10,8],[4,10,5],[5,10,8],[6,10,5],[7,10,8],[8,10,5],[9,10,8],[10,10,5],[0,9,8],[1,9,8],[2,9,4],[3,9,8],[4,9,4],[5,9,8],[6,9,4],[7,9,8],[8,9,4],[9,9,8],[10,9,4],[0,8,8],[1,8,4],[2,8,8],[3,8,8],[4,8,4],[5,8,8],[6,8,4],[7,8,8],[8,8,4],[9,8,8],[10,8,4],[0,7,8],[1,7,8],[2,7,3],[3,7,8],[4,7,3],[5,7,8],[6,7,3],[7,7,8],[8,7,3],[9,7,8],[10,7,3],[0,6,8],[1,6,8],[2,6,3],[3,6,8],[4,6,3],[5,6,8],[6,6,3],[7,6,8],[8,6,3],[9,6,8],[10,6,3],[0,5,8],[1,5,8],[2,5,2],[3,5,8],[4,5,2],[5,5,8],[6,5,2],[7,5,8],[8,5,2],[9,5,8],[10,5,2],[0,4,8],[1,4,8],[2,4,2],[3,4,8],[4,4,2],[5,4,8],[6,4,2],[7,4,8],[8,4,2],[9,4,8],[10,4,2],[0,3,1],[1,3,8],[2,3,1],[3,3,8],[4,3,1],[5,3,8],[6,3,1],[7,3,8],[8,3,1],[9,3,8],[10,3,1],[0,2,8],[1,2,1],[2,2,8],[3,2,8],[4,2,8],[5,2,1],[6,2,8],[7,2,8],[8,2,8],[9,2,1],[10,2,8],[0,1,8],[1,1,8],[2,1,8],[3,1,8],[4,1,8],[5,1,8],[6,1,8],[7,1,8],[8,1,8],[9,1,8],[10,1,8],[0,0,8],[1,0,8],[2,0,8],[3,0,8],[4,0,8],[5,0,8],[6,0,8],[7,0,8],[8,0,8],[9,0,8],[10,0,8]], mask_left: [], mask_right: [], option: [0,0,0,0,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},
	{ id:319, balls: [[0,17,0],[1,17,0],[2,17,0],[3,17,0],[4,17,0],[5,17,0],[6,17,0],[7,17,0],[8,17,0],[9,17,0],[10,17,0],[0,16,1],[1,16,1],[2,16,1],[3,16,1],[4,16,1],[5,16,1],[6,16,1],[7,16,1],[8,16,1],[9,16,1],[10,16,1],[0,15,1],[1,15,1],[2,15,1],[3,15,1],[4,15,1],[5,15,1],[6,15,1],[7,15,1],[8,15,1],[9,15,1],[10,15,1],[0,14,0],[1,14,0],[2,14,0],[3,14,0],[4,14,0],[5,14,0],[6,14,0],[7,14,0],[8,14,0],[9,14,0],[10,14,0],[0,13,2],[1,13,2],[2,13,2],[3,13,2],[4,13,2],[5,13,2],[6,13,2],[7,13,2],[8,13,2],[9,13,2],[10,13,2],[0,12,2],[1,12,2],[2,12,2],[3,12,2],[4,12,2],[5,12,2],[6,12,2],[7,12,2],[8,12,2],[9,12,2],[10,12,2],[0,11,0],[1,11,0],[2,11,0],[3,11,0],[4,11,0],[5,11,0],[6,11,0],[7,11,0],[8,11,0],[9,11,0],[10,11,0],[0,10,3],[1,10,3],[2,10,3],[3,10,3],[4,10,3],[5,10,3],[6,10,3],[7,10,3],[8,10,3],[9,10,3],[10,10,3],[0,9,3],[1,9,3],[2,9,3],[3,9,3],[4,9,3],[5,9,3],[6,9,3],[7,9,3],[8,9,3],[9,9,3],[10,9,3],[0,8,0],[1,8,0],[2,8,0],[3,8,0],[4,8,0],[5,8,0],[6,8,0],[7,8,0],[8,8,0],[9,8,0],[10,8,0],[0,7,4],[1,7,4],[2,7,4],[3,7,4],[4,7,4],[5,7,4],[6,7,4],[7,7,4],[8,7,4],[9,7,4],[10,7,4],[0,6,4],[1,6,4],[2,6,4],[3,6,4],[4,6,4],[5,6,4],[6,6,4],[7,6,4],[8,6,4],[9,6,4],[10,6,4],[0,5,0],[1,5,0],[2,5,0],[3,5,0],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,0],[9,5,0],[10,5,0],[0,4,5],[1,4,5],[2,4,5],[3,4,5],[4,4,5],[5,4,5],[6,4,5],[7,4,5],[8,4,5],[9,4,5],[10,4,5],[0,3,5],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5],[6,3,5],[7,3,5],[8,3,5],[9,3,5],[10,3,5],[0,2,0],[1,2,0],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,0],[0,1,6],[1,1,6],[2,1,6],[3,1,6],[4,1,6],[5,1,6],[6,1,6],[7,1,6],[8,1,6],[9,1,6],[10,1,6],[0,0,6],[1,0,6],[2,0,6],[3,0,6],[4,0,6],[5,0,6],[6,0,6],[7,0,6],[8,0,6],[9,0,6],[10,0,6]], mask_left: [], mask_right: [], option: [2,90,108,5,0,0], items: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
];


var _imgPath = "./atlas/shop/";

var PngList =[
    {name:"white1x1",  url:"assets/png/white1x1.png"},
    {name:"white1x1alpha1",url:"assets/png/white1x1alpha1.png"},
    {name:"all.png",url:"assets/png/all.png"},
    // //-----------상점이미지이동
    {name:_imgPath+"btn_close.png",  url:_imgPath+"btn_close.png"},
    {name:_imgPath+"btn_ok.png",     url:_imgPath+"btn_ok.png"},
    {name:_imgPath+"btn_shop_1.png", url:_imgPath+"btn_shop_1.png"},
    {name:_imgPath+"icon_0001.png", url:_imgPath+"icon_0001.png"},
    {name:_imgPath+"icon_0002.png", url:_imgPath+"icon_0002.png"},
    {name:_imgPath+"icon_0003.png", url:_imgPath+"icon_0003.png"},
    {name:_imgPath+"icon_0004.png", url:_imgPath+"icon_0004.png"},
    {name:_imgPath+"icon_0005.png", url:_imgPath+"icon_0005.png"},
    {name:_imgPath+"icon_0006.png", url:_imgPath+"icon_0006.png"},
    {name:_imgPath+"icon_0007.png", url:_imgPath+"icon_0007.png"},
    {name:_imgPath+"icon_0008.png", url:_imgPath+"icon_0008.png"},
    {name:_imgPath+"icon_0009.png", url:_imgPath+"icon_0009.png"},
    {name:_imgPath+"icon_0010.png", url:_imgPath+"icon_0010.png"},
    {name:_imgPath+"icon_0011.png", url:_imgPath+"icon_0011.png"},
    {name:_imgPath+"icon_0012.png", url:_imgPath+"icon_0012.png"},
    {name:_imgPath+"icon_0015.png", url:_imgPath+"icon_0015.png"},
    {name:_imgPath+"list_1.png", url:_imgPath+"list_1.png"},
    {name:_imgPath+"point_bg_naver.png", url:_imgPath+"point_bg_naver.png"},
    {name:_imgPath+"popup_green.png", url:_imgPath+"popup_green.png"},
    {name:_imgPath+"shop_naver_film.png", url:_imgPath+"shop_naver_film.png"},
    {name:_imgPath+"shop_naver_info.png", url:_imgPath+"shop_naver_info.png"},
    {name:_imgPath+"white1x1.png", url:_imgPath+"white1x1.png"}
    // //-----------상점이미지이동
];

var PngList_minimap = [
    {name:"001.png", url:"assets/png_minimap/001.png"},
    {name:"002.png", url:"assets/png_minimap/002.png"},
    {name:"003.png", url:"assets/png_minimap/003.png"},
    {name:"004.png", url:"assets/png_minimap/004.png"},
    {name:"005.png", url:"assets/png_minimap/005.png"},
    {name:"006.png", url:"assets/png_minimap/006.png"},
    {name:"007.png", url:"assets/png_minimap/007.png"},
    {name:"008.png", url:"assets/png_minimap/008.png"},
    {name:"009.png", url:"assets/png_minimap/009.png"},
    {name:"010.png", url:"assets/png_minimap/010.png"},
    {name:"011.png", url:"assets/png_minimap/011.png"},
    {name:"012.png", url:"assets/png_minimap/012.png"},
    {name:"013.png", url:"assets/png_minimap/013.png"},
    {name:"014.png", url:"assets/png_minimap/014.png"},
    {name:"015.png", url:"assets/png_minimap/015.png"},
    {name:"016.png", url:"assets/png_minimap/016.png"},
    {name:"017.png", url:"assets/png_minimap/017.png"},
    {name:"018.png", url:"assets/png_minimap/018.png"},
    {name:"019.png", url:"assets/png_minimap/019.png"},
    {name:"020.png", url:"assets/png_minimap/020.png"},
    {name:"021.png", url:"assets/png_minimap/021.png"},
    {name:"022.png", url:"assets/png_minimap/022.png"},
    {name:"023.png", url:"assets/png_minimap/023.png"},
    {name:"024.png", url:"assets/png_minimap/024.png"},
    {name:"025.png", url:"assets/png_minimap/025.png"},
    {name:"026.png", url:"assets/png_minimap/026.png"},
    {name:"027.png", url:"assets/png_minimap/027.png"},
    {name:"028.png", url:"assets/png_minimap/028.png"},
    {name:"029.png", url:"assets/png_minimap/029.png"},
    {name:"030.png", url:"assets/png_minimap/030.png"},
    {name:"031.png", url:"assets/png_minimap/031.png"},
    {name:"032.png", url:"assets/png_minimap/032.png"},
    {name:"033.png", url:"assets/png_minimap/033.png"},
    {name:"034.png", url:"assets/png_minimap/034.png"},
    {name:"035.png", url:"assets/png_minimap/035.png"},
    {name:"036.png", url:"assets/png_minimap/036.png"},
    {name:"037.png", url:"assets/png_minimap/037.png"},
    {name:"038.png", url:"assets/png_minimap/038.png"},
    {name:"039.png", url:"assets/png_minimap/039.png"},
    {name:"040.png", url:"assets/png_minimap/040.png"},
    {name:"041.png", url:"assets/png_minimap/041.png"},
    {name:"042.png", url:"assets/png_minimap/042.png"},
    {name:"043.png", url:"assets/png_minimap/043.png"},
    {name:"044.png", url:"assets/png_minimap/044.png"},
    {name:"045.png", url:"assets/png_minimap/045.png"},
    {name:"046.png", url:"assets/png_minimap/046.png"},
    {name:"047.png", url:"assets/png_minimap/047.png"},
    {name:"048.png", url:"assets/png_minimap/048.png"},
    {name:"049.png", url:"assets/png_minimap/049.png"},
    {name:"050.png", url:"assets/png_minimap/050.png"},
    {name:"051.png", url:"assets/png_minimap/051.png"},
    {name:"052.png", url:"assets/png_minimap/052.png"},
    {name:"053.png", url:"assets/png_minimap/053.png"},
    {name:"054.png", url:"assets/png_minimap/054.png"},
    {name:"055.png", url:"assets/png_minimap/055.png"},
    {name:"056.png", url:"assets/png_minimap/056.png"},
    {name:"057.png", url:"assets/png_minimap/057.png"},
    {name:"058.png", url:"assets/png_minimap/058.png"},
    {name:"059.png", url:"assets/png_minimap/059.png"},
    {name:"060.png", url:"assets/png_minimap/060.png"},
    {name:"061.png", url:"assets/png_minimap/061.png"},
    {name:"062.png", url:"assets/png_minimap/062.png"},
    {name:"063.png", url:"assets/png_minimap/063.png"},
    {name:"064.png", url:"assets/png_minimap/064.png"},
    {name:"065.png", url:"assets/png_minimap/065.png"},
    {name:"066.png", url:"assets/png_minimap/066.png"},
    {name:"067.png", url:"assets/png_minimap/067.png"},
    {name:"068.png", url:"assets/png_minimap/068.png"},
    {name:"069.png", url:"assets/png_minimap/069.png"},
    {name:"070.png", url:"assets/png_minimap/070.png"},
    {name:"071.png", url:"assets/png_minimap/071.png"},
    {name:"072.png", url:"assets/png_minimap/072.png"},
    {name:"073.png", url:"assets/png_minimap/073.png"},
    {name:"074.png", url:"assets/png_minimap/074.png"},
    {name:"075.png", url:"assets/png_minimap/075.png"},
    {name:"076.png", url:"assets/png_minimap/076.png"},
    {name:"077.png", url:"assets/png_minimap/077.png"},
    {name:"078.png", url:"assets/png_minimap/078.png"},
    {name:"079.png", url:"assets/png_minimap/079.png"},
    {name:"080.png", url:"assets/png_minimap/080.png"},
    {name:"081.png", url:"assets/png_minimap/081.png"},
    {name:"082.png", url:"assets/png_minimap/082.png"},
    {name:"083.png", url:"assets/png_minimap/083.png"},
    {name:"084.png", url:"assets/png_minimap/084.png"},
    {name:"085.png", url:"assets/png_minimap/085.png"},
    {name:"086.png", url:"assets/png_minimap/086.png"},
    {name:"087.png", url:"assets/png_minimap/087.png"},
    {name:"088.png", url:"assets/png_minimap/088.png"},
    {name:"089.png", url:"assets/png_minimap/089.png"},
    {name:"090.png", url:"assets/png_minimap/090.png"},
    {name:"091.png", url:"assets/png_minimap/091.png"},
    {name:"092.png", url:"assets/png_minimap/092.png"},
    {name:"093.png", url:"assets/png_minimap/093.png"},
    {name:"094.png", url:"assets/png_minimap/094.png"},
    {name:"095.png", url:"assets/png_minimap/095.png"},
    {name:"096.png", url:"assets/png_minimap/096.png"},
    {name:"097.png", url:"assets/png_minimap/097.png"},
    {name:"098.png", url:"assets/png_minimap/098.png"},
    {name:"099.png", url:"assets/png_minimap/099.png"},
    {name:"100.png", url:"assets/png_minimap/100.png"},
    {name:"101.png", url:"assets/png_minimap/101.png"},
    {name:"102.png", url:"assets/png_minimap/102.png"},
    {name:"103.png", url:"assets/png_minimap/103.png"},
    {name:"104.png", url:"assets/png_minimap/104.png"},
    {name:"105.png", url:"assets/png_minimap/105.png"},
    {name:"106.png", url:"assets/png_minimap/106.png"},
    {name:"107.png", url:"assets/png_minimap/107.png"},
    {name:"108.png", url:"assets/png_minimap/108.png"},
    {name:"109.png", url:"assets/png_minimap/109.png"},
    {name:"110.png", url:"assets/png_minimap/110.png"},
    {name:"111.png", url:"assets/png_minimap/111.png"},
    {name:"112.png", url:"assets/png_minimap/112.png"},
    {name:"113.png", url:"assets/png_minimap/113.png"},
    {name:"114.png", url:"assets/png_minimap/114.png"},
    {name:"115.png", url:"assets/png_minimap/115.png"},
    {name:"116.png", url:"assets/png_minimap/116.png"},
    {name:"117.png", url:"assets/png_minimap/117.png"},
    {name:"118.png", url:"assets/png_minimap/118.png"},
    {name:"119.png", url:"assets/png_minimap/119.png"},
    {name:"120.png", url:"assets/png_minimap/120.png"},
    {name:"121.png", url:"assets/png_minimap/121.png"},
    {name:"122.png", url:"assets/png_minimap/122.png"},
    {name:"123.png", url:"assets/png_minimap/123.png"},
    {name:"124.png", url:"assets/png_minimap/124.png"},
    {name:"125.png", url:"assets/png_minimap/125.png"},
    {name:"126.png", url:"assets/png_minimap/126.png"},
    {name:"127.png", url:"assets/png_minimap/127.png"},
    {name:"128.png", url:"assets/png_minimap/128.png"},
    {name:"129.png", url:"assets/png_minimap/129.png"},
    {name:"130.png", url:"assets/png_minimap/130.png"},
    {name:"131.png", url:"assets/png_minimap/131.png"},
    {name:"132.png", url:"assets/png_minimap/132.png"},
    {name:"133.png", url:"assets/png_minimap/133.png"},
    {name:"134.png", url:"assets/png_minimap/134.png"},
    {name:"135.png", url:"assets/png_minimap/135.png"},
    {name:"136.png", url:"assets/png_minimap/136.png"},
    {name:"137.png", url:"assets/png_minimap/137.png"},
    {name:"138.png", url:"assets/png_minimap/138.png"},
    {name:"139.png", url:"assets/png_minimap/139.png"},
    {name:"140.png", url:"assets/png_minimap/140.png"},
    {name:"141.png", url:"assets/png_minimap/141.png"},
    {name:"142.png", url:"assets/png_minimap/142.png"},
    {name:"143.png", url:"assets/png_minimap/143.png"},
    {name:"144.png", url:"assets/png_minimap/144.png"},
    {name:"145.png", url:"assets/png_minimap/145.png"},
    {name:"146.png", url:"assets/png_minimap/146.png"},
    {name:"147.png", url:"assets/png_minimap/147.png"},
    {name:"148.png", url:"assets/png_minimap/148.png"},
    {name:"149.png", url:"assets/png_minimap/149.png"},
    {name:"150.png", url:"assets/png_minimap/150.png"},
    {name:"151.png", url:"assets/png_minimap/151.png"},
    {name:"152.png", url:"assets/png_minimap/152.png"},
    {name:"153.png", url:"assets/png_minimap/153.png"},
    {name:"154.png", url:"assets/png_minimap/154.png"},
    {name:"155.png", url:"assets/png_minimap/155.png"},
    {name:"156.png", url:"assets/png_minimap/156.png"},
    {name:"157.png", url:"assets/png_minimap/157.png"},
    {name:"158.png", url:"assets/png_minimap/158.png"},
    {name:"159.png", url:"assets/png_minimap/159.png"},
    {name:"160.png", url:"assets/png_minimap/160.png"},
    {name:"161.png", url:"assets/png_minimap/161.png"},
    {name:"162.png", url:"assets/png_minimap/162.png"},
    {name:"163.png", url:"assets/png_minimap/163.png"},
    {name:"164.png", url:"assets/png_minimap/164.png"},
    {name:"165.png", url:"assets/png_minimap/165.png"},
    {name:"166.png", url:"assets/png_minimap/166.png"},
    {name:"167.png", url:"assets/png_minimap/167.png"},
    {name:"168.png", url:"assets/png_minimap/168.png"},
    {name:"169.png", url:"assets/png_minimap/169.png"},
    {name:"170.png", url:"assets/png_minimap/170.png"},
    {name:"171.png", url:"assets/png_minimap/171.png"},
    {name:"172.png", url:"assets/png_minimap/172.png"},
    {name:"173.png", url:"assets/png_minimap/173.png"},
    {name:"174.png", url:"assets/png_minimap/174.png"},
    {name:"175.png", url:"assets/png_minimap/175.png"},
    {name:"176.png", url:"assets/png_minimap/176.png"},
    {name:"177.png", url:"assets/png_minimap/177.png"},
    {name:"178.png", url:"assets/png_minimap/178.png"},
    {name:"179.png", url:"assets/png_minimap/179.png"},
    {name:"180.png", url:"assets/png_minimap/180.png"},
    {name:"181.png", url:"assets/png_minimap/181.png"},
    {name:"182.png", url:"assets/png_minimap/182.png"},
    {name:"183.png", url:"assets/png_minimap/183.png"},
    {name:"184.png", url:"assets/png_minimap/184.png"},
    {name:"185.png", url:"assets/png_minimap/185.png"},
    {name:"186.png", url:"assets/png_minimap/186.png"},
    {name:"187.png", url:"assets/png_minimap/187.png"},
    {name:"188.png", url:"assets/png_minimap/188.png"},
    {name:"189.png", url:"assets/png_minimap/189.png"},
    {name:"190.png", url:"assets/png_minimap/190.png"},
    {name:"191.png", url:"assets/png_minimap/191.png"},
    {name:"192.png", url:"assets/png_minimap/192.png"},
    {name:"193.png", url:"assets/png_minimap/193.png"},
    {name:"194.png", url:"assets/png_minimap/194.png"},
    {name:"195.png", url:"assets/png_minimap/195.png"},
    {name:"196.png", url:"assets/png_minimap/196.png"},
    {name:"197.png", url:"assets/png_minimap/197.png"},
    {name:"198.png", url:"assets/png_minimap/198.png"},
    {name:"199.png", url:"assets/png_minimap/199.png"},
    {name:"200.png", url:"assets/png_minimap/200.png"},
    {name:"201.png", url:"assets/png_minimap/201.png"},
    {name:"202.png", url:"assets/png_minimap/202.png"},
    {name:"203.png", url:"assets/png_minimap/203.png"},
    {name:"204.png", url:"assets/png_minimap/204.png"},
    {name:"205.png", url:"assets/png_minimap/205.png"},
    {name:"206.png", url:"assets/png_minimap/206.png"},
    {name:"207.png", url:"assets/png_minimap/207.png"},
    {name:"208.png", url:"assets/png_minimap/208.png"},
    {name:"209.png", url:"assets/png_minimap/209.png"},
    {name:"210.png", url:"assets/png_minimap/210.png"},
    {name:"211.png", url:"assets/png_minimap/211.png"},
    {name:"212.png", url:"assets/png_minimap/212.png"},
    {name:"213.png", url:"assets/png_minimap/213.png"},
    {name:"214.png", url:"assets/png_minimap/214.png"},
    {name:"215.png", url:"assets/png_minimap/215.png"},
    {name:"216.png", url:"assets/png_minimap/216.png"},
    {name:"217.png", url:"assets/png_minimap/217.png"},
    {name:"218.png", url:"assets/png_minimap/218.png"},
    {name:"219.png", url:"assets/png_minimap/219.png"},
    {name:"220.png", url:"assets/png_minimap/220.png"},
    {name:"221.png", url:"assets/png_minimap/221.png"},
    {name:"222.png", url:"assets/png_minimap/222.png"},
    {name:"223.png", url:"assets/png_minimap/223.png"},
    {name:"224.png", url:"assets/png_minimap/224.png"},
    {name:"225.png", url:"assets/png_minimap/225.png"},
    {name:"226.png", url:"assets/png_minimap/226.png"},
    {name:"227.png", url:"assets/png_minimap/227.png"},
    {name:"228.png", url:"assets/png_minimap/228.png"},
    {name:"229.png", url:"assets/png_minimap/229.png"},
    {name:"230.png", url:"assets/png_minimap/230.png"},
    {name:"231.png", url:"assets/png_minimap/231.png"},
    {name:"232.png", url:"assets/png_minimap/232.png"},
    {name:"233.png", url:"assets/png_minimap/233.png"},
    {name:"234.png", url:"assets/png_minimap/234.png"},
    {name:"235.png", url:"assets/png_minimap/235.png"},
    {name:"236.png", url:"assets/png_minimap/236.png"},
    {name:"237.png", url:"assets/png_minimap/237.png"},
    {name:"238.png", url:"assets/png_minimap/238.png"},
    {name:"239.png", url:"assets/png_minimap/239.png"},
    {name:"240.png", url:"assets/png_minimap/240.png"},
    {name:"241.png", url:"assets/png_minimap/241.png"},
    {name:"242.png", url:"assets/png_minimap/242.png"},
    {name:"243.png", url:"assets/png_minimap/243.png"},
    {name:"244.png", url:"assets/png_minimap/244.png"},
    {name:"245.png", url:"assets/png_minimap/245.png"},
    {name:"246.png", url:"assets/png_minimap/246.png"},
    {name:"247.png", url:"assets/png_minimap/247.png"},
    {name:"248.png", url:"assets/png_minimap/248.png"},
    {name:"249.png", url:"assets/png_minimap/249.png"},
    {name:"250.png", url:"assets/png_minimap/250.png"},
    {name:"251.png", url:"assets/png_minimap/251.png"},
    {name:"252.png", url:"assets/png_minimap/252.png"},
    {name:"253.png", url:"assets/png_minimap/253.png"},
    {name:"254.png", url:"assets/png_minimap/254.png"},
    {name:"255.png", url:"assets/png_minimap/255.png"},
    {name:"256.png", url:"assets/png_minimap/256.png"},
    {name:"257.png", url:"assets/png_minimap/257.png"},
    {name:"258.png", url:"assets/png_minimap/258.png"},
    {name:"259.png", url:"assets/png_minimap/259.png"},
    {name:"260.png", url:"assets/png_minimap/260.png"},
    {name:"261.png", url:"assets/png_minimap/261.png"},
    {name:"262.png", url:"assets/png_minimap/262.png"},
    {name:"263.png", url:"assets/png_minimap/263.png"},
    {name:"264.png", url:"assets/png_minimap/264.png"},
    {name:"265.png", url:"assets/png_minimap/265.png"},
    {name:"266.png", url:"assets/png_minimap/266.png"},
    {name:"267.png", url:"assets/png_minimap/267.png"},
    {name:"268.png", url:"assets/png_minimap/268.png"},
    {name:"269.png", url:"assets/png_minimap/269.png"},
    {name:"270.png", url:"assets/png_minimap/270.png"},
    {name:"271.png", url:"assets/png_minimap/271.png"},
    {name:"272.png", url:"assets/png_minimap/272.png"},
    {name:"273.png", url:"assets/png_minimap/273.png"},
    {name:"274.png", url:"assets/png_minimap/274.png"},
    {name:"275.png", url:"assets/png_minimap/275.png"},
    {name:"276.png", url:"assets/png_minimap/276.png"},
    {name:"277.png", url:"assets/png_minimap/277.png"},
    {name:"278.png", url:"assets/png_minimap/278.png"},
    {name:"279.png", url:"assets/png_minimap/279.png"},
    {name:"280.png", url:"assets/png_minimap/280.png"},
    {name:"281.png", url:"assets/png_minimap/281.png"},
    {name:"282.png", url:"assets/png_minimap/282.png"},
    {name:"283.png", url:"assets/png_minimap/283.png"},
    {name:"284.png", url:"assets/png_minimap/284.png"},
    {name:"285.png", url:"assets/png_minimap/285.png"},
    {name:"286.png", url:"assets/png_minimap/286.png"},
    {name:"287.png", url:"assets/png_minimap/287.png"},
    {name:"288.png", url:"assets/png_minimap/288.png"},
    {name:"289.png", url:"assets/png_minimap/289.png"},
    {name:"290.png", url:"assets/png_minimap/290.png"},
    {name:"291.png", url:"assets/png_minimap/291.png"},
    {name:"292.png", url:"assets/png_minimap/292.png"},
    {name:"293.png", url:"assets/png_minimap/293.png"},
    {name:"294.png", url:"assets/png_minimap/294.png"},
    {name:"295.png", url:"assets/png_minimap/295.png"},
    {name:"296.png", url:"assets/png_minimap/296.png"},
    {name:"297.png", url:"assets/png_minimap/297.png"},
    {name:"298.png", url:"assets/png_minimap/298.png"},
    {name:"299.png", url:"assets/png_minimap/299.png"},
    {name:"300.png", url:"assets/png_minimap/300.png"},
    {name:"301.png", url:"assets/png_minimap/301.png"},
    {name:"302.png", url:"assets/png_minimap/302.png"},
    {name:"303.png", url:"assets/png_minimap/303.png"},
    {name:"304.png", url:"assets/png_minimap/304.png"},
    {name:"305.png", url:"assets/png_minimap/305.png"},
    {name:"306.png", url:"assets/png_minimap/306.png"},
    {name:"307.png", url:"assets/png_minimap/307.png"},
    {name:"308.png", url:"assets/png_minimap/308.png"},
    {name:"309.png", url:"assets/png_minimap/309.png"},
    {name:"310.png", url:"assets/png_minimap/310.png"},
    {name:"311.png", url:"assets/png_minimap/311.png"},
    {name:"312.png", url:"assets/png_minimap/312.png"},
    {name:"313.png", url:"assets/png_minimap/313.png"},
    {name:"314.png", url:"assets/png_minimap/314.png"},
    {name:"315.png", url:"assets/png_minimap/315.png"},
    {name:"316.png", url:"assets/png_minimap/316.png"},
    {name:"317.png", url:"assets/png_minimap/317.png"},
    {name:"318.png", url:"assets/png_minimap/318.png"},
    {name:"319.png", url:"assets/png_minimap/319.png"},
    {name:"320.png", url:"assets/png_minimap/320.png"}

];

var BitmapFontList = [
    // {
    //     name: 'jewel_no',                               //레이싱
    //     url:["assets/bitmapfont/jewel_no-export.png",
    //          "assets/bitmapfont/jewel_no-export.xml"
    //     ]
    // },
    // {
    //     name: 'speed_number',                           //레이싱
    //     url: ["assets/bitmapfont/speed_number-export.png",
    //         "assets/bitmapfont/speed_number-export.xml"
    //     ]
    // },
    {

        name: 'shop_no-export',
        url: ["assets/bitmapfont/shop_no-export.png",
            "assets/bitmapfont/shop_no-export.xml"
        ]
    },
    {

        name: 'stage_no-export',
        url: ["assets/bitmapfont/stage_no-export.png",
            "assets/bitmapfont/stage_no-export.xml"
        ]
    },
    {

        name: 'combo_no-export',
        url: ["assets/bitmapfont/combo_no-export.png",
            "assets/bitmapfont/combo_no-export.xml"
        ]
    }
];

var AtlasList = [
    // {
    //     name: "game_a",
    //     url: ['assets/atlas/atlas_game_a.png',
    //         'assets/atlas/atlas_game_a.json'
    //     ]
    // },
    // {
    //     name: "game_b",
    //     url: ['assets/atlas/atlas_game_b.png',
    //         'assets/atlas/atlas_game_b.json'
    //     ]
    // },
    // {
    //     name:"ui0",
    //     url:['assets/atlas/atlas_ui-0.png',
    //         'assets/atlas/atlas_ui-0.json'
    //     ]
    // },
    // {
    //     name:"match0",
    //     url:['assets/atlas/atlas_matching-0.png',
    //         'assets/atlas/atlas_matching-0.json'
    //     ]
    // },
    {
        name:"atlas_bb-0",
        url:['assets/atlas/atlas_bb-0.png',
            'assets/atlas/atlas_bb-0.json'
        ]
    },
    {
        name:"atlas_bb_ani-0",
        url:['assets/atlas/atlas_bb_ani-0.png',
            'assets/atlas/atlas_bb_ani-0.json'
        ]
    },
    {
        name:"atlas_bb_ui-0",
        url:['assets/atlas/atlas_bb_ui-0.png',
            'assets/atlas/atlas_bb_ui-0.json'
        ]
    },
    {
        name:"atlas_bb_ui_dlg-0",
        url:['assets/atlas/atlas_bb_ui_dlg-0.png',
            'assets/atlas/atlas_bb_ui_dlg-0.json'
        ]
    },
    {
        name:"atlas_bb_wallpaper-0",
        url:['assets/atlas/atlas_bb_wallpaper-0.png',
            'assets/atlas/atlas_bb_wallpaper-0.json'
        ]
    }
];

var SpineList =[
    {
        name:"title_spine",
        url:"assets/spine/bricks_title.json"
    },
    {
        name:"ready_go",
        url:"assets/spine/ready_go.json"
    },
    {//empty, heart_bomb_out
        name:"heart_bomb",
        url:"assets/spine/heart_bomb.json"
    },
    {//empty, heart_bomb_out //버튼클릭하트
        name:"star_bomb",
        url:"assets/spine/star_bomb.json"
    },
    {//일반모드 언락
        name:"stage_lock_ani",
        url:"assets/spine/stage_lock_ani.json"
    },
    {//보너스모드 언락
        name:"bonus_stage_lock_ani",
        url:"assets/spine/bonus_stage_lock_ani.json"
    },
    {//패들 사라지기
        name:"page_lock_ani",
        url:"assets/spine/page_lock_ani.json"
    },
    {//패들 사라지기
        name:"paddle_out",
        url:"assets/spine/paddle_out.json"
    },
    {//결과창 애니
        name:"popup_star_ani",
        url:"assets/spine/popup_star_ani.json"
    }
];

var SoundList =[
     //----------------new--------------------
    {
        name: 'BGM_ALL.mp3',                            //bgm_시작,레벨고르기
        url:['assets/sound/BGM_ALL.mp3',
            'assets/sound/BGM_ALL.ogg']
    },
    {
        name: 'BGM_Game_Nomal.mp3',                            //bgm_게임플레이
        url:['assets/sound/BGM_Game_Nomal.mp3',
            'assets/sound/BGM_Game_Nomal.ogg']
    },
    {
        name: 'BGM_Game_Ranking.mp3',                            //bgm_네트워크랭킹
        url:['assets/sound/BGM_Game_Ranking.mp3',
            'assets/sound/BGM_Game_Ranking.ogg']
    },
    {
        name: 'SE_Ball.mp3',                            //공 충돌음//공이 벽, 패들에 충돌 시.
        url:['assets/sound/SE_Ball.mp3',
            'assets/sound/SE_Ball.ogg']
    },
    {
        name: 'SE_BearJelly_Produce.mp3',               //곰 젤리 생성음//곰 젤리 생성 시.
        url:['assets/sound/SE_BearJelly_Produce.mp3',
            'assets/sound/SE_BearJelly_Produce.ogg']
    },
    {
        name: 'SE_BearJelly_Transform.mp3',             //곰 젤리 변신음//곰 젤리가 분열하거나, 팽창할 때 사운드.
        url:['assets/sound/SE_BearJelly_Transform.mp3',
            'assets/sound/SE_BearJelly_Transform.ogg']
    },
    {
        name: 'SE_Brick_Extinction.mp3',                //벽돌 소멸음//벽돌 소멸 시.
        url:['assets/sound/SE_Brick_Extinction.mp3',
            'assets/sound/SE_Brick_Extinction.ogg']
    },
    {
        name: 'SE_BrickShell_Remove.mp3',
        url:['assets/sound/SE_BrickShell_Remove.mp3',  //벽돌 껍질 제거음 //	초코 벽돌 껍질 제거 시.
            'assets/sound/SE_BrickShell_Remove.ogg']
    },
    {
        name: 'SE_Click.mp3',                           //버튼 클릭음//버튼 클릭 시.
        url:['assets/sound/SE_Click.mp3',
            'assets/sound/SE_Click.ogg']
    },
    {
        name: 'SE_InvincibleBrick_Blow.mp3',            //무적 벽돌 타격음	//공과 무적 벽돌 충돌 시.
        url:['assets/sound/SE_InvincibleBrick_Blow.mp3',
            'assets/sound/SE_InvincibleBrick_Blow.ogg']
    },
    {
        name: 'SE_Item_Bad.mp3',                        //나쁜 아이템 획득음 //나쁜 아이템 획득 시.
        url:['assets/sound/SE_Item_Bad.mp3',
            'assets/sound/SE_Item_Bad.ogg']
    },
    {
        name: 'SE_Item_Good.mp3',                       //좋은 아이템 획득음 //좋은 아이템 획득 시.
        url:['assets/sound/SE_Item_Good.mp3',
            'assets/sound/SE_Item_Good.ogg']
    },
    {
        name: 'SE_Paddle_Apper.mp3',                    //패들 등장음	//패들이 생성 될 때.
        url:['assets/sound/SE_Paddle_Apper.mp3',
            'assets/sound/SE_Paddle_Apper.ogg']
    },
    {
        name: 'SE_Popup_OFF.mp3',                       //팝업창 닫힘음	//모든 팝업창이 닫힐 때.
        url:['assets/sound/SE_Popup_OFF.mp3',
            'assets/sound/SE_Popup_OFF.ogg']
    },
    {
        name: 'SE_Popup_ON.mp3',                        //팝업창 열림음	//모든 팝업창이 열릴 때.
        url:['assets/sound/SE_Popup_ON.mp3',
            'assets/sound/SE_Popup_ON.ogg']
    },
    {
        name: 'SE_Star_Get.mp3',                        //별점 연출음 //획득한 별점이 박힐 때.
        url:['assets/sound/SE_Star_Get.mp3',
            'assets/sound/SE_Star_Get.ogg']
    },
    {
        name: 'SE_Transform.mp3',                       //변신음 //	아이템을 획득하여 패들이나 공에 사이즈 변화가 있을 때 사운드.
        url:['assets/sound/SE_Transform.mp3',
            'assets/sound/SE_Transform.ogg']
    },
    //----------------new--------------------
    //-- -- -- -- -- new2 -- -- -- -- --
    {
        name: 'SE_BearJelly_Hit.mp3',                     //곰젤리 맞았을때
        url:['assets/sound/SE_BearJelly_Hit.mp3',
            'assets/sound/SE_BearJelly_Hit.ogg']
    },
    {
        name: 'SE_Fire.mp3',                              //공 발사시
        url:['assets/sound/SE_Fire.mp3',
            'assets/sound/SE_Fire.ogg']
    },
    {
        name: 'SE_GameOver.mp3',                            //게임오버 문구
        url:['assets/sound/SE_GameOver.mp3',
            'assets/sound/SE_GameOver.ogg']
    },
    {
        name: 'SE_Go.mp3',                                  //go 등장
        url:['assets/sound/SE_Go.mp3',
            'assets/sound/SE_Go.ogg']
    },
    {
        name: 'SE_Heart.mp3',                               //하트가 소모될때
        url:['assets/sound/SE_Heart.mp3',
            'assets/sound/SE_Heart.ogg']
    },
    {
        name: 'SE_InvincibleBrick_Blow-01.mp3',              //엔딩 무적블록터지는 연출사운드
        url:['assets/sound/SE_InvincibleBrick_Blow-01.mp3',
            'assets/sound/SE_InvincibleBrick_Blow-01.ogg']
    },
    {
        name: 'SE_Magnet.mp3',                              //공 접착시
        url:['assets/sound/SE_Magnet.mp3',
            'assets/sound/SE_Magnet.ogg']
    },
    {
        name: 'SE_Paddle_Dead.mp3',                         //패들이 파괴될때
        url:['assets/sound/SE_Paddle_Dead.mp3',
            'assets/sound/SE_Paddle_Dead.ogg']
    },
    {
        name: 'SE_Ready.mp3',                               //READY 등장
        url:['assets/sound/SE_Ready.mp3',
            'assets/sound/SE_Ready.ogg']
    },
    {
        name: 'SE_Score.mp3',                               //점수가 올라갈 때
        url:['assets/sound/SE_Score.mp3',
            'assets/sound/SE_Score.ogg']
    },
    {
        name: 'SE_Shot.mp3',                                //미사일 발사
        url:['assets/sound/SE_Shot.mp3',
            'assets/sound/SE_Shot.ogg']
    },
    {
        name: 'SE_Star_off.mp3',                            //패들이 죽어서 별점이 줄어들때
        url:['assets/sound/SE_Star_off.mp3',
            'assets/sound/SE_Star_off.ogg']
    },
    {
        name: 'SE_Brick_Extinction_F.mp3',                  //폭발시(+관통조합)
        url:['assets/sound/SE_Brick_Extinction_F.mp3',
            'assets/sound/SE_Brick_Extinction_F.ogg']
    },
    {
        name: 'SE_Win.mp3',                                 //클리어문구가 나올때
        url:['assets/sound/SE_Win.mp3',
            'assets/sound/SE_Win.ogg']
    },
    //-- -- -- -- -- new2 -- -- -- -- --
    //-- -- -- -- -- new3 -- -- -- -- --
    {
        name: 'SE_HurryUp.mp3',
        url:['assets/sound/SE_HurryUp.mp3',
            'assets/sound/SE_HurryUp.ogg']
    },
    {
        name: 'SE_HurryUp2.mp3',
        url:['assets/sound/SE_HurryUp2.mp3',
            'assets/sound/SE_HurryUp2.ogg']
    },
    {
        name: 'SE_Heart_Brick_Extinction.mp3',
        url:['assets/sound/SE_Heart_Brick_Extinction.mp3',
            'assets/sound/SE_Heart_Brick_Extinction.ogg']
    },
    {
        name: 'SE_Page_Open.mp3',
        url:['assets/sound/SE_Page_Open.mp3',
            'assets/sound/SE_Page_Open.ogg']
    },
    {
        name: 'SE_Brick_Drop.mp3',
        url:['assets/sound/SE_Brick_Drop.mp3',
            'assets/sound/SE_Brick_Drop.ogg']
    }
    //-- -- -- -- -- new3 -- -- -- -- --




];


var LANGUAGE_ENG = 0;
var LANGUAGE_JPN = 1;
var LANGUAGE_KOR = 2;
var CURRENT_LANGUAGE = LANGUAGE_ENG;
// 국가별 언어 설정
var tbString = {"doyougetlife":{"en":"하트 1개를 사용하여{E} 추가 라이프를{E}지급받으시겠습니까?","jp":"하트 1개를 사용하여{E} 추가 라이프를{E}지급받으시겠습니까?","kr":"하트 1개를 사용하여{E} 추가 라이프를{E}지급받으시겠습니까?"},"doyoucharge":{"en":"Oh, no! No more heart! {E} Would you charge the heart?","jp":"あれ！ハートがないよ！{E}チャージしますか？","kr":"이런! 하트가 없어요!{E}하트를 충전 할까요?"},"getheart":{"en":"I got {V} hearts!","jp":"ハートを{V}個ゲットしたよ！","kr":"하트를 {V}개 획득했어요!"},"memberonly":{"en":"MEMBER ONLY","jp":"会員専用","kr":"회원전용"},"signup":{"en":"SIGN UP","jp":"会員登録","kr":"회원가입"},"yes":{"en":"YES","jp":"YES","kr":"YES"},"no":{"en":"NO","jp":"NO","kr":"NO"},"ok":{"en":"OK","jp":"OK","kr":"OK"},"cancel":{"en":"CANCEL","jp":"CANCEL","kr":"CANCEL"},"coin":{"en":"HEARTGOLD","jp":"ハート","kr":"HEART"},"gotcoin":{"en":"Got {V} HEARTGOLD!","jp":"ハート{V}個を獲得!","kr":"하트 {V}개 획득!"},"lowcoin":{"en":"Lock of HEARTGOLD. {E} Do you want to charge?","jp":"ハートが足りません{E}チャージしますか？","kr":"하트가 모자랍니다.{E}충전하시겠습니까?"},"conshop":{"en":"HEART SHOP","jp":"HEART SHOP","kr":"HEART SHOP"},"full":{"en":"FULL","jp":"FULL","kr":"FULL"},"gotosignup":{"en":"Members only!<br/>Would you like to go to the sign up page?","jp":"会員専用になります。<br/>会員登録をしますか?","kr":"회원전용!<br/>회원가입 하시겠습니까?"},"gotomovi":{"en":"Only available in the Moby Games app.<br/>Would you like to go to the Moby Games app?","jp":"モビーゲームアプリのみ購入で きます。<br/>モビーゲームアプリに移動しますか？","kr":"모비게임 앱에서만 구매 가능합니다.<br/>모비게임 앱으로 이동하시겠습니까?"},"lowpoint":{"en":"Not enough points!","jp":"ポイントが足りません!","kr":"포인트가 부족합니다!"},"gameresult":{"en":"GAME RESULT:","jp":"GAME RESULT:","kr":"GAME RESULT:"},"waitmoment":{"en":"Wait a minute ","jp":"しばらくお待ちください","kr":"잠시만 기다려 주세요."},"finduser":{"en":"대전 상대를 찾는 중","jp":"対戦相手を探しています…","kr":"대전 상대를 찾는 중"},"sweetbricks":{"en":"SWEET BRICKS","jp":"SWEET BRICKS","kr":"SWEET BRICKS"},"gamestart":{"en":"GAME START","jp":"GAME START","kr":"GAME START"},"item_4":{"en":"패들이 길어져요!","jp":"패들이 길어져요!","kr":"패들이 길어져요!"},"item_7":{"en":"공이 2개로 분열해요!","jp":"공이 2개로 분열해요!","kr":"공이 2개로 분열해요!"},"item_9":{"en":"패들에서{E}총알이 나가요!","jp":"패들에서{E}총알이 나가요!","kr":"패들에서{E}총알이 나가요!"},"item_3":{"en":"공이 패들에{E}달라붙어요!","jp":"공이 패들에{E}달라붙어요!","kr":"공이 패들에{E}달라붙어요!"},"item_2":{"en":"공이 벽돌을{E}뚫고 날아가요!","jp":"공이 벽돌을{E}뚫고 날아가요!","kr":"공이 벽돌을{E}뚫고 날아가요!"},"item_1":{"en":"공이 벽돌을{E}폭발시켜요!","jp":"공이 벽돌을{E}폭발시켜요!","kr":"공이 벽돌을{E}폭발시켜요!"},"item_6":{"en":"공이 커져요!","jp":"공이 커져요!","kr":"공이 커져요!"},"item_8":{"en":"공이 느려져요!","jp":"공이 느려져요!","kr":"공이 느려져요!"},"item_5":{"en":"초콜릿 껍질이{E}전부 벗겨져요!","jp":"초콜릿 껍질이{E}전부 벗겨져요!","kr":"초콜릿 껍질이{E}전부 벗겨져요!"},"item_10":{"en":"패들이 짧아져요!","jp":"패들이 짧아져요!","kr":"패들이 짧아져요!"},"item_11":{"en":"패들이 완전 짧아져요!","jp":"패들이 완전 짧아져요!","kr":"패들이 완전 짧아져요!"},"item_13":{"en":"공이 빨라져요!","jp":"공이 빨라져요!","kr":"공이 빨라져요!"},"item_12":{"en":"공이 작아져요!","jp":"공이 작아져요!","kr":"공이 작아져요!"},"item_14":{"en":"패들이 터져요!","jp":"패들이 터져요!","kr":"패들이 터져요!"},"item_0":{"en":" ","jp":" ","kr":" "},"MSHOP":{"en":"M SHOP","jp":"M SHOP","kr":"M SHOP"},"MGM_Title":{"en":"Sweet Bricks","jp":"Sweet Bricks","kr":"Sweet Bricks"},"MGM_Contents":{"en":"Save the astronauts trapped in bubbles~ Please fill the blocks thoroughly to prevent the droplets from flying~","jp":"バブルに閉じ込められた宇宙人を助けてください~ バブルが飛ばされないように ブロックを隙間なく埋めてください~","kr":"방울에 갇힌 우주인들 구해주세요~ 방울이 날아가지 않도록 블록을 빈틈없이 메꿔주세요~"}};

function GetString(key, data)
{
    if(data === undefined) data = null;
    switch(CURRENT_LANGUAGE)
    {
        case LANGUAGE_ENG:
            if(data == null)
                return tbString[key].en.replace(/{E}/gi, "\n");
            else
                return tbString[key].en.replace("{V}", data.toString()).replace(/{E}/gi, "\n");
            break;
        case LANGUAGE_JPN:
            if(data == null)
                return tbString[key].jp.replace(/{E}/gi, "\n");
            else
                return tbString[key].jp.replace("{V}", data.toString()).replace(/{E}/gi, "\n");
            break;
        case LANGUAGE_KOR:
            if(data == null)
                return tbString[key].kr.replace(/{E}/gi, "\n");
            else
                return tbString[key].kr.replace("{V}", data.toString()).replace(/{E}/gi, "\n");
            break;
    }

    return "";
}

////// ---코스믹팝 소스----
// var tbString_json = "{\"tuto01\":{\"en\":\"Shoot bubbles and{E}match 3 or more{E}of the same color\",\"jp\":\"バブルを発射して{E}同じ色のバブルを{E}3つ以上合わせてみよう\",\"kr\":\"버블을 발사해서{E}같은색 버블을{E}3개 이상 모아보세요\"},\"tuto02\":{\"en\":\"Rotate{E} to the left\",\"jp\":\"左側に{E}回転してみよう\",\"kr\":\"왼쪽으로{E}회전해 보세요\"},\"tuto03\":{\"en\":\"Get stars\",\"jp\":\"星を 獲得しよう\",\"kr\":\"별을 획득하세요\"},\"tuto04\":{\"en\":\"Hit the center{E}bubble and{E}rescue friend\",\"jp\":\"真ん中の{E}バブルに当てて{E}友達を救い出そう\",\"kr\":\"가운데{E}버블을 맞춰{E}친구를 구하세요\"},\"tuto05\":{\"en\":\"Collect energy{E}by poping bubbles\",\"jp\":\"バブルを弾けて{E}エネルギーを集めよう\",\"kr\":\"버블을 터트려{E}에너지를 모으세요\"},\"tuto06\":{\"en\":\"Get stars{E}in Burstar mode\",\"jp\":\"バスターモードで{E}星を獲得してみよう\",\"kr\":\"버스터모드로{E}별을 획득해보세요\"},\"tuto07\":{\"en\":\"Charge energy\",\"jp\":\"エネルギーを{E}集めています\",\"kr\":\"에너지를{E}채워줘요\"},\"tuto08\":{\"en\":\"Three bubbles{E}will be added\",\"jp\":\"バブル3つが{E}追加されるよ\",\"kr\":\"버블 3개가{E}추가돼요\"},\"tuto09\":{\"en\":\"Shield is{E}rotate and interfere\",\"jp\":\"シールドが{E}回転しながら{E}邪魔をしよう\",\"kr\":\"실드가{E}회전하면서{E}방해를 해요\"},\"tuto10\":{\"en\":\"Meteorite is{E}hit twice to break\",\"jp\":\"隕石は{E}2回当たって{E}弾けるよ\",\"kr\":\"운석은{E}2번 부딪쳐야{E}부서져요\"},\"stage\":{\"en\":\"STAGE\",\"jp\":\"STAGE\",\"kr\":\"STAGE\"},\"score\":{\"en\":\"SCORE\",\"jp\":\"SCORE\",\"kr\":\"SCORE\"},\"exit\":{\"en\":\"EXIT\",\"jp\":\"EXIT\",\"kr\":\"EXIT\"},\"giveup\":{\"en\":\"Do you {E}give up{E} the game?\",\"jp\":\"ゲームをやめますか？\",\"kr\":\"게임을{E}포기하시겠습니까?\"},\"continue\":{\"en\":\"CONTINUE\",\"jp\":\"CONTINUE\",\"kr\":\"CONTINUE\"},\"use1heart\":{\"en\":\"Can I have{E} an additional{E} ball with 1 heart?\",\"jp\":\"ハートを{E}1個使用して{E}続けますか?\",\"kr\":\"하트 1개로 추가구슬을{E}지급받으시겠습니까?\"},\"yes\":{\"en\":\"YES\",\"jp\":\"YES\",\"kr\":\"YES\"},\"no\":{\"en\":\"NO\",\"jp\":\"NO\",\"kr\":\"NO\"},\"heartshop\":{\"en\":\"HEART SHOP\",\"jp\":\"ハートショップ\",\"kr\":\"HEART SHOP\"},\"signup\":{\"en\":\"SIGN UP\",\"jp\":\"会員加入\",\"kr\":\"회원가입\"},\"purfin\":{\"en\":\"Purchase is completed.\",\"jp\":\"購入を完了しました。\",\"kr\":\"구매를 완료하였습니다\"},\"purcancel\":{\"en\":\"Purchase canceled\",\"jp\":\"購入かキャンセルしました。\",\"kr\":\"구매가 취소되었습니다\"},\"gotosignup\":{\"en\":\"Would you like to go {E}to the membership page?\",\"jp\":\"会員加入ページに{E}移動しますか?\",\"kr\":\"회원가입 페이지로{E}이동하시겠습니까?\"},\"membersonly\":{\"en\":\"MEMBERS\",\"jp\":\"会員専用\",\"kr\":\"회원전용\"},\"ok\":{\"en\":\"OK\",\"jp\":\"OK\",\"kr\":\"OK\"},\"settings\":{\"en\":\"SETTINGS\",\"jp\":\"設定\",\"kr\":\"SETTINGS\"},\"gotheart\":{\"en\":\"I got {V} hearts!\",\"jp\":\"ハートを{V}個ゲットしたよ！\",\"kr\":\"하트를 {V}개 획득했어요!\"},\"login\":{\"en\":\"LOGIN\",\"jp\":\"ログイン\",\"kr\":\"LOGIN\"}}";
// var tbString = JSON.parse(tbString_json);
//
// // 샵메세지
// var tbShpMsg_json = "{\"signup\":{\"en\":\"Members only!<br/>Would you like to go to the sign up page?\",\"jp\":\"会員専用になります。<br/>会員登録をしますか?\",\"kr\":\"회원전용!<br/>회원가입 하시겠습니까?\"},\"gotogpg\":{\"en\":\"Only available in the Moby Games app.<br/>Would you like to go to the Moby Games app?\",\"jp\":\"モビーゲームアプリのみ購入で きます。<br/>モビーゲームアプリに移動しますか？\",\"kr\":\"모비게임 앱에서만 구매 가능합니다.<br/>모비게임 앱으로 이동하시겠습니까?\"},\"lowpoint\":{\"en\":\"Not enough points!\",\"jp\":\"ポイントが足りません!\",\"kr\":\"포인트가 부족합니다!\"}}";
// //
//
// var tbShpMsg = JSON.parse(tbShpMsg_json);
// //
// function GetString(key, data)
// {
//     if(data === undefined) data = null;
//     switch(CURRENT_LANGUAGE)
//     {
//         case LANGUAGE_ENG:
//             if(data == null)
//                 return tbString[key].en.replace(/{E}/gi, "\n");
//             else
//                 return tbString[key].en.replace("{V}", data.toString()).replace(/{E}/gi, "\n");
//             break;
//         case LANGUAGE_JPN:
//             if(data == null)
//                 return tbString[key].jp.replace(/{E}/gi, "\n");
//             else
//                 return tbString[key].jp.replace("{V}", data.toString()).replace(/{E}/gi, "\n");
//             break;
//         case LANGUAGE_KOR:
//             if(data == null)
//                 return tbString[key].kr.replace(/{E}/gi, "\n");
//             else
//                 return tbString[key].kr.replace("{V}", data.toString()).replace(/{E}/gi, "\n");
//             break;
//     }
//
//     return "";
// }
// function GetShpMsg(key, data)
// {
//     if(data === undefined) data = null;
//     switch(CURRENT_LANGUAGE)
//     {
//         case LANGUAGE_ENG:
//             if(data == null)
//                 return tbShpMsg[key].en.replace(/{E}/gi, "\n");
//             else
//                 return tbShpMsg[key].en.replace("{V}", data.toString()).replace(/{E}/gi, "\n");
//             break;
//         case LANGUAGE_JPN:
//             if(data == null)
//                 return tbShpMsg[key].jp.replace(/{E}/gi, "\n");
//             else
//                 return tbShpMsg[key].jp.replace("{V}", data.toString()).replace(/{E}/gi, "\n");
//             break;
//         case LANGUAGE_KOR:
//             if(data == null)
//                 return tbShpMsg[key].kr.replace(/{E}/gi, "\n");
//             else
//                 return tbShpMsg[key].kr.replace("{V}", data.toString()).replace(/{E}/gi, "\n");
//             break;
//     }
//
//     return "";
// }

//------ WebStorm shortcut -------------------------------←→↑↓↗↙↖↘
//--navigation--
//Ctrl+F12           - file structure popup

//Alt+Up             - previous/next method
//Alt+Down

//F2                 - navigate to next/previous error or warning
//Shift+F2

//Ctrl+[             - navigate to start/end of code block
//Ctrl+]

//------ WebStorm shortcut -------------------------------

//------ WebStorm shortcut2 -------------------------------
//Ctrl+j              많이쓰는코드형태를 자동완성
//Ctrl+/
//Ctrl+//
//Ctrl++              괄호접고펴기
//Ctrl+-
//Ctrl+Space          자동완성기능호출
//Ctrl+Alt+i          자동들여쓰기
//Ctrl+Alt+Back       마지막수정한곳으로 점프
//------ WebStorm shortcut2 -------------------------------

//------ WebStorm shortcut3 -------------------------------
//Alt+j               동일변수선택하면서 이동
//Alt+Shift+j         동일변수선택취소하면서 뒤로이동
//Ctrl+Alt+Shift+j    동일변수 모두선택
//------ WebStorm shortcut3 -------------------------------

//------ WebStorm shortcut4 (일본)-------------------------------https://ics.media/entry/11642
//Ctrl+LMB            정의한 곳으로 (Ctrl+b)
//F12                 정의한 곳으로
//Alt+F7              변수 사용한 모든 곳 찾기
//Ctrl+Shift+n        소스파일 열기(빠른검색으로)
//Ctrl+Alt+Shift+n    심볼이름찾기(빠른검색으로)      --변수,함수,클래스도 포함
//Shift, Shift        소스,심볼이름찾기(빠른검색으로) --모든검색
//Ctrl+Shift+BackSp   마지막으로 편집 한 행으로 이동
//Shift+F6            리펙토링
//Ctrl+Alt+v          자동변수이름
//Ctrl+Alt+l          코드정리
//------ WebStorm shortcut3 -------------------------------


//------ XDK shortcut ---------
// ctrl+shift+o       퀵오픈(행이동 :, 함수리스트 @)
// ctrl+e             함수 빠른 편집
// ctrl+k             quick doc (esc: 닫기)
// ctrl+space         힌트창 강제나오기

// ctrl+z             실행취소
// ctrl+y             재실행


// ctrl+g             라인번호 이동
// ctrl+l             선택 현재라인

// ctrl+f             찾기(앞으로 f3, 뒤로 shift+f3)
// alt+f3             현재단어 찾기후, 선택          ---->주의 alt+f4 윈도우종료
// ctrl+b             찾기후, 선택 더하기
// ctrl+shift+b       찾기후, 선택 다시

// ctrl+u             선택내용 복구
// ctrl+shift+u       선택내용 Redo

// ctrl+shift+↑       블록 이동
// ctrl+shift+f       찾기 모든파일
// ctrl+shift+d       라인 삭제

// ctrl+/             라인 주석
// ctrl+shift+/       블록 주석
//------ XDK shortcut ---------

//--err---
//function findBoneInSkeleton(skel, attach) {
//    for (var i = 0; i < skel.slots.length; i++) {
//        if (skel.slots[i].sprites.hasOwnProperty(attach))
//            return skel.slots[i].sprites[attach];
//    }
//    return null;
//}
////var spearSprite = findBone(spine.skeleton, "spear");
////spearSprite.getBounds()
////var x = spear.worldTransform.tx, y= spear.worldTransform.ty
//--err---
//한번 더 선언
var ColorSet = {
    white: 0xffffff,
    red: 0xff0000,
    red_kukugo: 0xFF2020,
    green: 0x00ff00,
    blue: 0x0000ff,
    black: 0x000000,
    yellow: 0xffff00,
    sky: 0xcceeff,
    cyan: 0x00ffff,
    magenta: 0xff00ff,
    grey: 0x808080,
    gray: 0x808080,
    orange: 0xffa500,
    pink: 0xff8080,
    fontlevel: 0xfff57d,
    lightgrey: (0x808080 * 1.5),
    darkgrey: (0x808080 * 0.5),
    brown: 0xa52a2a,
    darkblue: 0x000080,

    uioliv: 0xFFF799,
    uisky: 0xBFFFFF,
    uired: 0xFF7F7E,
    uiblue: 0x7EA7F9,
    uigreen: 0x7FE591,
    uipurple: 0xC983C1,
    uigray: 0x979797,
    uigreenbtn: 0x19BD9B

};

var ArrowKey = {
    left: 37,
    up: 38,
    right: 39,
    down: 40
};
var mouseBTN = 0;
//var MOUSE=0;
//var TOUCH=1;
//var InputMode= isTouchDevice()===true ? TOUCH:MOUSE;
//사용예
//var spr = SpriteLoad(spine_space_ship_ani, "img/bubble_1.png", 0, -150, 0.2, 0.5); //스프라이트 생성
//spr.name = "bubble";                          
//debug_Sprite(spr, InfoPos.on, MovePos.on);                                        //디버깅정보 생성

//수학함수

function getMoneyFormatFromNum(n) {
    var c = 0; //표시자리
    var d = ".";
    var t = ",";
    var s = n < 0 ? "-" : "",
        i = String(parseInt(n = Math.abs(Number(n) || 0).toFixed(c))),
        j = (j = i.length) > 3 ? j % 3 : 0;
    return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
};

var convertTimeFormatFromSec = function (num) { //두개 다 거의 비슷
    var hrs = Math.floor(num / 3600);
    var mins = Math.floor((num % 3600) / 60);
    var secs = num % 60;
    return (hrs > 0 ? hrs + ":" : "") + (mins < 10 ? "0" : "") + mins + ":" + (secs < 10 ? "0" : "") + secs;
};

function secondsToTime(secs) { //두개 다 거의 비슷
    secs = Math.round(secs);
    var hours = Math.floor(secs / (60 * 60));

    var divisor_for_minutes = secs % (60 * 60);
    var minutes = Math.floor(divisor_for_minutes / 60);

    var divisor_for_seconds = divisor_for_minutes % 60;
    var seconds = Math.ceil(divisor_for_seconds);

    //var ret_obj = {"h": hours, "m": minutes, "s": seconds };
    return (
        (hours > 0 ? hours + ":" : "") + (minutes < 10 ? "0" : "") + minutes + ":" + (seconds < 10 ? "0" : "") + seconds
    );
}

//game.rnd.integerInRange(0, 10);//페이저랜덤모드는 min,max를 포함

//min~max까지 랜덤 float 값 리턴
function generateRandomNumber(min, max) {
    return (Math.random() * (max - min) + min);
}
//1~~9까지 랜덤값 리턴 //Math.floor(generateRandomNumber(1, 10)); //max값 포함안됨

//자바스크립트배열 기능--시작 -------------------------
//배열랜덤섞기함수
function shuffleByArray(arr) {
    var j, x, i;
    for (i = arr.length; i; i--) {
        j = Math.floor(Math.random() * i);
        x = a[i - 1];
        arr[i - 1] = a[j];
        arr[j] = x;
    }
}

//배열함수최대값
var compArr = [1, 10, 5, 11, 2];
var maxResult = compArr.reduce(function (previous, current) {
    return previous > current ? previous : current;
});
//배열함수최소값
var minResult = compArr.reduce(function (previous, current) {
    return previous > current ? current : previous;
});
//배열 인덱스위치로 서로 교체
var swapArrayElements = function (arr, indexA, indexB) {
    var temp = arr[indexA];
    arr[indexA] = arr[indexB];
    arr[indexB] = temp;
};
//배열합치기-시작
function unionByArr(a, b) { //전체 a+b  //전체값과 중복포함
    var tmp = {},
        res = [];
    for (var i = 0; i < a.length; i++) tmp[a[i]] = 1;
    for (var j = 0; j < b.length; j++) tmp[b[j]] = 1;
    for (var k in tmp) res.push(k);
    return res;
}

function intersectByArr(a, b) { //교집합 a&&b //중복값부분만
    var tmp = {},
        res = [];
    for (var i = 0; i < a.length; i++) tmp[a[i]] = 1;
    for (var j = 0; j < b.length; j++)
        if (tmp[b[j]]) res.push(b[j]);
    return res;
}

function diffByArr(a, b) { //차집합 a-b // a 리턴(b 다 제거)
    var tmp = {},
        res = [];
    for (var i = 0; i < a.length; i++) tmp[a[i]] = 1;
    for (var j = 0; j < b.length; j++) {
        if (tmp[b[j]]) delete tmp[b[j]];
    }
    for (var k in tmp) res.push(k);
    return res;
}

function sym_diffByArr(a, b) { //대칭차 a+b-(a&&b) //중복값부분 제거된 합집합
    var tmp = {},
        res = [];
    for (var i = 0; i < a.length; i++) tmp[a[i]] = 1;
    for (var j = 0; j < b.length; j++) {
        if (tmp[b[j]]) delete tmp[b[j]];
        else tmp[b[j]] = 1;
    }
    for (var k in tmp) res.push(k);
    return res;
}
//var arr1 = ['A', 'B', 'C', 'D'];
//var arr2 = ['C', 'D', 'E', 'F'];
//console.log( unionByArr(arr1, arr2) );     // ["A", "B", "C", "D", "E", "F"]
//console.log( intersectByArr(arr1, arr2) ); // ["C", "D"]
//console.log( diffByArr(arr1, arr2) );      // ["A", "B"]
//console.log( sym_diffByArr(arr1, arr2) );  // ["A", "B", "E", "F"]
//배열합치기-끝


function rangeByArr(start, edge, step) { //rangeByArr(10) => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] //마지막값 포함 안됨
    // If only one number was passed in make it the edge and 0 the start.
    if (arguments.length == 1) {
        edge = start;
        start = 0;
    }

    // Validate the edge and step numbers.
    edge = edge || 0;
    step = step || 1;

    // Create the array of numbers, stopping befor the edge.
    for (var ret = []; (edge - start) * step > 0; start += step) {
        ret.push(start);
    }
    return ret;
    //console.log(convertStr2Arr1D(rangeByArr(10)));            //[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    //console.log(convertStr2Arr1D(rangeByArr(65, 69)));        //[65, 66, 67, 68]                   //마지막값 포함안됨!!
    //console.log(convertStr2Arr1D(rangeByArr(10, -10.1, -5))); //[10, 5, 0, -5, -10]                //마지막값 포함 시키려면
    //console.log(convertStr2Arr1D(rangeByArr(10, 1)));         //[]
    //console.log(convertStr2Arr1D(rangeByArr(1, 3)));          //[1,2]                              //마지막값 포함안됨!!
    //console.log(convertStr2Arr1D(rangeByArr(5, 2, -1)));      //[5,4,3]                            //마지막값 포함안됨!!
}

function fillArray0(cnt, value) {//제로베열 [0,0,0,0,0,0,...]
    var arr = [], i = 0;
    for (; i < cnt;)arr[i++] = value;
    return arr;
}
function filledArray(len, value) {//제로배열 [0,0,0,0,0,0,...]
    if (len <= 0) return [];
    var result = [value];
    while (result.length < len / 2) {
        result = result.concat(result);
    }
    return result.concat(result.slice(0, len - result.length));
}
function filledArrayString(cnt, txt) {    //filledArrayString(2, "abc")); //['a','b','c','a','b','c']
    return new Array(cnt + 1).join(txt).split('');
}

function convertStr2Arr1D(arr) {//디버깅용 [a,b,c] ---> "[0]:a, [1]:b, [3]:c,"
    if(typeof(arr) === 'undefined') {
        console.log( "err: arr==undefined");
        return;
    }
    if(typeof(arr.length) === 'undefined') {
        console.log( "err: arr.length==undefined");
        return;
    }

    var s = "";
    for (var i = 0; i < arr.length; i++) {
        s += "[" + i + "]:" + arr[i].toString() + ", ";
    }
    return s;
}
function convertStr2Arr2D(arr) {
    if(typeof(arr) === 'undefined') {
        console.log( "err: arr==undefined");
        return;
    }
    if(typeof(arr.length) === 'undefined') {
        console.log( "err: arr.length==undefined");
        return;
    }
    if(typeof(arr[0].length) === 'undefined') {
        console.log( "err: arr[0].length==undefined");
        return;
    }
    var s = "";
    for (var i = 0; i < arr.length; i++) {
        s += "[" + i + "]:";
        for (var k = 0; k < arr[i].length; k++) {
            s += " [" + k + "]:" + arr[i][k];
        }
        s += "\n";
    }
    return s;
}

function deepEqual(x, y) { //비교함수
    if ((typeof x === "object" && x !== null) && (typeof y === "object" && y !== null)) {
        if (Object.keys(x).length !== Object.keys(y).length) return false;
        for (var prop in x) {
            if (y.hasOwnProperty(prop)) {
                if (! deepEqual(x[prop], y[prop])) return false;
            }
            else return false;
        }
        return true;
    }
    else if (x !== y) return false;
    else return true;
}
//deepEqual([1,2,'hello'], [1,2,'hello']); //true
//deepEqual([1,2,'hello'], [1,'2','hello']); //false

//Fast & low GC 1item-splice: //가비지콜렉트줄이는 아이템제거 스프라이스
function splc1(arr, idx){ //arr[idx]만 제거      // 보통splice(a,2)는 배열[a+0],[a+1]제거한다.
    var len=arr.length;
    if (len){
        while (idx<len){
            arr[idx++] = arr[idx];
        }
        --arr.length;
    }
}
//자바스크립트배열 끝-------------------------


//수학<-----------------
//var VxV  = Math.pow(3, 2)            //3^2=9//제곱
//var modV = 5 % 2                     //1    //나머지값

function clamp_MathHelper(value, min, max) { //최대최소값minmax
    if (value < min) {
        return min;
    }
    else if (value > max) {
        return max;
    }
    return value;
}
function lerp__MathHelper(value1, value2, amount) { //인터폴레이션,보간,
        amount = amount < 0 ? 0 : amount;
        amount = amount > 1 ? 1 : amount;
        return value1 + (value2 - value1) * amount;
}

function distance2D(x1, y1, x2, y2) { //거리구하기
    if (!x2) x2 = 0;
    if (!y2) y2 = 0;
    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
}
//Math.dist(0,0, 3,4); //the output will be 5
//Math.dist(1,1, 4,5); //the output will be 5
//Math.dist(3,4); //the output will be 5

//범위 포함, 램덤 정수 생성
function randRangeFromInt(low, high) // Get a random int between low and high, inclusive
{
    return Math.floor(low + Math.random() * (high - low + 1));
}

//--------------------------공A중심xy, 공A반지름, 공B중심xy, 공B반지름 //충돌체크
function circleIntersectionFromPos(x1, y1, r1, x2, y2, r2) {
    // Calculate the distance between the centers
    var dx = x1 - x2;
    var dy = y1 - y2;
    var len = Math.sqrt(dx * dx + dy * dy);

    if (len < r1 + r2) {
        // Circles intersect
        return true;
    }

    return false;
}
//사용예 //레벨에 공이 들어갔을때 충돌체크
//        for (var i=0; i<level.columns; i++) {
//            for (var j=0; j<level.rows; j++) {
//                var tile = level.tiles[i][j];
//                if (circleIntersection(player.bubble.x + level.tilewidth/2,
//                                       player.bubble.y + level.tileheight/2,
//                                       level.radius*0.5,
//                                       coord.tilex + level.tilewidth/2,
//                                       coord.tiley + level.tileheight/2,
//                                       level.radius))
//                {
//                    snapBubble();//충돌처리
//                    return;
//                }
//            }
//        }


//포지션에서 각도를 계산할 때
//라디안값을 각도값으로
function radToDeg(angle) // Convert radians to degrees
{
    return angle * (180 / Math.PI);
}

//각도에서 포지션을 계산할 때
//각도값를 라디안값으로
function degToRad(angle) // Convert degrees to radians
{
    return angle * (Math.PI / 180);
}

function interpolateAngles(a1, a2, weight, radians) {  // interpolated between angles (short leg, scaled to -180..180 / -PI..PI)
    if (typeof radians === 'undefined') { radians = true; }
    var wrap = (radians) ? Math.PI : 180;
    if (Math.abs(a2 - a1) > wrap) {
        if (a2 > a1) {
            a1 += wrap * 2;
        } else {
            a2 += wrap * 2;
        }
    }
    var out = (a1 + ((a2 - a1) * weight));
    if (out >= 0 && out <= wrap * 2) { return out; }
    return (out % (wrap * 2));
}

function moveToAngle(angle, dist) //각도로 거리만큼 이동(로컬좌표리턴)
{
    var ret = [0, 0];
    ret[0] = dist * Math.cos(degToRad(angle));
    ret[1] = dist * -1 * Math.sin(degToRad(angle));
    return ret;
}

//주어진 degree값만큼 회전
function rotateFromPos(cx, cy, x, y, angle) //지정위치에서 회전계산함수
{
    var radians = (Math.PI / 180) * angle,
        cos = Math.cos(radians),
        sin = Math.sin(radians),
        nx = (cos * (x - cx)) + (sin * (y - cy)) + cx,
        ny = (cos * (y - cy)) - (sin * (x - cx)) + cy;
    return [nx, ny];
}

function getAngleFromPos(centerX, centerY, X, Y) {
    //   html screen
    //   (0,0)+---+
    //        |   |
    //        +---+(625,625)
    var mouseangle = radToDeg(Math.atan2(centerY - Y, X - centerX));
    //              (90)
    //               |
    //          179  |   1 
    //      (-180)--중심--(0)
    //          -179 |  359
    //               |
    //             (-90)
    while (mouseangle < 0) {
        mouseangle = mouseangle + 360;
    }
    while (mouseangle > 360) {
        mouseangle = mouseangle - 360;
    }
    //               (90)
    //                 |    
    //         (180)--중심--(0) Math.floor(mouseangle)시
    //                 |
    //               (270)

    return mouseangle;
}

function cropAngleWith180(angle, min, max) {
    //               (90)
    //                 |    
    //         (180)--중심--(0) 좌표계
    //                 |
    //               (270)    
    if (angle > 90 && angle < 270) // Left
    {
        if (angle > max) {
            angle = max;
        }
    } else // Right
    {
        if (angle < min || angle >= 270) {
            angle = min;
        }
    }
    return angle;
}
//원 안에서 랜덤위치(로컬)
function randomPointOnCircle(radius) { //randomPointOnCircle(2); // → 리턴값 [x,y] = [0.3667, 1.966]
    var angle = Math.random() * 2 * Math.PI;
    return [ radius * Math.cos(angle),radius * Math.sin(angle)];
}
//수학> 끝-----------------

if(typeof(ref_)!=='undefined') {
    var chkval2 = (typeof(kData.userData) === 'undefined') ? 'undefined' : "value";//언디파인드예외처리undefined예외처리
    console.log("userData:" + chkval2);
}


//강제정지
function delayTime(ms) {
    var cur_d = new Date();
    var cur_ticks = cur_d.getTime();
    var ms_passed = 0;
    while (ms_passed < ms) {
        var d = new Date(); // Possible memory leak?
        var ticks = d.getTime();
        ms_passed = ticks - cur_ticks;
        // d = null;  // Prevent memory leak?
    }
}
function toDelayRun() {
    setTimeout(function () {
        //
    }, 500); //0.5초 뒤
}
function float2int(f) { //소수->정수
    return Math[f < 0 ? 'ceil' : 'floor'](f);
}

function float2int_fast(f) { //소수->정수
    return f | 0;
}
function rgb2hex(rgbArr) //[1.0,1.0,1.0]->0x000000==[255,255,255] //픽시버젼에 문제가 잇어서 따로사용 
{
    return ((rgbArr[0] * 255 << 16) + (rgbArr[1] * 255 << 8) + rgbArr[1] * 255 << 0);
}
function hex2rgb(hex) { //픽시에 있음, 똑같음
    return [(hex >> 16 & 0xFF) / 255, ( hex >> 8 & 0xFF) / 255, (hex & 0xFF) / 255];
}
function hex2str(hex) //샵버젼 //0x000000->"#000000"
{
    hex = hex.toString(16);
    hex = '000000'.substr(0, 6 - hex.length) + hex;
    return '#' + hex;
}

function ref_string() {
    var isfind = "Hello".includes("hell");
}

function str2int(str) { //스트링을정수로변환,정수변환
    //parseInt("010", 10)  // == 10
    //parseInt("4.23")     // == 4
    //parseInt("012.23")   // == 12
    //parseInt("5.2aa")    // == 5
    //parseInt("5.2aa")    // == NaN
    //parseInt("aaa")      // == NaN
    //Number("aaa")        // == NaN //속도가 더 빠르고, 오류발생요건이 많다
    //"2"*1;               //2       //속도가 더 느림
    return Number(str);
}
function str2float(str) { //소수변환
    //parseFloat('2.34cms')  //Output: 2.34
    //parseFloat('12.5')     //Output: 12.5
    //parseFloat('012.3')    //Output: 12.3
    //parseFloat("34 45 66") //Output: 34
    return parseFloat(str);
}
function int2str(num) {  //스트링변환
    return num.toString();
}
function float2str(num) { //스트링변환
    return num.toString();
}
function floatFixed(num, count) {//소수점 제한
    return num.toFixed(count);
}
function str2int_limited(the_str) {//정수변환 //10배 빠름(Number랑 비교)
    var ret = 0;
    var len = the_str.length;
    if (len >= 1) ret += (the_str.charCodeAt(0) & 0xff) << 0;
    if (len >= 2) ret += (the_str.charCodeAt(1) & 0xff) << 8;
    if (len >= 3) ret += (the_str.charCodeAt(2) & 0xff) << 16;
    if (len >= 4) ret += (the_str.charCodeAt(3) & 0xff) << 24;
    return ret;
}

function number_pad1( a,b ) { //예,pad (1234, 3) => "234" //zerostring,제로스트링 만들기
    return (
        1e15 + a + // combine with large number
        "" // convert to string
    ).slice(-b) // cut leading "1"
}

// function number_pad2(input) { //zerostring,제로스트링 만들기(크기가4로 제한)
//     // var BASE = "0000";
//     // var thiscount =  Math.ceil(input / 10);
//     // return input ? BASE.substr(0, 4 - Math.ceil(input / 10)) + input : BASE;
//     //오류가 있다.
//     //   1 --> 0001,
//     //  11 --> 0011,
//     // 111 -->  111,
//     //1111 --> 1111,
//
//
//     // var BASE = "0000";
//     // var inputcount =  Math.ceil(input / 10);
//     // var sub = BASE.substr(0, 4 - inputcount);
//     // var ret = sub + input;
//     // return ret;
//
//     var BASE = zeropad;//"0000";
//     return input ? BASE.substr(0, (zeropad.length+1) - Math.ceil(input / 10)) + input : BASE;
//
//
//
// }
// function number_pad3(num, count){
//     var ret = num.toLocaleString('en-US',
//         {
//             style: 'decimal',
//             minimumIntegerDigits: count,
//             //minimumFractionDigits: 2, //표시 5.00
//             useGrouping: false
//         });
//     return ret;
// }

function int2str_limited(the_int) { //toString() 보다 빠르다
    /*
     Examples:
     int2str( str2int("test") ) == "test" // true
     int2str( str2int("t€st") ) // "t¬st", because "€".charCodeAt(0) is 8364, will be AND'ed with 0xff
     Limitations:
     max 4 chars, so it fits into an integer
     */
    var tmp = [
        (the_int & 0x000000ff) >> 0,
        (the_int & 0x0000ff00) >> 8,
        (the_int & 0x00ff0000) >> 16,
        (the_int & 0xff000000) >> 24
    ];
    var ret = "";
    for (var i = 0; i < 4; i++) {
        if (tmp[i] === 0)
            break;
        ret += String.fromCharCode(tmp[i]);
    }
    return ret;
}
//--날짜비교<-------------------------
function convertZeroDay(y, m, d) { //int 2017,8,11 --> string '20170811'
    return ""+y+(m<10?('0'+m):m)+(d<10?('0'+d):d);
}

//오늘날짜
var dt = new Date();
var month = dt.getMonth()+1; //0~11이므로 +1해야만 함
var day = dt.getDate();
var year = dt.getFullYear();
var datetoday = convertZeroDay(year, month, day);
if(typeof(dm)!=='undefined') { //dm모드가 언디파인드상태이므로
    if (dm)
        console.log("datetoday:" + datetoday);
}

//한계날짜
var dt_limit = new Date(2017, 7.9, 11, 14, 52, 10, 0); //y,m,d,h=14,mi=52,s=10,ms=0
var month2 = dt_limit.getMonth()+1; //0~11이므로 +1해야만 함
var day2 = dt_limit.getDate();
var year2 = dt_limit.getFullYear();
var datelimit = convertZeroDay(year2, month2, day2);
if(typeof(dm)!=='undefined') {
    if (dm)
        console.log("datelimit:" + datelimit);
}

if(typeof(dm)!=='undefined') {
    if(dm) {
        if (datetoday <= datelimit) console.log("today is before"); //같은 날짜까지 유효
        else console.log("today is over");
    }
}
//--날짜비교>-------------------------

//다이얼로그--트윈 시작-------------
function onFadeoutScale(con, fnEnd) //스케일작게사라지게
{
    //스케일트윈
    TweenMax.fromTo( con.scale,
        0.15, //time
        {
            x: 1,
            y: 1

        }, { //메달트윈
            x: 0.5,
            y: 0.5,
            ease: Linear.easeNone,
            onComplete: fnEnd,
            //onComplete: function(){ runFadeinScale(con);},
            delay: 0.2
        }
    );
    //알파트윈
    TweenMax.fromTo( con,
        0.15, //time
        {
            alpah: 1
        }, { //메달트윈
            alpha: 0,
            ease: Linear.easeNone,
            delay: 0.2
        }
    );
}
function onFadeinScale(con, fnEnd) //스케일크며보이기
{
    con.alpha = 0;
    //스케일트윈
    TweenMax.fromTo( con.scale,
        0.25, //time
        {
            x: 0.5,
            y: 0.5

        }, { //메달트윈
            x: 1,
            y: 1,
            ease: Elastic.easeOut,
            onComplete: fnEnd,
            delay: 0.2
        }
    );
    //알파트윈
    TweenMax.fromTo( con,
        0.25, //time
        {
            alpah: 0
        }, { //메달트윈
            alpha: 1,
            ease: Linear.easeNone,
            delay: 0.2
        }
    );
}
function onFadeout(con, begin, fnEnd) //사라지게
{
    //알파트윈
    TweenMax.fromTo( con,
        0.15, //time
        {
            alpah: begin
        }, { //메달트윈
            alpha: 0,
            ease: Linear.easeNone,
            delay: 0.2
        }
    );
}
function onFadein(con, end, fnEnd) //보이게
{
    //알파트윈
    TweenMax.fromTo( con,
        0.25, //time
        {
            alpah: 0
        }, { //메달트윈
            alpha: end,
            ease: Linear.easeNone,
            delay: 0.2
        }
    );
}
//다이얼로그--트윈 끝-------------


if(typeof(ref_)!=='undefined') {

    //빈객체 생성 //2가지
    var arr = {}; //오브젝트로 초기화
    //err var arr = new Object();

    arr = [1, 2, 3, 4]; //배열로 초기화
    arr = new Array(10, 11, 12, 13, 14, 15, 16, 17, 18, 19); //비추천
    arr.name = "simple array";
    //err arr["name"] =  "tiny array";

    var whatType = typeof (arr[90]); //undefined
    arr[arr.length] = 111; //안전하게 덧붙이기
    var ret111 = arr.pop(); //맨뒤값 리턴, 맨뒤값 제거
    arr.push(222); //맨뒤값 추가(Add),
    var ret10 = arr.shift(); //맨앞값 리턴, 맨앞값 제거
    arr.unshift(-111); //맨앞값 추가
    arr.reverse(); //
    var retC = arr.slice(1, 3); //인덱스[1]~인덱스[3-1]까지 값을 추려서, 결과값 리턴
    arr.sort(CompareForSort); //
    arr.sort(function (a, b) {
        return a.id - b.id
    });
    var retA = arr.splice(2, 3); //[2]부터 3개 제거, 제거값 리턴
    var retB = arr.splice(2, 3, 444, 555); //[2]부터 3개 제거후, [2]에 추가, 제거값 리턴

    arr.toString();
    arr.toLocaleString();
    var retF = arr.concat([20, 21, 22, 23, 24, 25, 26, 27, 28, 29]); //새배열로 연결후, 리턴
    var retG = arr.join(" and "); //스트링 결과 리턴

    //sort용 비교함수
    function CompareForSort(first, second) {
        if (first == second) return 0;
        if (first < second) return -1;
        else return 1;
    }

    for (var i = 0, leng = arr.length; i < leng; i++) {} //참조줄이기

    // //http://stackoverflow.com/questions/10557486/in-an-array-of-objects-fastest-way-to-find-the-index-of-an-object-whose-attribu
    //인덱스리턴소트 sort return index find index
    var test = ['b', 'c', 'd', 'a'];
    var len = test.length;
    var indices = new Array(len);
    for (var i = 0; i < len; ++i) indices[i] = i;
    //indices.sort(function (a, b) { return test[a] < test[b] ? -1 : test[a] > test[b] ? 1 : 0; });//작은-->큰
    indices.sort(function (a, b) {
        return test[a] > test[b] ? -1 : test[a] < test[b] ? 1 : 0;
    });//큰-->작은
    if (dm) console.log(indices);

    //객체
    var obj = {
        name: "Carrot",
        "for": "Max",
        details: {
            color: "orange",
            size: 12
        }
    };

    //객체접근
    var cName1 = obj.details.color;
    //err var cName2 = obj["details"]["size"];

    var hA = "hello";
    var h1 = hA.charAt(0); //h
    var iInt = parseInt("0120", 10); //120
    var rA = hA.replace("hel", "gal"); // gallo
    var hBig = hA.toUpperCase();

    var bA = Boolean(""); //false   //비워있으면 false
    var bB = Boolean(234); //true

    var aString = "1" + 1 + 1; //111   //형변환은 첨것으로 판별
    var aInt = 1 + 1 + "1"; //3

    //err var bTypeA = (1==true);   //true  //형변환하므로
    var bTypeB = (1 === true); //false //반대로 !== 연산자

    var nameA = arr[0] && arr[0].getName();
    var nameB = arr[0] || "default";

    //물음표문
    var allowed = (arr[0] > 18) ? "yes" : "no";

    //스위치문
    switch (arr[0]) {
        case 0:
            break;
        case 1:
            break;
        default:
            break;
    }

    //forin포인반복문 //포문in//포인문
    for (var arr1 in arr) { console.log(arr1);}

    //반전포문//반대포문//역방향포문//역순포문
    var iRevArr = [0,1,2];
    for (var i = iRevArr.length - 1; i >= 0; i--) { console.log(iRevArr[i]); }

    //와일문 //while문 //적어도 1번실행
    var iA = 0;
    do {
        iA += 10;
    } while (iA < 100);

    //일반적인 while
    var iB = 0;
    while (true) {
        iB += 1;
        if (iB > 1000) break; //조건 탈출
    }


    function avg() { //평균함수 //인자를 가변적으로 사용하기
        var sum = 0;
        for (var i = 0, j = arguments.length; i < j; i++) {
            sum += arguments[i];
        }
        return sum / arguments.length;
    }

    var retH = avg(2, 3, 4, 5, 6); //인자를 가변적으로 사용하기
    var retI = avg.apply(null, [2, 3, 4, 5, 6]); //배열인자

    var avgF = function () { //평균함수 //함수를 변수로 지정
        var sum = 0;
        for (var i = 0, j = arguments.length; i < j; i++) {
            sum += arguments[i];
        }
        return sum / arguments.length;
    }; //변수

    //사용자 정의 객체 --어설프고, 전역 이름공간에 관련 함수가 주렁
    function makePerson(first, last) {
        return {
            first: first,
            last: last
        };
    }

    function personFullName(person) {
        return person.first + ' ' + person.last;
    }

    function personFullNameReversed(person) {
        return person.last + ', ' + person.first;
    }

    var sTemp = makePerson("Simon", "Willison");
    personFullName(sTemp); //Simon Willison
    personFullNameReversed(sTemp); //Willison, Simon

    //사용자 정의 객체
    function makePerson(first, last) {
        return {
            first: first,
            last: last,
            fullName: function () {
                return this.first + ' ' + this.last;
            },
            fullNameReversed: function () {
                return this.last + ', ' + this.first;
            }
        }; //변수
    }

    var sName = makePerson("Simon", "Willison");
    var sFull = sName.fullName(); //Simon Willison
    var sReve = sName.fullNameReversed(); //Willison, Simon
    //문제요지
    var sErr = makePerson("Simon", "Willison");
    var fullName = sErr.fullName;
    fullName(); // undefined undefined //전역변수를 참조하려함

    //사용자 정의 객체 --'this'코드의 이점
    function Person(first, last) {
        this.first = first;
        this.last = last;
        this.fullName = function () {
            return this.first + ' ' + this.last;
        };
        this.fullNameReversed = function () {
            return this.last + ', ' + this.first;
        };
    }

    var sNameThis = new Person("Simon", "Willison");

    //사용자 정의 객체 --prototype는 인스턴스
    function Person(first, last) {
        this.first = first;
        this.last = last;
    }

    Person.prototype.fullName = function () {
        return this.first + ' ' + this.last;
    };
    Person.prototype.fullNameReversed = function () {
        return this.last + ', ' + this.first;
    };
    Person.prototype.firstNameCaps = function () {
        return this.first.toUpperCase();
    };
    String.prototype.reversed = function () { //스트링에 추가도 됨
        var r = "";
        for (var i = this.length - 1; i >= 0; i--) {
            r += this[i];
        }
        return r;
    };
    Person.prototype.toString = function () {
        return '<Person: ' + this.fullName() + '>';
    };
    var sPtInst = new Person("Simon", "Willison");
    sPtInst.firstNameCaps(); //SIMON
    var sString = "Simon";
    sString.reversed(); //스트링에 추가된 함수 호출
    //print// sPtInst;                                        //<Person: Simon Willison>

    function lastNameCaps() {
        return this.last.toUpperCase();
    }

    lastNameCaps.call(sPtInst); //apply()는 call이라는 이름을 가진 자매 함수를 가짐
    //apply()와는 대조적으로 확장된 메소드 리스트를 가짐

    //내장함수 //지역 전역 //전역 범위에 들어 있는 함수의 수를 낮게 유지
    function betterExampleNeeded() {
        var a = 1;

        function oneMoreThanA() {
            return a + 1;
        }

        return oneMoreThanA();
    }

    //클로져 //닫힌 주머니 //컨트롤하지 못하는 내부변수 //쉽게 메모리 누출
    function makeAdder(a) {
        return function (b) {
            return a + b;
        };
    }

    var xClosures = makeAdder(5);
    var yClosures = makeAdder(20);
    //xClosures(6); // 11을 돌려줌
    //yClosures(7); // 27을 돌려줌

    //메모리누출 테스트
    var document;

    function leakMemory() {
        var el = document.getElementById('el');
        var o = {
            'el': el
        };
        el.o = o; //el와 o에 의해 사용되는 메모리를 반환하지 못합
    }

    function addHandler() {
        var el = document.getElementById('el'); //JavaScript 객체 (내부 함수)와 원시 객체 (el)간에 순환 참조
        el.onclick = function () { //익명 내부 함수 때문에 생성된 클로져
            this.style.backgroundColor = 'red';
        };
    }

    //메모리누출방지
    function addHandler() {
        var el = document.getElementById('el');
        el.onclick = function () {
            this.style.backgroundColor = 'red';
        };
        el = null; //순환 참조 고리를 끊을
    }

    function addHandler() {
        var clickHandler = function () {
            this.style.backgroundColor = 'red';
        } //순환 참조를 고리를 끊기 위한 한 요령은 또다른 클로져를 추가하는 것
        (function () {
            var el = document.getElementById('el');
            el.onclick = clickHandler;
        })(); //내부 함수는 실행되고 바로 사라지므로서, clickHandler와 함께 생성된 클로져로부터 그 내용을 숨깁니다.
    }

    //---------------정수변환
    var int_a = Math.floor(value); //정수
    var int_b = Math.round(value); //반올림정수
    var int_c = Math.ceil(value); //그냥올림정수

    //---------------트윈맥스모음 ----------------------------------------------------------------------
    var bzPath = [
        {
            x: 0, y: 0
        },
        {
            x: dx, y: 80
        },
        {
            x: dx + dtx, y: dty * 0.5
        },
        {
            x: dtx, y: dty
        }
    ];
    TweenMax.to(nbBubble[index].item, dirdist * 0.00125, //time
        {
            bezier: {
                //type:"cubic",
                type: "soft", //강추
                //autoRotate:true,
                values: bzPath
            },
            ease: Linear.easeNone,
            delay: 0
        }
    );


    //딜레이콜
    TweenMax.delayedCall(0.1, //time
        function () {
            //console.log();
        }
    );



    //작동중인 트윈맥스제거1
    if (TweenMax.isTweening(textobj))
        TweenMax.killTweensOf(textobj);

    //작동중인 트윈맥스제거2
    var dotsTL;
    //순차적 스케일 만들고
    dotsTL = new TimelineMax({repeat: -1});
    dotsTL.add(TweenMax.staggerTo(dots, 0.5, {scale: 0.1}, 0.05));
    dotsTL.add(TweenMax.staggerTo(dots, 0.2, {scale: 1}, 0.05));
    //순차적 스케일 제거
    dotsTL.totalTime(dotsTL.totalDuration()).kill();


    //이동트윈
    TweenMax.fromTo(this, //object
        0.35, //time
        {
            x: 0, y: 0                        //pos
        }, {
            x: 100, y: 0,
            ease: Power1.easeOut,
            //yoyo:true,
            //repeat:1,

            delay: 0.1
        }
    );

    CustomEase.create(
        "bouncing1",
        "M0,0 C0.105,0 0.374,0.058 0.478,0.206 0.632,0.42 0.724,0.963 0.732,1 0.74,0.985 0.79,0.906 0.874,0.906 0.966,0.906 1,1 1,1"//바운드
    );
    //스케일트윈
    TweenMax.fromTo(obj.scale, 1,//time
        {
            x: 0.1, y: 0.1
        }, {
            x: 1, y: 1,
//            ease: RoughEase.ease.config(
//                {
//                    template:  Power0.easeNone,//Power1.easeOut
//                    strength: 0.2,
//                    points: 10,
//                    taper: "none",  //none,in(시작시노이즈없게),out(끝노이즈없게),both(시작끝노이즈없게)
//                    randomize: false, //true(rand),false(regular)
//                    clamp: false
//                }
//            ),
            ease: Linear.easeNone,
            //ease: SteppedEase.config(12),
            //ease: SlowMo.ease.config(0.1, 0.4),
            //ease: "bouncing1", //<--- CustomEase.create
            //ease: Power0.easeOut
            //ease: Sine.easeOut
            //ease: Power1.easeOut,
            //ease: Elastic.easeOut,
            //ease: Bounce.easeOut,
            //yoyo:true,
            //repeat:1, //무한 -1
            //repeatDelay:0.5
            // onStart: function(){};
            // onUpdate: function(){},
            // onComplete: function (){console.log("~ ~ twMaxOncomplete:"+0)},
            // onRepeat: function(){},
            delay: 0
        }
    );

    ///루핑스케일
    TweenMax.fromTo(obj.scale, 0.25, //time
        {
            x: 0.98, y: 0.98
        }, {
            x: 1.02, y: 1.02,
            repeat: -1,
            delay: 1.25,
            ease: Power1.easeInOut,
            yoyo: true
        }
    );

    //트윈맥스투
    var tween = TweenMax.to(obj, 2,//time
        {
            scaleX: 153,
            ease: Linear.easeNone
        }
    );


    //값트윈
    var twVal = {score: 0};
    twVal.score = 0; //시작시초기화
    TweenMax.fromTo(twVal, 0.5, //time
        {
            score: 0
        }, {
            score: 1234,
            ease: Linear.easeNone,
            onUpdate: function () {
                twText.text = getMoneyFormatFromNum(twVal.score);
            },
            delay: 0.5
        }
    );

    //트윈맥스스태거
    grp.z_stagging = true;
    TweenMax.staggerFrom(grp.dlbg.sIcons, 0.15, //1개당시간
        {
            alpha: 0,
            ease: Linear.easeNone, //ease:Power1.easeOut, ease:Elastic.easeOut,
            delay: 0 //첫시작1번만
        },
        0.03,//다음트윈까지시간
        function () {
            grp.z_stagging = false;
        }//onCompleteAll
    );

    //트윈맥스로컬이동//로컬트윈맥스
    var combo = grp;
    TweenMax.set(combo, {alpha: 1, y:0});
    TweenMax.to(combo, 0.5, {
        y: "-=100",
        alpha: 0,
        ease: Linear.easeNone,
        onComplete: function () { combo.onHide(); },
        onUpdate: function () { console.log(combo.y); }
    });

    //---------------트윈맥스종료 ----------------------------------------------------------------------
} //if(typeof(ref_)!=='undefined')


if(typeof(ref_)!=='undefined') {
    function _ref_objectindex() { //오브젝트 인덱스
        //오브젝트 {}를  값을 인덱스로 가져오기
        (function () {
            if (!Array.prototype.indexOfPropertyValue) {
                Array.prototype.indexOfPropertyValue = function (prop, value) {
                    for (var index = 0; index < this.length; index++) {
                        if (this[index][prop]) {
                            if (this[index][prop] == value) {
                                return index;
                            }
                        }
                    }
                    return -1;
                }
            }
        })();
        // usage:
        var Data = [
            {id_list: 1, name: 'Nick', token: '312312'}, {id_list: 2, name: 'John', token: '123123'}];
        Data.indexOfPropertyValue('name', 'John'); // returns 1 (index of array);
    }
} //if(typeof(ref_)!=='undefined')

//------------------------해쉬테이블--시작-------------------
if(typeof(ref_)!=='undefined') {
//http://www.mojavelinux.com/articles/javascript_hashes.html
    function HashTable(obj) {
        this.length = 0;
        this.items = {};
        for (var p in obj) {
            if (obj.hasOwnProperty(p)) {
                this.items[p] = obj[p];
                this.length++;
            }
        }

        this.setItem = function (key, value) {
            var previous = undefined;
            if (this.hasItem(key)) {
                previous = this.items[key];
            }
            else {
                this.length++;
            }
            this.items[key] = value;
            return previous;
        },

            this.getItem = function (key) {
                return this.hasItem(key) ? this.items[key] : undefined;
            },

            this.hasItem = function (key) {
                return this.items.hasOwnProperty(key);
            },

            this.removeItem = function (key) {
                if (this.hasItem(key)) {
                    previous = this.items[key];
                    this.length--;
                    delete this.items[key];
                    return previous;
                }
                else {
                    return undefined;
                }
            },

            this.keys = function () {
                var keys = [];
                for (var k in this.items) {
                    if (this.hasItem(k)) {
                        keys.push(k);
                    }
                }
                return keys;
            },

            this.values = function () {
                var values = [];
                for (var k in this.items) {
                    if (this.hasItem(k)) {
                        values.push(this.items[k]);
                    }
                }
                return values;
            },

            this.each = function (fn) {
                for (var k in this.items) {
                    if (this.hasItem(k)) {
                        fn(k, this.items[k]);
                    }
                }
            },

            this.clear = function () {
                this.items = {}
                this.length = 0;
            }
    }
}//if(typeof(ref_)!=='undefined') {
// 해쉬 사용법
// var h = new HashTable({one: 1, two: 2, three: 3, "i'm no 4": 4});
//
// alert('original length: ' + h.length);
// alert('value of key "one": ' + h.getItem('one'));
// alert('has key "foo"? ' + h.hasItem('foo'));
// alert('previous value of key "foo": ' + h.setItem('foo', 'bar'));
// alert('length after setItem: ' + h.length);
// alert('value of key "foo": ' + h.getItem('foo'));
// alert('value of key "i'm no 4": ' + h.getItem("i'm no 4"));
// h.clear();
// alert('length after clear: ' + h.length);
//------------------------해쉬테이블--끝-------------------


//---"~해쉬디버그"-----------------------
//--디버그text스타일--
var style_debug = {
    font: "30px Arial",
    fill: hex2str(ColorSet.white),
    align: "right",
    stroke: hex2str(ColorSet.black),
    strokeThickness: 5,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
//--디버그text스타일--
//--text오브젝트 만들기--
// this.txDebug =  uigame.add.text(0, 0, "debug:", style_debug);
// this.txDebug.anchor.setTo(1,1);
// this.txDebug.position.setTo(720,1280);
// txdebug = this.txDebug;
//--text오브젝트 만들기--

var hsDebug = {};
hsDebug_len = 0; //해쉬갯수
hsDebug_str = "";       //해쉬의 스트링화
hsDebug_h1 = undefined; //실제 해쉬

hsDebug.onUpdateHash = function ( ) {
    //디버그해쉬-->text출력
    hsDebug_str = "";
    hsDebug_len = 0;
    for (var hsDebug_h1 in hsDebug) {
        //hsDebug_h1 단순string이므로
        if (hsDebug_h1[0] === "~") {
            if(hsDebug_h1[1]==="i"){
                hsDebug_str += ( hsDebug[hsDebug_h1][0] + ": " + float2int_fast(hsDebug[hsDebug_h1][1]) + ",\n" );
            }else {
                hsDebug_str += ( hsDebug[hsDebug_h1][0] + ": " + hsDebug[hsDebug_h1][1] + ",\n" );
            }
            hsDebug_len++; //해쉬갯수
        }
    }
    if (typeof txdebug !== 'undefined') { //if (txdebug !== undefined) { //언디파인처리
        if (hsDebug_str !== txdebug.text) {        //text업데이트횟수 줄일려고, 스트링검사
            txdebug.text = hsDebug_str;
        }
    }
};

//해쉬디버그에 등록(초기화겸 업데이트)
hsDebug.onSet = function (name, val) { //해쉬디버그에 값대입만
    hsDebug["~" + name] = [name, val];
};
hsDebug.onMax = function (name, val) { //해쉬디버그에 최대값만
    hsDebug_h1 = hsDebug["~" + name];
    if (hsDebug_h1 === undefined) {
        hsDebug["~" + name] = [name, val]; //처음일때
    }else {
        if (val > hsDebug_h1[1]) hsDebug["~" + name] = [name, val];
    }
};
hsDebug.onMin = function (name, val) { //해쉬디버그에 최소값만
    hsDebug_h1 = hsDebug["~" + name];
    if (hsDebug_h1 === undefined) {
        hsDebug["~" + name] = [name, val]; //처음일때
    }else {
        if (val < hsDebug_h1[1]) hsDebug["~" + name] = [name, val];
    }
};
hsDebug.onAdd = function (name, val) { //해쉬디버그에 더하기
    hsDebug_h1 = hsDebug["~" + name];
    if (hsDebug_h1 === undefined) {
        hsDebug["~" + name] = [name, val]; //처음 입력되는 변수
    }
    else {
        hsDebug["~" + name] = [name, val + hsDebug_h1[1]]; //기존 변수 업데이트
    }
};

//hsDebug.onSet("~os", 1234);
//hsDebug.onSet("~v1", "aa");
//hsDebug.onSet("~os", "ios");
//if(dm) hsDebug.onAdd("elapsed", this.game.time.elapsed);
//if(dm) hsDebug.onUpdateHash();
//--"~해쉬디버그"----------------------
//페이저에서 속도 변속 //speed값으로 변속 시키기
function accelerateToXYFromLocal(obj1, localx, localy, speed) {
    //          +          //          |
    //  -3.14   |          //  |       local--
    //     +----+----+ 0   //  obj1--   (xy)
    //  +3.14   |          //  (xy)
    //          +
    //var angle = Math.atan2((obj1.y+gotoy) - obj1.y, (obj1.x+gotox)- obj1.x);
    var angle = Math.atan2(localy, localx);
    obj1.body.velocity.x = Math.cos(angle) * speed;
    obj1.body.velocity.y = Math.sin(angle) * speed;
    return angle;
}

//그룹내에서 죽은것을만 Destroy한다.
function cleanUp(grp)
{
    var aCleanup = [];
    grp.forEachDead(function(item){
        aCleanup.push(item);
    });

    var i = aCleanup.length - 1;
    while(i > -1)
    {
        var getitem = aCleanup[i];
        getitem.destroy();
        i--;
    }
}

function ref_phaser() {
    var dir = Phaser.Math.angleBetweenPoints(ball.body.prev, ball.body.position); //위치값으로 방향알기 //라디안값
}

function _ref_phaser_memory() { //메모리관리
    //모두 종료시 제거하는 예제
    function shutdown() {
        //destroy bitmap text
        this.creditText = null;

        //destroy tween
        if (this.creditTween) {
            this.creditTween.onComplete.removeAll();
            this.creditTween.stop();
            this.creditTween = null;
        }
        //destroy sound
        if (this.clickSnd) {
            this.clickSnd.stop();
            this.clickSnd = null;
        }
        //destroy button
        if (this.soundButton) {
            this.soundButton.kill();
            this.soundButton = null;
        }
        //destroy sprite
        if (this.backing) {
            this.backing.destroy();
            this.backing = null;
        }
        if (dm) console.log('destroy TitleMenu');
    }

    function onebyone_pool() {
        //일반 오브젝트 메모리관리----------
        //1.초기화
        var enemies = game.add.group();
        for (var i = 0; i < 8; i++) {
            enemies.create(360 + Math.random() * 200, 120 + Math.random() * 200, 'baddie');
        }

        //2.제거
        var _remove1 = enemies.getFirstAlive();         //(child.alive===true)인것 가져오기
        if (_remove1) {
            _remove1.kill();
        }              //살아있으면 Kill

        //3.할당
        var _create1 = enemies.getFirstExists(false);   //있는지 없는지 모르지만 가져오기, 자동생성(false)없이 가져오기
        if (_create1) {
            _create1.revive();
        }            //존재하면 생성

        //4.갯수파악
        if (dm) console.log(enemies.countLiving());
    }

    //총알 메모리 관리 ----------------
    //https://gamemechanicexplorer.com/#bullets-1
    function bullet_pool() {
        //프리로드
        function preload() {
            this.game.load.image('bullet', '/assets/gfx/bullet.png');
            //옵션4: 곡사포--------------
            this.game.load.image('ground', '/assets/gfx/ground.png');
            this.game.load.spritesheet('explosion', '/assets/gfx/explosion.png', 128, 128);
            //옵션4: 곡사포--------------
        }

        //1.초기화
        function create() {
            this.SHOT_DELAY = 100;                   // milliseconds (10 bullets/second)
            this.BULLET_SPEED = 500;                 // pixels/second

            //꼭 택1
            //--------------------------선택1: 발사 총알 1개일경우
            this.NUMBER_OF_BULLETS = 1;
            //--------------------------선택1: 발사 총알 1개일경우
            //--------------------------선택2: 전체 총알 발사
            //this.NUMBER_OF_BULLETS = 20;
            //--------------------------선택2: 전체 총알 발사

            //옵션4: 곡사포--------------
            this.GRAVITY = 980; // pixels/second/second
            //옵션4: 곡사포--------------


            this.gun = this.game.add.sprite(50, this.game.height / 2, 'bullet'); //총만들기
            this.gun.anchor.setTo(0.5, 0.5);                                   //총만들기

            this.bulletPool = this.game.add.group(); //총알그룹생성
            for (var i = 0; i < this.NUMBER_OF_BULLETS; i++) {

                var bullet = this.game.add.sprite(0, 0, 'bullet');// 각각 총알 생성, 그룹에 추가
                this.bulletPool.add(bullet);

                bullet.anchor.setTo(0.5, 0.5);            //총알 중심에 피봇 설정

                this.game.physics.enable(bullet, Phaser.Physics.ARCADE);            // 총알 물리 적용
                bullet.kill();            // 초기상태를 죽기로 변환
            }

            //옵션3: 총신이 겨냥해야할경우----------------
            // Simulate a pointer click/tap input at the center of the stage
            // when the example begins running.
            this.game.input.activePointer.x = this.game.width / 2;
            this.game.input.activePointer.y = this.game.height / 2;
            //옵션3: 총신이 겨냥해야할경우----------------

            //옵션4: 곡사포---------------
            // Turn on gravity
            game.physics.arcade.gravity.y = this.GRAVITY;
            // Create some ground
            this.ground = this.game.add.group();
            for (var x = 0; x < this.game.width; x += 32) {
                // Add the ground blocks, enable physics on each, make them immovable
                var groundBlock = this.game.add.sprite(x, this.game.height - 32, 'ground');
                this.game.physics.enable(groundBlock, Phaser.Physics.ARCADE);
                groundBlock.body.immovable = true;
                groundBlock.body.allowGravity = false;
                this.ground.add(groundBlock);
            }
            // Create a group for explosions
            this.explosionGroup = this.game.add.group();
            // Simulate a pointer click/tap input at the center of the stage
            // when the example begins running.
            this.game.input.activePointer.x = this.game.width / 2;
            this.game.input.activePointer.y = this.game.height / 2 - 100;
            //옵션4: 곡사포---------------
        }

        //2.발사 이벤트처리 메소드 함수
        function shootBullet() {
            if (this.lastBulletShotAt === undefined) this.lastBulletShotAt = 0;// 바로전딜레이타임 변수 초기화
            if (this.game.time.now - this.lastBulletShotAt < this.SHOT_DELAY) return;// 딜레이 미만이면 거부
            this.lastBulletShotAt = this.game.time.now;// 바로전딜레이타임 변수에 현재 시간 저장
            var bullet = this.bulletPool.getFirstDead();//킬상태인 총알 가져오기
            if (bullet === null || bullet === undefined) return;// 총알상태가 이상하면 거부

            bullet.revive();// 총알을 "alive"상태로

            bullet.checkWorldBounds = true;//총알은 월드를 벗어나면 kill상태가 된다. phaser가 플래그를 통해 관리하고 잇다
            bullet.outOfBoundsKill = true;//내가 따로 월드좌표를 이용해서 kill상태로 할수있다.

            bullet.reset(this.gun.x, this.gun.y); //총구 위치로

            //꼭 택1
            //선택1,2: 직선슈팅1발,여러발 경우--------------------------
            bullet.body.velocity.x = this.BULLET_SPEED;//발사
            bullet.body.velocity.y = 0;
            //선택1,2: 직선슈팅1발,여러발 경우--------------------------
            //선택3,4: 겨냥슈팅,곡사포 경우--------------------------
            bullet.rotation = this.gun.rotation;
            bullet.body.velocity.x = Math.cos(bullet.rotation) * this.BULLET_SPEED;// Shoot it in the right direction
            bullet.body.velocity.y = Math.sin(bullet.rotation) * this.BULLET_SPEED;
            //선택3,4: 겨냥슈팅,곡사포 경우--------------------------

        }

        //3.발사 작동시 업데이트 함수
        _GameState.prototype.update = function () {

            //옵션3: 겨냥슈팅 경우-------------------
            // Aim the gun at the pointer.
            // All this function does is calculate the angle using
            // Math.atan2(yPointer-yGun, xPointer-xGun)
            this.gun.rotation = this.game.physics.arcade.angleToPointer(this.gun);
            //옵션3: 겨냥슈팅 경우-------------------
            //옵션4:곡사포------------------------
            // Check if bullets have collided with the ground
            this.game.physics.arcade.collide(this.bulletPool, this.ground, function (bullet, ground) {
                this.getExplosion(bullet.x, bullet.y);// Create an explosion
                bullet.kill();// Kill the bullet
            }, null, this);
            this.bulletPool.forEachAlive(function (bullet) {            // Rotate all living bullets to match their trajectory
                bullet.rotation = Math.atan2(bullet.body.velocity.y, bullet.body.velocity.x);
            }, this);
            this.gun.rotation = this.game.physics.arcade.angleToPointer(this.gun);
            //옵션4:곡사포------------------------


            if (this.game.input.activePointer.isDown) {
                this.shootBullet();
            }
        };
    }
}

function _ref_phaser_timer() {
    var utiljs_game = new Phaser.Game(800, 600, Phaser.CANVAS, 'phaser-example',
        {
            preload: function () { },
            create: function () { },
            render: function () { }
        },
        false, //transparent //true:첫로고화면에서 검정배경나옴
        true //antialias //true:픽셀 부드럽게 //false:픽셀 각지게 보이게
    );

//1초에 한번 ++1 타이머
    game.time.events.loop(Phaser.Timer.SECOND,
        updateCounter,
        this
    );
    function updateCounter() {
        counter++;
    }

//2초에 한번씩(10회만) 타이머
    game.time.events.repeat(Phaser.Timer.SECOND * 2,
        10,
        _createBall,
        this
    );
    function _createBall() { //  A bouncey ball sprite just to visually see what's going on.
        var ball = game.add.sprite(game.world.randomX, 0, 'ball');
        game.physics.enable(ball, Phaser.Physics.ARCADE);
    }

//4초에 페이드아웃 실행  타이머
    game.time.events.add(
        Phaser.Timer.SECOND * 4,
        fadePicture,
        this
    );
    function fadePicture() {
        game.add.tween(picture).to({alpha: 0}, 2000, Phaser.Easing.Linear.None, true);
    }

//2초 커스텀타이머   타이머
    var total = 0;
    timer = game.time.create(false);
    timer.loop(2000, updateCounter2sec, this);
    timer.start();
    function updateCounter2sec() {
        total++;
    }

//0.25~1초 타이머배열 생성후 클릭시 삭제   타이머
    var counters = [];
    var text = [];
    var timerEvents = [];
    var i = 9;
    for (var i = 0; i < 10; i++) {
        counters[i] = 0;
        //  Here we create our timer events. They will be set to loop at a random value between 250ms and 1000ms
        timerEvents[i] = game.time.events.loop(game.rnd.integerInRange(250, 1000),
            updateCounter,
            this,
            i
        );
    }
    //클릭시 타이머 1개 제거
    game.input.onDown.add(removeCounter, this);//  Click to remove
    function removeCounter() {
        if (i >= 0) {
            game.time.events.remove(timerEvents[i]);        //  Removes the timer, starting with the top one and working down
            i--;
        }
        if (dm) console.log("Queued events: " + game.time.events.length);
    }

//슬라이드 커스텀타이머
    pictureA = game.add.sprite(game.world.centerX, game.world.centerY, 'picture1');
    pictureB = game.add.sprite(game.world.centerX, game.world.centerY, 'picture2');
    timer = game.time.create(false); //  Create our Timer
    timer.add(3000, fadePictures, this);//  Set a TimerEvent to occur after 3 seconds
    timer.start();
    function fadePictures() {
        var tween; //  Cross-fade the two pictures
        if (pictureA.alpha === 1) {
            tween = game.add.tween(pictureA).to({alpha: 0}, 2000, Phaser.Easing.Linear.None, true);
            game.add.tween(pictureB).to({alpha: 1}, 2000, Phaser.Easing.Linear.None, true);
        }
        else {
            game.add.tween(pictureA).to({alpha: 1}, 2000, Phaser.Easing.Linear.None, true);
            tween = game.add.tween(pictureB).to({alpha: 0}, 2000, Phaser.Easing.Linear.None, true);
        }
        tween.onComplete.add(changePicture, this); //When the cross-fade is complete we swap the image being shown by the now hidden picture
    }

    function changePicture() {
        if (pictureA.alpha === 0) {
            pictureA.loadTexture('picture' + current);
        }
        else {
            pictureB.loadTexture('picture' + current);
        }
        current++;      //다음단계 그림들로 교체
        if (current > 7) {
            current = 1;
        }
        timer.add(3000, fadePictures, this);    //  And set a new TimerEvent to occur after 3 seconds
    }
}//_ref_phaser_timer

function _ref_phaser_random() {
    var images = game.cache.getKeys(Phaser.Cache.IMAGE);//로딩한 이미지 배열 가져오기
    var img = game.rnd.pick(images);//배열에서 이미지 랜덤 선택

    var randx = game.world.randomX; //스크린 랜덤x
    var randy = game.world.randomY; //스크린 랜덤y
    var tempSprite = game.add.sprite(randx, randy, img);


    tempSprite.inputEnabled = true;                         //-----------------드래그 상위로 이동
    tempSprite.input.enableDrag(
        false,  //lockCenter ==무조건 가운데 정렬
        true    //레이어 상위로 이동
    );
    //( enableDrag 인자들
    // lockCenter,
    // bringToTop,
    // pixelPerfect,
    // alphaThreshold,
    // boundsRect,
    // boundsSprite
    //)
}

//로컬->월드좌표:debugrect.x = debugsprite.worldPosition.x;
//월드로컬변환,월드좌표->로컬좌표로변환 //작동 제대로 안함
function worldToLocal(x, y, obj) {
    var lx = x;
    var ly = y;
    var parent = obj;
    while (parent != null && !(parent instanceof Phaser.World)) {
        lx -= parent.position.x;
        ly -= parent.position.y;
        parent = parent.parent;
    }
    return {x: lx, y: ly};
}
if(false) {
    function ref_problem() {
        ///----------------------------
        ////실제 문제코드//프로토타입사용
        BallObject = function (game, x, y) {
            Phaser.Sprite.call(this, game, x, y, 'basketball');
        };
        BallObject.prototype = Object.create(Phaser.Sprite.prototype);
        BallObject.prototype.constructor = BallObject;
        ///----------------------------
        ////문제코드//프로토타입사용
        classABC = function () {
        };
        classABC.prototype.myMethod1 = function () {
            console.log('myMethod');
        };
        classABC.prototype.myMethod2 = function () {
            console.log('myMethod2');
        };
        ////----------------------------
        //플로토타입,클래스 사용 안하는 개선코드
        var myMethod1F = function () {
            console.log('myMethod1');
        };
        var myMethod2F = function () {
            console.log('myMethod2');
        };
        classABC = function () {
            return {myMethod1: myMethod1F, myMethod2: myMethod2F}
        };
        // 페이저 추천방법(개선코드)---------------------------
        // instead of "game.time.now", "physicsElapsed"
        // use       "game.time.time
        // 페이저 추천방법(개선코드)--------------------------
        // 트윈이 다 로드된후 실행된다.
        // use game.time.events.add(1, fadeIn);
        ///----------------------------
    }
} //if !undefined

//페이저 사운드 로딩-시작
if(false) {
    function playMusic() {
        this.game.asyncLoad('song', 'song.mp3', function () {
            var music = this.game.add.audio('song');
            music.play();
        });
    }
    function asyncLoad(cacheKey, path, onLoad) {
        this.game.load.audio(cacheKey, path);
        this.game.load.start();
        // start the loader
        var index = window.setInterval(function () {
            if (this.game.load.isLoading) {
                return;
            }
            onLoad();
            window.clearInterval(index);
        }, 1000);
    }
} //if !undefined

//페이저 //y값순으로 링크순서변경 //배열셔플, 배열섞기, 배열소트, 배열정렬
if(false) {
    var locs = [];
    for (var i = 0; i < 16; i++) {
        locs.push((i * 32) + Math.random()); //[0.3, 32.9, 64.2, ....]
    }
    locs = Phaser.ArrayUtils.shuffle(locs); //[448.5, 224.2, 320.7 ....]

    grpA = game.add.group();
    for (var i = 0; i < 16; i++) { grpA.create(400, locs[i], 'someSprite', 0); }
    game.input.onDown.addOnce(sort, this);

    function sort() {     //그룹A소트 -- y값순서와 링크순서 동일(0,1,2,3..)
        grpA.sort('y', Phaser.Group.SORT_ASCENDING);
    }
} //if 'undefined'

//랜덤시드
if(false){
    game.rnd.sow([123]);
    console.log('A');
    console.log(game.rnd.integer());
    console.log(game.rnd.integer());
    console.log(game.rnd.integer());
    console.log(game.rnd.integer());
    console.log(game.rnd.integer());

    game.rnd.sow([0]);
    console.log('B');
    console.log(game.rnd.integer());
    console.log(game.rnd.integer());
    console.log(game.rnd.integer());
    console.log(game.rnd.integer());
    console.log(game.rnd.integer());

    game.rnd.sow([123]);
    console.log('C');
    console.log(game.rnd.integer());
    console.log(game.rnd.integer());
    console.log(game.rnd.integer());
    console.log(game.rnd.integer());
    console.log(game.rnd.integer());
}

//https://phaser.io/examples/v2/groups/depth-sort에서  createUniqueLocation()
//화면 범위에서 램덤 그리드(32x32)200개 고르기
if(false) {
    var sss="";
    var locs=[];
    //200개 생성(전체그리드 25x??(15이상)
    var xgrd=0;
    var ygrd=0;
    var w=game.world.width;
    var h=game.world.height;
    var rx=0;
    var ry=0;

    for (var i = 0; i < 200; i++) {
        //유니크 위치함수
        do {
            // 0    15   31 32   47   63
            // +----------+ +----------+
            // |   grid0  | |   grid1  |
            // |    +     | |    +     |
            // |          | |          |
            // +----------+ +----------+
            rx=game.world.randomX; //화면 랜덤 위치
            ry=game.world.randomY; //화면 랜덤 위치
            // 16       32+16     64+16
            xgrd = Phaser.Math.snapTo(rx, 32) / 32; //0~15->0, 16~47->1, 48~79->2
            ygrd = Phaser.Math.snapTo(ry, 32) / 32; //0~15->0, 16~47->1, 48~79->2

            if (ygrd > 17) {ygrd = 17;}  //고유번호 생성을 위해서는 그리드가 일정해야
            var idx = (ygrd * 17) + xgrd;//고유번호 생성 //중복확인될 번호

        } while (locs.indexOf(idx) !== -1);//생성고유번호가 중복이면 다시 생성

        locs.push(idx);                  //고유번호를 배열에 저장
        //console.log(convertStr2Arr1D(locs)); //배열디버그

        //그리드->화면좌표계변환
        //var position =[32*xgrd, 32*ygrd];//위치생성
        //group.create(x * 32, y * 32, 'trees', game.rnd.integerInRange(0, 7));

        sss+=(
            "rxy:" + number_pad3(rx, 4)
            +"," + number_pad3(ry, 4)
            +",gridxy:" + number_pad3(xgrd, 4)
            +"," + number_pad3(ygrd, 4)+"\n"
        );

    }//for
    console.log(sss);


    function getRandGridArr( count, grdszx, grdszy) {
        for (var i = 0; i < count; i++) {
            //유니크 위치함수
            do {
                rx=game.world.randomX; //화면 랜덤 위치
                ry=game.world.randomY; //화면 랜덤 위치
                // 16       32+16     64+16
                xgrd = Phaser.Math.snapTo(rx, 32) / 32; //0~15->0, 16~47->1, 48~79->2
                ygrd = Phaser.Math.snapTo(ry, 32) / 32; //0~15->0, 16~47->1, 48~79->2

                xgrd=uigame.rnd.integerInRange(0, 3); //랜덤(0~3포함)
                ygrd=uigame.rnd.integerInRange(0, 3); //랜덤(0~3포함)


                if (ygrd > 17) {ygrd = 17;}  //고유번호 생성을 위해서는 그리드가 일정해야
                var idx = (ygrd * 17) + xgrd;//고유번호 생성 //중복확인될 번호

            } while (locs.indexOf(idx) !== -1);//생성고유번호가 중복이면 다시 생성

            locs.push(idx);                  //고유번호를 배열에 저장
            //console.log(convertStr2Arr1D(locs)); //배열디버그

            //그리드->화면좌표계변환
            //var position =[32*xgrd, 32*ygrd];//위치생성
            //group.create(x * 32, y * 32, 'trees', game.rnd.integerInRange(0, 7));

            sss+=(
                "rxy:" + number_pad3(rx, 4)
                +"," + number_pad3(ry, 4)
                +",gridxy:" + number_pad3(xgrd, 4)
                +"," + number_pad3(ygrd, 4)+"\n"
            );

        }//for
    }
} //if !undefined
/**
 * Created by NeoHan on 2017-05-18.
 */

//var networkTF=networkTF || 0;
var nvmode=false;
var gotonext=false;

var uigame;

var naverShop;
var naverShop2;

var uishopinmenu = false;

var bSoundSE = false;//소리수정
var bSoundBGM = false;//소리수정
var bSoundSE_bak = false;
var bSoundBGM_bak = false;
// //소리수정 추가
// var bSoundSE = false;
// var bSoundBGM = false;
// var bSoundSE_bak = false;
// var bSoundBGM_bak = false;

//광고혜관님설정-----
var isApp = isApp || false;
var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
var eventer = window[eventMethod];
var messageEvent = eventMethod === "attachEvent" ? "onmessage" : "message";

eventer(messageEvent,function(e) {
    if(e.data==="true"){
        isApp = true;
    }
},false);

window.parent.postMessage("callApk", "*");
//광고혜관님설정-----

//광고혜관님설정----------지워야 할 코드
// window.onerror = function(msg, url, linenumber) {
//     alert('Error message: '+msg+'\nURL: '+url+'\nLine Number: '+linenumber);
//     return true;
// };
//광고혜관님설정-----ㄴ-----지워야 할 코드


var curBGM = "BGM_ALL";

function selectBGM(bgmname, restart) { //"BGM_ALL" "BGM_Game_Nomal" "BGM_Game_Ranking"
    switch (bgmname){
        case "BGM_ALL":
            BGM_ALL.mute = kData.bSoundBGM ? false : true; //in selectBGM
            BGM_Game_Nomal.mute = true;              //in selectBGM
            BGM_Game_Ranking.mute = true;            //in selectBGM
            curBGM = "BGM_ALL";

            if(restart) {
                if (BGM_ALL.mute === false) {
                    BGM_ALL.restart(undefined, undefined, undefined, true);
                }
            }
        break;

        case "BGM_Game_Nomal":
            BGM_ALL.mute = true;                            //in selectBGM
            BGM_Game_Nomal.mute = kData.bSoundBGM ? false : true; //in selectBGM
            BGM_Game_Ranking.mute = true;                   //in selectBGM
            curBGM = "BGM_Game_Nomal";
            if(restart) {
                if (BGM_Game_Nomal.mute === false) {
                    BGM_Game_Nomal.restart(undefined, undefined, undefined, true);
                }
            }
        break;

        case "BGM_Game_Ranking":
            BGM_ALL.mute = true;                              //in selectBGM
            BGM_Game_Nomal.mute = true;                       //in selectBGM
            BGM_Game_Ranking.mute = kData.bSoundBGM ? false : true; //in selectBGM
            curBGM = "BGM_Game_Ranking";
            if(restart) {
                if (BGM_Game_Ranking.mute === false) {
                    BGM_Game_Ranking.restart(undefined, undefined, undefined, true);
                }
            }
        break;

        default:
            BGM_ALL.mute = true;          //in selectBGM
            BGM_Game_Nomal.mute = true;   //in selectBGM
            BGM_Game_Ranking.mute = true; //in selectBGM
        break;
    }
}

var ispausemode = false;



var touchscreen=false;
var touchfirst=false; //모바일 터치1 체크용
var touched=false;
var released=true;
//var ending_fin_begin=false;
//var ending_fin=false;

var _steps = {
        none:0,
        begin:1,
        step1:2,
        step2:3,
        step3:4,
        end:5

};
var ending_step = _steps.none;
//bb variable----------------------------------------
// var bubble_levels = [
//     { id:0,
//         balls: [
//             {x:2, y:17, att:1},
//             {x:3, y:17, att:1},
//             {x:6, y:1, att:2}
//         ]
//     },
//     { id:1,
//         balls: [
//             {x:4, y:5, att:0},
//             {x:5, y:5, att:0}
//         ]
//     }
// ];

// console.log(
//     "id:"+bubble_levels[0].id
//     +", length:"+ bubble_levels.length
//     +", ball[0].x:"+bubble_levels[0].balls[0].x
//     +", ball[0].y:"+bubble_levels[0].balls[0].y
//     +", ball[0].a:"+bubble_levels[0].balls[0].a
//     +", ball[0].length:"+bubble_levels[0].balls.length
// );


var iHeartChargeMax = 10;
var iHeartInitData = 20;
var fHeartChargeTime = 10;       // 광고충전 타임

//게임전역변수,전역게임변수
var LV4x4 = 16; //아이콘 선택창 갯수
//var LEVEL_MAX = 240;
var LEVEL_MAX = 320;
var curPage = 0;
var curLevel = 0;
var curLevelFake = "1";
var playedLevel = 0;
//var curScore = 0;
var curLives = 0;
var MaxLife =1;
var curMyStars=0;

var lastOpenedId=-1;

var isBonusLvId = false;

var _combotemp=0;//불공,관통공 임시콤보저장소

var enablePlayTime=false;

var BonusLineCount = -1;
var BonusHeartCount = -1;
var BonusHeartPerLine = -1;
var BonusHeartRemain = -1;
var BonusHeartShare = -1;
var BonusGridxArr=[0,1,2,3,4,5,6,7,8,9,10];
var BonusXArr=[];
//var BonusGridIdx=0;
var RemainAccum=0;
var BonusLocated=-1;

var intro_fin=false;

//리트라이삭제 var retrymode = false;

//var ScoreBc0 = 50;

//var ScoreBcHP2 = 50; //초코블록1단계 접촉 획득점수
//var ScoreBcHP1 = 60;
//var ScoreBcHP0 = 80;

//var ScoreBear2 = 90; //곰젤리 1단계 제거시 획득점수
//var ScoreBear1 = 100;
//var ScoreBear0 = 110;

//var ScoreGold0 = 120; //무적블록 접촉시 획득점수
//var ScoreGoldx = 1000;

//var ScoreITem = 500;

//타일배치시 시작점과 타일 크기
var strtx = 60;
var strty = 149;
var szx = 60; //60x11타일=660, 660+30왼쪽+30오른쪽==720
var szy = 32;
var endx = strtx+(11*szx);

var Paddle=undefined; //this.paddle
var BoundLeftOffsetByPaddle=undefined; //this.boundLeftOffsetByPaddle
var BoundRightOffsetByPaddle=undefined; //this.boundRightOffsetByPaddle
var BoundTopOffsetByPaddle=undefined;
var BoundBottomOffsetByPaddle=undefined;
var moveSpeed = 1500;//550;
var moveSpeedupdown = 0.5;//550;
var ItemsPercent = 0.10; //0.10:10퍼센트, 0.05는 5퍼센트
var ItemsPercentBonus = 0.05; //0.10:10퍼센트, 0.05는 5퍼센트
var timeStepHorizontal = 25;//125=0.125초 //250=0.25초
var timeStepMoveOff = 4;//이동거리

var curVelocity = 400;
var VelocityInit = 400; //속도최대
var VelocityMax = 1000;  //속도최소
var VelocityAdd =5;     //속도초당증가량


var PadAttr_bullet = false; //생성
var ThreeState = {
    begin:0,
    run:1,
    end:2,
    none:3

};
var titlesprJPSoundRoot;
var MainsprJpSoundRoot;
var globaluisoundonoff;

var guntimer = 0;   //초단위로 차감
var guntimemax = 20; //슈팅모드최대시간//총알모드최대시간
var guntimeroldbak = 0;
var gunstate = ThreeState.none;
var warning_min_time=10;

var VelocityRedBear0=100;
var VelocityRedBear1=150;
var VelocityRedBear2=200;

var VelocityGreenBear0=100;
var VelocityGreenBear1=75;
var VelocityGreenBear2=50;

var StartBearLevel = 31; //곰등장레벨//레벨index+1이다
//StartBearLevel = 1; //곰등장레벨 치트 수치
var DontStartBearLevel = [1,2,3,4,5,6,7,8,9,10,100,200]; //곰등장레벨//레벨index+1이다
var isUseBear=false;

var BearTimeMax = 1;

var curLines=0;
var seamlessLines=0;

var curComboCount=0;
var uiComboGlobal=undefined;
var uiProgGlobal=undefined;
var MainUI=undefined;
var aroundtile=undefined; //폭발공 주변 처리용
var uiWarningGlobal=undefined;

var allblockcount=0;
var allstarbias=[0.1, 0.2, 0.5];
var goldcnt = 0; //블록카운트-골드
var chococnt= 0; //블록카운트-초코
var normalcnt=0; //블록카운트-노말


var medalbefore1sec=0;//클리어시 예전메달(예전별)하고 다를 복구해주려고

var gridszx=11;
var gridszy=18;

var bbLevel=[];
var bbLevel_coloronly=[];

var InputMode={
    mouse:0,
    keyboard:1
};

var isClearBonus=false;
var finalClearBonus=false;

var inputmode=InputMode.mouse;

var _BGame = {
    se_brickDeath:0,
    se_powerdown:0,
    se_powerup:0,
    se_recover:0
};

var PadSize = {
    nerf:0,
    normal:1,
    long:2,
    longa:3,
    longaa:4
};

var PadAttr = {
    normal: 0,   //0
    fixed: 1     //2
    //bullet: 2,   //1

};

var r180 = 3.14159;
var rr180 = -3.14159;

var pad_tw;

var ItemType = [
    undefined,    //0 없음
    "item_4.png", //1 //패들 확대 (1단계씩)
    "item_7.png", //2 //공 복사
    "item_9.png", //3 //총알모드
    "item_3.png", //4 //접착모드
    "item_2.png", //5 //블록 관통
    "item_1.png", //6 //공 불덩이 (폭발)
    "item_6.png", //7 //공 확대 (1단계씩)
    "item_8.png", //8 //공 느리게 (1단계씩)
    "item_5.png", //9 //블록 hp=1
    "item_10.png",//10//패들 축소
    "item_11.png",//11//패들 축소(강제)
    "item_13.png",//12//공 빠르게(4단계)
    "item_12.png",//13//공 축소
    "item_14.png" //14//죽기
];

var modeOption = [0,0,0,0,0,0];
var pageOption = [0,0,0,0,0,0];

var scrollTimeVertical = 32000;

//modeOption = [0,1,2,3,4,5]----------설명
//             [0]모드
//              0:노말
//              1:하강모드
//              2:보너스
//modeOption = [0,1,2,3,4,5]----------
//               [1]라인수(수직스크롤)
//modeOption = [0,1,2,3,4,5]----------
//                 [2]하트갯수
//modeOption = [0,1,2,3,4,5]----------
//                   [3]수직속도(1:0.1초 10:1초)
//modeOption = [0,1,2,3,4,5]----------더미인덱스
//                     [4]곰생성시간(초)
//modeOption = [0,1,2,3,4,5]----------
//                       [5]미정

var needStar =[
    0,//01
    40,//02
    85,//03
    130,//04
    175,//05
    220,//06
    265,//07
    310,//08
    355,//09
    400,//10
    445,//11
    490,//12
    535,//13
    580,//14
    625,//15
    670,//16
    715,//17
    760,//18
    805,//19
    850//20
];


var BallType = {
    normal_n: 0,
    normal_s: 1,
    normal_b: 2,
    through_n: 3,
    through_s: 4,
    through_b: 5,
    bomb_n: 6,
    bomb_s: 7,
    bomb_b: 8,
    throughbomb_n: 9,
    throughbomb_s: 10,
    throughbomb_b: 11
};

var burstBrickTime=0;


//bb variable----------------------------------------

//var se_bgm;
//var se_yes;
//var se_no;




//var boostering = false; //지금부스터모드
var boosteringBak = false;
var boostSumTimer = 0; //28개 최대치 //7개 습득-->//타이머로 바꿈 일반:46초, //
var mistakingLastCar = undefined;
var collide_left = true;
var cars_velocity_booster = 800;
var cars_velocity_max = 600;
var cars_velocity_min = 400;
var cars_velocity = 0;
var cars_baisVelocity = 1.0; //리스폰용
var spawnTimerMax = 0.8;
//var timeplay; //난이도설정용 누적시간

//--UI 디버그 기능 용도---
var dm = false;
var hsdm = false;
var txdebug = undefined;
var dmCollision=false;

var debugrect = new Phaser.Circle(0, 0, 20);
//var debugrect = new Phaser.Rectangle( 2, 2, 2, 2 ) ;
var debuggraphic;
var debugsprite;

var reverseTimeLife = 5; //리버스반전 모드 지속시간
var reverseTime = 0;
var reverseMode = false;

//시간제한및 타이머
var playtime_all_base = 60;
var playtime_clock_max = 60;  //게임에서 사용중인 맥스 타이머
var playtime_clock = 0;       //게임에서 사용중인 감소하는 타이머
var bonusmovetimer=0;
var bonusmovetimermax=32; //임시 초기화
//var playtime_all = 0; //in Common//누적플레이타임
var playtime_cur = 0; //in Common//플레이타임
var playtime_all_cur = 0;
var playtime_bias = 0;

var mode20sec = false; //종료 타이머 선언
var time20secMax = 15;
var timer20sec = time20secMax;
var timestamp;

//플레이어 위치
var playerx = 361;
var playery = 950;

//폭발블록 사운드 딜레이 처리용도
var _chk1_SE_Brick_Extinction_F = false;
var _chk2_SE_Brick_Extinction_F = false;

var picsMyResultRank = [
    'result_1.png',
    'result_2.png',
    'result_3.png',
    'result_4.png'
];
var picsMyResultRank_2 = [
    'result_win.png',
    'result_lose.png'
];

var charpicpng = [
    "character_icon_1.png", //개,   빨강
    "character_icon_2.png", //황소, 파랑
    "character_icon_3.png", //토끼, 보라
    "character_icon_4.png"  //카멜, 녹색
];
var chardlgpngs = [
    ["move_character_1_1.png", "move_character_1_2.png"], //o,x
    ["move_character_2_1.png", "move_character_2_2.png"], //o,x
    ["move_character_3_1.png", "move_character_3_2.png"], //o,x
    ["move_character_4_1.png", "move_character_4_2.png"], //o,x
];
var charnamekey = [
    ["dog"],
    ["bull"],
    ["rabit"],
    ["chameleon"],
];
var facestate = {
    "start_o": "00",
    "goal_o": "01",
    "goal_x": "02",
    "reverse_o": "03",
    "fog_o": "04",
    "missile_o": "05",
    "reverse_x": "06",
    "fog_x": "07",
    "missile_x": "08",
    "booster_o": "09",
    "overtake_o": "10", //추월
    "mistake_x": "11"
};
//내아이디:ids[0]
var ids = [ //선수들 그림 리스트를 랜덤으로 넣어둔 것
    [0, 1, 2, 3],
    [3, 2, 1, 0],
    [1, 3, 0, 2],
    [2, 0, 3, 1],
];
//랜덤아이디 정하기
var rndid;// = game.rnd.integerInRange(0, 3); //랜덤(0~3포함)

//이번경기 획득메달
var medaladded = 0;

//나의 아이디
//var myid;//=ids[rndid][0];

//네트워크ui모드관련 값들
var firsttime = true;
var vsmode = false;//2인대전모드
var matchmode = false;//매치,대전모드
var alonemode = false;
//var matchUImode=false;//게임이 아닌 UI만 나오는 모드
var youinroom = false;//내가 방에 들어왓는지
var matchupdatetimemax = 1000; //리플레시 최대치 시간
var matchupdatetime = 0;
var matchupsinglemax = 15000;
var matchupsingle = 0;
var net_started = false; //네트워크 게임 시작
//var retryrematch=false;
//var resultmode=false;

var uimodeset = {
    matchfind: 0,
    retry: 1,
    result: 2,
    select: 3,
    ingame: 4

};
//var uimode=uimodeset.retry;
//var uimode=uimodeset.result;
var uimode = uimodeset.matchfind;

//게임오버
var endgameonoff = false;  //게임종료(시간도달,체크배경도달==true)

var itemidx = {
    fogbomb: 0,
    reverse: 1,
    missile: 2,
    none: 3
};

//var mistake4 = [0,1,2,3];
var mistake4 = [0, 0.5, 1.5, 2.5];//실수카운트를 저장, 초기값은 싱글모드
var mistake4_sort = [0, 0, 0, 0];
var mistake4_myrank = 0;
var mistake4_otherrank = 0;

var userselected = -1; //유저를 공격시 선택한 유저의 인덱스

var itemidxSelected = itemidx.none;

var Side4TimeMax = 1500;
var Side4Time = 0;

//꼴지모드켜기위한 등수체크
var _side4_myrank = 0;
var _side4_myrank_old = 0;
var _side4_allcount = 0;
var modelastbottom = false;
var bzPath = [undefined, undefined, undefined, undefined];


//적AI패턴에서 사용되는 전역변수들
var ec1Time = 1.5;
var ecAngle = 5;
var ecTurnTime = 0.2;
var ec1TimeDelay = ec1Time - (ecTurnTime * 2);
var ecFollowAIDirOld = 0;
var ecFollowAIDir = 0;
var ecFollowAIDist = 0;

//스파인 전역변수
var spn_title_spine;
var spn_readygo;
var spn_dropstar;
var spn_star;
var spn_clear;
var spn_page_lock;
var spn_paddle_out;
var spn_unlock_n;
var page_lock_spr;
var mask_page_lock;
var mask_page_lock_index; //userDataPage을 찾아가기위한 임시데이터
//var spn_dropheart //2개 사용//스타트레벨창에서, 컨티뉴창에서

//효과음 변수명
var BGM_ALL;
var BGM_Game_Nomal;
var BGM_Game_Ranking;

var SE_Click;

var SE_Ball;
var SE_BearJelly_Produce;
var SE_BearJelly_Transform;
var SE_Brick_Extinction;

var SE_BrickShell_Remove;
var SE_InvincibleBrick_Blow;
var SE_Item_Bad;
var SE_Item_Good;
var SE_Paddle_Apper;
var SE_Popup_OFF;
var SE_Popup_ON;
var SE_Star_Get;
var SE_Transform;

//새로추가 //효과음 변수명
var SE_BearJelly_Hit;
var SE_Fire;
var SE_GameOver;
var SE_Go;
var SE_Heart;
var SE_InvincibleBrick_Blow_01;
var SE_Magnet;
var SE_Paddle_Dead;
var SE_Ready;
var SE_Score;
var SE_Shot;
var SE_Star_off;
var SE_Brick_Extinction_F;
var SE_Win;
//새로추가 //효과음 변수명

//새로추가2 //효과음 변수명
var SE_HurryUp;
var SE_HurryUp2;
var SE_Heart_Brick_Extinction;
var SE_Page_Open;
var SE_Brick_Drop;
//새로추가2 //효과음 변수명

// var GameState = {
//     init: 0,
//     selectmode: 1,
//     selectplayer: 2,
//     play: 3,
//     result: 4
// };

var StateMode = {
    begin: 0,
    run: 1,
    end: 2
};
//gamestate = GameState.init;
statemode = StateMode.begin;


var whiteshopguard;

function playSound_Emotion4(charid, ox) {
    // var charpicpng = [
    //     "character_icon_1.png", //개,   빨강
    //     "character_icon_2.png", //황소, 파랑
    //     "character_icon_3.png", //토끼, 보라
    //     "character_icon_4.png"  //카멜, 녹색
    // ];
    switch (charid) {
        case 0: //개,   빨강
            if (ox == 0) {
                if (kData.bSoundSE) SE_HappyDog.play();           //강아지 기쁨                 --말풍선 등장
            } else {
                if (kData.bSoundSE) SE_AngerDog.play();           //강아지 분노                 --말풍선 등장
            }
            break;
        case 1: //황소, 파랑
            if (ox == 0) {
                if (kData.bSoundSE) SE_HappyBull.play();          //황소 기쁨                   --말풍선 등장
            } else {
                if (kData.bSoundSE) SE_AngerBull.play();          //황소 분노                   --말풍선 등장
            }
            break;
        case 2: //토끼, 보라
            if (ox == 0) {
                if (kData.bSoundSE) SE_HappyRabbit.play();        //토끼 기쁨                   --말풍선 등장
            } else {
                if (kData.bSoundSE) SE_AngerRabbit.play();        //토끼 분노                   --말풍선 등장
            }
            break;
        case 3: //카멜, 녹색
            if (ox == 0) {
                if (kData.bSoundSE) SE_HappyChameleon.play();     //카멜레온 기쁨               --말풍선 등장
            } else {
                if (kData.bSoundSE) SE_AngerChameleon.play();     //카멜레온 분노               --말풍선 등장
            }
            break;
        default:
            if(dm) console.log("playSound_Emotion4 == default break");
            break;
    }
}


var item3full = [false, false, false];
var oppnent3btn = [undefined, undefined, undefined];
var item3btn = [undefined, undefined, undefined];


function debug_Sprite(spr) {
    console.log("debug_Sprite()");
    spr.inputEnabled = true;
    spr.input.enableDrag(false, false, false);//lockCenter, bringToTop, pixelPerfect.....
    spr.events.onInputUp.add(function (s) {
            debugsprite = spr;
            console.log('clicked',
                ", name:" + s.name,
                ", rendid:" + s.renderOrderID,
                ", x:" + s.x,
                ", y:" + s.y
            );
            //debugsprite.angle+=10;
            //printdebug();
        }
    );
}
function delayHitCount_Change( oBear, oBall, vDestHit ) {
//히트카운트 증가
    if (oBall.name.indexOf('ball') > -1){  //곰과 공 충돌
        oBear.z_hitcount =-1;
        //var b0 = oBear;
        setTimeout(function () { oBear.z_hitcount = vDestHit; console.log(oBear.name+"'s hitcount = "+oBear.z_hitcount); }, 500); //히트카운트 딜레이 증가 //다음단계로 가게끔
    }else {                               //곰과 총알 충돌
        oBear.z_hitcount =-1;
        //var b1 = oBear;
        setTimeout(function () { oBear.z_hitcount = vDestHit; console.log(oBear.name+"'s hitcount = "+oBear.z_hitcount); }, 250);//히트카운트 딜레이 증가 //다음단계로 가게끔
    }
//히트카운트 증가
}

//---------------네트워크초기실행-----------------------------------시작-------------------------------------
//=============================================================================
//	세이브 관련
//=============================================================================
var kData = new Data();
var clientData = new ClientData(); //상점용추가

var SAVE_TIME_INIT = 10;
var SAVE_VER = 1;
//LoadData();
//LoadDataInClient();//임시로 사용중


function Data(){
    this.iVer;
    //--뉴--
    //this.curLevel;
    //this.curPage;
    //this.userStarArray;
    //this.userScoreArray;
    //this.tutorialpoint;
    //--뉴--
    this.iHeart;     //하트갯수
    this.fHeartTime; //하트충전시간
    this.greappoint;
    this.bSoundBGM;
    this.bSoundSE;
    this.iSaveTimeStamp;

    // this.itemreverse; //아이템
    // this.itemfog; //아이템
    // this.itembomb; //아이템
    this.WinCnt;
    this.CumulMedal;
    this.DayMedal;
    this.ITEM_1;
    this.ITEM_2;
    this.ITEM_3;

    this.btn1TimeStamp;
    this.btn2TimeStamp;

    this.userData;
    this.userDataPage;
    //this.userDataScore;
    this.openedBak;


}
function ClientData() {
    // this.bSoundBGM;
    // this.bSoundSE;
    // this.iSaveTimeStamp;
    // this.btncooltime;//AD쿨타임자동저장
}

function InitData()
{
    kData.iVer = SAVE_VER;
    //--뉴--
    //kData.curLevel=0;
    //kData.curPage=0;
    //kData.userStarArray = new Array(LEVEL_MAX);
    //for (var i = LEVEL_MAX-1; i >= 0; -- i) kData.userStarArray[i] = -1;
    //kData.userStarArray[0]=0; //0레벨 오픈
    //kData.userScoreArray = new Array(LEVEL_MAX);
    //for (var i = LEVEL_MAX-1; i >= 0; -- i) kData.userScoreArray[i] = 0;
    //kData.tutorialpoint=0;        //0단계
    //--뉴--
    //if(iHeartInitData === 0) iHeartInitData=20;
    kData.iHeart = iHeartInitData;
    kData.fHeartTime = fHeartChargeTime;
    kData.greappoint = 0;

    ////클라이언트데이타 사용할때
    // clientData.bSoundBGM = true;
    // clientData.bSoundSE = true;
    // clientData.iSaveTimeStamp = 0;
    // clientData.btncooltime=[0,0,0,0]; //AD쿨타임자동저장

    ////클라이언트데이타 사용안할때, 서버에 저장
    kData.bSoundBGM = true;
    kData.bSoundSE = true;
    kData.iSaveTimeStamp = 0;

    // kData.itemreverse=3; //아이템
    // kData.itemfog=3; //아이템
    // kData.itembomb=3; //아이템
    kData.ITEM_1=3;
    kData.ITEM_2=3;
    kData.ITEM_3=3;

    kData.btn1TimeStamp=null; //서버스탬프포맷으로 저장어야 함
    kData.btn2TimeStamp=null;

    kData.userData = []; //in initData //로컬모드에서 여기서 초기화된다
    for (var i = LEVEL_MAX-1; i >= 0; -- i) kData.userData[i] = -1;
    kData.userData[0]=0; //0레벨 오픈
    kData.userDataPage = []; //in initData //로컬모드에서 여기서 초기화된다
    //var curpageidx = Math.floor(curLevel / LV4x4); //0,1,2,3
    //var curpage = Math.floor(curLevel / LV4x4) + 1; //0,1,2,3 -->1,2,3, 하려고 +1
    var maxpage = Math.floor(LEVEL_MAX / LV4x4);
    for (var i =  maxpage-1; i >= 0; -- i) {
        kData.userDataPage[i] = -1;
    }
    kData.userDataPage[0]=1;

    kData.openedBak=0;

    SaveOnlyClientData();//여기선 빈데이터 저장

    if(nvmode===false) {
        networkManager.ForcedSaveData(); //in initdata
    }


}

function InitOnlyClientData(){ //in LoadDataInClient
    ////클라이언트데이타 사용할때만 주석풀기
    // clientData.bSoundBGM = true;
    // clientData.bSoundSE = true;
    // clientData.iSaveTimeStamp = 0;
    // clientData.btncooltime=[0,0,0,0];//AD쿨타임자동저장
    
    SaveOnlyClientData();
}

//function SaveData()
function SaveDataInClient(_bGetTime) //로컬저장 예)사운드온오프시 저장 //gamemain.js 에서 예전savedata대용으로 막사용한다.
{
    return;

    // //서버데이터,클라데이터불리될때 사용,
    // //var strJson = JSON.stringify(kData);
    // var strJsonClientData = JSON.stringify(clientData);
    // localStorage.setItem('RivalRacing_ClientData.grape.co.kr', strJsonClientData); //저장
    // if(dm) console.log('SaveDataInClient');
    // if(dm) console.log(strJsonClientData);
    //
    // saveLocal('CosmicPop_kdata.gamegrape.co.kr');
    // //$.cookie('Neo_Neglect.gamegrape.co.kr', strJson, {expires: 9999});

    //if(yahooIN == undefined) {//야후추가
        //-----new---------
        if (loginTF == 0) { //비로그인
            if (_bGetTime !== undefined && _bGetTime != null && !_bGetTime) {
                var strJson = JSON.stringify(kData);
                var strJsonClientData = JSON.stringify(clientData);

                localStorage.setItem('SweetBricks.gamegrape.co.kr', strJson);
                localStorage.setItem('SweetBricks_ClientData.gamegrape.co.kr', strJsonClientData);
            } else {
                networkManager.GetServerTime(function (_time) {
                    clientData[TIME_STAMP] = _time;
                    kData.iSaveTimeStamp = _time; //rb,.//비로그인
                    var strJson = JSON.stringify(kData);
                    var strJsonClientData = JSON.stringify(clientData);

                    localStorage.setItem('SweetBricks.gamegrape.co.kr', strJson);
                    localStorage.setItem('SweetBricks_ClientData.gamegrape.co.kr', strJsonClientData);
                });
            }
        } else { //로그인상태
            var strJson = JSON.stringify(kData);
            var strJsonClientData = JSON.stringify(clientData);

            localStorage.setItem('SweetBricks.gamegrape.co.kr', strJson);
            localStorage.setItem('SweetBricks_ClientData.gamegrape.co.kr', strJsonClientData);

            //rb,.
            //networkManager.GetServerTime(function (_time) {
                //kData.btn1TimeStamp = _time-10; //rb,.
                //kData.btn2TimeStamp = _time-50; //rb,.
            //});
            //rb,.
        }


        saveLocal('SweetBricks.gamegrape.co.kr');
    //}//야후추가
    //-----new---------
}

function LoadDataInClient(){
    return;
    //if(yahooIN == undefined) {//야후추가
        var strJson = localStorage.getItem('SweetBricks.gamegrape.co.kr');
        var strJsonClientData = localStorage.getItem('SweetBricks_ClientData.grape.co.kr'); //로드
        if (strJsonClientData != null) {
            clientData = JSON.parse(strJsonClientData);
        }
        if (strJson != undefined) {
            kData = JSON.parse(strJson);
            if (kData.iVer === undefined || kData.iVer != SAVE_VER) // 버젼이 없거나 버젼이 다르면 세이브를 초기화 시킨다.
                InitData();
        } else {
            InitData();
        }
    //}//야후추가
    // if(dm) console.log('LoadDataInClient-->');
    // if(dm) console.log(strJson);
    // if(dm) console.log(strJsonClientData);

    // //치트코드 -- 모든레벨 오픈 in LoadDataInClient
    // kData.userData = []; //LoaddDtaInClient cheatmode
    // for (var i = LEVEL_MAX-1; i >= 0; -- i) kData.userData[i] = 3;
    // kData.userData[LEVEL_MAX-1]=0; //0레벨 오픈
    // networkManager.ForcedSaveData();
    // //치트코드 -- 모든레벨 오픈 in LoadDataInClient


}

function SaveOnlyClientData() //networkManager.GetServerTime용 콜백속에 //in InitData //in InitOnlyClientData
{
    return;
    //if(yahooIN == undefined) {//야후추가
        var strJsonClientData = JSON.stringify(clientData);
        localStorage.setItem('SweetBricks_ClientData.grape.co.kr', strJsonClientData);//저장

        if (dm) console.log('SaveOnlyClientData');
        if (dm) console.log(strJsonClientData);
    //}//야후추가
}
function LoadOnlyClientData() { //gamemain.js->cbLogoComplete()안에서 networkManager.LoadData용 콜백속에
    return;
    //if(yahooIN == undefined) {//야후추가
        var strJson = localStorage.getItem('SweetBricks_ClientData.grape.co.kr'); //로드

        if (strJson == null)
            InitOnlyClientData();
        else
            clientData = JSON.parse(strJson);
    //}//야후추가
}
//---------------------------------------------------

//--네이버대응-------------
var SaveDataAll =
    "iVer,"
    +"iHeart,"
    +"fHeartTime,"
    +"greappoint,"
    +"iSaveTimeStamp,"
    +"ITEM_1,"
    +"ITEM_2,"
    +"ITEM_3,"
    +"btn1TimeStamp,"
    +"btn2TimeStamp,"
    +"userData,"
    +"userDataPage,"
    +"openedBak";

function cbGamePocketSdkrefresh(data)
{
    networkManager.AppDataGet(SaveDataAll, function(data){
        if(data.code === undefined) {
            if (data.iVer === undefined) {
                InitData();
                networkManager.AppDataPut(JSON.stringify(kData), update);
            } else {
                // 버젼에 따른 마이그레이션 작업이 있어야 함.
                kData = data;
                //---------------------
                kData.iVer = parseInt(data.iVer);
                kData.iHeart = parseInt(data.iHeart);
                kData.fHeartTime = parseInt(data.fHeartTime);
                kData.greappoint = parseInt(data.greappoint);
                kData.iSaveTimeStamp = parseInt(data.iSaveTimeStamp);
                kData.ITEM_1=parseInt(data.ITEM_1);
                kData.ITEM_2=parseInt(data.ITEM_2);
                kData.ITEM_3=parseInt(data.ITEM_3);
                kData.btn1TimeStamp=null; //서버스탬프포맷으로 저장어야 함
                kData.btn2TimeStamp=null;
                kData.openedBak=parseInt(data.openedBak);
                //---------------------

                GetLifeTime(); // 로컬시간을 가져온다.in cbGamePocketSdkrefresh

                Time2Heart();//in cbGamePocketSdkrefresh

                update();
                // networkManager.RankingGet(function (_data) { kData.score=_data.score;
                //          console.log("get score: "+_data.score);
                //      }
                // ); //RankingGet
            } //data.iVer가 있으면
        }else{
            InitData();
            update();
        }
        if(bPhone == true) {
            kData.bSoundBGM = false;
            kData.bSoundSE = false;
        }
        //치트코드 //16까지
        //치트배치
        //치트코드 //16까지//개발치트//개발자치트

    });
}
//--네이버대응-------------

//서버에서 시작시자동다운받기

var whereServerNet = 100;//default localhost //var NET_STATE = {//if(link.indexOf('localhost') != -1){
$(document).ready(function(){ //초기데이터가져오기

    if(nvmode===true) {
        //--네이버대응-------------
        if (document.location.href.indexOf('localhost') == -1) {
            networkManager.refresh(cbGamePocketSdkrefresh);
        }
        else {
            GetLifeTime();
            InitData();//로컬호스트용 초기화
            update();
        }
        networkManager.networkState = NET_STATE.LOCALHOST;
        //--네이버대응-------------
    }else {

        networkManager.networkState = NET_STATE.LOCALHOST;
        if(networkManager.networkState != NET_STATE.LOCALHOST){
            //상점리스트가져오기//로그인상태 상관없이
            networkManager.GetShoplist(ShopType.HEART, function () { });

            networkManager.GetGameInfo(function (_data) {
                //초기서버데이터받기
                iHeartChargeMax = _data['baseHeart']; //현서버 5 //하트컨트롤러안에
                iHeartInitData = _data['initHeart'];  //현서버 5
                fHeartChargeTime = _data['Heartrefill']; //현서버 1200 //하트컨트롤러안에

                //비로그인일경우
                if(iHeartInitData < 20) iHeartInitData=20;//하트치트
                kData.iHeart = iHeartInitData; //하트치트
                kData.fHeartTime =  fHeartChargeTime;

                if(kData.iHeart<20) kData.iHeart=20;//하트치트
                // if(loginTF == 0) //비로그인
                //     LoadDataInClient();`

                update();
                if(!dm) console.log("update() started in networking");

                networkManager.GetShoplist(ShopType.HEART, function () { });

                //서버에서 저장데이터 가져오기
                networkManager.LoadData(function () {
                    //LoadOnlyClientData();

                    //언어변경 한글,일어,영어
                    /*if(lang == 'ko') CURRENT_LANGUAGE = LANGUAGE_KOR;
                    else if(lang == 'ja') CURRENT_LANGUAGE = LANGUAGE_JPN;
                    else if(lang == 'en') CURRENT_LANGUAGE = LANGUAGE_ENG;
                    else CURRENT_LANGUAGE=LANGUAGE_ENG;*/
                    CURRENT_LANGUAGE=LANGUAGE_ENG


                    if(typeof(kData.userData) === 'undefined' //예외처리
                    || kData.userData.length<1) {
                        kData.userData = []; //in initData
                        for (var i = LEVEL_MAX - 1; i >= 0; --i) {
                            kData.userData[i] = -1;

                        }
                        kData.userData[0] = 0; //0레벨 오픈
                    }
                    if(typeof(kData.userDataPage) === 'undefined' //예외처리
                    || kData.userDataPage.length<1) {
                        kData.userDataPage = []; //in initData //로컬모드에서 여기서 초기화된다
                        //var curpageidx = Math.floor(curLevel / LV4x4); //0,1,2,3
                        //var curpage = Math.floor(curLevel / LV4x4) + 1; //0,1,2,3 -->1,2,3, 하려고 +1
                        var maxpage = Math.floor(LEVEL_MAX / LV4x4);
                        for (var i = maxpage - 1; i >= 0; --i) {
                            kData.userDataPage[i] = -1;
                        }
                        kData.userDataPage[0] = 1;
                    }

                    if(typeof(kData.bSoundBGM) === 'undefined') {
                        kData.bSoundBGM = true;
                        kData.bSoundSE = true;
                    }


                    console.log("networkManager.LoadData() is done");

                    if(typeof(kData.iHeart) === 'undefined')//비로그인상태일때
                        kData.iHeart = iHeartInitData;

                    var test = "test";
                });
                //서버에서 저장데이터 가져오기


                //SaveDataInClient();//rb,.

            });

        }

    }

    //임시 로컬 실행 모드


    if(networkManager.networkState == NET_STATE.LOCALHOST){
        if(nvmode==false) {
            InitData(); //로컬모드에서는 시작시 초기화
            LoadDataInClient();
            update();
            kData.iHeart = iHeartInitData;

            if (dm) console.log("update() started in local");
        }
        lang='en';
    }
    //임시 로컬 실행 모드
    
    //kData.iHeart = 99;//임시하트처리채움


    if(nvmode===false) {
        //회원가입유도
        if (loginTF == 1) {                                          //로그인상태
            if (proto.serPos == 0) {                                   //모비서비스
            }
        }
        else//if(loginTF == 0){ //비로그인
        {
            if (networkManager.networkState == NET_STATE.LOCALHOST) {//로컬서비스

            } else {//비회원
                // networkManager.ModalCall(MODAL_BUTTON_TYPE.OKCANCEL, GetShpMsg('signup'),
                //     function () {
                //         networkManager.JoinMember();
                //     },
                //     function () {
                //
                //     }
                // );
            }
        }
    }



}); //.ready
var isMobile = -1;
window.onload = function () {//$(document).ready();보다 빠르게 나온다, 검색해보면 늦게 나온다고 하는데
    isMobile=navigator.userAgent.indexOf("Mobile");
    if (isMobile===-1){
        //alert("desktop mode(onload)");
    }else{
        //alert("mobile mode(onload)");
    }
};

//=============================================================================
// 타이머 관련
//=============================================================================
var tickNow;
var tickLast = Date.now();
var deltaTime = 0;



function updateTick()
{
    tickNow = Date.now();
    deltaTime = (tickNow - tickLast) * 0.001;
    tickLast = tickNow;
}

//계속업데이트
var state=undefined;

var curDate;
var passedSec;
var remainSec;
var remainStr;
var remainText1=undefined;
var remainText1inmenu;
var remainText1ingame;
var remainText2=undefined;
var remainText2inmenu;
var remainText21ingame;

var btnTimerInterval = setInterval(btnTimer, 1000);//clearInterval(btnTimerInterval);
function btnTimer() {
    //if( kData.btn1TimeStamp!==undefined //초기화전
    if(typeof(kData) !== 'undefined'
    && typeof(kData.btn1TimeStamp) !== 'undefined'
    && kData.btn1TimeStamp!==null) //초기화후
    {
        //로컬에서 현재시간을 받을경우 1
        curDate = Date.now();
        passedSec = (parseInt(curDate.toString().substring(0, 10))-kData.btn1TimeStamp);

        // //서버에서 현재시간을 다시 받을 경우 2 (1초마다 받아야 하므로)
        // networkManager.GetServerTime(function (_time) { passedSec = _time-kData.btn1TimeStamp; });

        //나머지시간 = 충전만땅시간 - 지나간시간
        remainSec = (fHeartChargeTime) - passedSec;
        //0이하면 초기화
        if(remainSec<=0){
            remainSec=0;
            kData.btn1TimeStamp=null;
        }
        //00:00형식으로
        remainStr = convertTimeFormatFromSec(remainSec);
        //텍스트가 활성화면 업데이트
        if(uishopinmenu && typeof(remainText1inmenu)!=='undefined') {
            remainText1 =  remainText1inmenu
        }
        if(!uishopinmenu && typeof(remainText1ingame)!=='undefined'){
            remainText1 =  remainText1ingame
        }
        if(remainText1!==undefined && remainText1.visible) {
            remainText1.text = remainStr;
        }

        //00:00을 보여주고 충전처리(서버에서처리하므로)
        if(kData.btn1TimeStamp===null){
            networkManager.ForcedSaveData(); //in btnTimer
            setTimeout(
                function () {
                    uigame.state.states.menu.uishop.slots[2].btnon();
                    uigame.state.states.menu.uishopplus.onRefresh();
                },
                500
            );
        }
    }
    if(typeof(kData) !== 'undefined'
    && typeof(kData.btn2TimeStamp) !== 'undefined'
    && kData.btn2TimeStamp!==null //초기화후
    ){
        //로컬에서 현재시간을 받을경우 1
        curDate = Date.now();
        passedSec = (parseInt(curDate.toString().substring(0, 10))-kData.btn2TimeStamp);

        // //서버에서 현재시간을 다시 받을 경우 2 (1초마다 받아야 하므로)
        // networkManager.GetServerTime(function (_time) { passedSec = _time-kData.btn2TimeStamp; });

        //나머지시간 = 충전만땅시간 - 지나간시간
        remainSec = (fHeartChargeTime) - passedSec;
        if(remainSec<=0){
            remainSec=0;
            kData.btn2TimeStamp=null;
        }
        //00:00형식으로
        remainStr = convertTimeFormatFromSec(remainSec);
        //텍스트가 활성화면 업데이트
        if(uishopinmenu && typeof(remainText1inmenu)!=='undefined') {
            remainText2 =  remainText2inmenu
        }
        if(!uishopinmenu && typeof(remainText1ingame)!=='undefined'){
            remainText2 =  remainText2ingame
        }
        if(remainText2!==undefined && remainText2.visible) {
            remainText2.text = remainStr;
        }

        //00:00을 보여주고 충전처리(서버에서처리하므로)
        if(kData.btn2TimeStamp===null){
            networkManager.ForcedSaveData(); //in btnTimer
            setTimeout(
                function () {
                    uigame.state.states.menu.uishop.slots[3].btnon();
                    uigame.state.states.menu.uishopplus.onRefresh();
                },
                500
            );
        }
    }
}

function update() {
     //상점용도
    if(heartController != null)
        heartController.Update();
    if(networkManager != null)
        networkManager.Update();
    // //상점용도
    // if(sHeartShop.onInitialized) {
    //     sHeartShop.twcooltime.onUpdateCoolTimer();
    //     //console.log();
    // }
    if(mode20sec) {
        timer20sec-=deltaTime;
        //console.log("timer20sec: "+timer20sec);
    }

    updateTick(); //tickNow를 처리

    UpdateLifeTime();
    requestAnimationFrame(update);//가장빠른업데이트
}
// setInterval(function () {
//     requestAnimationFrame(update);//1초단위업데이트
// }, 1000);

//---------------네트워크초기실행-----------------------------끝----------------------------------


var tbShpMsg_json = "{\"signup\":{\"en\":\"Members only!<br/>Would you like to go to the sign up page?\",\"jp\":\"会員専用<br/>会員登録をしますか?\",\"kr\":\"회원전용!<br/>회원가입 하시겠습니까?\"},\"gotogpg\":{\"en\":\"Only available in the Moby Games app.<br/>Would you like to go to the Moby Games app?\",\"jp\":\"モビーゲームアプリのみ購入で きます。<br/>モビーゲームアプリに移動しますか？\",\"kr\":\"모비게임 앱에서만 구매 가능합니다.<br/>모비게임 앱으로 이동하시겠습니까?\"},\"lowpoint\":{\"en\":\"Not enough points!\",\"jp\":\"ポイントが足りません!\",\"kr\":\"포인트가 부족합니다!\"}}";
var tbShpMsg = JSON.parse(tbShpMsg_json);

function GetShpMsg(key, data)
{
    if(data === undefined) data = null;
    switch(CURRENT_LANGUAGE)
    {
        case LANGUAGE_ENG:
            if(data == null)
                return tbShpMsg[key].en.replace(/{E}/gi, "\n");
            else
                return tbShpMsg[key].en.replace("{V}", data.toString()).replace(/{E}/gi, "\n");
            break;
        case LANGUAGE_JPN:
            if(data == null)
                return tbShpMsg[key].jp.replace(/{E}/gi, "\n");
            else
                return tbShpMsg[key].jp.replace("{V}", data.toString()).replace(/{E}/gi, "\n");
            break;
        case LANGUAGE_KOR:
            if(data == null)
                return tbShpMsg[key].kr.replace(/{E}/gi, "\n");
            else
                return tbShpMsg[key].kr.replace("{V}", data.toString()).replace(/{E}/gi, "\n");
            break;
    }

    return "";
}



var bPhone;	// 폰인지 아닌지 체크.
if (/Android/i.test(navigator.userAgent)) {
    bPhone = true;
} else if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {
    bPhone = true;
} else {
    bPhone = false;
}

// 윈도우창 포커스가 돌아올때 처리 사운드 관련 처리를 해준다.------------------------------------
/*
 abort: 이미지 로딩이 중단될 경우 실행된다.
 blur: 엘리먼트가 입력 포커스를 잃어버릴 경우 실행된다.
 change: 폼 엘리먼트가 포커스를 잃고 값이 변경될 경우 실행된다.
 click: 마우스 버튼이 눌렸다 떼어질 때 실행된다. mouseup 이벤트가 이어서 발생한다. 기본 동작 방식을 취소하려면 false를 반환한다.
 dblclick: 마우스가 더블클릭될 때 실행된다.
 error: 이미지 로딩 오류가 일어날 경우 실행된다.
 focus: 엘리먼트가 입력 포커스를 얻을 경우 실행된다.
 keydown: 키가 눌렸을 때 실행된다. 취소하려면 false를 반환한다.
 keypress: 키가 눌렸을 때 실행된다. keydown 이벤트가 이어서 발생한다. 취소하려면 false를 반환한다.
 keyup: 키에서 손을 뗐을 때 실행된다. keypress 이벤트가 이어서 발생한다.
 mousedown: 마우스 버튼이 눌렸을 때 실행된다.
 mousemove: 마우스가 이동할 경우 실행된다.
 mouseout: 마우스가 엘리먼트에서 벗어났을 때 실행된다.
 mouseover: 마우스가 엘리먼트 위로 이동할 때 실행된다.
 mouseup: 마우스 버튼에서 손을 뗐을 때 실행된다.
 resize: 윈도우 크기가 변경될 경우 실행된다.
 select: 텍스트가 선택됐을 때 실행된다.
 reset: 폼 초기화가 요청됐을 때 실행된다. 초기화를 방지하려면 false를 반환한다.
 submit: 폼 제출이 요청됐을 때 실행된다. 제출을 방지하려면 false를 반환한다.
 load: 문서 로딩이 완료됐을 때 실행된다.
 unload: 문서나 프레임셋이 사라졌을 때 실행된다.
 */
window.addEventListener('focus', function() {
    //SoundResume();
    kData.bSoundSE = bSoundSE_bak;
    kData.bSoundBGM = bSoundBGM_bak;
    if(BGM_ALL===undefined) return;
    if(game.state.states[game.state.current] == "menu") { //게임스테이트검사

        selectBGM(curBGM, true); //"BGM_ALL" "BGM_Game_Nomal" "BGM_Game_Ranking"
        //if(BGM_ALL!=undefined) {
        //    BGM_ALL.mute=false;
        //}
    }else{

        selectBGM(curBGM, true); //"BGM_ALL" "BGM_Game_Nomal" "BGM_Game_Ranking"
        //if(BGM_Game_Nomal!=undefined) {
        //    BGM_Game_Nomal.mute=false;
        //}
    }
    if(dm) console.log("focused");

}, false);

// 윈도우창을 닫을때 이벤트.
window.addEventListener('blur', function() {
    //SoundPause();
    bSoundSE_bak = kData.bSoundSE;
    bSoundBGM_bak = kData.bSoundBGM;
    kData.bSoundSE = false;
    kData.bSoundBGM = false;

    if(BGM_Game_Nomal!=undefined) BGM_Game_Nomal.mute=true;
    if(BGM_ALL!=undefined) BGM_ALL.mute=true;
    //uigame.state.states.game.uiController.uipause.dlgbg9.btnsound.icon.visible = true; //사운드끄기 상태표시
    if(game.state.states[game.state.current] == "menu") { //게임스테이트검사
        uigame.state.states.menu.uiselectlevel.dlbg.uisoundonoff.icon.visible = true; //사운드끄기 상태표시
    }
}, false);
//---------------로컬타이머용-----------------------------------
var SAVE_LIFE_TIME_INIT = 5; // 5초에 한번씩 세F이브를 한다.
var fLifeTime = SAVE_LIFE_TIME_INIT;

var kData2 = new Data2();
var kData2get = new Data2();
//lifeTime: 1505837136463
//lastTick: 2.1169999999999947

function Data2(){
    this.lifeTime = fHeartChargeTime;  // 남은시간 총맥스시간 //초기화
    this.lastTick = 0; // 저장된 시간//
}

function GetLifeTime(){
    var strJson = localStorage.getItem('com.movigame.naver_sweetbrick');
    if(strJson != undefined)
        kData2get = JSON.parse(strJson);
    else
        kData2get = undefined;
}

function SetLifeTime(){

    kData2.lifeTime = kData.fHeartTime;
    kData2.lastTick = Date.now();

    var strJson = JSON.stringify(kData2);
    localStorage.setItem('com.movigame.naver_sweetbrick', strJson);
}

function UpdateLifeTime(){
    fLifeTime -= deltaTime; //5초 차감뒤 저장
    if(fLifeTime <= 0){
        fLifeTime = SAVE_LIFE_TIME_INIT;
        SetLifeTime();
    }

    //테스트
    //GetLifeTime();
    //테스트
}
function Time2Heart() {
//-----로컬타이머 보정하기---------------
    if (kData2get != undefined) {
        //예제
        //var kData2get = new Data2();
        //kData2get.lifeTime: 1505837136463
        //kData2get.lastTick: 2.1169999999999947
        //kData2get.lifeTime: 300
        //kData2get.lastTick: 1506581180965

        //현재시간
        var curDateA = Date.now();
        var curDateB = parseInt(curDateA.toString().substring(0, 10));
        //저장시간
        var oldDateB = parseInt((kData2get.lastTick).toString().substring(0, 10));
        //var oldDateB = parseInt((kData2get.lifeTime).toString().substring(0, 10));
        //지나간시간
        var passedSec = curDateB - oldDateB;
        var remainSec;
        //                 충전잔여시간       -흘러간시간
        var displaytime;// = parseInt(kData2get.lifeTime) - passedSec;

        if(kData2get.lifeTime>passedSec){//하트1개충전도 안되는경우
            displaytime = parseInt(kData2get.lifeTime) - passedSec;
        }else{                           //하트1개이상 충전이 된경우
            displaytime = passedSec - parseInt(kData2get.lifeTime);
        }        //var displaytime = passedSec - kData2get.lastTick;
        //if(kData2get.lifeTime - passedSec);
        //fHeartChargeTime
        //if (0 < displaytime) { //잔여시간
            //충전시간보다 더 많이 흘
            if (fHeartChargeTime < displaytime) {
                var count = Math.floor(displaytime / fHeartChargeTime); //충전하트갯수
                if(kData.iHeart<iHeartChargeMax) {//} = 10;
                    //kData.iHeart += count; 하트보상
                    if(kData.iHeart>iHeartChargeMax) { //최대치초과방지
                        kData.iHeart=iHeartChargeMax;
                        kData.fHeartTime = fHeartChargeTime;
                    }else{//최대치 미만
                        kData.fHeartTime = displaytime%fHeartChargeTime;
                    }
                }else{//이미최대시도달
                    kData.fHeartTime = fHeartChargeTime;
                }
                var sends = {};
                sends.iHeart = kData.iHeart;//네이버저장하기
                if (typeof GamePocket.Sdk !== 'undefined') networkManager.AppDataPut(JSON.stringify(sends));
            }
            else {//1개충전도 안된 시간
                if(kData.iHeart<iHeartChargeMax) { //충전최대치가 미만이면
                    kData.fHeartTime = displaytime;
                }else{
                    kData.fHeartTime = fHeartChargeTime;
                }
            }
        // } else { //보상시간
        //     //하트보상 갯수충전
        //     var addHeart = Math.floor(Math.abs(displaytime) / fHeartChargeTime);
        //     var remainpiec = Math.abs(displaytime) % fHeartChargeTime;
        //     var remainrev = fHeartChargeTime - remainpiec;
        //     //var addHeart = Math.floor(passedSec/fHeartChargeTime);
        //     //if(addHeart+kData.iHeart>iHeartInitData){ //아직쓸때가없음
        //     if (addHeart < iHeartChargeMax) {
        //         kData.iHeart += addHeart;
        //         if (kData.iHeart > iHeartChargeMax) kData.iHeart = iHeartChargeMax;
        //     }
        //     kData.fHeartTime = remainrev;
        //
        //     var sends = {};
        //     //초기 하트값이 없을경우 예외
        //     if( typeof kData === 'undefined' || typeof kData.iHeart === 'undefined') return;
        //
        //     sends.iHeart = kData.iHeart;//네이버저장하기
        //     if (typeof GamePocket.Sdk !== 'undefined') networkManager.AppDataPut(JSON.stringify(sends));
        //     //광고버튼시에 활성화
        //     //remainSec=0;
        //     //kData.btn1TimeStamp=null;
        // }
        //var remainStr = convertTimeFormatFromSec(remainSec);//00:00형식으로
        //kData.fHeartTime = kData2get.lastTick;
    }//(kData2get != undefined)
//-----로컬타이머 보정하기---------------
}


//$(window).resize(resize);	// jquery를 사용한다.
//window.onorientationchange = resize; // 화면이 리사이즈되면 리사이즈 함수를 콜한다.
var first_resize = true;
var inw;
var inh;

var ddtx=undefined;

var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
var _iOSDevice = !!navigator.platform.match(/iPhone|iPod|iPad/);
var is_chrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;

//디버그 dddd
var boottxt="";
//
// boottxt +="\n";
// boottxt +=("iOS:"+iOS+",");
// boottxt +=("ios2:"+_iOSDevice+",");
// boottxt +=("chrome:"+is_chrome+",");
// boottxt +="\n";
//디버그 dddd

//리사이즈 call 처음 불규칙으로 호울되므로
// 브라우저에 따라 1회(크롬)~ 2회(사파리,크롬)
// 콜을 처음시작시점, 막아서 ios에서 회전경고창 문제 해결하려고
var beginResize = false;

$( window ).resize(function() {
    if(beginResize===false) return;

    // //디버그 dddd
    // boottxt +=" rsz ";
    // if(typeof uigame !== 'undefined') {
    //     var dddd =
    //         "xxx\nfirst_width:" + first_width//
    //         + "\nfirst_height:" + first_height
    //
    //         + "\n.innerWidth:" + window.innerWidth
    //         + "\n.innerHeight:" + window.innerHeight
    //
    //         + "\nw.width():" + $(window).width()
    //         + "\nw.height():" + $(window).height()
    //
    //         + "\nisPotrait:" + isPotrait
    //
    //         + "\nseq:"+boottxt
    //
    //     if(ddtx!=undefined) {
    //         ddtx.text = dddd;
    //     }
    // }
    // //디버그 ddddd

    inw = $(window).width(); //retrieve current window width
    inh = $(window).height(); //retrieve current window height

    if(isPotrait === true)
    {
        inw = first_width; //retrieve current window width
        inh = first_height; //retrieve current window height

        var ratio = parseFloat(inh / inw);
        var ratio_w = parseFloat(inw / GAME_WIDTH);
        var ratio_h = parseFloat(inh / GAME_HEIGHT);

        game.scale.setUserScale(ratio_w, ratio_h);

        isPotrait = false;

        //if(typeof uigame === 'undefined'
        //    && uigame.device.desktop  === false) {
            if(bPhone) {
                document.getElementById("turn").style.display = "block";
            }
        //}
    }
    else
    {
        isPotrait = true;
        document.getElementById("turn").style.display = "none";

    }







    // if(document.getElementById("turn").style.display === "none")
    //     document.getElementById("turn").style.display = "block";
    // else
    //     document.getElementById("turn").style.display = "none";
    //$( "body" ).prepend( "<div>" + $( window ).width() + "</div>" );
});

/**
 * Created by NeoHan on 2017-03-02.
 */
var btndelay_onoff = false;

//랭킹결과장 업데이트 처리
function updateMenuState() {
    // //console.log("--updateMenuState()--");
    // if (uigame.state.states.menu.uiresult.visible) {
    //     if (true) {
    //         uigame.state.states.menu.uiresult.dlgbg9.rsbtn.tx.text = "TIME: " + float2int(timer20sec > 0 ? timer20sec : 0);
    //
    //         //기다리다가 1번 실행
    //         if (mode20sec && timer20sec < 0) {
    //
    //             var myrankidx = net_userallfin.indexOf(net_yourname);//등수알기
    //             var addMD = myrankidx == 0 ? 4
    //                 : myrankidx == 1 ? 3
    //                     : myrankidxs == 2 ? 2
    //                         : 1;
    //             var decMd = 0;
    //             decMd += net_userallfin[3] == undefined ? -1 : 0;
    //             decMd += net_userallfin[2] == undefined ? -1 : 0;
    //             decMd += net_userallfin[1] == undefined ? -1 : 0;
    //
    //             //메달저장
    //             var v = addMD + decMd;
    //             kData.WinCnt = (kData.WinCnt + (addMD + decMd));
    //             kData.DayMedal = (kData.DayMedal + (addMD + decMd));
    //             kData.CumulMedal = (kData.CumulMedal + (addMD + decMd));
    //             //networkManager.ForcedSaveData(); //in updateMenuState
    //             if (dm) console.log("save Medal-- win:" + kData.WinCnt + ", dayMd:" + kData.DayMedal + ", allMd:" + kData.CumulMedal);
    //
    //             mode20sec = false;//종료타이머가 끝났을때
    //
    //             //강제나가기
    //             if (matchmode) {
    //                 socket.emit('leaveRoom'); //타이머가0
    //             }
    //
    //             uimode = uimodeset.select;
    //             uigame.state.game.state.start('menu');
    //             //강제나가기
    //         }
    //     }
    // }//결과창 나올때
    //
    // whiteshopguard.visible = false;
}

function printdebug() {
    if (dm) return;
    uigame.debug.geom(debugrect, 'rgba(255,0,0,0.5)');

    if (debugsprite != undefined) {
        uigame.debug.spriteInfo(debugsprite, 32, 32);
        debugrect.x = debugsprite.worldPosition.x;
        debugrect.y = debugsprite.worldPosition.y;

    }
    uigame.debug.text(
        'circlepos : ' + debugrect.x + ", " + debugrect.y
        , 0, 1270
    );
}
//--UI 디버그 기능 용도---
var style25debug = {
    font: "25px Conv_PassionOne-Regular",
    fill: "#ffffff",
    align: "center",
    stroke: '#182601',
    strokeThickness: 6
};

function createUI9a(pack, ui9name, posx, posy, w, h, l, r, t, b) {
    var ui9b = new PhaserNineSlice.NineSlice(
        uigame,                 //Phaser.Game
        posx,                      //x
        posy,                      //y
        pack,                  //atlas key //pack이름
        ui9name,      //Image frame //png이름,
        w,                    //width
        h,                    //height
        {top: t, bottom: b, left: l, right: r}
    );
    ui9b.anchor.setTo(0.5, 0.5);//ui9b.resize(100,200);//ui9b.scale.setTo(0.5,0.5);

    return ui9b;
}

//노말버튼생성
//버튼그림, 위치xy, 나인패치,이미지 둘다 가능
function createbtn(spr, tx, icon, x, y, soundonoff) { //버튼생성
    // if(spr==undefined) {
    //     spr = loadUI9('yes_nine', x, y, 243, 107); //샵오케이버튼
    // }
    spr.anchor.setTo(0.5, 0.5);

    spr.sx = spr.scale.x;
    spr.sy = spr.scale.y;

    if (x == undefined) x = 0;
    if (y == undefined) y = 0;
    //if(szx9==undefined) szx9=243;
    //if(szy9==undefined) szy9=107;
    //if(tx==undefined) tx=GetString("ok");

    if (icon != undefined) {
        icon.anchor.setTo(0.5, 0.5);
        spr.addChild(icon);
        spr.icon = icon;
    } else {
        spr.icon = undefined;
    }

    if (tx != undefined) {
        tx.anchor.setTo(0.5, 0.5);
        spr.addChild(tx);
        spr.tx = tx;
    } else {
        spr.tx = undefined;
    }


    if (soundonoff !== undefined) {
        spr.soundonoff = soundonoff;
    } else {
        spr.soundonoff = true;
    }

    spr.inputEnabled = true;
    spr.x = x;
    spr.y = y;

    spr.isdown = false; //눌려졋는지 체크하는 게 목적
    spr.tw;

    spr.isLock = false; //버튼잠김 --->소리,애니 전부 안되게 하는 목적

    spr.fnok = function () {
        if (dm) console.log("click run" + ", xy:" + spr.x + "," + spr.y);
    };
    spr.fndown = function () {
        if (dm) console.log("down key" + ", xy:" + spr.x + "," + spr.y);
    };
    spr.fnup = function () {
        if (dm) console.log("up key" + ", xy:" + spr.x + "," + spr.y);
    };

    spr.events.onInputOver.add(function () {        //호버
        if (spr.isLock) return;
        spr.isdown = false;
        //호버시 빨간색으로 변하게 하는 테스트 코드
        //spr.tint = ColorSet.red;
        //호버시 빨간색으로 변하게 하는 테스트 코드
        if (dm) console.log("onInputOver" + ", xy:" + spr.x + "," + spr.y);

        //spr.tint = ColorSet.red;

    }, this);
    spr.events.onInputOut.add(function () {        //취소
        if (spr.isLock) return;
        spr.isdown = false;

        if (spr.tw != undefined) spr.tw.stop();
        spr.tw = uigame.add.tween(spr.scale);
        spr.tw.to({x: spr.sx, y: spr.sy}, 0.3, Phaser.Easing.Linear.None);
        spr.tw.start();
        if (dm) console.log("onInputOut" + ", xy:" + spr.x + "," + spr.y);

        //spr.tint = ColorSet.blue;

    }, this);
    spr.events.onInputUp.add(function () {   //업 클릭
        if (spr.isLock) return;
        //이중클릭방지
        if (btndelay_onoff === false) {
            btndelay_onoff = true;
            TweenMax.delayedCall(0.25, function () {
                btndelay_onoff = false;
            });
        } else {
            return;
        }
        //이중클릭방지

        if (spr.tw != undefined) spr.tw.stop();
        spr.tw = uigame.add.tween(spr.scale);
        spr.tw.to({x: spr.sx, y: spr.sy}, 0.3, Phaser.Easing.Linear.None);
        spr.tw.start();
        if (dm) console.log("onInputUp" + ", xy:" + spr.x + "," + spr.y);
        if (spr.isdown && spr.fnok != undefined) spr.fnok(spr.slotId);
        spr.isdown = false;
        if (spr.fnup != undefined) spr.fnup();
        //spr.tint = ColorSet.yellow;
    }, this);

    spr.events.onInputDown.add(function () { //다운
        if (spr.isLock) return;
        //if (btndelay_onoff === true) return; //이중클릭방지

        //버튼사운드
        if (kData.bSoundSE && spr.soundonoff) SE_Click.play();
        //버튼이미지변경
        spr.isdown = true;
        if (spr.tw != undefined) spr.tw.stop();
        spr.tw = uigame.add.tween(spr.scale);
        spr.tw.to({x: (spr.sx * 1.1), y: (spr.sy * 1.1)}, 0.3, Phaser.Easing.Linear.None);
        spr.tw.start();
        if (dm) console.log("onInputDown" + ", xy:" + spr.x + "," + spr.y);
        if (spr.fndown != undefined) spr.fndown();
        //spr.tint = ColorSet.cyan;
    }, this);

    spr.onDelete = function(){
        if(spr.icon !== undefined) spr.icon.destroy();
        if(spr.tx !== undefined) spr.tx.destroy();
        spr.fnok = null;
    };

    return spr;
}
//-----------------------------------------------------------------스타트화면(레벨선택화면)
function createUISelectLevel() {
    var grp = uigame.add.group();
    //grp.alpha = 0.5;
    //grp.scale.set(1,1);
    //grp.x=100;
    grp.position.set(xc, yc);

    grp.z_stagging=false;

    grp._i = 0;
    grp._x4 = 4;
    grp._y4 = 4;

    //그라데이션배경
    var dlbg = createUI9a('atlas_bb_ui-0', 'select_bg.png', 0, 0, 720, 1280, 2, 2, 0, 0);
    grp.dlbg = dlbg;
    //grp.dlbg.alpha= 0.25;
    grp.addChild(dlbg);
    //그라데이션배경

    //맨위 배경바
    var top = uigame.add.sprite(0, -500, "atlas_bb-0", "top.png");
    top.anchor.setTo(0.5, 1);
    dlbg.addChild(top);//debug_Sprite(top);
    //맨위 배경바

    //상단별바 시작
    dlbg.sTopStarBg = createUI9a('atlas_bb_ui-0', 'select_heart_bg.png',
        70, -580,//바위치
        218, 50, //바크기
        20, 20, 0, 0);
    dlbg.sTopStarBg.anchor.setTo(0.5, 0.5);
    dlbg.addChild(dlbg.sTopStarBg);//debug_Sprite(dlbg.sTopStarBg);
    var sTopStar = uigame.add.sprite(-88, -2, "atlas_bb_ui-0", "select_level.png");
    sTopStar.anchor.setTo(0.5, 0.5);
    dlbg.sTopStarBg.addChild(sTopStar);//debug_Sprite(sTopStar);
    var txTopStar = uigame.add.text(19, 2, "000/000", style_bb_topstar);
    txTopStar.anchor.setTo(0.5, 0.5);
    dlbg.sTopStarBg.txTopStar = txTopStar;
    dlbg.sTopStarBg.addChild(txTopStar); //debug_Sprite(txTopStar);
    //상단별바 완성

    //레벨이 확충됬을 경우 늘려준다
    grp.copyAddUserData = function () {
        console.log("diff!! kData.userStarArray.length:" + kData.userData.length);

        //새갯수 만큼 초기화 배열 생성(초기화 0레벨만 오픈상태로)
        var _tempArray = [];
        for (var i = 0; i < LEVEL_MAX; ++i) {
            _tempArray[i] = -1;
        }
        _tempArray[0] = 0;

        //유저레벨(kData)-->_userStarArray로 복사한다.
        var star0index = -1; //현재하고 잇는레벨 인덱스저장용
        for (var i = 0; i < kData.userData.length; ++i) {
            if (kData.userData[i] === 0) star0index = i;   //플레이 중인 레벨이 있으면 저장
            _tempArray[i] = kData.userData[i];   //유저별 복사
        }
        if (star0index === -1) _tempArray[kData.userData.length] = 0; //플레이 중인게 없으면, 레벨 한개를 오픈해준다.

        kData.userData = _tempArray; //최종 이식 복사
    };
    //전체 별갯수 가져오기
    grp.getMyStar = function () {
        if(typeof(kData) === 'undefined' || typeof(kData.userData) === 'undefined') return;
        var ret = 0;

        //레벨길이 검사
        if (kData.userData.length < LEVEL_MAX) { //레벨이 확충됬을 경우 늘려준다
            grp.copyAddUserData();
        }

        for (var i = 0; i < LEVEL_MAX; i++) {
            var star3 = kData.userData[i];
            if( star3 !== -1           //클리어레벨인 경우
            && (i + 1) % LV4x4 !== 0){ //보너스아닌 경우
                ret += star3;
            }
        }
        return ret;
    };
    grp.getAllStar = function () {
        var ret=0;
        for (var i = 0; i < LEVEL_MAX; i++) {
            if((i + 1) % LV4x4 !== 0) {
                ret += 3;
            }
        }
        return ret;
    };

    //4x4아이콘 초기 생성 배치
    grp._w4x4 = 520; //전체 길이(아이콘 중점 사이)
    grp._h4x4 = 650; //전체 길이(아이콘 중점 사이)
    grp._spn_x=0;
    grp._spn_y=0;
    dlbg.sIcons = [];
    for (grp._i = 0; grp._i < LV4x4; grp._i++) {
        var lv1 = CreateLevel1IconUI();
        lv1.x = (
                (grp._i % grp._x4)      //몇x칸 로컬좌표(4개로 나눈 나머지)
                * (grp._w4x4 / (4 - 1)) //전체폭 1/3 값
            )
            - (grp._w4x4 * 0.5);    //중앙이동을 위한 절반 옵셋
        lv1.y = (
                float2int_fast(grp._i / grp._y4)//몇행(몫)
                * (grp._h4x4 / (4 - 1)) //전체높이 1/3 값
            )
            - (grp._h4x4 * 0.5)     //중앙이동을 위한 절반 옵셋
            - 50; //offsetF
        lv1.sOn.tx.text = grp._i;
        dlbg.sIcons.push(lv1);
        dlbg.addChild(lv1);
    }
    //4x4아이콘 초기 생성 배치

    //일반레벨언락스파인-------------
    grp.spine_unlock_n = this.game.add.spine(0, 0, "stage_lock_ani");
    grp.addChild(grp.spine_unlock_n);
    spn_unlock_n = grp.spine_unlock_n;

    //--스파인상태설정
    spn_unlock_n.state.onComplete = function (trackIndex, count) {
        switch (trackIndex) {
            case 0:
                if(dm) console.log("spn_unlock_n.trackindex:0");
                break;
            case 1:
                if(dm) console.log("spn_unlock_n.trackindex:1");
                break;
            case 2:
                if(dm) console.log("spn_unlock_n.trackindex:2");
                break;
            case 3:
                if(dm) console.log("spn_unlock_n.trackindex:3");
                break;
            case 4:
                if(dm) console.log("spn_unlock_n.trackindex:4");
                //empty만 순차실행 안됨, 딜레이없이 실행 되버린다.
                //spn_page_lock.visible = false;//여기서 스파인숨김시 다른 애니들이 다 작동안함
                spn_unlock_n.visible=false;
                if(gotonext===true){
                    gotonext=false;
                    //다음레벨로 가기-----------------------------------------
                    curLevel = kData.openedBak;
                    curLevelFake = curLevel + 1 - Math.floor(curLevel / LV4x4); //레벨선택창에서
                    //-----로그인 상태 체크-----------in CreateLevel1IconUI
                    if(loginTF === 1){          //로그인회원
                        if (proto.serPos === 0              //모비서비스
                            ||proto.serPos === 1) {              //야후서비스
                            if (kData.iHeart<= 0) { //하트가 바닥이면 in CreateLevel1IconUI
                                //우선상점나오게
                                uigame.state.states.menu.uishop.onRefreshShop();
                                uigame.state.states.menu.uishop.onOpen();
                                return;
                                //우선상점나오게
                            }else {
                                //하트소멸은 다음단계에서하므로
                                //다음단계로
                            }
                        }
                    }else{
                        if (networkManager.networkState === NET_STATE.LOCALHOST) { //로컬서비스
                            //다음단계로
                        }else{ //비회원  //게스트모드
                            //
                            if(kData.iHeart<=0) { //CreateLevel1IconUI
                                networkManager.ModalCall(MODAL_BUTTON_TYPE.OKCANCEL, GetShpMsg('signup'),//상점
                                    function () {
                                        networkManager.JoinMember();
                                    },
                                    function () {
                                    }
                                );
                                return;
                            }else{
                                //하트소멸은 다음단계에서하므로
                            }
                        }
                    }
                    //-----로그인 상태 체크------------in CreateLevel1IconUI //노말아이콘

                    //자동진행시
                    uigame.state.states.menu.uiselectlevel.spMask_sel.visible=true;//더블클릭막기
                    setTimeout(function () {
                        uigame.state.states.menu.uiselectlevel.spMask_sel.visible=false;//더블클릭풀기
                        uigame.state.start('game');
                        //uiSelectLevel.visible을 true로//this.uiStartLevel.onActiveLv();
                        if (dm) console.log("start game!!!");
                    }, 250); //--> clickGameMode
                    //다음레벨로 가기-----------------------------------------
                }
                break;
        }
    };

    //--스파인상태설정

    // //--스파인애니설정
    // spn_unlock_n.visible = true;
    // spn_unlock_n.x = grp._spn_x+200;
    // spn_unlock_n.y = grp._spn_y+200;
    // spn_unlock_n.addAnimationByName(4, "stage_lock_out", false);
    // //spn_unlock_n.addAnimationByName(4, "empty", false);
    // //--스파인애니설정
    //일반레벨언락스파인-------------

    //보너스레벨언락스파인-------------
    grp.spine_unlock_b = this.game.add.spine(0, 0, "bonus_stage_lock_ani");
    grp.addChild(grp.spine_unlock_b);
    spn_unlock_b = grp.spine_unlock_b;

    spn_unlock_b.state.onComplete = function (trackIndex, count) {
        switch (trackIndex) {
            case 0:
                if(dm) console.log("spn_unlock_n.trackindex:0");
                break;
            case 1:
                if(dm) console.log("spn_unlock_n.trackindex:1");
                break;
            case 2:
                if(dm) console.log("spn_unlock_n.trackindex:2");
                break;
            case 3:
                if(dm) console.log("spn_unlock_n.trackindex:3");
                break;
            case 4:
                if(dm) console.log("spn_unlock_n.trackindex:4");
                //empty만 순차실행 안됨, 딜레이없이 실행 되버린다.
                //spn_page_lock.visible = false;//여기서 스파인숨김시 다른 애니들이 다 작동안함
                spn_unlock_b.visible=false;
                //--------------------------------------------
                if(gotonext===true){
                    gotonext=false;
                    //다음레벨로 가기-----------------------------------------
                    curLevel = kData.openedBak;
                    curLevelFake = curLevel + 1 - Math.floor(curLevel / LV4x4); //레벨선택창에서
                    //-----로그인 상태 체크-----------in CreateLevel1IconUI
                    if(loginTF === 1){          //로그인회원
                        if (proto.serPos === 0              //모비서비스
                            ||proto.serPos === 1) {              //야후서비스
                            if (kData.iHeart<= 0) { //하트가 바닥이면 in CreateLevel1IconUI
                                //우선상점나오게
                                uigame.state.states.menu.uishop.onRefreshShop();
                                uigame.state.states.menu.uishop.onOpen();
                                return;
                                //우선상점나오게
                            }else {
                                //하트소멸은 다음단계에서하므로
                                //다음단계로
                            }
                        }
                    }else{
                        if (networkManager.networkState === NET_STATE.LOCALHOST) { //로컬서비스
                            //다음단계로
                        }else{ //비회원  //게스트모드
                            //
                            if(kData.iHeart<=0) { //CreateLevel1IconUI
                                networkManager.ModalCall(MODAL_BUTTON_TYPE.OKCANCEL, GetShpMsg('signup'),//상점
                                    function () {
                                        networkManager.JoinMember();
                                    },
                                    function () {
                                    }
                                );
                                return;
                            }else{
                                //하트소멸은 다음단계에서하므로
                            }
                        }
                    }
                    //-----로그인 상태 체크------------in CreateLevel1IconUI //보너스아이콘

                    //자동진행시
                    uigame.state.states.menu.uiselectlevel.spMask_sel.visible=true;//더블클릭막기
                    setTimeout(function () {
                        uigame.state.states.menu.uiselectlevel.spMask_sel.visible=false;//더블클릭풀기
                        uigame.state.start('game');
                        //uiSelectLevel.visible을 true로//this.uiStartLevel.onActiveLv();
                        if (dm) console.log("start game!!!");
                    }, 250); //--> clickGameMode
                    //다음레벨로 가기-----------------------------------------
                }
                //--------------------------------------------
                break;
        }
    };
    //보너스레벨언락스파인-------------

    //좌우버튼 왼쪽버튼
    dlbg.sLeft = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', "btn_select_arrow.png"),
        undefined,
        undefined,
        -201, 450,
        undefined
    );
    dlbg.sLeft.anchor.setTo(0.5, 0.5);
    dlbg.addChild(dlbg.sLeft);//debug_Sprite(dlbg.sLeft);
    dlbg.sLeft.fnok = function () {
        if (curLevel - LV4x4 < 0) return;
        if(dm) console.log("left");
        curLevel -= LV4x4;
        grp.onUpdatePage(curLevel); //왼쪽
    };
    //오른쪽버튼
    dlbg.sRight = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', "btn_select_arrow.png"),
        undefined,
        undefined,
        201, 450,
        undefined
    );
    dlbg.sRight.sx = -1;
    dlbg.sRight.anchor.setTo(0.5, 0.5);
    dlbg.sRight.scale.setTo(-1, 1);
    dlbg.addChild(dlbg.sRight);//debug_Sprite(dlbg.sRight);
    //좌우버튼
    dlbg.sRight.fnok = function () {
        if(mask_page_lock.visible===true) return;
        var curpage = Math.floor(curLevel / LV4x4)+1; //0,0,1,2,3 -->0,1,2,3, 하려고 +1
        var maxpage = Math.floor(LEVEL_MAX / LV4x4);

        //if (curLevel + LV4x4 > LEVEL_MAX - 1) return;
        if(curpage>maxpage-1) return;
        if(dm)  console.log("right");
        curLevel += LV4x4;
        grp.onUpdatePage(curLevel);//오른쪽
    };

    //페이지잠금 창 (스파인)
    grp.z_spine_page_lock=uigame.add.spine(0, 0, "page_lock_ani"); //스파인오브젝트생성
    grp.addChild(grp.z_spine_page_lock);
    spn_page_lock = grp.z_spine_page_lock;//글로벌저장

    //페이지잠금 정보 그룹(부모)
    grp.z_page_lock = uigame.add.group();
    grp.z_page_lock.position.setTo(0,30);
    grp.addChild( grp.z_page_lock);
    page_lock_spr = grp.z_page_lock;

    //페이지잠금별
    grp.z_page_lock.z_lock_life = uigame.add.sprite(-50, 0, 'atlas_bb_ui-0', "life.png");
    grp.z_page_lock.z_lock_life.anchor.setTo(0.5,0.5);
    grp.z_page_lock.addChild(grp.z_page_lock.z_lock_life);

    //페이지잠금별수텍스트
    grp.z_page_lock.z_lock_num = uigame.add.text(30, 0, "42", style_bb_star_lock);
    grp.z_page_lock.z_lock_num.anchor.setTo(0.5,0.5);
    grp.z_page_lock.addChild(grp.z_page_lock.z_lock_num);


    grp.z_spine_page_lock.state.onComplete = function (trackIndex, count) {
        switch (trackIndex) {
            case 0:
                if(dm) console.log("spn_page_lock.trackindex:0");
                //grp.visible = false; //다시 안나오는 문제가 잇어서 주석처리
                break;
            case 1:
                if(dm) console.log("spn_page_lock.trackindex:1");
                break;
            case 2:
                if(dm) console.log("spn_page_lock.trackindex:2");
                break;
            case 3:
                if(dm) console.log("spn_page_lock.trackindex:3");
                break;
            case 4:
                console.log("spn_page_lock.trackindex:4");
                //empty는 딜레이없이 실행 되버린다. //이런식 호출 spn_page_lock.setAnimationByName(4, "empty", false);
                //spn_page_lock.visible = false;//여기서 스파인숨김시 다른 애니들이 다 작동안함
                mask_page_lock.visible=false;
                kData.userDataPage[mask_page_lock_index]=1;
                break;

        }


    };

    //페이지표시
    dlbg.txPageBg = createUI9a('atlas_bb_ui-0', 'select_page.png', 0, 448, 270,  70, 20, 20, 20, 20);
    dlbg.addChild(dlbg.txPageBg); //debug_Sprite(dlbg.txPageBg);

    dlbg.txPage = uigame.add.text(0, 448+3, "0/0", style_bb_page);
    dlbg.txPage.anchor.setTo(0.5, 0.5);
    dlbg.addChild(dlbg.txPage); //debug_Sprite(dlbg.txPage);


    dlbg.uisoundonoff = createUISoundOnOff(); //버튼그림 임시초기화//사운드버튼
    dlbg.addChild(dlbg.uisoundonoff);//debug_Sprite(dlbg.uisoundonoff);
    MainsprJpSoundRoot = dlbg;
    globaluisoundonoff = dlbg.uisoundonoff;

    if (firsttime && bPhone) {
        //dlbg.uisoundonoff.visible = false; //첫시작시 숨기기
        titlesprJPSoundRoot.addChild(globaluisoundonoff);
        globaluisoundonoff.position.setTo(290, 550);
       //dlbg.uisoundonoff.visible = true;

    }
    else {
        if (kData.bSoundBGM) {
            if (dlbg.uisoundonoff.icon.visible) dlbg.uisoundonoff.icon.visible = false; //사운드켜기 상태표시
        } else {
            if (!dlbg.uisoundonoff.icon.visible) dlbg.uisoundonoff.icon.visible = true; //사운드끄기 상태표시
        }
    }
    //멀티버튼//플레이버튼
    var txmulti = uigame.add.text(0, 0,
        "",//GetString("multi play"),
        style60_multiplay);
    txmulti.anchor.setTo(0.5, 0.5);

    var btmulti = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', "btn_select_multy.png"),
        txmulti,
        undefined,
        0, 570,//중앙멀티버튼 //150, 400,//기존멀티버튼위치
        //243, 107,
        style60_multiplay
    );//debug_Sprite(btmulti);
    btmulti.isLock = true;
    btmulti.alpha=0;
    btmulti.name = "multibutton";
    btmulti.fnok_inner = function () {
    };
    btmulti.fnok = function () {
        //gamestate = GameState.selectmode;
        statemode = StateMode.begin;
        grp.visible = false;
        btmulti.fnok_inner();
    };
    btmulti.grp = grp;

    dlbg.btmulti = btmulti;

    // //싱글버튼제거---
    //dlbg.addChild(btsingle);
    // //싱글버튼제거---

    dlbg.addChild(btmulti);
    dlbg.name = "startshopdialog";

    //맨밑에 사탕그림 띄우기
    var _etc = uigame.add.sprite(-360, 457, 'atlas_bb_ui-0', "select_candy.png"); //debug_Sprite(_etc);
    dlbg.addChild(_etc);

    //스파인 언락 마스크
    grp.z_spinemask = uigame.add.sprite(0, -50, 'white1x1'); //포지션
    grp.z_spinemask.name = 'spinemask';
    grp.z_spinemask.width = 720;
    grp.z_spinemask.height = 900;
    grp.z_spinemask.tint = ColorSet.red;
    grp.z_spinemask.alpha = 0;//0.555;
    grp.z_spinemask.anchor.setTo(0.5, 0.5);
    grp.z_spinemask.inputEnabled = true;
    grp.addChild( grp.z_spinemask);
    grp.z_spinemask.visible =true;

    mask_page_lock=grp.z_spinemask; //전역에 저장
    //스파인 언락 마스크

    //에스피마스크-레벨선택
    var spMask_sel = uigame.add.sprite(0, 0, 'white1x1');
    spMask_sel.name = 'spMask_selectlevel';
    spMask_sel.width = 720;
    spMask_sel.height = 1280;
    spMask_sel.tint = ColorSet.blue;
    spMask_sel.alpha = 0;//0.555;
    spMask_sel.anchor.setTo(0.5, 0.5);
    spMask_sel.inputEnabled = true;
    grp.spMask_sel = spMask_sel;
    grp.addChild(spMask_sel);
    grp.spMask_sel.visible = false;
    //에스피마스크-레벨선택

    grp.onUpdatePage = function (gotolevel) { //페이지업데이트, 페이지리플레쉬 페이지새로고침


        //kdata undefined생태면 초기화를 한다. 업데이트가 안되서
        if (typeof(kData) === 'undefined' || typeof(kData.userData) === 'undefined') {
            kData.userData = []; //in initData
            for (var i = LEVEL_MAX - 1; i >= 0; --i) kData.userData[i] = -1;
            kData.userData[0] = 0; //0레벨 오픈
            //kData.userDataScore = []; //in initData
            //for (var i = LEVEL_MAX-1; i >= 0; -- i)  kData.userDataScore[i] = 0;
        }
        //언디파인 생태면 초기화를 한다. 업데이트가 안되서

        //현재 금방 오픈된 페이지 표시하려고,
        for (var i = LEVEL_MAX - 1; i >= 0; --i) {
            if (i - 1 >= 0) {
                if(kData.userData[i-1] != -1   //앞레벨값이 0~이상이고
                    && kData.userData[i] === -1) { // 지정레벨이 락상태면
                    if (kData.userData[i - 1] === 0) {
                        //앞레벨이 0인경우는 정상 // 3,3,3,0,-1 이므로
                    } else {
                        //지정레벨을 -1에서 0으로 변환 //3,3,3,-1 이므로
                        kData.userData[i] = 0;
                    }
                }
            }
        }
        
        //마지막 오픈된 레벨 인덱스 구하기 1차(0인경우)
        lastOpenedId = -1;
        for (var i = LEVEL_MAX - 1; i >= 0; --i) {
            if(lastOpenedId === -1 && kData.userData[i]===0) lastOpenedId = i;
        }
        //마지막 오픈된 레벨 인덱스 구하기 2차(0보다 큰경우)
        if(lastOpenedId === -1) {
            for (var i = LEVEL_MAX - 1; i >= 0; --i) {
                if (kData.userData[i] > -1) lastOpenedId = i;
            }
        }

        //레벨1버튼클릭시 인덱스가 curLevel에 저장 되므로,
        //현재페이지, 최대페이지 구하기
        var curpage = Math.floor(curLevel / LV4x4) + 1; //0,1,2,3 -->1,2,3, 하려고 +1
        var maxpage = Math.floor(LEVEL_MAX / LV4x4);

        //첫1페이지시 왼쪽버튼 사리지게
        if (curpage === 1) dlbg.sLeft.visible = false;
        else  dlbg.sLeft.visible = true;

        //마지막 페이지 maxpage시 오른쪽버튼 사리지게
        if (curpage > maxpage - 1) dlbg.sRight.visible = false;
        else  dlbg.sRight.visible = true;

        //가려는 레벨이 범위에 벗어나면 안되게
        if (gotolevel < 0 || gotolevel > LEVEL_MAX - 1) return;

        var page = Math.floor(gotolevel / LV4x4); //가야할 페이지, 0~시작
        var pagemax = Math.floor(LEVEL_MAX / LV4x4); //가야할 페이지,
        if (dm) console.log("page:" + page);

        //grp.dlbg.indicator.setIndicatorByPage(page);

        grp.dlbg.txPage.text = (page + 1) //현재페이지
            + "/"
            + pagemax;        //최대페이지

        //아이콘 등장 스태거적용
        if (grp.z_stagging === false) {
            grp.z_stagging = true;
            TweenMax.staggerFrom(grp.dlbg.sIcons, 0.15,
                {
                    alpha: 0,
                    //rotation:0.2,
                    //ease: Linear.easeNone,
                    ease: Power1.easeOut,//ease:Elastic.easeOut,
                    delay: 0 //첫시작1번만
                },
                0.03,//callNextTween
                function () {
                    grp.z_stagging = false;
                }//onCompleteAll
            );
        }


        for (grp._i = 0; grp._i < LV4x4; grp._i++) {

            var lvicon = grp.dlbg.sIcons[grp._i]; //아이콘1개 가져오기
            var lvidx = (page * LV4x4) + grp._i;  //페이지기준 --> 레벨 인덱스 가져오기
            var savelv1 = -1; //별갯수저장용

            savelv1 = kData.userData[lvidx];   //레벨1개 별갯수 저장 데이터 가져오기

            if (grp._i === LV4x4 - 1) {
                //보너스레벨 아이콘 처리----------
                //0:lock, 1:clear, 2:current, 3:bonus_lock, 4:bonus_clear, 5:bonus_current 6:bonus_playing
                if (savelv1 > 0)                            //깻던 레벨, 1~3개 이면
                {
                    //에러감시
                    if(typeof(bubble_levels)==='undefined') console.log("bubble_levels == undefined");
                    if(typeof(bubble_levels[lvidx])==='undefined') console.log("bubble_levels[] == undefined, "+lvidx);
                    if(typeof(bubble_levels[lvidx].option)==='undefined'){
                        pageOption = [0,0,0,0,0,0];
                        console.log("bubble_levels[lvidx].option == undefined");
                    }
                    else{
                        if(typeof(bubble_levels[lvidx].option[2])==='undefined') console.log("bubble_levels[lvidx].option[2] == undefined");
                        pageOption = bubble_levels[lvidx].option;
                    }
                    //에러감시

                    var remainheart=pageOption[2]-savelv1;
                    if (remainheart <= 0) {
                        //남은하트가 없으면 클리어
                        lvicon.onActiveIcon(4); //보너스클리어상태
                        lvicon.onSetLvIdx(lvidx);
                    } else {
                        //남은하트가 있으면 표시
                        lvicon.onActiveIcon(6); //보너스오픈만 된상태
                        lvicon.onSetHeart(remainheart);
                        lvicon.onSetLvIdx(lvidx);
                    }

                } else if (savelv1 === 0)                   //진행중인 보너스(못깬)
                {
                    //예외처리: 일반 레벨아이콘 두개 열리는 문제를 1개로 줄일려고
                    if(lastOpenedId===lvidx) {
                        lvicon.onActiveIcon(5); //보너스 오픈,선택된 상태
                        lvicon.onSetLvIdx(lvidx);

                        //오픈연출-보너스-1회성
                        if(kData.openedBak!==lvidx) {
                            spn_unlock_b.visible = true;
                            spn_unlock_b.x = lvicon.x;
                            spn_unlock_b.y = lvicon.y;
                            spn_unlock_b.addAnimationByName(4, "bonus_stage_lock_out", true);
                            kData.openedBak = lvidx; //저장
                        }
                        //오픈연출-보너스-1회성

                    }else{
                        //var remainheart = bubble_levels[lvidx].option[2] - savelv1;
                        var remainheart = pageOption[2] - savelv1;
                        lvicon.onActiveIcon(6); //보너스오픈만 된상태
                        lvicon.onSetHeart(remainheart);
                        lvicon.onSetLvIdx(lvidx);
                    }
                    //예외처리: 일반 레벨아이콘 두개 열리는 문제를 1개로 줄일려고
                } else                                      //잠긴 보너스
                {
                    lvicon.onActiveIcon(3); //bonuslock //0:lock, 1:clear, 2:current, 3:bonus_lock, 4:bonus_clear, 5:bonus_current 6:bonus_playing
                }
                //보너스레벨 아이콘 처리----------
            } else {
                //일반레벨 아이콘 업데이트--------
                if (savelv1 > 0)                            //깻던 레벨, 1~3개 이면
                {
                    lvicon.onActiveIcon(1); //오픈 모양 아이콘
                    lvicon.onSetStar(savelv1); //별갯수
                    lvicon.onSetLvIdx(lvidx); //0~시작되는  index레벨번호저장
                    lvicon.onSetLvNum(lvidx + 1 - page); //눈에 표시되는 페이크 레벨 1~15,보너스,16~30,보너스 //lvicon.onSetLvNum(lvidx + 1)
                    lvicon.onSetIcon(lvidx + 1);         //미니맵
                } else if (savelv1 === 0)                   //진행중인 레벨(못깬)
                {

                    //예외처리: 보너스 레벨아이콘에서 두개 열리는 문제를 1개로 줄일려고
                    if(lastOpenedId===lvidx) {
                        lvicon.onActiveIcon(2); //선택된 모양 아이콘
                        lvicon.onSetStar(0);
                        lvicon.onSetLvIdx(lvidx);
                        lvicon.onSetLvNum(lvidx + 1 - page); //눈에 표시되는 페이크 레벨 1~15,보너스,16~30,보너스 //lvicon.onSetLvNum(lvidx + 1)
                        lvicon.onSetIcon(lvidx + 1);         //미니맵

                        //오픈연출-보너스-1회성
                        if(kData.openedBak!==lvidx) {
                            spn_unlock_n.visible = true;
                            spn_unlock_n.x = lvicon.x;
                            spn_unlock_n.y = lvicon.y;
                            spn_unlock_n.addAnimationByName(4, "stage_lock_out", false);
                            kData.openedBak = lvidx;//저장
                        }
                        //오픈연출-보너스-1회성

                    }else{
                        //강제로 일반레벨 열기, 일반레벨에서는 여기까지  오면 안됨
                        lvicon.onActiveIcon(1);  //오픈 모양 아이콘
                        lvicon.onSetStar(0);
                        lvicon.onSetLvIdx(lvidx);
                        lvicon.onSetLvNum(lvidx + 1 - page); //눈에 표시되는 페이크 레벨 1~15,보너스,16~30,보너스 //lvicon.onSetLvNum(lvidx + 1)
                        lvicon.onSetIcon(lvidx + 1);         //미니맵
                    }
                    //예외처리: 보너스 레벨아이콘에서 두개 열리는 문제를 1개로 줄일려고

                } else                                      //안열린 레벨
                {
                    lvicon.onActiveIcon(0); //lock //0:lock, 1:clear, 2:current, 3:bonus_lock, 4:bonus_clear, 5:bonus_current 6:bonus_playing
                }
                //일반레벨 아이콘 업데이트--------
            }
        }

        //페이지 잠금 작동처리 //스파인
        var curpgidx = Math.floor(curLevel / LV4x4);
        var mystar = grp.getMyStar();
        var allstar = grp.getAllStar();
        var curpgstate = kData.userDataPage[curpgidx];

        grp.z_page_lock.z_lock_num.text = needStar[curpgidx];

        if (needStar[curpgidx]<=mystar) {
            //나의 별량이 많을때
            if(curpgstate!==1) { //0이거나 -1이면
                //닫혀진상태에서 열림상태로
                spn_page_lock.visible = true;
                mask_page_lock.visible = true;
                //spn_page_lock.setAnimationByName(0, "empty", false);
                //spn_page_lock.setAnimationByName(0, "page_lock_idle", false);
                spn_page_lock.setAnimationByName(4, "page_lock_out", false); //여기서 마스크숨김 //위치:grp.z_spine_page_lock.state.onComplete
                //spn_page_lock.setAnimationByName(4, "empty", false);
                mask_page_lock_index = curpgidx;//스파인에서 처리하게끔 넘긴다

                setTimeout(function () {
                    if(kData.bSoundSE) SE_Page_Open.play(); //페이지잠금해제사운드
                }, 750); //0.5초 뒤

                //TweenMax.fromTo( page_lock_spr.scale, 0.15, {x:1, y:1}, {x:1.5, y:1.5, ease: Linear.easeNone, delay: 0.2} );
                //TweenMax.fromTo( page_lock_spr, 0.15, {alpah:1}, {alpha: 0, ease: Linear.easeNone, delay: 0.2} );

                //TweenMax.set(page_lock_spr.scale, {x:1, y:1});
                //TweenMax.to( page_lock_spr.scale, 0.15, {x:1.5, y:1.5, ease: Linear.easeNone, delay: 0.2} );

                if (TweenMax.isTweening(page_lock_spr)) TweenMax.killTweensOf(page_lock_spr);
                TweenMax.set(page_lock_spr, {alpha:1});
                TweenMax.to( page_lock_spr, 0.75, {alpha: 0, ease: Linear.easeNone, delay: 0.2} );
            }else {
                //열린상태로 계속
                spn_page_lock.visible = false;
                mask_page_lock.visible = false;
                spn_page_lock.setAnimationByName(0, "empty", false);

                if (TweenMax.isTweening(page_lock_spr)) TweenMax.killTweensOf(page_lock_spr);
                page_lock_spr.alpha = 0;
            }
        }else if(needStar[curpgidx]>=mystar){
            //닫혀진상태로 계속 //내별이 적을때
            spn_page_lock.visible = true;
            mask_page_lock.visible = true;
            spn_page_lock.setAnimationByName(1, "page_lock_idle", false);

            if (TweenMax.isTweening(page_lock_spr)) TweenMax.killTweensOf(page_lock_spr);
            page_lock_spr.alpha = 1;
        }
        //페이지잠금 작동처리 //스파인


    };//onUpdatePage

    //인디케이터표시
    // dlbg.indicator = CreateUIIndicator();
    // dlbg.addChild(dlbg.indicator);
    // dlbg.indicator.y = 450;


    return grp;
}
//예스노 메세지 박스 생성
function createUIYesNo(xp, yp, yesnomode) {
    var grp = uigame.add.group();
    //grp.alpha = 0.5;
    // //grp.scale.set(1,1);
    // //grp.x=100;

    //투명배경
    var darkbg = uigame.add.sprite(xc, yc, 'white1x1');
    darkbg.name = 'darkbgyesno';
    grp.bg = darkbg;
    grp.addChild(darkbg);

    darkbg.width = 720;
    darkbg.height = 1280;
    darkbg.tint = ColorSet.black;
    darkbg.alpha = 0.5;
    darkbg.anchor.setTo(0.5, 0.5);
    grp.addChild(darkbg);
    darkbg.inputEnabled = true;
    //투명배경

    if (xp == undefined) xp = xc;
    if (yp == undefined) yp = yc;
    //원본슬라이스
    //var resultbg9 = loadUI9('popup_message_nine', xp,yp, 571, 421); //결과창
    //테스트슬라이스//
    var resultbg9 = createUI9a('ui0', 'popup_message.png', xp, yp, 571, 421, 42, 52, 50, 57); //결과창
    //debug_Sprite(resultbg9);
    resultbg9.scale.setTo(0.5, 0.5);

    //원본슬라이스
    //var inresultbg9 = loadUI9('list_ready_nine', -3,-62, 468, 203); //결과이너창
    //테스트슬라이스
    var inresultbg9 = createUI9a('ui0', 'list_ready.png', -3, -62, 468, 203, 14, 14, 14, 14); //결과이너창
    //debug_Sprite(inresultbg9);

    var txComment = uigame.add.text(0, -58, "알 수 없는 에러가\n발생하여 시스템에\n문제가 생겼습니다.", {
            font: "30px Conv_PassionOne-Regular",
            fill: hex2str(ColorSet.white),
            align: "center",
            stroke: '#3C2B00',
            strokeThickness: 6
        }
    );
    txComment.anchor.setTo(0.5, 0.5);
    //debug_Sprite(txComment);

    resultbg9.addChild(inresultbg9);
    resultbg9.addChild(txComment);

    //버튼예스
    var txok = uigame.add.text(0, 0, GetString("yes"), style60);
    txok.anchor.setTo(0.5, 0.5);
    //var ybt = createbtn( loadUI9('yes_nine', 0, 0, 225, 109),
    var singlepos = yesnomode ? 125 : 0;
    var ybt = createbtn(createUI9a('ui0', 'btn_message_ok.png', 0, 0, 225, 109, 24, 32, 24, 32),//오케이버튼
        txok,
        undefined,
        singlepos, 110,
        //243, 107,
        style60
    );
    //debug_Sprite(ybt);
    ybt.fnok = function () {
        if (dm) console.log("yes!!!");
    };
    resultbg9.addChild(ybt);
    resultbg9.ok = ybt;

    if (yesnomode) { //싱글버튼모드면 노버튼생성안함
        //버튼노
        var txno = uigame.add.text(0, 0, GetString("no"), style60);
        txno.anchor.setTo(0.5, 0.5);
        //var nbt = createbtn( loadUI9('no_nine', 0, 0, 225, 109),
        var nbt = createbtn(createUI9a('ui0', 'btn_message_no.png', 0, 0, 225, 109, 24, 32, 24, 32),//노버튼
            txno,
            undefined,
            -125, 110,
            style60
        );
        //debug_Sprite(nbt);
        nbt.fnok = function () {
            if (dm) console.log("no!!!");
        };
        resultbg9.addChild(nbt);
        resultbg9.no = nbt;
    }

    resultbg9.txt = txComment;
    grp.addChild(resultbg9);
    return grp;
}
//구매결과창생성
function createUIShopResult() {
    var grp = uigame.add.group();
    //grp.alpha = 0.5;
    // //grp.scale.set(1,1);
    // //grp.x=100;

    //투명배경
    var darkbg = uigame.add.sprite(xc, yc, 'white1x1');
    darkbg.name = 'darkbgshopresult';
    grp.bg = darkbg;
    darkbg.width = 720;
    darkbg.height = 1280;
    darkbg.tint = ColorSet.black;
    darkbg.alpha = 0.5;
    darkbg.anchor.setTo(0.5, 0.5);
    darkbg.inputEnabled = true;
    grp.addChild(darkbg);
    //투명배경

    //다이얼로그
    var dlgbg9 = createUI9a('atlas_bb_ui_dlg-0', 'popup_message.png', xc, yc, 571, 421, 42, 52, 50, 57); //샵결과창
    dlgbg9.scale.setTo(1, 1);
    grp.dlgbg9 = dlgbg9;
    grp.addChild(dlgbg9);
    //이너창
    var inresultbg9 = createUI9a('atlas_bb_ui-0', 'list_shop_2.png', 0, -92, 363, 150, 20, 20, 0, 0);  //샵배경

    //하트그림
    var sprGold = uigame.add.sprite(-117, -150, 'atlas_bb_ui-0', "heart_2.png");

    //debug_Sprite(sprGold);
    //코인갯수
    var txCnt = uigame.add.bitmapText(157, -145, 'shop_no-export', "x8", 70, undefined);
    txCnt.anchor.setTo(1, 0.5);
    grp.txCnt = txCnt;//debug_Sprite(txCnt);

    var txComment = uigame.add.text(0, 25, GetString("gotcoin", 8), style_40_result);
    txComment.anchor.setTo(0.5, 0.5);
    grp.txComment = txComment;//debug_Sprite(txComment);

    var ybt = createbtn(createUI9a('atlas_bb_ui-0', 'btn_yes.png', 0, 0, 275, 108, 55, 55, 0, 0),
        uigame.add.text(0, 0, GetString("ok"), style55_ok_big),
        undefined,
        0,
        128,
        style60
    );//debug_Sprite(ybt);
    ybt.fnok = function () {
        if (dm) console.log("yes!!!");
        grp.visible = false;
    };

    dlgbg9.addChild(inresultbg9);
    dlgbg9.addChild(sprGold);
    dlgbg9.addChild(txCnt);
    dlgbg9.addChild(txComment);
    dlgbg9.addChild(ybt);
    //resultbg9.addChild(nbt);

    dlgbg9.ok = ybt;
    //resultbg9.no=nbt;
    dlgbg9.txt = txComment;
    dlgbg9.txtcnt = txCnt;
    dlgbg9.sprgold = sprGold;


    grp.onRefreshShopResult = function (itemcount, pngname) {
        grp.txCnt.text = "x" + itemcount;
        grp.txComment.text = GetString("gotcoin", itemcount);
        grp.dlgbg9.sprgold.loadTexture('atlas_bb_ui-0', pngname);
    };

    grp.onOpen = function () {
        if(kData.bSoundSE) SE_Popup_ON.play();
        onFadein(grp.bg, 0.75);
        onFadeinScale(grp.dlgbg9, function () {
        });
        grp.visible = true;
    };

    return grp;
}
//클릭시 disable버튼으로 변경,타이머 버튼 등장
function createbtnDisable(x, y, onoff, btn, btnD, fn) {

    var grp = uigame.add.group();
    grp.x = x;
    grp.y = y;

    grp.btn = btn;
    grp.btnD = btnD;

    grp.addChild(btn);
    grp.addChild(btnD);

    btnD.inputEnabled = false;

    if (onoff) {
        btn.visible = true;
        btnD.visible = false;
    } else {
        btn.visible = false;
        btnD.visible = true;
    }

    btn.fnok = function () {
        var condition = true;
        if (condition) {
            btn.visible = false;
            btnD.visible = true;
            if (fn) fn();
        }
    };

    btnD.fnok = function () {
        // var condition = true;
        // if(condition) {
        //     btn.visible = true;
        //     btnD.visible = false;
        //
        // }
    };
    //debug_Sprite(grp); //err
    return grp;
}

//샵슬롯1개 생성
//     slotname, 슬롯bg인자  string
//     img,      하트그림png string
//     cnt,      획득갯수    string
//     btbg,     버튼배경    string
//     bttx,     버튼text   string
//     btimg,    버튼배경    string
//     membersonly,
//     heartindex


// s3.slgold   //------골드 그림
// s3.slcnt    //------골드 갯수
// s3.btntx    //-----버튼 텍스트
// s3.btnicon  //-----버튼 이미지
// s3.member   //-----회원전용텍스트
// s3.btn      //활성버튼
// s3.btnD     //비활성버튼(시계버튼)
function createSlotShop1(slotname, img, cnt, btbg, bttx, btimg, membersonly, heartindex) {
    //슬롯배경
    var png = slotname === 'slot0' ? 'list_shop_1.png'//샵슬롯-맨위
        : slotname === 'slot1' ? 'list_shop_2.png'     //샵슬롯
            : 'list_shop_2.png';
    var s3 = createUI9a('atlas_bb_ui-0', png, 0, 0, 598, 150, 20, 20, 0, 0);  //샵배경

    s3.heartindex = heartindex;
    //debug_Sprite(s3);

    //코인그림
    var slgold = uigame.add.sprite(-160, -1, 'atlas_bb_ui-0', img); //여기말고 따로 로딩한다
    s3.addChild(slgold);
    slgold.anchor.setTo(0.5, 0.5);
    s3.slgold = slgold; //------골드 그림
    //debug_Sprite(slgold);

    //코인갯수
    var slcnt = uigame.add.bitmapText(54, -20, 'shop_no-export', cnt, 70, undefined);
    slcnt.anchor.setTo(1, 0.5);
    s3.slcnt = slcnt; //------골드 갯수
    s3.addChild(slcnt); //debug_Sprite(slcnt);

    //구매버튼 활성버튼-----------------
    var btn = createbtn(createUI9a('atlas_bb_ui-0', btbg, 0, 0, 210, 86, 45, 56, 0, 0),
        (bttx === undefined ? undefined : uigame.add.text(0, 0, bttx, style_45_price)),  //회원전용 경우(ad도 포함)
        (btimg === undefined ? undefined : uigame.add.sprite(0, 0, 'atlas_bb_ui-0', btimg)),//광고전용 경우
        0, 0,
        style60
    );
    s3.btn = btn; //<<---활성버튼
    //무비아이콘이 밑으로 조금 내려와서 올림
    if (btn.icon !== undefined) btn.icon.y = -7;
    //구매버튼 활성버튼-----------------

    //시계버튼 비활성버튼-----------
    var btnD = createbtn(createUI9a('atlas_bb_ui-0', 'btn_shop_3.png', 0, 0, 210, 86, 45, 56, 0, 0),
        uigame.add.text(0, 0, (shopListData[heartindex].Price !== 0 ? bttx : "00:00"), style_45_price),
        undefined,
        0, 0,
        style60
    );
    s3.btnD = btnD; //<<---비활성버튼
    //시계버튼 비활성버튼-----------

    //슬롯 전용 버튼 기능------
    s3.setBtnOn = function () { //클릭시 ->버튼활성되고
        s3.btPurchase.btn.visible = true; //btPurchase는 버튼2개를 가지고 잇는 오브젝트
        s3.btPurchase.btnD.visible = false;//btPurchase는 버튼2개를 가지고 잇는 오브젝트
    };
    s3.setBtnOff = function () { //클릭시 ->버튼비활성되고
        s3.btPurchase.btn.visible = false;
        s3.btPurchase.btnD.visible = true;
        var aa = s3.btPurchase.btnD.tx.text;
        if(dm) console.log(aa);
    };
    //슬롯 전용 버튼 기능------

    //돈이 부족하면 오프
    s3.onRefreshSlot1 = function () {
        if (loginTF === 1) {                                          //로그인상태

            if (proto.serPos === 0              //모비서비스
                ||proto.serPos === 1) {              //야후서비스
                //grp.pttx.text = getMoneyFormatFromNum(kData.greappoint);
                if (kData.greappoint < shopListData[s3.heartindex].Price) {
                    s3.setBtnOff();
                } else {
                    s3.setBtnOn();
                }
            }
        }
        else//if(loginTF == 0){ //비로그인
        {
            if (networkManager.networkState === NET_STATE.LOCALHOST) {//로컬서비스

            } else {//비회원

            }
        }

    };

    //슬롯전용버튼이므로 btn과 btnD가 있다
    s3.btnfnok = function () { //상점버튼클릭시

        //shop모드별대응
        var uiresult;
        var uiplus;
        var uishop;
        if(uishopinmenu) {
            uishop =  uigame.state.states.menu.uishop;
            uiresult = uigame.state.states.menu.uishopresult;
            uiplus = uigame.state.states.menu.uishopplus;
        }
        else
        {
            uishop =  uigame.state.states.game.uiController.uishop;
            uiresult = uigame.state.states.game.uiController.uishopresult;
            uiplus = uigame.state.states.game.uiController.uiMain.z_shopplus;
        }
        //shop모드별대응



        //혜관님광고클릭시---
        if (shopListData[s3.heartindex].pType === "ad_1") {
            //this.txt_pay.visible = false;
            console.log("혜관님광고클릭1!!");
            if (isApp) window.parent.postMessage({adStatus: 0}, "*");//전면 광고
        } else if(shopListData[s3.heartindex].pType === "ad_2"){
            console.log("혜관님광고클릭2!!");
            if (isApp) window.parent.postMessage({adStatus: 1}, "*");//비디오 광고
        }
        //혜관님광고클릭시---

        if (loginTF === 1) {                                             //로그인상태
            if (proto.serPos === 0              //모비서비스
            ||proto.serPos === 1)              //야후서비스
            {
                s3.setBtnOn(); //바이하트에서 광고버튼이면 꺼짐으로 바꿈

                // //버튼상태 바꾸기-----
                // if(shopListData[s3.heartindex].Price ===0) { //광고버튼
                //     //로컬모드에서 가짜 타이머돌기 //클릭시 꺼짐
                //     //s3.setBtnOn();//원래주석인데, 풀면 일반버튼됨
                //     curDate = Date.now();
                //     kData.btn1TimeStamp = parseInt(curDate.toString().substring(0, 10));//kData.btn1TimeStamp
                //     networkManager.ForcedSaveData();
                // }
                // else
                // {   //일반버튼
                //     s3.setBtnOn();
                // }
                // //버튼상태 바꾸기-----

                //다른버튼들 활성,비활성한다.
                for (var i = 0; i < 4; i++) {
                    //돈이 부족하면 오프
                    uigame.state.states.menu.uishop.slots[i].onRefreshSlot1(); //가진포인트가 적으면, 비활성 시킨다
                }

                //이미 클릭한 뒤라 체크 할필요 없음: s3.btPurchase.btn.visible===true
                heartController.BuyHeart(s3.heartindex);


                //에스피마스크실행-샵
                uigame.state.states.menu.uishop.spMask.visible = true;
                setTimeout(function () {
                    uigame.state.states.menu.uishop.spMask.visible = false;
                }, 500);
                //에스피마스크실행-샵
            }//모비,야후

        }
        else if(loginTF === 0){ //비로그인
            if (networkManager.networkState === NET_STATE.LOCALHOST) {//로컬서비스
                //로컬서비스는 가짜 결제로
                uiresult.onRefreshShopResult( shopListData[s3.heartindex].Quantity, shopListData[s3.heartindex].icon );

                uiresult.onOpen();//로컬에서 구매
                //if (bSoundSE) SE_BuyItem.play();            //아이템 구매 사운드           --아이템을 구매하였을 때 사운드


                //원래 하트추가는 networkManager.Payment에서 하는데...
                //하트 가짜 충전(포인트,광고 전부다)
                kData.iHeart+= str2int(shopListData[s3.heartindex].Quantity);//로컬호스트상태
                uiplus.onRefresh();

                //버튼상태 바꾸기-----
                if(shopListData[s3.heartindex].Price ===0) { //광고버튼
                    s3.setBtnOff();
                    //로컬모드에서 가짜 타이머돌기 //클릭시 꺼짐
                    //s3.setBtnOn();//원래주석인데, 풀면 일반버튼됨
                    curDate = Date.now();
                    if(s3.heartindex==2) kData.btn1TimeStamp = parseInt(curDate.toString().substring(0, 10));//kData.btn1TimeStamp
                    if(s3.heartindex==3) kData.btn2TimeStamp = parseInt(curDate.toString().substring(0, 10));//kData.btn1TimeStamp
                }
                else
                {   //일반버튼
                    s3.setBtnOn();
                }
                //버튼상태 바꾸기-----

            } else {
                //비회원비로그인상태
                s3.setBtnOn();
                if(shopListData[s3.heartindex].Price ===0) { //광고버튼시
                    if (dm) console.log("Payment-피씨모드:" + GetShpMsg("gotogpg"));//구글플레이로(b_isAD = true;)
                    //비로그인시 광고 클릭//
                    s3.setBtnOff();
                    kData.iHeart+= str2int(shopListData[s3.heartindex].Quantity);//비로그인상태
                    curDate = Date.now();
                    if(s3.heartindex==2) kData.btn1TimeStamp = parseInt(curDate.toString().substring(0, 10));//kData.btn1TimeStamp
                    if(s3.heartindex==3) kData.btn2TimeStamp = parseInt(curDate.toString().substring(0, 10));//kData.btn1TimeStamp

                    if(false) {
                        networkManager.ModalCall(MODAL_BUTTON_TYPE.OKCANCEL, GetShpMsg("gotogpg"),
                            function () {
                                networkManager.JumpGooglePlay();
                            },
                            function () {
                            }
                        );
                    }
                }else{
                    //비로그인시 포인트 클릭//
                    if (dm) console.log("포인트클릭시:" + GetShpMsg("signup"));
                    networkManager.ModalCall(MODAL_BUTTON_TYPE.OKCANCEL, GetShpMsg('signup'),//상점
                        function () {
                            networkManager.JoinMember();
                        },
                        function () {
                        }
                    );
                }
                uiplus.onRefresh();
            }

            networkManager.ForcedSaveData();//로그인때는 buyheart에서 저장

            //비회원일때, 로컬일때
            //에스피마스크실행-샵
            uishop.spMask.visible = true;
            setTimeout(function () {


                uishop.spMask.visible = false;
            }, 500);
            //에스피마스크실행-샵
        }
    };
    //버튼2개를 교대로 온오프한다.
    var btPurchase = createbtnDisable(180, 0, true, btn, btnD, s3.btnfnok);//x, y, onoff, btn, btnD, fn //function(){console.log("-----");}
    s3.addChild(btPurchase);
    s3.btPurchase = btPurchase;

    //코리안폰트스타일로 변경 //샾슬롯
    switch(CURRENT_LANGUAGE) {
        case LANGUAGE_ENG:
            break;
        case LANGUAGE_JPN:
            break;
        case LANGUAGE_KOR:
            style_30_member = {                         //하트샵슬롯"회원전용"
                font: "bold 30px gulim",
                fill: hex2str(ColorSet.white),
                align: "center",
                stroke: ColorSet.black,
                strokeThickness: 6
            };
            break;
    }
    //코리안폰트스타일로 변경

    var txmember = uigame.add.text(-208, -33, membersonly, style_30_member);
    txmember.anchor.setTo(0.5, 0.5);
    s3.addChild(txmember);
    s3.member = txmember; //-----회원전용텍스트
    //debug_Sprite(member);
    //debug_Sprite(btn);
    //debug_Sprite(btnD);
    return s3;
}

//샵아이템배열
// var shopitemlist = [
//     {id: "", icon: "heart_1.png", quantity: "5", price: "200", buttonicon: "", member: GetString("memberonly")},
//     {id: "", icon: "heart_3.png", quantity: "25", price: "1000", buttonicon: "", member: GetString("memberonly")},
//     {id: "", icon: "heart_1.png", quantity: "5", price: "0", buttonicon: "ad.png", member: ""},  //그림버튼
//     {id: "", icon: "heart_3.png", quantity: "7", price: "0", buttonicon: "movie.png", member: ""}    //그림버튼
// ];

// if(dm) console.log("~ ~ sHeartShop.itemList: "
// +sHeartShop.itemList["0"]["icon"]+", "
// +sHeartShop.itemList["0"]["tx"]+", "
// +sHeartShop.itemList["0"]["button"]+", "
// +sHeartShop.itemList["0"]["value"]+", "
// );

function createUIShop() {
    var grp = uigame.add.group();

    //grp.scale.setTo(0.5,0.5);
    //grp.alpha = 0.5;
    //grp.scale.set(1,1);            //grp.x=100;

    //투명배경
    var bg = uigame.add.sprite(0, 0, 'white1x1');
    bg.name = 'bguishop';
    grp.bg = bg;
    grp.addChild(bg);
    bg.width = 720;
    bg.height = 1280;
    bg.tint = ColorSet.black;
    bg.alpha = 0.5;
    bg.anchor.setTo(0.5, 0.5);
    bg.inputEnabled = true;
    //투명배경

    //삽배경다이얼로그
    // var dlgbg9 = createUI9a('ui0', 'popup_shop.png', xc, yc, 656, 981, 40, 40, 150, 180); //샵배경
    // grp.dlgbg9 = uigame.add.sprite(xc, yc, 'atlas_bb_ui_dlg-0', 'popup_shop.png');
    // grp.dlgbg9.anchor.setTo(0.5, 0.5);
    // grp.dlgbg9.scale.setTo(1, 1);
    // grp.addChild(grp.dlgbg9);//debug_Sprite(dlgbg9);

    //상하로 나뉜 배경
    grp.dlgbg9 = uigame.add.group();
    grp.position.setTo(xc,yc);
    grp.dlgbg9.scale.setTo(1, 1);
    grp.addChild(grp.dlgbg9);//debug_Sprite(dlgbg9);

    grp.dlgbg9_b = uigame.add.sprite(0, 145, 'atlas_bb_ui_dlg-0', 'popup_shop_bottom.png');
    grp.dlgbg9_b.anchor.setTo(0.5, 0.5);
    grp.dlgbg9.addChild(grp.dlgbg9_b); //debug_Sprite(grp.dlgbg9_b);

    grp.dlgbg9_t = uigame.add.sprite(0, -347, 'atlas_bb_ui_dlg-0', 'popup_shop_top.png');
    grp.dlgbg9_t.anchor.setTo(0.5, 0.5);
    grp.dlgbg9.addChild(grp.dlgbg9_t); //debug_Sprite(grp.dlgbg9_t);
    //상하로 나뉜 배경

    //샵타이틀
    var title = uigame.add.text(0, -395, 'HEART SHOP', style_shoptitle);
    //var title = uigame.add.sprite(-7, -430, 'ui0', 'title_shop.png');
    title.anchor.setTo(0.5, 0.5);
    grp.dlgbg9.addChild(title); //debug_Sprite(title);

    //샵dlg안의 포인트bg
    //var pt = uigame.add.sprite(-4, -253, 'ui0', 'point.png');
    var pt = createUI9a('atlas_bb_ui-0', 'point_bg.png', 20, -253, 257, 69, 24, 24, 24, 24);
    pt.anchor.setTo(0.5, 0.5);
    pt.inputEnabled = true;
    grp.dlgbg9.addChild(pt); //debug_Sprite(pt);

    pt.events.onInputDown.add(function () { //다운 //포인트클릭시
        if (dm) console.log("포인트클릭시:" + GetShpMsg("signup"));
        if (loginTF == 0) { //게스트모드
            if (networkManager.networkState == NET_STATE.LOCALHOST) {//로컬서비스

            } else {//비회원
                networkManager.ModalCall(MODAL_BUTTON_TYPE.OKCANCEL, GetShpMsg('signup'), //상점 포인트클릭
                    function () {
                        networkManager.JoinMember();
                    },
                    function () {
                    }
                );
            }
        }
    }, this);


    //샵포인트 동전그림
    grp.spPoint = uigame.add.sprite(-120, 1, 'atlas_bb_ui-0', 'point.png');
    grp.spPoint.anchor.setTo(0.5, 0.5);
    grp.spPoint.scale.setTo(1, 1);
    pt.addChild(grp.spPoint);
    //debug_Sprite(grp.spPoint);



    //코리안폰트스타일로 변경 //엠코인표시
    switch(CURRENT_LANGUAGE)
    {
        case LANGUAGE_ENG:
            break;
        case LANGUAGE_JPN:
            break;
        case LANGUAGE_KOR:
            if(loginTF===0) {
                style45_shoppoint = {                             //하트샵 포인트값,"회원전용"
                    font: "bold 45px gulim",
                    fill: hex2str(ColorSet.white),
                    align: "center",
                    stroke: '#7D0000',
                    strokeThickness: 6
                };
            }
            break;
    }
    //코리안폰트스타일로 변경

    //샵dlg안의 포인트text
    var pttx = uigame.add.text(115, 3, '1,110,000', style45_shoppoint);
    pttx.anchor.setTo(1, 0.5);
    grp.pttx = pttx;
    pt.addChild(pttx);////debug_Sprite(pttx);


    grp.slots = [];


    if(nvmode==false) {
      //   var tx = "x"+shopListData[i].Quantity; //갯수가져오기
      //  var btn = ""+shopListData[i].Price+"P"; //포인트가져오기
      // var q = ""+shopListData[i].Quantity;
    }

    //샵슬롯1개 생성
//     slotname, 슬롯bg인자  string
//     img,      하트그림png string
//     cnt,      획득갯수    string
//     btbg,     버튼배경    string
//     bttx,     버튼text   string
//     btimg,    버튼배경    string
//     membersonly,
//     heartindex



    // if(shopListData.length ===1){
    //     shopListData[0].icon="heart_1.png";
    //     shopListData[0].pType = "point";
    //     shopListData[0].Price = 10;
    //     shopListData[0].Quantity = 1;
    //     shopListData[1] = shopListData[0];
    //     shopListData[2] = shopListData[0];
    //     shopListData[3] = shopListData[0];
    // }

    if(shopListData.length ===1){
        shopListData = [
            {icon:"heart_1.png", pType:"point", Price:10, Quantity:3},
            {icon:"heart_2.png", pType:"point", Price:20, Quantity:6},
            {icon:"heart_3.png", pType:"ad_1", Price:0, Quantity:9},
            {icon:"heart_4.png", pType:"ad_2", Price:0, Quantity:12},
        ]

    }

// s3.slgold   //------골드 그림
// s3.slcnt    //------골드 갯수
// s3.btntx    //-----버튼 텍스트
// s3.btnicon  //-----버튼 이미지
// s3.member   //-----회원전용텍스트

    //슬롯0
    var s0 = createSlotShop1('slot1',//'slot0',
        //구입물품 아이콘
        shopListData[0].icon,
        //갯수표시
        "x"+shopListData[0].Quantity,
        //버튼배경
        'btn_shop_2.png',//'btn_shop_1.png',
        //가격표시
        (shopListData[0].pType.indexOf("ad_")>-1 && shopListData[0].pType.indexOf("_1")>-1?"AD"//text
        :shopListData[0].Price === 0? undefined
        :shopListData[0].Price+"P"),
        //동영상광고아이콘
        (shopListData[0].pType.indexOf("ad_")>-1 && shopListData[0].pType.indexOf("_2")>-1?"movie.png"
        :undefined),
        //회원전용텍스트
        (shopListData[0].pType.indexOf("member")>-1?GetString("memberonly")
        :shopListData[0].pType.indexOf("point")>-1?""
        :""),
        0
    );//onRefreshInitShop에서 바뀜
    grp.dlgbg9.addChild(s0);
    s0.position.setTo(0, -178 + 45);
    grp.slots.push(s0);

    //슬롯1
    var s1 = createSlotShop1('slot1',//'slot0',
        //구입물품 아이콘
        shopListData[1].icon,
        //갯수표시
        "x"+shopListData[1].Quantity,
        //버튼배경
        'btn_shop_2.png',//'btn_shop_1.png',
        //가격표시
        (shopListData[1].pType.indexOf("ad_")>-1 && shopListData[1].pType.indexOf("_1")>-1?"AD"//text
        :shopListData[1].Price === 0? undefined
        :shopListData[1].Price+"P"),
        //동영상광고아이콘
        (shopListData[1].pType.indexOf("ad_")>-1 && shopListData[1].pType.indexOf("_2")>-1?"movie.png"
        :undefined),
        //회원전용텍스트
        (shopListData[1].pType.indexOf("member")>-1?GetString("memberonly")
        :shopListData[1].pType.indexOf("point")>-1?""
        :""),
        1
    );//onRefreshInitShop에서 바뀜
    grp.dlgbg9.addChild(s1);
    s1.position.setTo(0, -35 + 45);
    grp.slots.push(s1);

    //슬롯2
    var s2 = createSlotShop1('slot1',
        //구입물품 아이콘
        shopListData[2].icon,
        //갯수표시
        "x"+shopListData[2].Quantity,
        //버튼배경
        'btn_shop_2.png',
        //가격표시
        (shopListData[2].pType.indexOf("ad_")>-1 && shopListData[2].pType.indexOf("_1")>-1?"AD"//text
        :shopListData[2].Price === 0? undefined
        :shopListData[2].Price+"P"),
        //동영상광고아이콘
        (shopListData[2].pType.indexOf("ad_")>-1 && shopListData[2].pType.indexOf("_2")>-1?"movie.png"
        :undefined),
        //회원전용텍스트
        (shopListData[2].pType.indexOf("member")>-1?GetString("memberonly")
        :shopListData[2].pType.indexOf("point")>-1?""
        :""),
        2
    );   //onRefreshInitShop에서 바뀜
    grp.dlgbg9.addChild(s2);
    s2.position.setTo(0, 109 + 45);
    grp.slots.push(s2);

    //remainText1 = s2.btnD.tx;//타임버튼연결,타임글자연결

    //슬롯3
    var s3 = createSlotShop1('slot1',
        shopListData[3].icon,
        //갯수표시
        "x"+shopListData[3].Quantity,
        //버튼배경
        'btn_shop_2.png',
        //가격표시
        (shopListData[3].pType.indexOf("ad_")>-1 && shopListData[3].pType.indexOf("_1")>-1?"AD"//text
        :shopListData[3].Price === 0? undefined
        :shopListData[3].Price+"P"),
        //동영상광고아이콘
        (shopListData[3].pType.indexOf("ad_")>-1 && shopListData[3].pType.indexOf("_2")>-1?"movie.png"
        :undefined),
        //회원전용텍스트
        (shopListData[3].pType.indexOf("member")>-1?GetString("memberonly")
        :shopListData[3].pType.indexOf("point")>-1?""
        :""),
        3
    );//onRefreshInitShop에서 바뀜
    grp.dlgbg9.addChild(s3);
    s3.position.setTo(0, 252 + 45);
    grp.slots.push(s3);

    //remainText2 = s3.btnD.tx;//타임버튼연결,타임글자연결
    //상점4개버튼함수


    //오케이버튼
    var btnok = createbtn(createUI9a('atlas_bb_ui-0', 'btn_yes.png', 0, 0, 275, 108, 55, 55, 0, 0),
        uigame.add.text(0, 0, GetString("ok"), style55_ok_big),
        undefined,
        0,
        442,
        style60
    );
    grp.dlgbg9.addChild(btnok);

    btnok.fnok = function () {
        if(kData.bSoundSE) SE_Popup_OFF.play();

        uigame.state.states.menu.uishop.spMask.visible = true; //범용 샵마스크 나오기
        // setTimeout(function () {
        //     uigame.state.states.menu.uishop.spMask.visible = false;
        // }, 500);
        //범용 샵마스킹테스트

        // var stgame = uigame.state.states.game;
        // var dlg =stgame.uiController.uiGameOver.z_dlg;
        // var bg = stgame.uiController.uiGameOver.z_bg;

        //TweenMax.delayedCall(0.5,function() {

        onFadeout(grp.bg, 0.75);
        onFadeoutScale(grp.dlgbg9, function () {
            if(typeof(uigame.state.states.menu.uishop) !== 'undefined') {
                uigame.state.states.menu.uishop.spMask.visible = false;//범용 샵마스크 사라지기
            }

            grp.visible = false; //상점UI패널 숨기기

            if(typeof(uigame.state.states.game.uiController) !== 'undefined'
                && uigame.state.states.game.uiController !== null
            ) {
                //메인메뉴시 일시정지 속도목구
                var stgame = uigame.state.states.game;
                stgame.uiController.uipause.visible = false;
                ispausemode = false; //메인창-일시정지닫기-->인풋풀기
                stgame.massiveController.onPauseLoadVelocity();
                //메인메뉴시 일시정지 속도 목구
            }

        });

        //});

    };

    grp.onRefreshInitShop = function () { //상점 그림,골드, 이름,회원전용 리프레쉬
        //버튼4개의 글자,이미지를 테이블데이터에서 가져와서 업데이트 
        for (var i = 0; i < 4; i++) {
            // //------골드 그림
            // grp.slots[i].slgold.loadTexture('atlas_bb_ui-0', shopListData[i].icon);
            // //------골드 갯수
            // grp.slots[i].slcnt.text = "x" + shopListData[i].Quantity;
            // //-----포인트 버튼 텍스트
            // if (grp.slots[i].btn.tx !== undefined) { //버튼의 텍스트가 있으면
            //     if (i === 2) { //ad만 예외처리
            //         grp.slots[2].btn.tx.text = "AD";
            //         //grp.slots[2].btnD.tx.text = "00:00";
            //     } else {
            //         grp.slots[i].btn.tx.text = getMoneyFormatFromNum(shopListData[i].Price) + "P";
            //         grp.slots[i].btnD.tx.text = getMoneyFormatFromNum(shopListData[i].Price) + "P";
            //     }
            // }
            //-----ad,mov 아이콘적용
            //if (grp.slots[i].btnicon !== undefined) { //버튼의 이미지가 있으면
            //    grp.slots[i].btnicon.loadTexture('atlas_bb_ui-0', shopListData[i].icon);  //-----버튼 이미지
            //}
            //-----슬롯왼쪽위 회원전용 텍스트
            //grp.slots[i].member.text = shopListData[i].icon;   //-----회원전용텍스트
        }
        //-----중앙위 회원포인트값Text
        if (loginTF === 1) {                                          //로그인상태
            if (proto.serPos === 0              //모비서비스
                ||proto.serPos === 1) {              //야후서비스
                grp.pttx.text = getMoneyFormatFromNum(kData.greappoint);
            }
        } else { //비로그인

            if (networkManager.networkState == NET_STATE.LOCALHOST) {//로컬서비스
                //grp.pttx.text = "로컬-local";
                //grp.pttx.text = kData.greappoint;
                grp.pttx.text = GetString("memberonly");
            } else {                                                 //비로그인서비스
                grp.pttx.text = GetString("memberonly");
            }

        }
        //grp.slots[0].btn.tx.text = "sdsfsf";
        //grp.slots[0].btn.visible = false;
        //grp.slots[0].btnD.visible = true;
    };
    grp.onRefreshShop = function () { //상점 포인트금액과 값을 비교 검사
        if(uishopinmenu){
            remainText1inmenu = grp.slots[2].btnD.tx;//타임버튼연결,타임글자연결
            remainText2inmenu = grp.slots[3].btnD.tx;//타임버튼연결,타임글자연결
        }else{
            remainText1ingame = grp.slots[2].btnD.tx;//타임버튼연결,타임글자연결
            remainText2ingame = grp.slots[3].btnD.tx;//타임버튼연결,타임글자연결
        }
        if (loginTF === 1) {                                          //로그인상태
            if (proto.serPos === 0              //모비서비스
                ||proto.serPos === 1) {              //야후서비스
                for (var i = 0; i < 4; i++) {
                    //grp.slots[i].onRefreshSlot1(); //가진포인트가 적으면, 비활성 시킨다
                    //if(kData.btn1TimeStamp!=null) grp.slots[2].setBtnOff();
                    //if(kData.btn2TimeStamp!=null) grp.slots[3].setBtnOff();
                }
            }
        }
        else//if(loginTF == 0){ //비로그인
        {
            if (networkManager.networkState === NET_STATE.LOCALHOST) {//로컬서비스

            } else {//비회원
                //비회원이면 비황성은 여기서 하지 말자
                // for (var i = 0; i < 4; i++) {
                //     if(shopListData[i].pType==="member") grp.slots[i].btnoff();
                // }
            }
        }
        //모든리프레쉐ㅐ
        if(uishopinmenu){
            remainText1inmenu = grp.slots[2].btnD.tx;//타임버튼연결,타임글자연결
            remainText2inmenu = grp.slots[3].btnD.tx;//타임버튼연결,타임글자연결
        }else{
            remainText1ingame = grp.slots[2].btnD.tx;//타임버튼연결,타임글자연결
            remainText2ingame = grp.slots[3].btnD.tx;//타임버튼연결,타임글자연결
        }
        for (var i = 0; i < 4; i++) {
            grp.slots[i].onRefreshSlot1(); //가진포인트가 적으면, 비활성 시킨다
            if(kData.btn1TimeStamp!=null) grp.slots[2].setBtnOff();
            if(kData.btn2TimeStamp!=null) grp.slots[3].setBtnOff();
        }
    };

    grp.onGetList = function () {
        //샵리스트가져오기
        networkManager.GetShoplist(ShopType.HEART, function () {
            if (networkManager.networkState == NET_STATE.LOCALHOST) return;

            for (var i = 0; i < 4; ++i) {

                if (true) {
                    if (loginTF == 1) { //로그인상태
                        if (servicePos == 0) { //모비서비스
                            //shopitemlist[i].quantity = shopListData[i].Quantity.toString();   //------구입하트갯수
                            //shopitemlist[i].price = shopListData[i].Price.toString();         //-----소모포인트 버튼텍스트
                            //shopitemlist[i].member = "";

                        }
                    } else {//if(loginTF == 0){ //비로그인
                        if (networkManager.networkState == NET_STATE.LOCALHOST) {//로컬서비스

                        } else {//비회원
                            //shopitemlist[i].quantity = shopListData[i].Quantity.toString();   //------구입하트갯수
                            //shopitemlist[i].price = shopListData[i].Price.toString();         //-----소모포인트 버튼텍스트
                            if(i===0 || i===1) { //4개 슬롯이 회원전용 표시가 될수 있으므로
                                //shopitemlist[i].member = GetString("memberonly");
                            }
                        }
                    }
                }
            }
            uigame.state.states.menu.uishop.onRefreshInitShop(); //내테이블에서 가져오기
            uigame.state.states.menu.uishop.onRefreshShop();     //부족하면 disable
        });//networkManager.GetShoplist(
    };

    grp.onOpen = function () {

        if(kData.bSoundSE) SE_Popup_ON.play();
        onFadein(grp.bg, 0.75);
        onFadeinScale(grp.dlgbg9, function () {
        });
        grp.visible = true;
    };

    //에스피마스크-상점
    var spMask = uigame.add.sprite(xc, yc, 'white1x1');
    spMask.name = 'spMask_shop';
    spMask.width = 600;
    spMask.height = 1000;
    spMask.tint = ColorSet.blue;
    spMask.alpha = 0;//0.555;
    spMask.anchor.setTo(0.5, 0.5);
    spMask.inputEnabled = true;
    grp.spMask = spMask;
    grp.addChild(spMask);
    grp.spMask.visible = false;
    //에스피마스크-상점


    return grp;
}
function createUIShopPlusButton( xoff, yoff) {
    // //createUI9사용시 상점버튼 메뉴자체가 사라져버려서 안사용
    // var dlgbg9 = createUI9a('atlas_bb_ui-0', 'select_heart_bg.png',
    //     0, 0,
    //     218, 50,
    //     20, 20, 0,  0);
    // //createUI9사용시 상점버튼 메뉴자체가 사라져버려서 안사용

    if(typeof(xoff) === 'undefined') xoff = 0;
    if(typeof(yoff) === 'undefined') yoff = 0;

    var dlgbg9 = uigame.add.sprite(165+xoff, 60+yoff, 'atlas_bb_ui-0', 'select_heart_bg_edited.png');
    dlgbg9.anchor.setTo(0.5, 0.5);

    var heart1 = uigame.add.sprite(-100, 0, 'atlas_bb_ui-0', 'select_heart.png');
    heart1.anchor.setTo(0.5, 0.5);
    dlgbg9.addChild(heart1);

    var btnshop = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'btn_plus.png'),
        undefined,
        undefined,
        85,
        0,
        style60
    );

    dlgbg9.addChild(btnshop);

    var txgold = uigame.add.text(-97, 2, iHeartInitData, style_shopplusheart);
    txgold.anchor.setTo(0.5, 0.5);
    dlgbg9.txgold = txgold;
    dlgbg9.addChild(txgold); //debug_Sprite(txgold);
    txtHeartCnt = txgold; //하트갯수 8



    var txtime = uigame.add.text(-5, 2, "MAX", style_bb_topstar);
    txtime.anchor.setTo(0.5, 0.5);
    dlgbg9.addChild(txtime);
    dlgbg9.txtime = txtime;

    txtHeartTimeCnt = txtime; //하트타이머 "max", 00:00

    //클릭영역확대용
    var coll = uigame.add.sprite(-100, 4, 'white1x1');
    coll.name = 'coll';
    coll.width = 280;
    coll.height = 80;
    coll.alpha = 0.0;
    coll.anchor.setTo(0.5, 0.5);
    //coll.inputEnabled = true; //true일때 버튼클릭시 +버튼작동 안되서 끔
    btnshop.addChild(coll);
    //debug_Sprite(coll);


    btnshop.fnok = function () {
        console.log("----------btnshop.fnok-----------");
        if(typeof(uigame.state.states.menu.uishop) !== 'undefined') {
            if(nvmode===true) {
                //네이버모드
                if (naverShop.visible) {
                    naverShop.visible=false;
                } else {
                    naverShop.Show(cbNaverShopReward);
                }
            }else{
                //모비모드
                if (uigame.state.states.menu.uishop.visible) {
                    uigame.state.states.menu.uishop.visible = false;
                } else {
                    uigame.state.states.menu.uishop.onRefreshShop();
                    //uigame.state.states.menu.uishop.visible = true;
                    uigame.state.states.menu.uishop.onOpen();
                }
            }//모비모드
        }//in menumode

        if(typeof(uigame.state.states.game.uiController) !== 'undefined'
        && uigame.state.states.game.uiController !== null
        //&& typeof(uigame.state.states.game.uiController.uishop) !== 'undefined'
        ) {
            if(nvmode===true) {
                //네이버모드
                if (naverShop2.visible) {
                    naverShop2.visible=false;
                } else {
                    naverShop2.Show(cbNaverShopReward);
                }
            }else{
                //모비모드
                if (uigame.state.states.game.uiController.uishop.visible) {
                    uigame.state.states.game.uiController.uishop.visible = false;
                } else {
                    uigame.state.states.game.uiController.uishop.onRefreshShop();
                    //uigame.state.states.menu.uishop.visible = true;
                    uigame.state.states.game.uiController.uishop.onOpen();

                    //일시정지모드
                    var stgame = uigame.state.states.game;
                    ispausemode = true;                               //메인창-일시정지클릭-->인풋잠금
                    stgame.massiveController.onPauseSaveVelocity(); //속도저장
                    //일시정지모드
                }
            }//모비모드
        }//in gamemode

    };//in fnok

    dlgbg9.onRefresh = function () { //샵플러스 하트갯수 리플레쉬
        try {
            uigame.state.states.menu.uishopplus.txgold.text = getMoneyFormatFromNum(kData.iHeart);
            //dlgbg9.txgold.text = kData.iHeart;
        }
        catch (err) {
            if (dm) console.log("kData.iHeart == err");
        }
    };

    return dlgbg9;
}

function createUISoundOnOff() {
    var btnsound = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'btn_sound.png'),
        undefined,
        uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'btn_sound_off.png'),
        0,
        0,
        style60
    );
    btnsound.anchor.setTo(0.5, 0.5);
    btnsound.scale.setTo(1, 1);
    btnsound.fnok = function () {
        if (btnsound.icon.visible) {
            btnsound.icon.visible = false; //사운드켜기
            kData.bSoundBGM = true;
            kData.bSoundSE = true;
            selectBGM("BGM_ALL", true);
            // BGM_ALL.mute = false;
            // //확인사살
            // BGM_Game_Nomal.mute = true;
            // //SE_Run.mute = true;
        } else {
            btnsound.icon.visible = true; //사운드끄기
            kData.bSoundBGM = false;
            kData.bSoundSE = false;
            selectBGM("BGM_ALL", true);
            // BGM_ALL.mute = true;
            // //확인사살
            // BGM_Game_Nomal.mute = true;
            // //SE_Run.mute = true;

        }
    };
    return btnsound;
}
//-------스타일-------------
//결과창 타이틀
var style35 = {                         //지워질 예정
    font: "30px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#A40B80',
    strokeThickness: 6
};

var style_40_result = {                          //하트샵슬롯 결과창 메세지
    font: "40px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#6A005F',
    strokeThickness: 6
};

var style_45_price = {                          //하트샵슬롯 가격
    font: "45px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#007130',
    strokeThickness: 6
};

var style_30_member = {                         //하트샵슬롯"회원전용"
    font: "30px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: ColorSet.black,
    strokeThickness: 6
};

var style55_ok_big = {                              //하트샵 ok 큰버튼
    font: "55px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#007130',
    strokeThickness: 10
};

var style45_shoppoint = {                             //하트샵 포인트값,"회원전용"
    font: "45px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#7D0000',
    strokeThickness: 6
};

var style_shoptitle = {                         //하트샵타이틀
    font: "60px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#7D0000',
    strokeThickness: 10
};


var style_shopplusheart = {                         //하트샵플러스버튼 하트갯수
    font: "30px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#A40B80',
    strokeThickness: 6
};
var style_35_stage = {                            //메인게임stage, score
    font: "35px Conv_FZHPFW_GB1",
    fill: '#9426ad',
    align: "center",
    stroke: hex2str(ColorSet.white),
    strokeThickness: 6,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_25_stageNumber_sky = {                            //메인게임stage 000,
    font: "25px Conv_FZHPFW_GB1",
    fill: '#25b1cb',
    align: "center",
    stroke: '#e6fbff',
    strokeThickness: 6,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};

var style_30_stage = {                            //메인게임 score
    font: "25px Conv_FZHPFW_GB1",
    fill: '#9426ad',
    align: "center",
    stroke: hex2str(ColorSet.white),
    strokeThickness: 6,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_40_Warning = {
    font: "40px Conv_FZHPFW_GB1",
    fill: '#FF0000',
    align: "center",
    stroke: hex2str(ColorSet.white),
    strokeThickness: 6,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_30_stageNumber = {                            //메인게임 score 000
    font: "25px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#9426ad',
    strokeThickness: 6,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_topstar = {                            //하트샵플러스버튼 max타이머, 별바갯수
    font: "30px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    //stroke: '#3C2B00',
    //strokeThickness: 6,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_star_lock = {
    font: "45px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    //stroke: '#3C2B00',
    //strokeThickness: 6,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_score_start = {
    font: "40px Conv_FZHPFW_GB1",
    fill: '#FFF72A',
    align: "center",
    stroke: '#A035B4',
    strokeThickness: 10,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_heartcount1_bonus = {
    font: "48px Conv_FZHPFW_GB1",
    fill: '#FFF72A',
    align: "center",
    stroke: '#005982',
    strokeThickness: 10,
    boundsAlignH: "center",
    boundsAlignV: "right"
};
var style_heartcount2_bonus = {
    font: "30px Conv_FZHPFW_GB1",
    fill: '#FFFFFF',
    align: "center",
    stroke: '#005982',
    strokeThickness: 10,
    boundsAlignH: "center",
    boundsAlignV: "left"
};
var style_bb_number_start = {
    font: "40px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#A035B4',
    strokeThickness: 10,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_stage_start = {
    font: "50px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#9426AD',
    strokeThickness: 12,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_stage_ingame = {
    font: "32px Conv_FZHPFW_GB1",
    fill: '#9426AD',
    align: "center",
    stroke: hex2str(ColorSet.white),
    strokeThickness: 8,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_hcnt1_b = {
    font: "40px Conv_FZHPFW_GB1",
    fill: '#fff72a',
    align: "center",
    stroke: '#005982',
    strokeThickness: 8,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_hcnt2_b = {
    font: "32px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke:'#005982',
    strokeThickness: 8,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};

var style_bb_timer_ingame = {
    font: "30px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#9426AD',
    strokeThickness: 8,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_stage_start_b = {
    font: "50px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#005982',
    strokeThickness: 12,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_yes = {
    font: "50px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#007130',
    strokeThickness: 10,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_no = {
    font: "50px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#7F2D00',
    strokeThickness: 10,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_doyougetheart = {
    font: "35px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#6a005f',
    strokeThickness: 7,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_plus3 = {
    font: "60px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.yellow),
    align: "center",
    stroke: '#9626ad',
    strokeThickness: 10,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_continue = {
    font: "60px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#7F2D00',
    strokeThickness: 10,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_help = {
    font: "32px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#7F2D00',
    strokeThickness: 6,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_floatingscore = {
    font: "32px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#A40B80',
    strokeThickness: 6,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};

var style_bb_lv1 = {
    font: "32px Conv_FZHPFW_GB1",
    fill: "#F95588",//hex2str(ColorSet.white),
    align: "center",
    stroke: '#F95588',
    strokeThickness: 1,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_bonusheart = {
    font: "27px Conv_FZHPFW_GB1",
    fill: "#FFF72a",//hex2str(ColorSet.white),
    align: "center",
    stroke: '#9426ad',
    strokeThickness: 5,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_bb_page = {
    font: "43px Conv_FZHPFW_GB1",
    fill: hex2str(ColorSet.white),
    align: "center",
    //stroke: '#A40B80',
    //strokeThickness: 10,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_title = {
    font: "60px Conv_PassionOne-Regular",
    fill: "#ffffff",
    //align: "center" //each line
    boundsAlignH: "left",
    boundsAlignV: "middle"
};
var style_title_yellow = {
    font: "60px Conv_PassionOne-Regular",
    fill: hex2str(ColorSet.yellow),
    //align: "center" //each line
    boundsAlignH: "left",
    boundsAlignV: "middle"
};
//스타일 결과등수 슬롯 -- 보석카운트
var style_gem = {
    font: "60px Conv_PassionOne-Regular",
    fill: "#ffffff",
    stroke: "#030303",
    strokeThickness: 10,
    align: "center", //each line
    boundsAlignH: "center",
    boundsAlignV: "middle"

};
// 스타일 결과등수 슬롯 -- 이름
var style_result_name = {
    font: "60px Conv_PassionOne-Regular",
    fill: "#303030",
    //align: "center" //each line
    boundsAlignH: "left",
    boundsAlignV: "middle"
};
//스타일 나의 결과등수
var style_my_rank_only = {
    font: "60px Conv_PassionOne-Regular",
    fill: hex2str(ColorSet.white),
    //align: "center" //each line
    boundsAlignH: "left",
    boundsAlignV: "middle"
};
//스타일 결과등수 슬롯 -- 정보창
var style_result_comment = {
    font: "40px Conv_PassionOne-Regular",
    fill: hex2str(ColorSet.black),
    stroke: hex2str(ColorSet.black),
    strokeThickness: 2,
    align: "center", //each line
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_chat = {
    font: "25px Conv_PassionOne-Regular",
    fill: hex2str(ColorSet.black),
    align: "center",
    stroke: hex2str(ColorSet.black),
    strokeThickness: 2,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
var style_siderank = {
    font: "30px Conv_PassionOne-Regular",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#3C2B00',
    strokeThickness: 6,
    boundsAlignH: "center",
    boundsAlignV: "middle"
};
//--

var style40 = {
    font: "40px Conv_PassionOne-Regular",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#182601',
    strokeThickness: 6
};
var style45 = {
    font: "45px Conv_PassionOne-Regular",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#182601',
    strokeThickness: 6
};
var style60 = {
    font: "60px Conv_PassionOne-Regular",
    fill: hex2str(ColorSet.white),
    align: "center",
    stroke: '#182601',
    strokeThickness: 6
};
var style60_multiplay = {
    font: "60px Conv_FZHPFW_GB1",
    fill: '#A40B80',
    align: "center",
    stroke: hex2str(ColorSet.white),
    strokeThickness: 10
};
var style80 = {
    font: "80px Conv_PassionOne-Regular",
    fill: hex2str(ColorSet.white),
    align: "center"
};
//--
//-------스타일-------------

//---상대검색창 만들기------------------------------
function createUIMatchSearch() {
    var grp = uigame.add.group();

    //전체 프레임
    var dlgbg9 = createUI9a('match0', 'bg.png', xc, yc, 720, 1280, 5, 5, 5, 5); //매칭배경창
    dlgbg9.name = 'dlgbg9';
    //dlgbg9.alpha=0.5;
    grp.dlgbg9 = dlgbg9;
    grp.addChild(dlgbg9);//debug_Sprite(dlgbg9);

    //파랑 상단 타이틀바
    var titlebg = createUI9a('match0', 'top.png', 0, -583, 720, 114, 5, 5, 5, 5); //매칭타이틀
    titlebg.name = 'titlebg9';
    dlgbg9.titlebg = titlebg;
    dlgbg9.addChild(titlebg);//debug_Sprite(titlebg);

    //라이벌레이싱 상단 타이틀
    var titletx = uigame.add.text(-328, -588, GetString("sweetbricks"), style_title);
    titletx.anchor.setTo(0.0, 0.5);
    titletx.name = 'titletx';
    dlgbg9.titletx = titletx;
    dlgbg9.addChild(titletx);//debug_Sprite(titletx);

    //타이틀 닫기버튼
    var btnx = createbtn(uigame.add.sprite(0, 0, 'match0', 'btn_close.png'),
        undefined, //tx
        undefined, //img
        314, -590,
        undefined
    );//debug_Sprite(btnx);
    dlgbg9.addChild(btnx);
    dlgbg9.btnx = btnx;

    //회전 이미지 "loading.png"
    var searchsp = uigame.add.sprite(0, -392, 'match0', "loading.png");
    searchsp.anchor.setTo(0.5, 0.5);
    TweenMax.fromTo( searchsp, //object
        70, //time
        {
            rotation: 0
        },
        {
            rotation: 360,
            ease: Linear.easeNone,
            repeat: -1
            // onComplete:function () {
            //     if(dm) console.log("---");
            // }

        }
    );
    dlgbg9.addChild(searchsp);//debug_Sprite(searchsp);

    //코맨트 "대전상대를 찾는 중"
    var searchtx = uigame.add.text(0, -492, GetString("finduser"), style_result_comment);
    searchtx.anchor.setTo(0.5, 0.5);
    dlgbg9.searchtx = searchtx;
    dlgbg9.addChild(searchtx);//debug_Sprite(rs_commenttx);
    //코맨트 "대전상대를 찾는 중"

    //게임스타트 버튼
    //var startbg = createUI9a('match0', 'bg_info_white.png', 0, 531, 680, 114, 5, 5, 5, 5);
    var startbg = createUI9a('match0', 'btn_start.png', 0, 531, 680, 114, 15, 15, 15, 15);
    startbg.name = 'startbg';
    //startbg.tint = ColorSet.uigreenbtn; //이젠 그린색 필요없음

    var starttx = uigame.add.text(0, 0, GetString("gamestart"), style_title_yellow);
    starttx.anchor.setTo(0.5, 0.5);
    dlgbg9.starttx = starttx;

    var startbtn = createbtn(startbg,
        starttx,
        undefined,
        0,
        531,
        undefined
    );
    dlgbg9.startbtn = startbtn; // //MenuState안에 this.uifind.dlgbg9.startbtn.fnok에서 정의
    dlgbg9.addChild(startbtn);//debug_Sprite(rs_info_btn);

    grp.onSetReady = function () {
        dlgbg9.startbtn.visible = false;
        //dlgbg9.startbtn.visible = true;//스타트버튼강제켜기

        //var i=0;
        //while (i<5) {
        //for (var i = 1; i <= 5; ++i) {
        //     (function (n) {
        //         setTimeout(function () {
        //             console.log(n);
        //
        //         }, 1000);
        //     }(i));
        //}
        // }
    };

    grp.onSetStart = function () {
        dlgbg9.startbtn.visible = true;   //MenuState안에 this.uifind.dlgbg9.startbtn.fnok에서 정의
    };

    //게임스타트 버튼


    //선수리스트
    var ybegin = -225; //y배치값
    var yadd = 185;   //y오프셋값
    var xp = 0;
    var yp = [ybegin, ybegin + yadd, ybegin + (yadd * 2), ybegin + (yadd * 3)];
    var slots = [undefined, undefined, undefined, undefined];
    //var slotscolora = [undefined, undefined, undefined, undefined];
    dlgbg9.slots = slots;
    //dlgbg9.slotscolora = slotscolora;
    var slot1;

    //선수 찾기 - 나 
    slot1 = createSlotSearch1(xp, yp[0], 0);
    slot1.tint = ColorSet.uioliv;
    //사용자액자 //slot1.youframe9.tint = ColorSet.uired;
    //slotscolora[0] = ColorSet.uired;
    slot1.txname.text = "you";

    dlgbg9.slots[0] = slot1;
    dlgbg9.addChild(slot1);

    //선수 찾기 - 두번째
    slot1 = createSlotSearch1(xp, yp[1], 1);
    slot1.tint = ColorSet.white;
    //사용자액자 //slot1.youframe9.tint = ColorSet.uiblue;
    //slotscolora[1] = ColorSet.uiblue;
    slot1.txname.text = "guest" + uigame.rnd.integerInRange(0, 10);

    dlgbg9.slots[1] = slot1;
    dlgbg9.addChild(slot1);

    //선수 찾기 - 세번째
    slot1 = createSlotSearch1(xp, yp[2], 2);
    slot1.tint = ColorSet.white;
    //사용자액자 //slot1.youframe9.tint = ColorSet.uigreen;
    //slotscolora[2] = ColorSet.uigreen;
    slot1.txname.text = "guest" + uigame.rnd.integerInRange(0, 10);

    dlgbg9.slots[2] = slot1;
    dlgbg9.addChild(slot1);

    //선수 찾기 - 네번째
    slot1 = createSlotSearch1(xp, yp[3], 3);
    slot1.tint = ColorSet.white;
    //사용자액자 //slot1.youframe9.tint = ColorSet.uipurple;
    //slotscolora[3] = ColorSet.uipurple;
    slot1.txname.text = "guest" + uigame.rnd.integerInRange(0, 10);

    dlgbg9.slots[3] = slot1;
    dlgbg9.addChild(slot1);

    //초기화
    //사용자액자 //dlgbg9.slots[1].youframe9.tint = ColorSet.lightgrey;
    //사용자액자 //dlgbg9.slots[2].youframe9.tint = ColorSet.lightgrey;
    //사용자액자 //dlgbg9.slots[3].youframe9.tint = ColorSet.lightgrey;
    dlgbg9.slots[1].txname.text = "";
    dlgbg9.slots[2].txname.text = "";
    dlgbg9.slots[3].txname.text = "";

    //grp.dlgbg9.slots[1].youframe9.tint=dlgbg9.slotscolora[1];
    //grp.dlgbg9.slots[1].txname.text="";

    return grp;
}

//---랭킹 결과창 생성하기------------------------------
function createUIMatchResult() {
    var grp = uigame.add.group();

    grp._i = 0;
    grp._j = 0;
    grp._k = 0;
    var dlgbg9 = createUI9a('match0', 'bg.png', xc, yc, 720, 1280, 5, 5, 5, 5); //매칭배경창
    dlgbg9.name = 'dlgbg9';
    //dlgbg9.alpha=0.5;
    //dlgbg9.scale.set(0.5,0.5);
    grp.dlgbg9 = dlgbg9;
    grp.addChild(dlgbg9);//debug_Sprite(dlgbg9);

    //타이틀바
    var titlebg = createUI9a('match0', 'top.png', 0, -583, 720, 114, 5, 5, 5, 5); //매칭타이틀
    titlebg.name = 'titlebg9';
    dlgbg9.titlebg = titlebg;
    dlgbg9.addChild(titlebg);//debug_Sprite(titlebg);

    var titletx = uigame.add.text(-328, -588, GetString("sweetbricks"), style_title);
    titletx.anchor.setTo(0.0, 0.5);
    titletx.name = 'titletx';
    dlgbg9.titletx = titletx;
    dlgbg9.addChild(titletx);//debug_Sprite(titletx);

    // //타이틀 닫기버튼
    // var btnx = createbtn(uigame.add.sprite(0, 0, 'match0', 'btn_close.png'),
    //     undefined, //tx
    //     undefined, //img
    //     314, -590,
    //     undefined
    // );//debug_Sprite(btnx);
    // dlgbg9.btnx = btnx;
    // dlgbg9.addChild(btnx);

    //나의랭크정보창
    var resultbg = createUI9a('match0', 'bg_info_white.png', 0, -442, 680, 141, 5, 5, 5, 5);
    resultbg.name = 'resultbg';
    resultbg.tint = ColorSet.darkgrey;
    dlgbg9.resultbg = resultbg;
    dlgbg9.addChild(resultbg);//debug_Sprite(resultbg);

    //"나의랭크정보는" 텍스트
    var resulttx = uigame.add.text(-292, -438, GetString("gameresult"), style_my_rank_only);
    resulttx.anchor.setTo(0.0, 0.5);
    dlgbg9.resulttx = resulttx;
    dlgbg9.addChild(resulttx);//debug_Sprite(resulttx);

    //나의랭크 1st, 2nd, 3rd, 4th 스프라이트
    var resultsp = uigame.add.sprite(182, -445, 'match0', 'result_1.png');
    resultsp.anchor.setTo(0.5, 0.5);
    dlgbg9.resultsp = resultsp;
    dlgbg9.addChild(resultsp); //debug_Sprite(resultsp);


    // //----------------------
    // //게임스타트 버튼
    // var startbg = createUI9a('match0', 'bg_info_white.png', 0, 531, 680, 114,   5, 5, 5, 5);
    // startbg.name = 'startbg';
    // startbg.tint = ColorSet.uigreenbtn;
    //
    // var starttx = uigame.add.text(0, 0, GetString("gamestart"), style_title );
    // starttx.anchor.setTo(0.5,0.5);
    // dlgbg9.starttx = starttx;
    //
    // var startbtn = createbtn( startbg,
    //     starttx,
    //     undefined,
    //     0,
    //     531,
    //     undefined
    // );
    // dlgbg9.startbtn = startbtn; // //MenuState안에 this.uifind.dlgbg9.startbtn.fnok에서 정의
    // dlgbg9.addChild(startbtn);//debug_Sprite(rs_info_btn);
    // //----------------------

    //결과상태코멘트창
    var rs_infobg = createUI9a('match0', 'bg_info_white.png', 0, 0, 680, 114, 5, 5, 5, 5); // 배경:잠시만 기다려주세요
    rs_infobg.name = 'resultbg';
    rs_infobg.tint = ColorSet.darkgrey;
    //dlgbg9.rs_infobg = rs_infobg;
    dlgbg9.addChild(rs_infobg);//debug_Sprite(rs_infobg);

    //결과상태코멘트텍스트
    var rs_commenttx = uigame.add.text(0, 0, GetString("waitmoment"), style_result_comment);  //text:잠시만 기다려주세요
    rs_commenttx.anchor.setTo(0.5, 0.5);
    //dlgbg9.rs_commenttx = rs_commenttx;
    //rs_infobg.addChild(rs_commenttx);//debug_Sprite(rs_commenttx);

    var rsbtn = createbtn(rs_infobg,
        rs_commenttx,
        undefined,
        0,
        551,
        undefined
    );
    dlgbg9.rsbtn = rsbtn;
    dlgbg9.addChild(rsbtn);

    //랭킹슬롯들 위치값
    var ybegin = -225; //y배치값
    var yadd = 205;   //y오프셋값
    var xp = 0;
    var yp = [ybegin, ybegin + yadd, ybegin + (yadd * 2), ybegin + (yadd * 3)];
    //랭킹슬롯들 배열
    var slots = [undefined, undefined, undefined, undefined];
    dlgbg9.slots = slots;

    // true, 'red',  xp, yp[0],
    var slot1;

    //1등슬롯----------------------------------------
    slot1 = createSlotRank1(xp, yp[0], 0);
    slot1.tint = ColorSet.uioliv;
    //사용자액자 //slot1.youframe9.tint = ColorSet.uired;
    slot1.txcnt.text = "x4";
    slot1.txname.text = "";
    //slot1.txscore.text = getMoneyFormatFromNum(1200);
    slot1.sp1st.loadTexture('match0', 'result_win.png');

    dlgbg9.slots[0] = slot1;
    dlgbg9.addChild(slot1);

    //2등슬롯----------------------------------------
    slot1 = createSlotRank1(xp, yp[1], 1);
    slot1.tint = ColorSet.white;
    //사용자액자 //slot1.youframe9.tint = ColorSet.uiblue;
    slot1.txcnt.text = "x3";
    slot1.txname.text = "";
    //slot1.txscore.text = getMoneyFormatFromNum(1000);
    slot1.sp1st.loadTexture('match0', 'result_lose.png');

    dlgbg9.slots[1] = slot1;
    dlgbg9.addChild(slot1);

    //3등슬롯----------------------------------------
    slot1 = createSlotRank1(xp, yp[2], 2);
    slot1.tint = ColorSet.white;
    //사용자액자 //slot1.youframe9.tint = ColorSet.uigreen;
    slot1.txcnt.text = "x2";
    slot1.txname.text = "";
    //slot1.txscore.text = getMoneyFormatFromNum(800);
    slot1.sp1st.loadTexture('match0', 'result_3.png');

    dlgbg9.slots[2] = slot1;
    dlgbg9.addChild(slot1);

    //4등슬롯----------------------------------------
    slot1 = createSlotRank1(xp, yp[3], 3);
    slot1.tint = ColorSet.white;
    //사용자액자 //slot1.youframe9.tint = ColorSet.uipurple;
    slot1.txcnt.text = "x1";
    slot1.txname.text = "";
    //slot1.txscore.text = getMoneyFormatFromNum(600);
    slot1.sp1st.loadTexture('match0', 'result_4.png');

    dlgbg9.slots[3] = slot1;
    dlgbg9.addChild(slot1);


    grp.onRefreshResult = function () { // uiresult 최종랭킹업데이트
        //net_resultname4[_i_]=data[_i_].uid;
        //net_resultrank4[_i_]=data[_i_].rank-1;


        //GAME RESULT: 내랭킹업데이트--------------------------
        if(dm) console.log("grp.onRefreshResult = function ()");
        return;

        //내등수업데이트
        if (net_userallfin == undefined) {
        }
        var myrankidx = net_userallfin.indexOf(net_yourname);
        var namepic1 = picsMyResultRank[myrankidx];

        if (dm) console.log(myrankidx);
        if (dm) console.log(namepic1);

        if (true) grp.dlgbg9.resultsp.loadTexture('match0', namepic1); //나의 등수결과 맨위 업데이트

        //GAME RESULT: 내랭킹업데이트--------------------------

        //선수숫자를 파악한다
        var playercount = 0;
        for (_k_ = 0; _k_ < 4; _k_++) {
            if (net_userallfin[_k_] != undefined) playercount += 1;
        }
        //잠시만기다려주세요-->GAME START
        //disabled:ColorSet.uigray;//enabled: ColorSet.uigreenbtn;
        var curplayercount = 0;
        //4개 슬롯 업데이트
        for (_k_ = 0; _k_ < 4; _k_++) {
            if (net_userallfin[_k_] != undefined) {
                //슬롯을 선수로 채우기
                //선수가 존재할 경우
                //사용자액자 //grp.dlgbg9.slots[_k_].youframe9.tint = uigame.state.states.menu.uifind.dlgbg9.slotscolora[_k_]; //선수사진색
                grp.dlgbg9.slots[_k_].txname.text = net_userallfin[_k_];                                           //슬롯의 선수이름

                //win,lose출력 예외처리---
                if (playercount > 2) { //3~4명경우 1st,2nd,3rd,4th
                    grp.dlgbg9.slots[_k_].sp1st.loadTexture('match0', picsMyResultRank[_k_]);
                } else {             //1~2명인경우, win,lose
                    grp.dlgbg9.slots[_k_].sp1st.loadTexture('match0', picsMyResultRank_2[_k_]);
                }
                //win,lose예외처리---

                grp.dlgbg9.slots[_k_].onActiveRank(true);

                //grp.dlgbg9.slots[_k_].sp1st.visible = true;                                                     //기울어진 랭킹표시
                //grp.dlgbg9.slots[_k_].yougem.visible = true;                                                    //보석아이콘
                ////grp.dlgbg9.slots[_k_].txscore.visible = true;                                                    //스코어텍스트
                //grp.dlgbg9.slots[_k_].txname.visible = true;                                                    //선수이름
                _i_ = playercount - _k_; //보석갯수 //전체선수갯수 - 인덱스 = 보석갯수
                if (_k_ == myrankidx) {
                    //내 획득보석(메달) 가져오기
                    medaladded = _i_;
                }
                grp.dlgbg9.slots[_k_].txcnt.text = "x" + _i_;
                //grp.dlgbg9.slots[_k_].txcnt.visible = true;                                                    //획득보석 갯수
                curplayercount += 1;
            } else {
                grp.dlgbg9.slots[_k_].onActiveRank(false);
                //빈슬롯 처리
                //선수가 undefined인 경우
                //사용자액자 //grp.dlgbg9.slots[_k_].youframe9.tint = ColorSet.lightgrey;                                      //선수사진색
                grp.dlgbg9.slots[_k_].txname.text = "";                                                         //슬롯의 선수이름
                //grp.dlgbg9.slots[_k_].sp1st.visible = false;                                                    //기울어진 랭킹표시
                //grp.dlgbg9.slots[_k_].yougem.visible = false;                                                   //보석아이콘
                ////grp.dlgbg9.slots[_k_].txscore.visible = false;                                                    //스코어텍스트
                //grp.dlgbg9.slots[_k_].txname.visible = false;                                                    //선수이름
                _i_ = playercount - _k_; //보석갯수
                grp.dlgbg9.slots[_k_].txcnt.text = "x" + _i_;
                //grp.dlgbg9.slots[_k_].txcnt.visible = false;                                                    //획득보석 갯수
            }
        }
        //내랭킹 슬롯만 올리브색으로
        for (_k_ = 0; _k_ < 4; _k_++) {
            if (_k_ === myrankidx)
                grp.dlgbg9.slots[_k_].tint = ColorSet.uioliv;
            else
                grp.dlgbg9.slots[_k_].tint = ColorSet.white;
        }
        //[나, 선수1, 선수2, undefined] 이렇게 넣는다--------------

        //grp.dlgbg9.rsbtn.tint = ColorSet.uigreenbtn;//이젠 그린색 필요없음
        grp.dlgbg9.rsbtn.tx.text = "TIME: " + 5;
        grp.dlgbg9.rsbtn.tx.setStyle(style_title); //힌색 , 폰트60 크게

    };//onRefresh()

    return grp;
}

//---결과랭킹창의 슬롯1개 만들기-----------------------
function createSlotRank1(xpos, ypos, indexslot) {
    //슬롯0--나
    var youbg9;

    youbg9 = createUI9a('match0', 'list_empty.png', xpos, ypos, 680, 161, 10, 10, 10, 20);
    youbg9.name = 'youbg9';

    //액자
    //사용자액자 //var youframe9;
    //사용자액자 //youframe9 = createUI9a('match0', 'list_empty.png', -260, 0, 161, 161, 10, 10, 10, 20);
    //사용자액자 //youframe9.name = 'youframe9';
    //사용자액자 //youbg9.youframe9 = youframe9;
    //사용자액자 //youbg9.addChild(youframe9);//debug_Sprite(youpic9);

    //캐릭터사진
    //var youpic = uigame.add.sprite(-258, 0, 'match0', 'user_character.png');
    var youpic = undefined;
    var upperline = undefined;
    if (indexslot === undefined) indexslot = 0;
    switch (indexslot) {
        case 0:
            youpic = game.add.sprite(-258, 0, 'match0', 'user_1.png');//'user_character.png'
            upperline = createUI9a('match0', 'list_1.png', 0, -49, 676, 62, 50, 163, 0, 0);
            break;
        case 1:
            youpic = game.add.sprite(-258, 0, 'match0', 'user_2.png');//'user_character.png'
            upperline = createUI9a('match0', 'list_2.png', 0, -49, 676, 62, 50, 163, 0, 0);
            break;
        case 2:
            youpic = game.add.sprite(-258, 0, 'match0', 'user_3.png');//'user_character.png'
            upperline = createUI9a('match0', 'list_3.png', 0, -49, 676, 62, 50, 163, 0, 0);
            break;
        case 3:
            youpic = game.add.sprite(-258, 0, 'match0', 'user_4.png');//'user_character.png'
            upperline = createUI9a('match0', 'list_4.png', 0, -49, 676, 62, 50, 163, 0, 0);
            break;
        default:
            break;
    }
    youbg9.upperline = upperline;
    youbg9.addChild(upperline);//debug_Sprite(upperline); //<----------------

    youbg9.dis_upperline = createUI9a('match0', 'list_5.png', 0, -49, 676, 62, 50, 163, 0, 0); //비활성용 상단바를 여기다 놔야 레이어 순서가 맞음
    youbg9.addChild(youbg9.dis_upperline);

    youbg9.bgsp1st = uigame.add.sprite(-340, -124, 'match0', 'result_bg.png'); //다크그레이 다이얼로그
    youbg9.addChild(youbg9.bgsp1st); //debug_Sprite(youbg9.bgsp1st);

    //나의랭크 1st, 2nd, 3rd, 4th 스프라이트
    //var sp1st = game.add.sprite(-43, -63, 'match0', 'result_1.png');
    var sp1st = uigame.add.sprite(-5, -100, 'match0', 'result_1.png'); // 다크그레이 위에 놓일 랭킹 스프라이트
    sp1st.anchor.setTo(0.5, 0.5);
    sp1st.scale.setTo(0.65, 0.65);
    //sp1st.rotation = -0.2;
    youbg9.sp1st = sp1st;
    youpic.addChild(sp1st);//debug_Sprite(sp1st);

    youpic.anchor.setTo(0.5, 0.5);
    youbg9.youpic = youpic;
    youbg9.addChild(youpic);//debug_Sprite(youpic); //<---------------- 캐릭터 사진

    //보석
    var yougem = uigame.add.sprite(210, 0, 'match0', 'jewel.png');
    yougem.anchor.setTo(0.5, 0.5);
    youbg9.yougem = yougem;
    youbg9.addChild(yougem);//debug_Sprite(yougem);

    var txcnt = uigame.add.text(207, 28, "x1", style_gem);
    txcnt.anchor.setTo(0.0, 0.5);
    txcnt.name = 'txcnt';
    youbg9.txcnt = txcnt;
    youbg9.addChild(txcnt);//debug_Sprite(txcnt);

    var txname = uigame.add.text(-147, -0, "YOU", style_result_name);
    txname.anchor.setTo(0.0, 0.5);
    txname.name = 'txname';
    youbg9.txname = txname;
    youbg9.addChild(txname);//debug_Sprite(txname);

    // var txscore = uigame.add.text(190, 32, "0,000,000,000", style_result_score);
    // txscore.anchor.setTo(1, 0.5);
    // txscore.name = 'txscore';
    // youbg9.txscore = txscore;
    // youbg9.addChild(txscore);//debug_Sprite(txscore);

    youbg9.dis_youpic = game.add.sprite(-258, 0, 'match0', 'user_5.png');
    youbg9.dis_youpic.anchor.setTo(0.5, 0.5);
    youbg9.addChild(youbg9.dis_youpic);

    //활성
    youbg9.dis_youpic.visible = false;
    youbg9.dis_upperline.visible = false;
    youbg9.tint = ColorSet.white;

    youbg9.onActiveRank = function (onoff) {
        if (onoff) {
            //슬롯활성
            youbg9.dis_youpic.visible = false;
            youbg9.dis_upperline.visible = false;
            youbg9.txname.visible = true;
            youbg9.tint = ColorSet.white;

            youbg9.sp1st.visible = true;
            youbg9.yougem.visible = true;
            youbg9.txcnt.visible = true;
        } else {
            //슬롯비활성
            youbg9.dis_youpic.visible = true;
            youbg9.dis_upperline.visible = true;
            youbg9.txname.visible = false;
            youbg9.tint = ColorSet.lightgrey;

            youbg9.sp1st.visible = false;
            youbg9.yougem.visible = false;
            youbg9.txcnt.visible = false;
        }

    };

    return youbg9;
}

//--검색창의 슬롯1개 만들기--------------------------------
function createSlotSearch1(xpos, ypos, indexslot) {
    //슬롯0--나
    var youbg9;

    youbg9 = createUI9a('match0', 'list_empty.png', xpos, ypos, 680, 161, 10, 10, 10, 20);
    youbg9.name = 'youbg9';

    //액자
    //사용자액자 //var youframe9;
    //사용자액자 //youframe9 = createUI9a('match0', 'list_empty.png', -260, 0, 161, 161, 10, 10, 10, 20);

    //사용자액자 //youframe9.name = 'youframe9';
    //사용자액자 //youbg9.youframe9 = youframe9;
    //사용자액자 //youbg9.addChild(youframe9);//debug_Sprite(youpic9);

    //캐릭터사진
    //var youpic = uigame.add.sprite(-258, 0, 'match0', 'user_character.png');
    var youpic = undefined;
    var upperline = undefined;
    if (indexslot === undefined) indexslot = 0;
    switch (indexslot) {
        case 0:
            youpic = game.add.sprite(-258, 0, 'match0', 'user_1.png');//'user_character.png'
            upperline = createUI9a('match0', 'list_1.png', 0, -49, 676, 62, 50, 163, 0, 0);
            break;
        case 1:
            youpic = game.add.sprite(-258, 0, 'match0', 'user_2.png');//'user_character.png'
            upperline = createUI9a('match0', 'list_2.png', 0, -49, 676, 62, 50, 163, 0, 0);
            break;
        case 2:
            youpic = game.add.sprite(-258, 0, 'match0', 'user_3.png');//'user_character.png'
            upperline = createUI9a('match0', 'list_3.png', 0, -49, 676, 62, 50, 163, 0, 0);
            break;
        case 3:
            youpic = game.add.sprite(-258, 0, 'match0', 'user_4.png');//'user_character.png'
            upperline = createUI9a('match0', 'list_4.png', 0, -49, 676, 62, 50, 163, 0, 0);
            break;
        default:
            break;
    }

    youpic.anchor.setTo(0.5, 0.5);
    youbg9.youpic = youpic;
    youbg9.addChild(youpic);//debug_Sprite(youpic);


    youbg9.upperline = upperline;
    youbg9.addChild(upperline);//debug_Sprite(upperline);

    youbg9.dis_upperline = createUI9a('match0', 'list_5.png', 0, -49, 676, 62, 50, 163, 0, 0);
    youbg9.addChild(youbg9.dis_upperline);


    var txname = uigame.add.text(-147, 0, "YOU", style_result_name);
    txname.anchor.setTo(0.0, 0.5);
    txname.name = 'txname';
    youbg9.txname = txname;
    youbg9.addChild(txname);//debug_Sprite(txname);

    youbg9.dis_youpic = game.add.sprite(-258, 0, 'match0', 'user_5.png');
    youbg9.dis_youpic.anchor.setTo(0.5, 0.5);
    youbg9.addChild(youbg9.dis_youpic);

    //활성
    youbg9.dis_youpic.visible = false;
    youbg9.dis_upperline.visible = false;
    youbg9.tint = ColorSet.white;

    youbg9.onActive = function (onoff) {
        if (onoff) {
            //슬롯활성
            youbg9.dis_youpic.visible = false;
            youbg9.dis_upperline.visible = false;
            youbg9.txname.visible = true;
            youbg9.tint = ColorSet.white;
        } else {
            //슬롯비활성
            youbg9.dis_youpic.visible = true;
            youbg9.dis_upperline.visible = true;
            youbg9.txname.visible = false;
            youbg9.tint = ColorSet.lightgrey;
        }

    };

    return youbg9;
}

//---일시정지창------------------------------
function createUIPause() {
    var grp = uigame.add.group();
    // grp.position.setTo(xc,yc);

    //투명배경
    var bg = uigame.add.sprite(xc, yc, 'white1x1');
    bg.name = 'bguipause';
    grp.bg = bg;
    grp.addChild(bg);
    bg.inputEnabled = true;
    bg.width = 720;
    bg.height = 1280;
    bg.tint = ColorSet.black;
    bg.alpha = 0.5;
    bg.anchor.setTo(0.5, 0.5);
    //투명배경

    //var dlgbg9 = createUI9a('ui0', 'popup_message.png', xc, yc, 564, 300, 42, 52, 50, 57);//일시정지배경창
    var dlgbg9 = uigame.add.sprite(xc, yc, 'atlas_bb_ui_dlg-0', 'popup_pause.png');
    dlgbg9.anchor.setTo(0.5, 0.5);
    dlgbg9.name = 'dlgbg9';
    grp.dlgbg9 = dlgbg9;
    grp.addChild(dlgbg9); //debug_Sprite(dlgbg9);

    //닫기X버튼(일시정지)
    var btnx = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'btn_close.png'),
        undefined, //tx
        undefined, //img
        223, -193,
        undefined
    );//debug_Sprite(btnx);
    dlgbg9.addChild(btnx);
    dlgbg9.btnx = btnx;

    //뒤로가기버튼(일시정지)
    var btnback = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'btn_pause_replay.png'),
        undefined, //tx
        undefined, //img
        -97, -73,
        undefined
    ); //debug_Sprite(btnback);
    dlgbg9.addChild(btnback);
    dlgbg9.btnback = btnback;

    //사운드버튼(일시정지)
    var btnsound = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'btn_pause_sound.png'),
        undefined, //tx
        uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'btn_pause_sound_off.png'), //img
        -97, 91,
        undefined
    ); //debug_Sprite(btnsound);
    dlgbg9.addChild(btnsound);
    dlgbg9.btnsound = btnsound;
    btnsound.onoff = true;
    btnsound.icon.visible = false;

    //홈버튼(일시정지)
    var btnhome = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'btn_pause_home.png'),
        undefined, //tx
        undefined, //img
        97, -73,
        undefined
    ); //debug_Sprite(btnhome);
    dlgbg9.addChild(btnhome);
    dlgbg9.btnhome = btnhome;

    //도움말(일시정지)
    var btnhelp = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'btn_pause_item.png'),
        undefined, //tx
        undefined, //img
        97, 91,
        undefined
    ); //debug_Sprite(btnhelp);
    dlgbg9.addChild(btnhelp);
    dlgbg9.btnhelp = btnhelp;


    dlgbg9.btnsound.fnok = function () { //일시정지 사운드버튼 클릭
        //배경음온오프


        if (kData.bSoundBGM) {
            dlgbg9.btnsound.icon.visible = true; //사운드끄기
            kData.bSoundBGM = false;
            kData.bSoundSE = false;
            SE_HurryUp.mute=true;//
            selectBGM("BGM_Game_Nomal", true);
            // BGM_Game_Nomal.mute = true;
            // //확인사살
            // BGM_ALL.mute = true;
            // //SE_Run.mute = true;
        }
        else {
            dlgbg9.btnsound.icon.visible = false; //사운드켜기
            kData.bSoundBGM = true;
            kData.bSoundSE = true;
            selectBGM("BGM_Game_Nomal", true);
            // BGM_Game_Nomal.mute = false;
            // //확인사살
            // BGM_ALL.mute = true;
            // //SE_Run.mute = true;
        }
    };

    dlgbg9.btnhome.fnok = function () {//넷 중간 나가기// 일시메뉴에서 나가기
        SE_HurryUp.mute=true;
        if (matchmode) {
            socket.emit('leaveRoom'); //일시정지후 나가기
        }
        mode20sec = false;
        ispausemode = false; //홈버튼클릭->인풋잠금풀기

        uigame.state.states.game.onGameOver.dispatch();
        uigame.state.game.state.start('menu');
    };

    dlgbg9.btnhelp.fnok = function () {//헬프버튼클릭시
        var stgame = uigame.state.states.game;
        if (stgame.uiController.uiHelp.visible === false) { //헬프창 나오기
            stgame.uiController.uiHelp.onActiveHp();
        }
        // if (stgame.uiController.uipause.visible === true) { //일시정지 닫기
        //     stgame.uiController.uipause.visible = false;
        // }

    };

    grp.onActivePs = function () {
        onFadein(grp.bg, 0.75);
        onFadeinScale(grp.dlgbg9, function () {

        });
    };
    //닫기이벤트는 this.uipause.dlgbg9.btnx.fnok = function ()
    return grp;
}
function create20sec() {
    var text20Sec = uigame.add.text(0, 0, "", {
        font: "60px Conv_PassionOne-Regular",//백업 font: "40px Conv_PassionOne-Regular",
        fill: hex2str(ColorSet.white),
        align: "center",
        stroke: '#3C2B00',
        strokeThickness: 6
    });
    text20Sec.anchor.setTo(0.5, 0.5);
    text20Sec.x = xc;
    text20Sec.y = 200;
    return text20Sec;
}
//신호등321
function createLight123() {
    var grp = uigame.add.group();

    return grp;
}
//출발 비트맵 숫자 123
function createNumber123() {
    var grp = uigame.add.group();

    return grp;
}
//포그폭탄이펙트
function createFX_bomb() {
    var grp = uigame.add.group();

    return grp;
}

//미사일 공격 이펙트
function createFX_missile() {
    var grp = uigame.add.group();

    return grp;
}
//오른쪽 미니맵 표시
function createUIMiniMap() {
    var grp = uigame.add.group();

    return grp;
}



//페이지 인디케이터 생성
function CreateUIIndicator() { //bb
    // var grp = uigame.add.group();
    // grp.x = 0;
    // grp.y = 0;
    //
    // grp.txNameOn = "select_page.png";
    // grp.txNameOff = "select_page_1.png";
    //
    // //인디케이터배열설정/
    // grp.PAGE_MAX = LEVEL_MAX / LV4x4; //count이다 index아님
    //
    // grp.IndiPage = 10; //= PAGE_MAX;
    //
    // grp.IndiLength = 420; //픽셀x
    // grp.IndiGrid1 = grp.IndiLength / (grp.IndiPage - 1);
    // grp.LengthHalf = grp.IndiLength * 0.5; //중간지점픽셀x
    // //grp.sprIndicator = [];
    // grp._pageby10 = 0;
    //
    // grp._i = 0;
    //
    // //인디케이터 초기 생성
    // for (grp._i = 0; grp._i < grp.IndiPage; grp._i++) {
    //     grp.sprIndicator[grp._i] = uigame.add.sprite(
    //         -grp.LengthHalf + (grp.IndiGrid1 * grp._i),     //x
    //         0,                                              //y
    //         'atlas_bb_ui-0',                                //아틀라스
    //         grp._i === 0 ? grp.txNameOn : grp.txNameOff);   //png이름
    //     grp.sprIndicator[grp._i].anchor.setTo(0.5, 0.5);
    //
    //     grp.addChild(grp.sprIndicator[grp._i]);
    // }
    // //인디케이터 초기 생성
    //
    // //인디케이터업데이트
    // grp.setIndicatorByPage = function (pg) {
    //     grp._pageby10 = pg % 10;//폐이지 열개씩가 1세트이므로,, 나머지 값이 위치가 된다
    //     for (grp._i = 0; grp._i < grp.IndiPage; grp._i++) {
    //         if (grp._i == grp._pageby10) {
    //             if (dm) console.log("setIndicatorByPage--txNameOn(0):" + grp.txNameOn);
    //             if (grp.sprIndicator[grp._i] !== undefined || grp.sprIndicator[grp._i] !== null)
    //                 grp.sprIndicator[grp._i].loadTexture('atlas_bb_ui-0', grp.txNameOn);
    //         }
    //         else {
    //             if (dm) console.log("setIndicatorByPage--txNameOn(!0):" + grp.txNameOff);
    //             if (grp.sprIndicator[grp._i] !== undefined || grp.sprIndicator[grp._i] !== null)
    //                 grp.sprIndicator[grp._i].loadTexture('atlas_bb_ui-0', grp.txNameOff);
    //         }
    //     }
    // };
    // //인디케이터업데이트
    //
    // return grp;
}

//레벨선택창 안의  레벨아이콘1개생성
function CreateLevel1IconUI() {
    var grp = uigame.add.group();
    grp.x = 0;
    grp.y = 0;

    grp.z_index = 0;
    //레벨1 보통 버튼
    // grp.sOn = createbtn(createUI9a('atlas_bb_ui-0', 'btn_stage.png', 0, 0, 158, 200, 45, 45, 45, 45),
    //     uigame.add.text(0, -68, "000", style_bb_lv1),
    //     uigame.add.sprite(0, -5, 'atlas_bb_ui-0', "select_star_empty.png"),
    //     0, 0,
    //     style_bb_lv1
    // );
    grp.sOn = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', "btn_stage.png"),
        uigame.add.text(0, -68, "000", style_bb_lv1),
        uigame.add.sprite(0, -5, 'atlas_bb_ui-0', "select_star_empty.png"),
        0, 0,
        style_bb_lv1
    );
    grp.sOn.icon.scale.setTo(1, 1); //미니맵사이즈 //미니맵스케일
    grp.addChild(grp.sOn);

    // ///미니맵 칼라
    // grp.sOn.icon.scale.setTo(3, 3); //미니맵사이즈 //미니맵스케일
    // grp.sOn.icon.tint = ColorSet.red;
    // grp.sOn.icon.alpha = 0.55;
    // grp.addChild(grp.sOn);

    //별3개 만들기
    grp.sOn.sStar1 = uigame.add.sprite(-40, 64, 'atlas_bb_ui-0', "select_star.png");
    grp.sOn.sStar1.anchor.setTo(0.5, 0.5);
    grp.sOn.addChild(grp.sOn.sStar1);//debug_Sprite(sStar1);

    grp.sOn.sStar2 = uigame.add.sprite(0, 64, 'atlas_bb_ui-0', "select_star.png");
    grp.sOn.sStar2.anchor.setTo(0.5, 0.5);
    grp.sOn.addChild(grp.sOn.sStar2);//debug_Sprite(sStar2);

    grp.sOn.sStar3 = uigame.add.sprite(40, 64, 'atlas_bb_ui-0', "select_star.png");
    grp.sOn.sStar3.anchor.setTo(0.5, 0.5);
    grp.sOn.addChild(grp.sOn.sStar3);//debug_Sprite(sStar3);

    //현재 레벨
    grp.sSelected = uigame.add.sprite(0, -2, 'atlas_bb_ui-0', "stage_new_1.png");
    grp.sSelected.animations.add('idle', ['stage_new_1.png', 'stage_new_2.png']);
    grp.sSelected.anchor.setTo(0.5, 0.5);
    grp.addChild(grp.sSelected);//debug_Sprite(sStar1);

    //레벨1 보통 버튼

    //배경클릭시
    grp.sOn.fnok = function () { //레벨선택버튼
        if(game.state.states[game.state.current].key === 'game') return;
        curLevel = grp.z_index;
        curLevelFake = curLevel + 1 - Math.floor(curLevel / LV4x4); //레벨선택창에서
        if(dm) console.log("curLevel:"+curLevel+",  curLevelFake:"+curLevelFake);
        //-----로그인 상태 체크-----------in CreateLevel1IconUI
        if(loginTF === 1){          //로그인회원
            if (proto.serPos === 0              //모비서비스
            ||proto.serPos === 1) {              //야후서비스
                if (kData.iHeart<= 0) { //하트가 바닥이면 in CreateLevel1IconUI
                    //우선상점나오게
                    uigame.state.states.menu.uishop.onRefreshShop();
                    uigame.state.states.menu.uishop.onOpen();
                    return;
                    //우선상점나오게
                }else {
                    //하트소멸은 다음단계에서하므로
                    //다음단계로
                }
            }
        }else{
            if (networkManager.networkState === NET_STATE.LOCALHOST) { //로컬서비스
                //다음단계로
            }else{ //비회원  //게스트모드
                //
                if(kData.iHeart<=0) { //CreateLevel1IconUI
                    networkManager.ModalCall(MODAL_BUTTON_TYPE.OKCANCEL, GetShpMsg('signup'),//상점
                        function () {
                            networkManager.JoinMember();
                        },
                        function () {
                        }
                    );
                    return;
                }else{
                    //하트소멸은 다음단계에서하므로
                }
            }
        }
        //-----로그인 상태 체크------------in CreateLevel1IconUI

        //클릭시

        //var a = game.state.states[game.state.current];
        //var b = game.state.states[game.state.current].key;
        uigame.state.states.menu.uiselectlevel.spMask_sel.visible = true;//더블클릭막기
        setTimeout(function () {
            uigame.state.states.menu.uiselectlevel.spMask_sel.visible = false;//더블클릭풀기
            uigame.state.start('game');
            //uiSelectLevel.visible을 true로//this.uiStartLevel.onActiveLv();
            if (dm) console.log("start game!!!");
        }, 250); //--> clickGameMode

    };

    //일반보통레벨 아이콘 Disable
    grp.sOff = uigame.add.sprite(0, 0, 'atlas_bb_ui-0', "btn_stage_disable.png");
    grp.sOff.anchor.setTo(0.5, 0.5);//grp.addChild(sOff);
    grp.addChild(grp.sOff); //debug_Sprite(sOff);
    //grp.sLockD = uigame.add.sprite(0, 0, 'atlas_bb_ui-0', "lock.png");
    //grp.sLockD.anchor.setTo(0.5, 0.5);
    //grp.sOff.addChild(grp.sLockD);

    //보너스레벨 배경+타이틀 부분
    //grp.sBonus = uigame.add.sprite(0, 0, 'atlas_bb_ui-0', "btn_stage_bonus.png"); //보너스배경
    //grp.sBonus.anchor.setTo(0.5, 0.5);
    grp.sBonus = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', "btn_stage_bonus.png"),//보너스배경
        undefined,
        undefined,
        0, 0,
        style_bb_lv1
    );

    grp.addChild(grp.sBonus);
    grp.sBonusSP1 = uigame.add.sprite(0, -26, 'atlas_bb_ui-0', "select_bonus_label.png");//보너스타이틀배경
    grp.sBonusSP1.anchor.setTo(0.5, 0.5);
    grp.sBonus.addChild(grp.sBonusSP1);
    grp.sBonusSP2 = uigame.add.sprite(0, -32, 'atlas_bb_ui-0', "select_bonus_title.png");//bonus stage 문자
    grp.sBonusSP2.anchor.setTo(0.5, 0.5);
    grp.sBonus.addChild(grp.sBonusSP2);
    
    //보너스레벨 클리어 가지
    grp.z_panel_c = uigame.add.group();
    grp.sBonus.addChild(grp.z_panel_c);
    grp.sBonusClearM = uigame.add.sprite(0, 53, 'atlas_bb_ui-0', 'select_bonus_medal.png');
    grp.sBonusClearM.anchor.setTo(0.5, 0.5);
    grp.z_panel_c.addChild(grp.sBonusClearM);
    grp.sBonusClearC = uigame.add.sprite(0, 53, 'atlas_bb_ui-0', 'select_bonus_cleared.png');
    grp.sBonusClearC.anchor.setTo(0.5, 0.5);
    grp.z_panel_c.addChild(grp.sBonusClearC);

    //보너스레벨 하트수치 가지
    grp.z_panel_h = uigame.add.group();
    grp.sBonus.addChild(grp.z_panel_h);
    grp.sBonusSP3 = createUI9a('atlas_bb_ui-0', 'select_bonus_info.png', 0, 57, 120, 46, 25, 25, 0, 0);//하트배경
    grp.sBonusSP3.anchor.setTo(0.5, 0.5);
    grp.z_panel_h.addChild(grp.sBonusSP3);
    grp.sBonusSP4 = uigame.add.sprite(-20, 57, 'atlas_bb_ui-0', 'select_bonus_block.png');//하트상자아이콘
    grp.sBonusSP4.anchor.setTo(0.5, 0.5);
    grp.z_panel_h.addChild(grp.sBonusSP4);
    grp.sBonusTx = uigame.add.text(32, 59, "0", style_bb_bonusheart);
    grp.sBonusTx.anchor.setTo(0.5, 0.5);
    grp.z_panel_h.addChild(grp.sBonusTx);

    //보너스레벨 락걸린부분
    grp.sLockBonus = uigame.add.sprite(0, 0, 'atlas_bb_ui-0', "btn_stage_bonus_disable.png");
    grp.sLockBonus.anchor.setTo(0.5, 0.5);
    grp.addChild(grp.sLockBonus);
    grp.sLockBonusSP = uigame.add.sprite(0, 0, 'atlas_bb_ui-0', "select_bonus_title.png");
    grp.sLockBonusSP.anchor.setTo(0.5, 0.5);
    grp.sLockBonusSP.scale.setTo(0.85, 0.85);
    grp.sLockBonus.addChild(grp.sLockBonusSP);


    grp.sBonus.fnok = function () { //레벨선택버튼
        curLevel = grp.z_index;
        curLevelFake = curLevel + 1 - Math.floor(curLevel / LV4x4); //보너스아이콘 클릭시 in 레벨선택창
        if(dm) console.log("curLevel:"+curLevel+",  curLevelFake:"+curLevelFake);
        //보너스클릭시
        uigame.state.states.menu.uiselectlevel.spMask_sel.visible=true;//더블클릭막기
        setTimeout(function () {
            uigame.state.states.menu.uiselectlevel.spMask_sel.visible=false;//더블클릭풀기
            uigame.state.start('game');
            //uiSelectLevel.visible을 true로//this.uiStartLevel.onActiveLv();
            if (dm) console.log("start game!!!");
        }, 250); //--> clickGameMode
    };

    //레벨1버튼 Disable

    //아이콘 초기화
    grp.sOn.visible = true;
    grp.sSelected.visible = false;
    grp.sOff.visible = false;
    grp.sBonus.visible = false;
    grp.sLockBonus.visible = false;
    grp.sSelected.visible = false;

    grp.onActiveIcon = function (onoff) { //0:lock, 1:clear, 2:current, 3:bonus_lock, 4:bonus_clear, 5:bonus_current 6:bonus_playing
        switch (onoff) {
            case 0:                   //lock
                grp.sOn.visible = false;
                grp.sOff.visible = true;
                grp.sBonus.visible = false;
                grp.sLockBonus.visible = false;
                grp.sSelected.visible = false;
                break;
            case 1:                   //clear
                grp.sOn.visible = true;
                grp.sOff.visible = false;
                grp.sBonus.visible = false;
                grp.sLockBonus.visible = false;
                grp.sSelected.visible = false;
                break;
            case 2:                  //currnet
                grp.sOn.visible = true;
                grp.sOff.visible = false;
                grp.sBonus.visible = false;
                grp.sLockBonus.visible = false;
                grp.sSelected.visible = true;
                grp.sSelected.animations.play('idle', 5, true, undefined); //loop
                break;
            case 3:                   //bonus_lock
                grp.sOn.visible = false;
                grp.sOff.visible = false;
                grp.sBonus.visible = false;
                grp.sLockBonus.visible = true;
                grp.sSelected.visible = false;
                break;
            case 4:                   //bonus_clear
                grp.sOn.visible = false;
                grp.sOff.visible = false;
                grp.sBonus.visible = true;

                grp.z_panel_c.visible = true; //클리어 가지
                grp.z_panel_h.visible = false; //하트 가지

                grp.sLockBonus.visible = false;
                grp.sSelected.visible = false;
                break;
            case 5:                  //bonus_current
                grp.sOn.visible = false;
                grp.sOff.visible = false;
                grp.sBonus.visible = true;

                grp.z_panel_c.visible = false; //클리어 가지
                grp.z_panel_h.visible = true; //하트 가지

                grp.sLockBonus.visible = false;
                grp.sSelected.visible = true;
                grp.sSelected.animations.play('idle', 5, true, undefined); //loop
                break;
            case 6:                  //bonus_playing
                grp.sOn.visible = false;
                grp.sOff.visible = false;
                grp.sBonus.visible = true;

                grp.z_panel_c.visible = false; //클리어 가지
                grp.z_panel_h.visible = true; //하트 가지

                grp.sLockBonus.visible = false;
                grp.sSelected.visible = false;
                break;
            default:
                break;
        }
    };
    grp.onSetHeart = function (count) {
        grp.sBonusTx.text = count;
    };
    grp.onSetStar = function (starcount) { //0:lock, 1:clear, 2:ing
        switch (starcount) {
            case 0:
                grp.sOn.sStar1.loadTexture('atlas_bb_ui-0', "select_star_empty.png");
                grp.sOn.sStar2.loadTexture('atlas_bb_ui-0', "select_star_empty.png");
                grp.sOn.sStar3.loadTexture('atlas_bb_ui-0', "select_star_empty.png");
                break;
            case 1:
                grp.sOn.sStar1.loadTexture('atlas_bb_ui-0', "select_star.png");
                grp.sOn.sStar2.loadTexture('atlas_bb_ui-0', "select_star_empty.png");
                grp.sOn.sStar3.loadTexture('atlas_bb_ui-0', "select_star_empty.png");
                break;
            case 2:
                grp.sOn.sStar1.loadTexture('atlas_bb_ui-0', "select_star.png");
                grp.sOn.sStar2.loadTexture('atlas_bb_ui-0', "select_star.png");
                grp.sOn.sStar3.loadTexture('atlas_bb_ui-0', "select_star_empty.png");
                break;
            case 3:
                grp.sOn.sStar1.loadTexture('atlas_bb_ui-0', "select_star.png");
                grp.sOn.sStar2.loadTexture('atlas_bb_ui-0', "select_star.png");
                grp.sOn.sStar3.loadTexture('atlas_bb_ui-0', "select_star.png");
                break;
            default:
                break;
        }
    };
    grp.onSetLvIdx = function(lvidx){
        grp.z_index = lvidx;
    };
    grp.onSetLvNum = function (lvnum) { //lvnum=lvidx+1
        grp.sOn.tx.text = lvnum;
    };
    grp.onSetIcon = function (lvnum) { //lvnum=lvidx+1
        //PngList_minimap[0]은 001.png에서 시작, lvnum은 1부터 시작

        grp.sOn.icon.loadTexture(PngList_minimap[lvnum - 1].name);

    };
    return grp;
}

//컴포넌트 하트,패들,뒷배경
function createUIlifeStar() {
    var grp = uigame.add.group();
    //grp.position.set(xc, yc);
    //var ret = uigame.add.sprite(0, 0, "atlas_bb_ui-0", "life_bg.png");
    //ret.anchor.setTo(0.5, 0.5); //debug_Sprite(ret);

    grp.z_star=[];
    grp.z_star.push(uigame.add.sprite( -40, 2, "atlas_bb_ui-0", "life.png"));
    grp.z_star.push(uigame.add.sprite( 29, 2, "atlas_bb_ui-0", "life.png"));
    grp.z_star.push(uigame.add.sprite(98, 2, "atlas_bb_ui-0", "life.png"));

    grp.z_star[0].anchor.setTo(0.5, 0.5); //debug_Sprite(ret.z_star[0]);
    grp.addChild(grp.z_star[0]);
    grp.z_star[1].anchor.setTo(0.5, 0.5); //debug_Sprite(ret.z_star[1]);
    grp.addChild(grp.z_star[1]);
    grp.z_star[2].anchor.setTo(0.5, 0.5);// debug_Sprite(ret.z_star[2]);
    grp.addChild(grp.z_star[2]);

    //별갯수를 업데이트하는
    grp.onSetLife = function (lifes) {
        switch (lifes){
            case 3:
                grp.z_star[0].loadTexture('atlas_bb_ui-0', 'life.png'); //텍스쳐교체,텍스쳐교환,텍스쳐체인지
                grp.z_star[1].loadTexture('atlas_bb_ui-0', 'life.png');
                grp.z_star[2].loadTexture('atlas_bb_ui-0', 'life.png');
                break;
            case 2:
                grp.z_star[0].loadTexture('atlas_bb_ui-0', 'life.png');
                grp.z_star[1].loadTexture('atlas_bb_ui-0', 'life.png');
                grp.z_star[2].loadTexture('atlas_bb_ui-0', 'life_disable.png');
                break;
            case 1:
                grp.z_star[0].loadTexture('atlas_bb_ui-0', 'life.png');
                grp.z_star[1].loadTexture('atlas_bb_ui-0', 'life_disable.png');
                grp.z_star[2].loadTexture('atlas_bb_ui-0', 'life_disable.png');
                break;
            case 0:
                grp.z_star[0].loadTexture('atlas_bb_ui-0', 'life_disable.png');
                grp.z_star[1].loadTexture('atlas_bb_ui-0', 'life_disable.png');
                grp.z_star[2].loadTexture('atlas_bb_ui-0', 'life_disable.png');
                break;
            default:

                break;
        }
    };//grp.onSetLife

    grp.onMoveLife = function (lifes) { //상단메뉴에서 별 사라짐
        //별사라지는 spine스파인 작동
        var stgame = uigame.state.states.game;
        stgame.uiController.uiDropStar.x=xc;
        stgame.uiController.uiDropStar.y=xc;
        if(kData.bSoundSE) SE_Star_off.play();  //패들이 죽어서 별점이 줄어들때
        switch (lifes){
            case 3:
                break;
            case 2:
                stgame.uiController.uiDropStar.position.setTo(455,45);
                stgame.uiController.uiDropStar.visible = true;
                stgame.uiController.uiDropStar.z_spine.setAnimationByName(1, "heart_bomb_out", false);
                stgame.uiController.uiDropStar.z_spine.addAnimationByName(0, "empty", false);
                break;
            case 1:
                //grp.z_life.z_star[1]
                stgame.uiController.uiDropStar.position.setTo(384,45);
                stgame.uiController.uiDropStar.visible = true;
                stgame.uiController.uiDropStar.z_spine.setAnimationByName(1, "heart_bomb_out", false);
                stgame.uiController.uiDropStar.z_spine.addAnimationByName(0, "empty", false);
                break;
            case 0:
                //grp.z_life.z_star[0]
                stgame.uiController.uiDropStar.position.setTo(315,45);
                stgame.uiController.uiDropStar.visible = true;
                stgame.uiController.uiDropStar.z_spine.setAnimationByName(1, "heart_bomb_out", false);
                stgame.uiController.uiDropStar.z_spine.addAnimationByName(0, "empty", false);
                break;
            default:
                break;
        }
    };//별제거 애니

    return grp;
}

//컴포넌트 SCORE: 1000          //위치xy, local위치xy, 앞이름, 스타일1, 스타일2, 피봇1, 피봇2
function createUITextAndNumber(x, y, xx, yy, name, namestyle, numberstyle, p1x, p1y, p2x, p2y, useShadow) {
    ret = uigame.add.text(x, y, name, namestyle);
    ret.anchor.setTo(p1x, p1y); //debug_Sprite(ret);
    if(useShadow) ret.setShadow(5, 5, 'rgba(0,0,0,0.5)', 5);

    ret.z_number = uigame.add.text(xx, yy, "0 ", numberstyle);
    ret.z_number.anchor.setTo(p2x, p2y); //debug_Sprite(ret.z_number);
    if(useShadow) ret.z_number.setShadow(5, 5, 'rgba(0,0,0,0.5)', 5);
    ret.addChild(ret.z_number);

    return ret;
}


function CreateUIBackground(index) { //게임메인 배경

    var grp = uigame.add.group();
    grp.position.set(xc, yc);

    grp.texarr = [
        'back_img_1.png', //  0- 49 //배경벽지
        'back_img_2.png', // 50- 99
        'back_img_3.png', //100-149
        'back_img_4.png', //150-199
        'back_img_5.png', //200-249

        'back_img_6.png', //250-299
        'back_img_7.png' //300-349
    ];

    //타일배경
    //grp.z_dlbg = uigame.add.tileSprite(0, 0, 720, 1280, 'atlas_bb_ui_dlg-0', grp.texarr[index]);
    //스프라이트배경
    grp.z_dlbg = uigame.add.sprite(0, 0, 'atlas_bb_wallpaper-0', grp.texarr[index]);
    grp.z_dlbg.anchor.setTo(0.5, 0.5);
    grp.z_dlbg.scale.setTo(2.0,2.0);
    grp.addChild(grp.z_dlbg);

    //셀로판 x 컨트롤
    // grp.z_cellophane =  createUI9a('atlas_bb_ui-0', 'touch.png', 0, yc-125, 650, 240, 10, 10, 10, 10);
    // grp.z_cellophane.anchor.setTo(0.5, 0.5);
    // grp.addChild(grp.z_cellophane);//debug_Sprite(grp.z_cellophane);`
    //셀로판 xy 컨트롤
    grp.z_cellophane =  createUI9a('atlas_bb_ui-0', 'touch.png', 0, yc-75, 650, 140, 10, 10, 10, 10);
    grp.z_cellophane.anchor.setTo(0.5, 0.5);
    grp.addChild(grp.z_cellophane); //debug_Sprite(grp.z_cellophane);

    grp.onSetTex = function (idx) {
        //var bgidx = float2int(idx/50);
        var bgidx = idx%grp.texarr.length;
        if(dm) console.log( "wallpaper index:"+ bgidx);
        if(bgidx>(grp.texarr.length-1)) bgidx=(grp.texarr.length-1);
        grp.z_dlbg.loadTexture('atlas_bb_wallpaper-0', grp.texarr[bgidx]); //교체
    };


    return grp;
}
function  CreateUIProgress(progspr, progbgspr, px, py) {
    var grp = uigame.add.group();
    grp.position.setTo(px, py);
    grp.old_bias=-1;
    //프로그래스바 배경
    grp.z_progressbg = progbgspr;
    grp.z_progressbg.anchor.setTo(0,0);//항상 anchor.setTo(0,0);으로 되어야 한다.
    grp.addChild(grp.z_progressbg);
    //프로그래스바
    grp.z_progress = progspr;
    grp.z_progress.anchor.setTo(0,0);//항상 anchor.setTo(0,0);으로 되어야 한다.
    grp.addChild(grp.z_progress);
    //프로그래스바 마스크
    grp.z_w = grp.z_progress.width;
    grp.z_h = grp.z_progress.height;
    grp.z_mask = uigame.add.graphics(0, 0); //마스크 생성
    grp.z_mask.beginFill(0xffffff);         //마스크 보이는영역(흰색)
    grp.z_mask.drawRect(0, 0, grp.z_w, grp.z_h);    //마스크 구역생성
    grp.z_progress.mask = grp.z_mask;       //마스크 할당
    grp.z_progress.addChild(grp.z_mask);    //마스크 계층구조

    grp.onUpdatePr = function(bias){
        if(grp.old_bias!== bias) {//업데이트 줄일 려고
            grp.z_mask.scale.x = bias;
            grp.old_bias = bias
        }
    };
    return grp;
}
function CreateUIProgressWithindicator(progressbar, arron, arroff, arrindi, arrbias, arryoff){
    //                //
    //arrindi = [allblockcount ];

    var grp = uigame.add.group();
    grp.z_progindi = progressbar;
    grp.addChild(grp.z_progindi);
    grp.z_cnt=0;

    var arrprop;//임시데이터


    grp.z_timer = uigame.add.text(-31+20, -558, "00:00", style_bb_timer_ingame);//style_shopplusheart);
    grp.z_timer.anchor.setTo(0.5, 0.5);
    grp.addChild(grp.z_timer); //debug_Sprite(grp.z_timer);

    //선을 먼저 처리
    if(typeof(arrindi) === 'undefined') grp.z_arrindi=undefined;
    else {
        grp.z_arrindi = arrindi;//저장
        arrprop =  grp.z_arrindi;
        for (var k in arrprop){
            //debug_Sprite(arrprop[k]);
            arrprop[k].anchor.setTo(0.5,0.5);
            grp.z_progindi.addChild(arrprop[k]);
        }
    }
    
    //별
    if(typeof(arron) === 'undefined') grp.z_arron=undefined;
    else{
        grp.z_arron = arron;//저장
        grp.z_cnt = grp.z_arron.length;//저장
        arrprop = grp.z_arron;
        for (var k in arrprop){
            //debug_Sprite(arrprop[k]);
            arrprop[k].anchor.setTo(0.5,0.5);
            grp.z_progindi.addChild(arrprop[k]);
        }
    }

    //별off
    if(typeof(arroff) === 'undefined') grp.z_arroff=undefined;
    else {
        grp.z_arroff = arroff;//저장
        arrprop = grp.z_arroff;
        for (var k in arrprop){
            //debug_Sprite(arrprop[k]);
            arrprop[k].anchor.setTo(0.5,0.5);
            grp.z_progindi.addChild(arrprop[k]);
        }
    }

    //선배치x bias값들
    if(typeof(arrbias) === 'undefined') grp.z_arrbias=undefined;
    else {
        grp.z_arrbias = arrbias;//저장
        var idx;
        for (idx in arrprop){
            grp.z_arron[idx].x = grp.z_arrbias[idx]*grp.z_progindi.z_w;
            grp.z_arroff[idx].x = grp.z_arrbias[idx]*grp.z_progindi.z_w;
            grp.z_arrindi[idx].x = grp.z_arrbias[idx]*grp.z_progindi.z_w;
        }
    }

    //y값들
    if(typeof(arryoff) === 'undefined') grp.z_arryoff=undefined;
    else {
        grp.z_arryoff = arryoff;//저장
        arrprop =  grp.z_arron;
        for (var idy in arrprop){ arrprop[idy].y=grp.z_arryoff[0];}
        arrprop =  grp.z_arroff;
        for (var idy in arrprop){ arrprop[idy].y=grp.z_arryoff[1];}
        arrprop =  grp.z_arrindi;
        for (var idy in arrprop){ arrprop[idy].y=grp.z_arryoff[2];}
    }

    //값트윈오브젝트
    grp.z_tweenSec = uigame.add.group();
    grp.z_tweenSec.position.setTo(135+50,18+50);//프로그래스바좌측상단이 기본값이므로, 옾셋지정

    grp.z_tweenSec.z_inity = grp.z_tweenSec.y;//초기 위치값 Y저장

    grp.z_progindi.addChild(grp.z_tweenSec);
    grp.z_tweenSec_Num = uigame.add.bitmapText(0, 0, 'combo_no-export', "+0", 60, undefined);//비트맵폰트 크기가 71
    grp.z_tweenSec_Num.anchor.setTo(1,0.72);//위치잡기
    //grp.z_tweenSec_Num.alpha=0.7;
    grp.z_tweenSec.addChild(grp.z_tweenSec_Num);
    grp.z_tweenSec_Sec = uigame.add.sprite(0, 0, "atlas_bb_ui-0", "combo_sec.png");
    grp.z_tweenSec_Sec.anchor.setTo(0,0.5);//위치잡기
    //grp.z_tweenSec_Sec.alpha=0.7;
    grp.z_tweenSec.addChild(grp.z_tweenSec_Sec);
    //값트윈오브젝트

    grp.tempstarcnt=0;

    grp.onUpdateProg = function(bias){

        if(grp.z_progindi.old_bias!==bias) {//업데이트 줄일 려고
            grp.z_progindi.onUpdatePr(bias);
            grp.tempstarcnt=0;
            for (var i = 0; i < grp.z_cnt; i++) {
                if (grp.z_arrbias[i] <= bias) { //현재타임보다 작거나 같으면
                    //활성
                    grp.z_arron[i].visible = true;
                    grp.z_arroff[i].visible = false;
                    grp.tempstarcnt+=1;
                } else {
                    //비활성
                    grp.z_arron[i].visible = false;
                    grp.z_arroff[i].visible = true;
                }
            }
            curMyStars=grp.tempstarcnt;
        }//업데이트 줄임
    };//fn

    // grp.onGetMedalByBias = function(bias){
    //     grp.tempstarcnt=0;
    //     for (var i = 0; i < grp.z_cnt; i++) {
    //         if (grp.z_arrbias[i] <= bias) { //현재타임보다 작거나 같으면
    //             //활성
    //             grp.tempstarcnt+=1;
    //         } else {
    //             //비활성
    //         }
    //     }
    //     return grp.tempstarcnt;
    // };//fn
    //
    // grp.onUpdateForce = function(count){
    //     var forcebias = grp.z_arrbias[3-count];
    //     grp.z_progindi.onUpdatePr(forcebias);
    //     for (var i = 0; i < grp.z_cnt; i++) {
    //         if(i<count){
    //             grp.z_arron[i].visible = true;
    //             grp.z_arroff[i].visible = false;
    //         } else {
    //             //비활성
    //             grp.z_arron[i].visible = false;
    //             grp.z_arroff[i].visible = true;
    //         }
    //     }
    //     curMyStars=count;
    // };//fn


    grp.onGetStar = function(){
        var ret=0;
        for (var i = 0; i < grp.z_cnt; i++) {
            if(grp.z_arron[i].visible === true){
                ret+=1;
            }
        }
        return ret;
    };//fn

    grp.onTweenSec = function(num){
        grp.z_tweenSec_Num.text = "+"+num;
        var sc1 = grp.z_tweenSec;

        // // //플로팅스코어텍스트 애니메이션-------------------//in runTweenCombo
        // TweenMax.set(sc1, {alpha: 1, y: sc1.z_inity});
        // TweenMax.to(sc1, 0.5, {
        //     y: "-=25", alpha: 0, ease: Linear.easeNone, onComplete: function () {
        //         //sc1.kill();
        //     }
        // });
        // // //플로팅스코어텍스트 애니메이션--------------

        //콤보트윈---------------------
        //전 트윈 제거
        if (TweenMax.isTweening(sc1)) {
            TweenMax.killTweensOf(sc1);
        }
        //콤보 숫자 적용
        //this.uiCombo.onSetNumber(curComboCount);
        //위치고정도 필요없어서 주석
        //this.uiCombo.position.setTo(this.uiCombo.z_xinit, this.uiCombo.y_xinit);
        //보이기
        //this.uiCombo.onShow();

        sc1.visible= true;
        TweenMax.set(sc1.scale, {x: 0.8, y:0.8});
        TweenMax.to(sc1.scale, 0.5, {
            //y: "-=100",
            x: 1.0,
            y: 1.0,
            ease: Elastic.easeOut,//ease: Linear.easeNone,
            onComplete: function () { sc1.visible=false; },
            //onUpdate: function () { console.log(combo.y); }
            dealy:0
        });
        //콤보트윈-----------------------
    };//fn

    grp.onTweenSec_Hide = function(){
        grp.z_tweenSec.visible=false;
    };//fn

    grp.onUpdateTime = function(txt){
        grp.z_timer.text = txt;
    };//fn
    return grp;
}

function CreateUIMainGame() { //게임메인 창
    var grp = uigame.add.group();
    grp.position.set(xc, yc);

    if(modeOption[0]===2) grp.z_mainmode = "bonus";
    else grp.z_mainmode = "normal";

    //보너스노드생성
    grp.z_bonus = uigame.add.group();
    grp.addChild(grp.z_bonus);
    //노말노드생성
    grp.z_normal = uigame.add.group();
    grp.addChild(grp.z_normal);

    //보너스 상단배경
    grp.z_top_b = uigame.add.sprite(0, -500, "atlas_bb_ui-0", "top_bonus.png");
    grp.z_top_b.anchor.setTo(0.5, 1);
    grp.z_bonus.addChild(grp.z_top_b);
    //노말 상단배경
    grp.z_top_n = uigame.add.sprite(0, -500, "atlas_bb_ui-0", "top.png");
    grp.z_top_n.anchor.setTo(0.5, 1);
    grp.z_normal.addChild(grp.z_top_n);
    //노말 인게임 스테이지번호
    grp.z_stageName = createUITextAndNumber(103+20, -608, 10, 0, " STAGE", style_bb_stage_ingame, style_bb_stage_ingame,  1, 0.5, 0, 0.5, false);
    grp.z_normal.addChild(grp.z_stageName); //debug_Sprite( grp.z_stageName);
    grp.z_stageName.z_number.text="";
    //노말 인게임 프로그래스바+타이머 배경
    grp.z_infobg = createUI9a('atlas_bb_ui-0', 'info.png', 70+20, -561, 323, 46, 27, 27, 0, 0);
    grp.z_normal.addChild(grp.z_infobg); //debug_Sprite(grp.z_infobg);



    //보너스 상단 타이틀
    grp.z_top_title_b = uigame.add.sprite(-54, -630, "atlas_bb_ui-0", "bonus_title.png");
    grp.z_bonus.addChild(grp.z_top_title_b);//debug_Sprite(grp.z_top_title_b);
    //보너스 하트 상단 배경
    grp.z_infobg_b = createUI9a('atlas_bb_ui-0', 'info_bonus.png', 70+20, -556, 303, 56, 27, 27, 27, 27);
    grp.z_bonus.addChild(grp.z_infobg_b); //debug_Sprite(grp.z_infobg_b);
    //보너스 하트 아이콘
    grp.z_top_icon_b = uigame.add.sprite(-15-10, -579, "atlas_bb_ui-0", "bonus_block.png");
    grp.z_bonus.addChild(grp.z_top_icon_b);//debug_Sprite(grp.z_top_icon_b);
    //보너스 인게임 하트 갯수
    grp.z_heartcnt_b = createUITextAndNumber(114+20, -553, 0, 0, "2", style_bb_hcnt1_b, style_bb_hcnt2_b,  1, 0.5, 0, 0.5, false);
    grp.z_bonus.addChild(grp.z_heartcnt_b); //debug_Sprite( grp.z_heartcnt_b);
    grp.z_heartcnt_b.text = kData.userData[curLevel];
    grp.z_heartcnt_b.z_number.text="/"+modeOption[2]; //grp.z_heartcnt_b.z_number.text="/22";

    // //인게음 타이머//프로그래스바로 이동하려고
    // grp.z_timer = uigame.add.text(-31, -558, "00:00", style_bb_timer_ingame);//style_shopplusheart);
    // grp.z_timer.anchor.setTo(0.5, 0.5);
    // grp.z_normal.addChild(grp.z_timer); //debug_Sprite(grp.z_timer);

    // // //프로그래스바 오브젝트
    // grp.prog = CreateUIProgress(
    //     createUI9a('atlas_bb_ui-0', 'gage.png', 0, 0, 196, 30, 15, 15, 0, 0),//프로그래스바
    //     createUI9a('atlas_bb_ui-0', 'gage_bg.png', 0, 0, 196, 30, 15, 15, 0, 0),//바 배경
    //     27,
    //     -576
    // );
    // grp.prog.onUpdate(0.5);
    // grp.z_normal.addChild(grp.prog);
    // // //프로그래스바 오브젝트

    grp.z_prog = CreateUIProgressWithindicator(
        //프로그래스바
        CreateUIProgress(
            createUI9a('atlas_bb_ui-0', 'gage.png', 0, 0, 196, 30, 15, 15, 0, 0),//프로그래스바
            createUI9a('atlas_bb_ui-0', 'gage_bg.png', 0, 0, 196, 30, 15, 15, 0, 0),//바 배경
            27+20,
            -576
        ),
        //별ON
        [
            uigame.add.sprite(0, 0, "atlas_bb_ui-0", "gage_star.png"),
            uigame.add.sprite(0, 0, "atlas_bb_ui-0", "gage_star.png"),
            uigame.add.sprite(0, 0, "atlas_bb_ui-0", "gage_star.png")
        ],
        //별OFF
        [
            uigame.add.sprite(0, 0, "atlas_bb_ui-0", "gage_star_disable.png"),
            uigame.add.sprite(0, 0, "atlas_bb_ui-0", "gage_star_disable.png"),
            uigame.add.sprite(0, 0, "atlas_bb_ui-0", "gage_star_disable.png")
        ],
        [
            uigame.add.sprite(0, 0, "atlas_bb_ui-0", "gage_line.png"),
            uigame.add.sprite(0, 0, "atlas_bb_ui-0", "gage_line.png"),
            uigame.add.sprite(0, 0, "atlas_bb_ui-0", "gage_line.png")
        ],
        allstarbias, //[0.1, 0.2, 0.5],//각별의 위치(비율값)//프로그래스바설정(시간라인)
        [-6, -6, 16] //별on위치,별off위치,실선위치-->y값(로컬배치이동값)
    );
    grp.z_prog.onUpdateProg(1);
    grp.z_prog.onTweenSec_Hide();
    if(dm) console.log("grp.z_prog.onGetStar()=="+grp.z_prog.onGetStar());
    grp.z_normal.addChild(grp.z_prog);
    //지울것들-----------

    //라이프별
    //grp.z_lifestar=createUIlifeStar();
    //grp.z_lifestar.position.setTo(-4, -597);
    //grp.z_lifestar.alpha=0.1;
    //grp.addChild(grp.z_lifestar);
    //스코어 넘버 생성
    //grp.z_scoreNumber = createUITextAndNumber(-19, -536, 8, 0, "SCORE:", style_30_stage, style_30_stageNumber, 1, 0.5, 0, 0.5, false);
    //grp.addChild(grp.z_scoreNumber); //debug_Sprite(grp.z_scoreNumber);
    //지울것들-----------

    grp.z_warning = CreateUIWarning();
    uiWarningGlobal = grp.z_warning;
    grp.z_warning.onHide();
    grp.z_warning.position.setTo(0, -470);
    grp.z_warning.z_xinit = 0;
    grp.z_warning.z_yinit = -470;
    grp.addChild(grp.z_warning);

    grp.z_itemsel = CreateUIItemSelected();
    grp.z_itemsel.position.setTo(0, -390);
    grp.addChild(grp.z_itemsel);

    grp.z_combo = CreateUICombo();//콤보생성
    grp.z_combo.onHide();
    grp.z_combo.position.setTo(10, -430);
    grp.z_combo.z_xinit = 10;
    grp.z_combo.z_yinit = -450;
    grp.addChild(grp.z_combo);

    grp.z_shopplus = createUIShopPlusButton();
    grp.z_shopplus.position.setTo(-xc+165,-yc+60);
    grp.addChild(grp.z_shopplus);

    //일시정지버튼 생성
    grp.z_pause = createbtn(uigame.add.sprite(0, 0, 'atlas_bb-0', "btn_pause.png"),
        undefined,
        undefined,
        291+20, -588,
        undefined
    );

    grp.onShow = function (mode) {
        //switch (mode){
        switch (grp.z_mainmode){
            case 'normal':
                grp.z_normal.visible = true;
                grp.z_bonus.visible = false;
                break;
            case 'bonus':
                grp.z_normal.visible = false;
                grp.z_bonus.visible = true;
                break;
        }
    };


    grp.onUpdateBonusHeart = function () {
        grp.z_heartcnt_b.text = kData.userData[curLevel];
        grp.z_heartcnt_b.z_number.text = modeOption[2];
    };

    grp.addChild(grp.z_pause);//debug_Sprite(grp.z_pause);
    return grp;
}

function _createUIDlgBg_bb( uppername ){
    //팝업 다이얼로그 배경만 생성한다.(버튼,타이틀 제외
    var grp = uigame.add.group();
    grp.position.set(xc, yc);
    //투명배경
    grp.z_bg = uigame.add.sprite(0, 0, 'white1x1');
    grp.z_bg.name = 'bguipause';
    grp.addChild(grp.z_bg);
    grp.z_bg.inputEnabled = true;
    grp.z_bg.width = 720;
    grp.z_bg.height = 1280;
    grp.z_bg.tint = ColorSet.black;
    grp.z_bg.alpha = 0.5;
    grp.z_bg.anchor.setTo(0.5, 0.5);
    //투명배경

    grp.z_dlg = uigame.add.group();
    grp.z_dlg.position.set(0, 0);
    grp.addChild(grp.z_dlg);

    if(uppername==='uigameover') { //게임오버용bg
        //전체판(1개짜리)
        grp.z_dlgall = uigame.add.sprite(0, 0, 'atlas_bb_ui_dlg-0', 'popup_over.png'); //기본위치로 사용됨
        grp.z_dlgall.anchor.setTo(0.5, 0.5);
        grp.z_dlgall.name = 'dlgbg9';
        grp.z_dlg.addChild(grp.z_dlgall); //debug_Sprite(grp.z_dlgall);
        grp.z_dlgall.alpha =1;

        grp.z_dlgmelt = uigame.add.sprite(0, -260, 'atlas_bb_ui_dlg-0','popup_over_deco.png');
        grp.z_dlgmelt.anchor.setTo(0.5, 0.5);
        grp.z_dlgmelt.name = 'dlgbg9';
        grp.z_dlgmelt.alpha=1;
        grp.z_dlg.addChild(grp.z_dlgmelt); //debug_Sprite(grp.z_dlgmelt);
    }else if(uppername==='uistart'){ //레벨클리어배경,레벨스타트배경
        //(2개짜리-노말)
        grp.z_normalbg = uigame.add.group();
        grp.z_dlg.addChild(grp.z_normalbg);
        //하판
        grp.z_dlgdown = uigame.add.sprite(0, 54, 'atlas_bb_ui_dlg-0', 'popup_start_bottom.png');
        grp.z_dlgdown.anchor.setTo(0.5, 0.5);
        grp.z_dlgdown.name = 'dlgbg9';
        grp.z_normalbg.addChild(grp.z_dlgdown); //debug_Sprite(grp.z_dlgdown);
        grp.z_dlgdown.alpha=1;
        //상판
        grp.z_dlgtop = uigame.add.sprite(0, -223, 'atlas_bb_ui_dlg-0', 'popup_start_top.png');
        grp.z_dlgtop.anchor.setTo(0.5, 1);
        grp.z_dlgtop.name = 'z_dlgtop';
        grp.z_normalbg.addChild(grp.z_dlgtop); //debug_Sprite(grp.z_dlgtop);
        grp.z_dlgtop.alpha=1;

        //(2개짜리-보너스)
        grp.z_bonusbg = uigame.add.group();
        grp.z_dlg.addChild(grp.z_bonusbg);
        //하판
        grp.z_dlgdown_b = uigame.add.sprite(0, 54+3, 'atlas_bb_ui_dlg-0', 'popup_bonus_bottom.png');
        grp.z_dlgdown_b.anchor.setTo(0.5, 0.5);
        grp.z_dlgdown_b.name = 'dlgbg9_b';
        grp.z_bonusbg.addChild(grp.z_dlgdown_b); //debug_Sprite(grp.z_dlgdown);
        grp.z_dlgdown_b.alpha=1;
        //상판
        grp.z_dlgtop_b = uigame.add.sprite(0, -223+5, 'atlas_bb_ui_dlg-0', 'popup_bonus_top.png');
        grp.z_dlgtop_b.anchor.setTo(0.5, 1);
        grp.z_dlgtop_b.name = 'z_dlgtop_b';
        grp.z_bonusbg.addChild(grp.z_dlgtop_b); //debug_Sprite(grp.z_dlgtop);
        grp.z_dlgtop_b.alpha=1;

    }else if(uppername==='uicontinue'){ //컨티뉴배경
        //(2개짜리)
        //하판
        grp.z_dlgdown = uigame.add.sprite(0, 54, 'atlas_bb_ui_dlg-0', 'popup_start_bottom.png');
        grp.z_dlgdown.anchor.setTo(0.5, 0.5);
        grp.z_dlgdown.name = 'dlgbg9';
        grp.z_dlg.addChild(grp.z_dlgdown); //debug_Sprite(grp.z_dlgdown);
        grp.z_dlgdown.alpha=1;
        //상판
        grp.z_dlgtop = uigame.add.sprite(0, -223, 'atlas_bb_ui_dlg-0', 'popup_start_top.png');
        grp.z_dlgtop.anchor.setTo(0.5, 1);
        grp.z_dlgtop.name = 'z_dlgtop';
        grp.z_dlg.addChild(grp.z_dlgtop); //debug_Sprite(grp.z_dlgtop);
        grp.z_dlgtop.alpha=1;
    }else if(uppername==='uihelp') { //도움말
        //전체판(1개짜리)
        grp.z_dlgdown = uigame.add.sprite(0, 80, 'atlas_bb_ui_dlg-0', 'popup_shop_bottom.png');
        grp.z_dlgdown.anchor.setTo(0.5, 0.5);
        grp.z_dlgdown.name = 'dlgbg9';
        grp.z_dlg.addChild(grp.z_dlgdown); //debug_Sprite(grp.z_dlgdown);
        grp.z_dlgdown.alpha =1;

        //상판
        grp.z_dlgtop = uigame.add.sprite(0, -310, 'atlas_bb_ui_dlg-0', 'popup_item_top.png');
        grp.z_dlgtop.anchor.setTo(0.5, 1);
        grp.z_dlgtop.name = 'z_dlgtop';
        grp.z_dlg.addChild(grp.z_dlgtop); //debug_Sprite(grp.z_dlgtop);
        grp.z_dlgtop.alpha=1;


    }
    return grp;
}
function CreateUIReadyG0() { //레디고
    var grp = uigame.add.group();
    grp.z_spine=uigame.add.spine(360, 640, "ready_go");
    grp.addChild(grp.z_spine);
    spn_readygo = grp.z_spine; //전역변수에 저장

    grp.z_spine.state.onComplete = function (trackIndex, count) {
        switch (trackIndex) {
            case 0:
                if(dm) console.log("spn_readygo.trackindex:0");
                //grp.visible = false; //다시 안나오는 문제가 잇어서 주석처리
                break;
            case 1:
                if(dm) console.log("spn_readygo.trackindex:1");
                break;
        }
    };

    return grp;
}
function CreateUIDropStar() { //별사용 ////empty, heart_bomb_out

    var grp = uigame.add.group();

    grp.z_spine=uigame.add.spine(0, 0, "star_bomb");
    grp.addChild(grp.z_spine);
    spn_dropstar = grp.z_spine; //전역변수에 저장

    grp.z_spine.state.onComplete = function (trackIndex, count) {
        switch (trackIndex) {
            case 0:
                if(dm) console.log("star_bomb.trackindex:0");
                //grp.visible = false;
                break;
            case 1:
                if(dm) console.log("star_bomb.trackindex:1");
                break;
        }
    };

    return grp;
}

function CreateUIDropHeart() { //하트사용 ////empty, heart_bomb_out
    var grp = uigame.add.group();

    grp.z_spine=uigame.add.spine(0, 0, "heart_bomb");
    grp.addChild(grp.z_spine);
    //spn_dropheart = grp.z_spine; //전역변수에 저장

    grp.z_spine.state.onComplete = function (trackIndex, count) {
        switch (trackIndex) {
            case 0:
                if(dm) console.log("star_bomb.trackindex:0");
                //grp.visible = false;
                break;
            case 1:
                if(dm) console.log("star_bomb.trackindex:1");
                break;
        }
    };
    return grp;
}

function CreateUIStartLevel() { //레벨시작시 별보여주는 창
    var grp = _createUIDlgBg_bb('uistart');
    //var grp = _createUIDlgBg_bb('popup_over.png', 'popup_start_top.png');

    grp.z_startmode="normal";

    grp.z_normal = uigame.add.group();
    grp.z_dlg.addChild(grp.z_normal);

    grp.z_bonus = uigame.add.group();
    grp.z_dlg.addChild(grp.z_bonus);

    //미니맵배경
    grp.z_minibg = uigame.add.sprite(0, -53, 'atlas_bb_ui_dlg-0', 'start_map_bg_1.png');
    grp.z_minibg.anchor.setTo(0.5, 0.5);
    grp.z_minibg.name = 'z_minibg';
    grp.z_normal.addChild(grp.z_minibg); //debug_Sprite(grp.z_minibg);

    //미니맵모노 색상
    // grp.z_mini = uigame.add.sprite(0, 0, '001.png');
    // grp.z_mini.scale.setTo(2.75, 2.75);//grp.z_mini.scale.setTo(5.5, 5.5);//미니맵사이즈 118x102,미니맵스케일
    // grp.z_mini.anchor.setTo(0.5, 0.5);
    // grp.z_mini.name = 'z_minimap';
    // grp.z_mini.loadTexture('299.png');  //<----------------미니맵
    // grp.z_mini.scale.setTo(6, 6); //미니맵사이즈 //미니맵스케일
    // grp.z_mini.tint = ColorSet.red;
    // grp.z_mini.alpha = 0.55;
    // grp.z_minibg.addChild(grp.z_mini); //debug_Sprite(grp.z_minibg);
    //미니맵
    grp.z_mini = uigame.add.sprite(0, 0, '001.png');
    grp.z_mini.scale.setTo(2.75, 2.75);//grp.z_mini.scale.setTo(5.5, 5.5);//미니맵사이즈 118x102,미니맵스케일
    grp.z_mini.anchor.setTo(0.5, 0.5);
    grp.z_mini.name = 'z_minimap';
    grp.z_mini.loadTexture('299.png');                                                                        //<----------------미니맵
    grp.z_minibg.addChild(grp.z_mini); //debug_Sprite(grp.z_minibg);

    //별3개배경
    grp.z_star1 = uigame.add.sprite(-150, -371, 'atlas_bb_ui-0', 'start_star_1_empty.png');
    grp.z_star1.anchor.setTo(0.5, 0.5);
    grp.z_star1.name = 'z_star1';
    grp.z_normal.addChild(grp.z_star1); //debug_Sprite(grp.z_star1);
    grp.z_star3 = uigame.add.sprite(150, -371, 'atlas_bb_ui-0', 'start_star_3_empty.png');
    grp.z_star3.anchor.setTo(0.5, 0.5);
    grp.z_star3.name = 'z_star3';
    grp.z_normal.addChild(grp.z_star3); //debug_Sprite(grp.z_star3);
    grp.z_star2 = uigame.add.sprite(0, -393, 'atlas_bb_ui-0', 'start_star_2_empty.png');
    grp.z_star2.anchor.setTo(0.5, 0.5);
    grp.z_star2.name = 'z_star2';
    grp.z_normal.addChild(grp.z_star2); //debug_Sprite(grp.z_star2);
    //별3개
    grp.z_star1y = uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'start_star_1.png');
    grp.z_star1y.anchor.setTo(0.5, 0.5);
    grp.z_star1y.name = 'z_star1';
    grp.z_star1.addChild(grp.z_star1y); //debug_Sprite(grp.z_star1y);
    grp.z_star3y = uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'start_star_3.png');
    grp.z_star3y.anchor.setTo(0.5, 0.5);
    grp.z_star3y.name = 'z_star3';
    grp.z_star3.addChild(grp.z_star3y); //debug_Sprite(grp.z_star3y);
    grp.z_star2y = uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'start_star_2.png');
    grp.z_star2y.anchor.setTo(0.5, 0.5);
    grp.z_star2y.name = 'z_star2';
    grp.z_star2.addChild(grp.z_star2y); //debug_Sprite(grp.z_star2y);

    //스테이지 넘버 생성
    grp.z_stageNumber = createUITextAndNumber(52, -244, 61, 0, " STAGE", style_bb_stage_start, style_bb_stage_start,  1, 0.5, 0.5, 0.5, false);
    grp.z_normal.addChild(grp.z_stageNumber);//debug_Sprite(grp.z_stageNumber);
    grp.z_stageNumber.z_number.text = "1"; //랜덤(0~3포함));<----------------레벨번호

    //스코어배경
    grp.z_scorebg = createUI9a('atlas_bb_ui_dlg-0', 'start_score_bg.png', 0, 141, 470, 80, 46, 46, 20, 20);
    grp.z_normal.addChild(grp.z_scorebg); //debug_Sprite(grp.z_scorebg);
    //스코어 넘버 생성
    grp.z_scoreNumber = createUITextAndNumber(140, 3, 0, 0, "BASIC MODE", style_bb_score_start, style_bb_number_start,  1, 0.5, 1, 0.5, false);
    grp.z_scorebg.addChild(grp.z_scoreNumber);//debug_Sprite(grp.z_scoreNumber);
    grp.z_scoreNumber.z_number.text = "";
    grp.z_scoreNumber.z_number.z_max=0;
    grp.z_scoreNumber.z_number.z_num=0;

    //보너스모드-타이틀
    grp.z_bonus_title = uigame.add.sprite(0, -335, 'atlas_bb_ui-0', 'bouns_title.png');
    grp.z_bonus_title.anchor.setTo(0.5, 0.5);
    grp.z_bonus.addChild(grp.z_bonus_title);

    //보너스스테이지 넘버 생성
    grp.z_stageNumber_b= createUITextAndNumber(52, -244, 61, 0, " STAGE", style_bb_stage_start_b, style_bb_stage_start_b,  1, 0.5, 0.5, 0.5, false);
    grp.z_bonus.addChild(grp.z_stageNumber_b);//debug_Sprite(grp.z_stageNumber);
    grp.z_stageNumber_b.z_number.text = "1"; //랜덤(0~3포함));<----------------레벨번호
    grp.z_stageNumber_b.alpha=0;

    //보너스모드_미니맵
    grp.z_minibg_b = uigame.add.sprite(0, -63, 'atlas_bb_ui-0', 'bonus_image.png');
    grp.z_minibg_b.anchor.setTo(0.5, 0.5);
    grp.z_minibg_b.name = 'z_minibg';
    grp.z_bonus.addChild(grp.z_minibg_b); //debug_Sprite(grp.z_minibg);

    //보너스모드_스코어배경
    grp.z_scorebg_b = createUI9a('atlas_bb_ui-0', 'start_score_bg_bonus.png', 0, 141, 470, 80, 46, 46, 20, 20);
    grp.z_bonus.addChild(grp.z_scorebg_b); //debug_Sprite(grp.z_scorebg);
    grp.z_bonus_hminmap = uigame.add.sprite(-60-10, 0, 'atlas_bb_ui-0', 'result_bonus_block.png');
    grp.z_bonus_hminmap.anchor.setTo(0.5, 0.5);//debug_Sprite(grp.z_bonus_hminmap);
    grp.z_scorebg_b.addChild(grp.z_bonus_hminmap);
    //보너스모드_넘버 생성
    grp.z_scoreNumber_b = createUITextAndNumber(60+20, 3, 0, 7, "14", style_heartcount1_bonus, style_heartcount2_bonus,  1, 0.5, 0, 0.5, false);
    grp.z_scorebg_b.addChild(grp.z_scoreNumber_b);//debug_Sprite(grp.z_scoreNumber);
    grp.z_scoreNumber_b.z_number.text = "/99";                                                                 //<--------------스코어

    grp.z_scoreNumber_b.z_number.z_max=0;
    grp.z_scoreNumber_b.z_number.z_num=0;

    //보너스모드-모든 하트 클리어
    grp.z_allcollected = uigame.add.text(0, 5, "ALL COLLECTED", style_heartcount1_bonus);
    grp.z_allcollected.anchor.setTo(0.5,0.5);
    grp.z_scorebg_b.addChild(grp.z_allcollected);

    //예스버튼
    grp.z_btyes = createbtn(createUI9a('atlas_bb_ui-0', 'btn_yes_message.png', 0, 0, 210, 95, 45, 45, 45, 45),
        uigame.add.text(0, 0,  GetString("yes"), style_bb_yes),
        undefined,//uigame.add.sprite(0, -5, 'atlas_bb_ui-0', "select_page_1.png"),
        122, 241,
        style_bb_lv1
    );//debug_Sprite(grp.z_btyes);
    grp.z_dlg.addChild(grp.z_btyes);


    //노버튼
    grp.z_btno = createbtn(createUI9a('atlas_bb_ui-0', 'btn_no_message.png', 0, 0, 210, 95, 45, 45, 45, 45),
        uigame.add.text(0, 0,  GetString("no"), style_bb_no),
        undefined,//uigame.add.sprite(0, -5, 'atlas_bb_ui-0', "select_page_1.png"),
        -122, 241,
        style_bb_lv1
    );//debug_Sprite(grp.z_btno);
    grp.z_dlg.addChild(grp.z_btno);

    //하트소모연출리소스 //레벨시작창
    grp.z_spnHeart = CreateUIDropHeart();//하트파괴
    grp.z_spnHeart.visible = false;//debug_Sprite(this.uiDropStar);
    grp.z_spnHeart.x = 550;
    grp.z_spnHeart.y = 850;
    //하트소모연출리소스 //레벨시작창

    //에스피마스크-레벨시작시
    grp.z_mask = uigame.add.sprite(0, 0, 'white1x1');
    grp.z_mask.name = 'spMask_selectlevel';
    grp.z_mask.width = 720;
    grp.z_mask.height = 1280;
    grp.z_mask.tint = ColorSet.blue;
    grp.z_mask.alpha = 0;//0.555;
    grp.z_mask.anchor.setTo(0.5, 0.5);
    grp.z_mask.inputEnabled = true;
    grp.addChild(grp.z_mask);
    grp.z_mask.visible = false;
    //에스피마스크-레벨시작시

    // grp.z_btyes.fnok = function () { };

    grp.z_btno.fnok = function () {
        if(kData.bSoundSE) SE_Popup_OFF.play();
        if(false) {
            var dlg = grp.z_dlg;
            var bg = grp.z_bg;

            onFadeout(bg, 0.75);
            onFadeoutScale(dlg, function () {
                grp.visible = false;
                grp.z_mask.visible = false;
                uigame.state.states.game.onGameOver.dispatch();
                uigame.state.game.state.start('menu');
            });
            grp.z_mask.visible = true;
        }
        // //치트코드 -- 모든레벨 오픈 in CreateUIStartLevel
        // kData.userData = []; //in uiSelectLevel.onUpdatePage //cheat Mode
        // for (var i = LEVEL_MAX-1; i >= 0; -- i) kData.userData[i] = 3;
        // kData.userData[LEVEL_MAX-1]=0; //0레벨 오픈
        // networkManager.ForcedSaveData();
        // //치트코드 -- 모든레벨 오픈 in CreateUIStartLevel

        //
        //uigame.state.states.game.onGameOver.dispatch();
        uigame.state.game.state.start('menu');

    };
    grp.onSetSt = function (lvidx, time, starcount) { //수치들 입력해두기

        var sends={};

        if((lvidx + 1) % LV4x4 === 0) isBonusLvId = true;
        else isBonusLvId = false;

        if(isBonusLvId===true){
            if(kData.userData[lvidx+1]===-1) {
                kData.userData[lvidx+1]=0;
				if(nvmode===true){
				    sends.userData=kData.userData;//네이버저장하기
	                if(typeof GamePocket.Sdk !== 'undefined') {
	                    networkManager.AppDataPut(JSON.stringify(sends));
	                }
				}else{
                	networkManager.ForcedSaveData(); //처리 //CreateUIStartLevel.onSetSt
				}

            }
        }



        if(modeOption[0]===2) grp.z_startmode = "bonus";
        else grp.z_startmode = "normal";

        if(dm) console.log("isBonusLvId:"+isBonusLvId+", ");

        //보너스모드면 시작시 서버저장하트갯수 출력
        if(modeOption[0]===2){                        //보너스모드
            if(kData.userData[lvidx] < modeOption[2]){ //레벨하트갯수
                //grp.z_scoreNumber_b.z_number.text = kData.userData[lvidx];
                grp.z_bonus_hminmap.visible=true;
                grp.z_scoreNumber_b.visible=true;
                grp.z_scoreNumber_b.z_number.text = "/"+modeOption[2];
                grp.z_scoreNumber_b.text = kData.userData[lvidx];
                grp.z_allcollected.visible = false;

                grp.z_cleared=false;
            }else{
                grp.z_bonus_hminmap.visible=false;
                grp.z_scoreNumber_b.visible=false;
                //보너스모드-모든 하트 클리어
                grp.z_allcollected.visible=true;
                grp.z_cleared=true;
            }
        }

        switch (starcount) {
            case 0:
                grp.z_star1y.visible = false;
                grp.z_star2y.visible = false;
                grp.z_star3y.visible = false;
                break;
            case 1:
                grp.z_star1y.visible = true;
                grp.z_star2y.visible = false;
                grp.z_star3y.visible = false;
                break;
            case 2:
                grp.z_star1y.visible = true;
                grp.z_star2y.visible = true;
                grp.z_star3y.visible = false;
                break;
            case 3:
                grp.z_star1y.visible = true;
                grp.z_star2y.visible = true;
                grp.z_star3y.visible = true;
                break;
            default:
                break;
        }

        //grp.z_stageNumber.z_number.text = lvidx+1; //1~16, 17~32, ...
        //페이크 레벨번호 가져오기
        grp.z_stageNumber.z_number.text = lvidx + 1 - Math.floor(lvidx / LV4x4); //0~15,16, 16~30,31, ...
        grp.z_stageNumber_b.z_number.text = lvidx + 1 - Math.floor(lvidx / LV4x4); //0~15,16, 16~30,31, ...




        var ss = number_pad1(lvidx+1, 3) + ".png";
        grp.z_mini.loadTexture(ss);

        grp.z_scoreNumber.z_number.text = "";
        grp.z_scoreNumber.z_number.z_max = "";

        switch(grp.z_startmode){
            case "normal":
                grp.z_normalbg.visible=true;
                grp.z_normal.visible=true;
                grp.z_bonusbg.visible=false;
                grp.z_bonus.visible=false;
                break;
            case "bonus":
                grp.z_normalbg.visible=false;
                grp.z_normal.visible=false;
                grp.z_bonusbg.visible=true;
                grp.z_bonus.visible=true;
                break;
        }

    };
    grp.onActiveSt = function () { //트윈으로 등장하기
        if(!SE_HurryUp.isPlaying) {
            SE_HurryUp.play();
            SE_HurryUp.mute=true;
        }
        if(false && retrymode){
            //리트라이삭제 //--리트라이모드진입시---창이 안나오고 게임 진입
            //리트라이삭제 retrymode=false;
            //리트라이삭제 //스타트화면 닫기용 트윈 오브젝트
            //리트라이삭제 var stgame = uigame.state.states.game;
            //리트라이삭제 TweenMax.delayedCall(0.25,function() {
            //리트라이삭제     stgame.uiController.uiStartLevel.visible = false;
            //리트라이삭제     stgame.uiController.uiStartLevel.z_mask.visible = false;
            //리트라이삭제
            //리트라이삭제     TweenMax.delayedCall(0.5,function() { stgame.massiveController.introShow(); });
            //리트라이삭제     //레디고플레이
            //리트라이삭제
            //리트라이삭제     stgame.uiController.uiReadyGo.visible = true;
            //리트라이삭제     stgame.uiController.uiReadyGo.z_spine.setAnimationByName(1, "ready_go_ani", false); //리트라이 모드 in uistartlevel.onActiveLv
            //리트라이삭제     stgame.uiController.uiReadyGo.z_spine.addAnimationByName(0, "empty", false);
            //리트라이삭제     //
            //리트라이삭제
            //리트라이삭제
            //리트라이삭제     //stgame.massiveController.introShow();
            //리트라이삭제 });
            //리트라이삭제
            //리트라이삭제 //시작창 사라진 후, 인트로 시작
            //리트라이삭제 TweenMax.delayedCall(0.1,function(){
            //리트라이삭제     stgame.gameBegun = true;
            //리트라이삭제     //uigame.state.states.game.gameBegun = true;
            //리트라이삭제     uimode = uimodeset.ingame;
            //리트라이삭제     // uigame.state.states.game.onGameBegin.dispatch();
            //리트라이삭제     stgame.onGameBegin.dispatch();
            //리트라이삭제     timer20sec=alonemode?9:time20secMax;
            //리트라이삭제 });//delay
            //리트라이삭제 //--리트라이모드진입시---
        }else {
            //--일반모드진입시-------
            //트윈버젼
            var dlg = grp.z_dlg;
            var bg = grp.z_bg;

            selectBGM("BGM_ALL", false);

            grp.visible = true;
            grp.z_mask.visible = true; //시작


            //트윈버젼
            if(kData.bSoundSE) SE_Popup_ON.play();
            onFadein(bg, 0.75);
            onFadeinScale(dlg, function () {
                TweenMax.delayedCall(0.3, function () {
                    grp.z_mask.visible = false;

                    //if(bSoundSE) SE_Win.play();//트윈사운드

                    if(modeOption[0]===2) {
                    }else{

                        //게임 시작전 상단메뉴 업데이트
                        var ui = uigame.state.states.game.uiController.uiMain;
                        ui.z_prog.onUpdateProg(playtime_clock / playtime_clock_max); //in onActiveSt
                        var t = float2int(playtime_clock);
                        ui.z_prog.onUpdateTime(convertTimeFormatFromSec(t - 1)); //항상 타임+1로 처리하는데, 여기서만 +1값이 나와서
                        //게임 시작전 상단메뉴 업데이트

                        //메인메뉴 레벨 표시
                        //ui.z_stageName.z_number.text = (curLevel+1)+" ";//this.stageText.text = (curLevel+1)+" ";
                        ui.z_stageName.z_number.text = (curLevelFake)+" ";//this.stageText.text = (curLevel+1)+" ";
                        //메인메뉴 레벨 표시
                    }

                });
            });
            //별-----------
            //스코어트윈, 텍스트트윈,
            if(false) {
                // grp.z_scoreNumber.z_number.text = "0";
                // TweenMax.fromTo(grp.z_scoreNumber.z_number,
                //     0.5,
                //     {
                //         z_num: 0
                //     }, {
                //         z_num: grp.z_scoreNumber.z_number.z_max,
                //         ease: Linear.easeNone,//ease:Power1.easeOut,//ease: Bounce.easeOut,//ease: Elastic.easeOut,
                //         //yoyo:true,
                //         //repeat:1,
                //         onComplete: function () {
                //         },
                //         onStart: function () {
                //         },
                //         onUpdate: function () {
                //             grp.z_scoreNumber.z_number.text = getMoneyFormatFromNum(grp.z_scoreNumber.z_number.z_num);
                //         },
                //         delay: 0.2
                //     }
                // );
            }
            if(true) {
                //grp.z_scoreNumber.z_number.z_num = grp.z_scoreNumber.z_number.z_max;
                //grp.z_scoreNumber.z_number.text = getMoneyFormatFromNum(grp.z_scoreNumber.z_number.z_num);
            }
            //--일반모드진입시-------
        }



    };//grp.onActiveCl

    return grp;
}

function CreateUIClearLevel() { //레벨1개 클리어시 //클리어창//
    var grp = _createUIDlgBg_bb('uistart');//'uiclear'

    //grp.z_clearmode="normal"; //'bonus'
    grp.z_cleared=true;
    
    grp.z_normal = uigame.add.group();
    grp.z_dlg.addChild(grp.z_normal);

    grp.z_bonus = uigame.add.group();
    grp.z_dlg.addChild(grp.z_bonus);

    //노말모드-별3개배경
    grp.z_star1 = uigame.add.sprite(-150, -371, 'atlas_bb_ui-0', 'start_star_1_empty.png');
    grp.z_star1.anchor.setTo(0.5, 0.5);
    grp.z_star1.name = 'z_star1';
    grp.z_normal.addChild(grp.z_star1); //debug_Sprite(grp.z_star1);
    grp.z_star3 = uigame.add.sprite(150, -371, 'atlas_bb_ui-0', 'start_star_3_empty.png');
    grp.z_star3.anchor.setTo(0.5, 0.5);
    grp.z_star3.name = 'z_star3';
    grp.z_normal.addChild(grp.z_star3); //debug_Sprite(grp.z_star3);
    grp.z_star2 = uigame.add.sprite(0, -393, 'atlas_bb_ui-0', 'start_star_2_empty.png');
    grp.z_star2.anchor.setTo(0.5, 0.5);
    grp.z_star2.name = 'z_star2';
    grp.z_normal.addChild(grp.z_star2); //debug_Sprite(grp.z_star2);
    // //노말모드 별3개
    // grp.z_star1y = uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'start_star_1.png');
    // grp.z_star1y.anchor.setTo(0.5, 0.5);
    // grp.z_star1y.name = 'z_star1';
    // grp.z_star1.addChild(grp.z_star1y); //debug_Sprite(grp.z_star1y);
    // grp.z_star3y = uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'start_star_3.png');
    // grp.z_star3y.anchor.setTo(0.5, 0.5);
    // grp.z_star3y.name = 'z_star3';
    // grp.z_star3.addChild(grp.z_star3y); //debug_Sprite(grp.z_star3y);
    // grp.z_star2y = uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'start_star_2.png');
    // grp.z_star2y.anchor.setTo(0.5, 0.5);
    // grp.z_star2y.name = 'z_star2';
    // grp.z_star2.addChild(grp.z_star2y); //debug_Sprite(grp.z_star2y);

    //노말모드-별애니
    grp.z_spine_star=uigame.add.spine(0, +60, "popup_star_ani");
    grp.z_normal.addChild(grp.z_spine_star);
    spn_star = grp.z_spine_star; //전역변수에 저장

    grp.z_spine_star.state.onComplete = function (trackIndex, count) {
        switch (trackIndex) {
            case 0:
                if(dm) console.log("spn_readygo.trackindex:0");
                //grp.visible = false; //다시 안나오는 문제가 잇어서 주석처리
                break;
            case 1:
                if(dm) console.log("spn_readygo.trackindex:1");
                break;
        }
    };

    //공용-클리어 메세지
    grp.z_spine_clear=uigame.add.spine(0, +60, "popup_star_ani");
    grp.z_dlg.addChild(grp.z_spine_clear);
    spn_clear = grp.z_spine_clear; //전역변수에 저장

    grp.z_spine_clear.state.onComplete = function (trackIndex, count) {
        switch (trackIndex) {
            case 0:
                if(dm) console.log("spn_readygo.trackindex:0");
                //grp.visible = false; //다시 안나오는 문제가 잇어서 주석처리
                break;
            case 1:
                if(dm) console.log("spn_readygo.trackindex:1");
                break;
        }
    };

    //보너스모드-타이틀
    grp.z_bonus_title = uigame.add.sprite(0, -335, 'atlas_bb_ui-0', 'bouns_title.png');
    grp.z_bonus_title.anchor.setTo(0.5, 0.5);
    grp.z_bonus.addChild(grp.z_bonus_title);


    //노말모드-스테이지숫자
    grp.z_stageNumber = createUITextAndNumber(52, -244, 61, 0, " STAGE", style_bb_stage_start, style_bb_stage_start,  1, 0.5, 0.5, 0.5, false);
    grp.z_normal.addChild(grp.z_stageNumber);//debug_Sprite(grp.z_stageNumber);
    grp.z_stageNumber.z_number.text = "1"; //랜덤(0~3포함));<----------------레벨번호

    //보너스모드-스테이지숫자
    grp.z_stageNumber_b = createUITextAndNumber(52, -244, 61, 0, " STAGE", style_bb_stage_start_b, style_bb_stage_start_b,  1, 0.5, 0.5, 0.5, false);
    grp.z_bonus.addChild(grp.z_stageNumber_b);//debug_Sprite(grp.z_stageNumber);
    grp.z_stageNumber_b.z_number.text = "1"; //랜덤(0~3포함));<----------------레벨번호
    grp.z_stageNumber_b.alpha=0;

    //노말모드-스코어배경
    grp.z_scorebg = createUI9a('atlas_bb_ui_dlg-0', 'start_score_bg.png', 0, 125, 470, 80, 46, 46, 20, 20);
    grp.z_normal.addChild(grp.z_scorebg); //debug_Sprite(grp.z_scorebg);
    //노말모드-스코어 넘버 생성
    grp.z_scoreNumber = createUITextAndNumber(-41, 3, 220, 0, "TIME ", style_bb_score_start, style_bb_number_start,  1, 0.5, 1, 0.5, false);
    grp.z_scorebg.addChild(grp.z_scoreNumber);//debug_Sprite(grp.z_scoreNumber);
    grp.z_scoreNumber.z_number.text = "8888";                                                                 //<--------------스코어
    grp.z_scoreNumber.z_number.z_num=0;
    grp.z_scoreNumber.z_number.z_max=0;

    //보너스모드-스코어배경
    grp.z_scorebg_b = createUI9a('atlas_bb_ui-0', 'start_score_bg_bonus.png', 0, 125, 470, 80, 46, 46, 20, 20);
    grp.z_bonus.addChild(grp.z_scorebg_b); //debug_Sprite(grp.z_scorebg);
    grp.z_bonus_hminmap = uigame.add.sprite(-60-10, 124, 'atlas_bb_ui-0', 'result_bonus_block.png');
    grp.z_bonus_hminmap.anchor.setTo(0.5, 0.5);//debug_Sprite(grp.z_bonus_hminmap);
    grp.z_bonus.addChild(grp.z_bonus_hminmap);


    //보너스모드-스코어 넘버 생성
    grp.z_scoreNumber_b = createUITextAndNumber(60+20, 3, 0, 7, "14", style_heartcount1_bonus, style_heartcount2_bonus,  1, 0.5, 0, 0.5, false);
    grp.z_scorebg_b.addChild(grp.z_scoreNumber_b);//debug_Sprite(grp.z_scoreNumber);
    grp.z_scoreNumber_b.z_number.text = "/99";                                                                 //<--------------스코어
    grp.z_scoreNumber_b.z_number.z_num=0;
    grp.z_scoreNumber_b.z_number.z_max=0;

    //보너스모드-모든 하트 클리어
    grp.z_allcollected = uigame.add.text(0, 5, "ALL COLLECTED", style_heartcount1_bonus);
    grp.z_allcollected.anchor.setTo(0.5,0.5);
    grp.z_scorebg_b.addChild(grp.z_allcollected);



    //예스버튼
    grp.z_btyes = createbtn(createUI9a('atlas_bb_ui-0', 'btn_yes_message.png', 0, 0,  210, 95, 45, 45, 45, 45),
        uigame.add.text(0, 0,  GetString("ok"), style_bb_yes),
        undefined,//uigame.add.sprite(0, -5, 'atlas_bb_ui-0', "select_page_1.png"),
        0, 241,
        style_bb_lv1
    );//debug_Sprite(grp.z_btyes);
    grp.z_dlg.addChild(grp.z_btyes);

    //다시하기버튼
    grp.z_btretry = createbtn(
        //createUI9a('atlas_bb_ui-0', 'btn_no_message.png', 0, 0, 238, 108, 45, 45, 45, 45),
        uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'btn_replay.png'),
        undefined,//uigame.add.text(0, 0,  GetString("no"), style_bb_no),
        undefined,//uigame.add.sprite(0, -5, 'atlas_bb_ui-0', "select_page_1.png"),
        -170, 241,
        style_bb_lv1
    );//debug_Sprite(grp.z_btno);
    grp.z_dlg.addChild(grp.z_btretry);

    //다음레벨버튼
    grp.z_btnext = createbtn(
        //createUI9a('atlas_bb_ui-0', 'btn_no_message.png', 0, 0, 238, 108, 45, 45, 45, 45),
        uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'btn_next.png'),
        undefined,//uigame.add.text(0, 0,  GetString("no"), style_bb_no),
        undefined,//uigame.add.sprite(0, -5, 'atlas_bb_ui-0', "select_page_1.png"),
        +170, 241,
        style_bb_lv1
    );//debug_Sprite(grp.z_btno);
    grp.z_dlg.addChild(grp.z_btnext);


    // //퍼펙트클리어시
    // grp.z_perfect = uigame.add.sprite(0, -144, 'atlas_bb_ui-0', 'result_perfect.png');
    // grp.z_perfect.anchor.setTo(0.5, 0.5);
    // grp.z_perfect.name = 'z_perfect';
    // grp.z_dlg.addChild(grp.z_perfect); //debug_Sprite(grp.z_perfect);
    // //그냥클리어시
    // grp.z_stage = uigame.add.sprite(0, -144, 'atlas_bb_ui-0', 'result_stage.png');
    // grp.z_stage.anchor.setTo(0.5, 0.5);
    // grp.z_stage.name = 'z_stage';
    // grp.z_dlg.addChild(grp.z_stage); //debug_Sprite(grp.z_stage);
    //
    // grp.z_selectMsg = grp.z_perfect;
    //
    // //클리어 글자그림
    // grp.z_clear = uigame.add.sprite(0, 0, 'atlas_bb_ui-0', 'result_clear.png');
    // grp.z_clear.anchor.setTo(0.5, 0.5);
    // grp.z_clear.name = 'z_clear';
    // grp.z_dlg.addChild(grp.z_clear); //debug_Sprite(grp.z_clear);

    //에스피마스크-레벨시작시
    grp.z_mask = uigame.add.sprite(0, 0, 'white1x1');
    grp.z_mask.name = 'spMask_selectlevel';
    grp.z_mask.width = 720;
    grp.z_mask.height = 1280;
    grp.z_mask.tint = ColorSet.blue;
    grp.z_mask.alpha = 0;//0.555;
    grp.z_mask.anchor.setTo(0.5, 0.5);
    grp.z_mask.inputEnabled = true;
    grp.addChild(grp.z_mask);
    grp.z_mask.visible = false;
    //에스피마스크-레벨시작시

    grp.z_btyes.fnok = function () { //클리어시
        if('menu'!== uigame.state.current) {
            var stgame = uigame.state.states.game;
            var dlg =stgame.uiController.uiClearLevel.z_dlg;
            var bg = stgame.uiController.uiClearLevel.z_bg;

            var mask = stgame.uiController.uiClearLevel.z_mask;
            mask.visible = true;

            TweenMax.delayedCall(0.5,function() {
                if(kData.bSoundSE) SE_Popup_OFF.play();
                onFadeout(bg, 0.75);
                onFadeoutScale(dlg, function () {
                    mask.visible = false;
                    ispausemode = false;//클리어창-오케이클릭->인풋잠금풀기
                    uimode = uimodeset.select;
                    uigame.state.game.state.start('menu');
                });
            });
        }//==menu
    };

    grp.z_btretry.fnok = function () {
        if(kData.bSoundSE) SE_Popup_OFF.play();
        ispausemode = false;//클리어창-리트라이클릭->인풋잠금풀기

        //var mask = stgame.uiController.uiClearLevel.z_mask;
       //mask.visible = true;

        if(false) {
            var dlg = grp.z_dlg;
            var bg = grp.z_bg;

            onFadeout(bg, 0.75);
            onFadeoutScale(dlg, function () {
                grp.visible = false;
                grp.z_mask.visible = false;
                ispausemode = false;
            });
           // grp.z_mask.visible = true;
        }
        uigame.state.states.game.onGameOver.dispatch();
        //setTimeout(function () {
        //uigame.state.states.menu.uiselectlevel.spMask_sel.visible=false;//더블클릭풀기
        uigame.state.start('game');
        //리트라이삭제 retrymode=true;
        //}, 250); //--> clickGameMode
    };

    grp.z_btnext.fnok = function () {
        if(false) { //예전백업
            if (kData.bSoundSE) SE_Popup_OFF.play();
            ispausemode = false;//클리어창-다음클릭->인풋잠금풀기
            // if (false) {
            //     var dlg = grp.z_dlg;
            //     var bg = grp.z_bg;
            //
            //     onFadeout(bg, 0.75);
            //     onFadeoutScale(dlg, function () {
            //         grp.visible = false;
            //         grp.z_mask.visible = false;
            //         ispausemode = false;
            //     });
            //     grp.z_mask.visible = true;
            // }
            uigame.state.states.game.onGameOver.dispatch();
            if (curLevel < LEVEL_MAX - 1) {
                curLevel += 1;
                uigame.state.start('game');
                gotonext=false;
            } else {
                //올클리어
            }
        }
        if(true) {
            grp.z_mask.visible = true;
            //다음칸 레벨이 별이 1개 이상이면
            var fastnext=true;
            if (curLevel < LEVEL_MAX - 1) {
                if (kData.userData[curLevel + 1] > -1) fastnext = true; //다음칸 열어 있음
                else fastnext = false;  //다음칸 닫혀있는 상태
                if(modeOption[0]===2) {
                    fastnext = false;
                }
            }else{
                //다 깬상태이므로
                //다시 제자리르 오픈
                //애초에 넥스트 버튼이 숨김 되서 안들어 온다.
            }
            
            
            if(fastnext) {
                if (kData.bSoundSE) SE_Popup_OFF.play();
                ispausemode = false;//클리어창-다음클릭->인풋잠금풀기

                uigame.state.states.game.onGameOver.dispatch();
                if (curLevel < LEVEL_MAX - 1) {
                    curLevel += 1;
                    uigame.state.start('game');
                } else {
                    //올클리어
                }
                gotonext = false;
            }else {
                if ('menu' !== uigame.state.current) {
                    gotonext = true;//btnext클릭시 다음레벨로 가는 매크로 시작
                    if(modeOption[0]===2) gotonext = false;
                    //레벨선택화면의 onUpdatePage 스파인 애니가 끝나면 스타트창이 나오게 진행
                    var stgame = uigame.state.states.game;
                    var dlg = stgame.uiController.uiClearLevel.z_dlg;
                    var bg = stgame.uiController.uiClearLevel.z_bg;
                    var bg = stgame.uiController.uiClearLevel.z_bg;
                    var mask = stgame.uiController.uiClearLevel.z_mask;
                    TweenMax.delayedCall(0.5, function () {
                        if (kData.bSoundSE) SE_Popup_OFF.play();
                        onFadeout(bg, 0.75);
                        onFadeoutScale(dlg, function () {
                            mask.visible = false;
                            ispausemode = false;//클리어창-오케이클릭->인풋잠금풀기
                            uimode = uimodeset.select;
                            uigame.state.game.state.start('menu');
                        });
                    });
                }//==menu
            }//fastnext==false

        }

    };

    grp.onSetCl = function (lvidx, time) {


        // if(clearmode===undefined) grp.z_clearmode ="normal"; //"bouns"
        // else grp.z_clearmode = clearmode;

        //보너스 모드 구별
        // if(modeOption[0]===2) grp.z_clearmode = "bonus";
        // else grp.z_clearmode = "normal";

        // if(cleared===undefined) grp.z_cleared=true;
        // else grp.z_cleared=cleared;

        //에러감시
        if(typeof(kData) === 'undefined') console.log("kData == undefined");
        if(typeof(kData.userData) === 'undefined') console.log("kData.userData == undefined, "+lvidx);
        if(typeof(kData.userData[lvidx]) === 'undefined') console.log("kData.userData[lvidx] == undefined, "+lvidx);
        if(typeof(modeOption) === 'undefined') console.log("modeOption == undefined");
        if(typeof(modeOption[2]) === 'undefined') console.log("modeOption[2]");
        //에러감시

        if(time==="") return;

        if(dm) console.log("kData.userData[lvidx]:"+kData.userData[lvidx]+", modeOption[2]:"+modeOption[2]);
        //보너스모드 클리어 구별
        // if(modeOption[0]===2                        //보너스모드
        // && kData.userData[lvidx] >= modeOption[2]){ //레벨하트갯수
        //     grp.z_cleared=true;
        //     grp.z_scoreNumber_b.z_number.text = kData.userData[lvidx];
        //     //grp.z_scoreNumber_b.z_number.text = modeOption[2];
        // }else{
        //     grp.z_cleared=false;
        // }

        if(modeOption[0]===2){
            //보너스모드시 - UI요소 활성화
            grp.z_normalbg.visible = false;
            grp.z_normal.visible = false;
            grp.z_bonusbg.visible = true;
            grp.z_bonus.visible = true;

            if(grp.z_cleared) {
                grp.z_bonus_hminmap.visible = false;
                grp.z_scoreNumber_b.visible = false;
                grp.z_allcollected.visible = true;
                grp.z_allcollected.alpha = 0;
            }else{
                grp.z_bonus_hminmap.visible = true;
                grp.z_scoreNumber_b.visible = true;
                grp.z_bonus_hminmap.alpha = 0;
                grp.z_scoreNumber_b.alpha = 0;
                grp.z_allcollected.visible = false;
            }
        }else{
            //일반모드 - UI요소 활성화
            if(kData.userData[lvidx]<curMyStars)kData.userData[lvidx] = curMyStars;

            grp.z_normalbg.visible = true;
            grp.z_normal.visible = true;
            grp.z_bonusbg.visible = false;
            grp.z_bonus.visible = false;
            grp.z_scoreNumber.z_number.text = time;
            grp.z_scoreNumber.alpha=0;//트윈하므로
        }

        if(modeOption[0]===2){
            //보너스 수집하트수 적으면
            if(kData.userData[lvidx] < modeOption[2]){ //레벨하트갯수
                //grp.z_scoreNumber_b.z_number.text = kData.userData[lvidx];
                grp.z_bonus_hminmap.visible=true;
                grp.z_scoreNumber_b.visible=true;
                grp.z_scoreNumber_b.z_number.text = "/"+modeOption[2];
                grp.z_scoreNumber_b.text = kData.userData[lvidx];
                grp.z_allcollected.visible = false;

                grp.z_cleared=false;
            }else{
            //보너스 수집하트수 완료시
                grp.z_bonus_hminmap.visible=false;
                grp.z_scoreNumber_b.visible=false;
                //보너스모드-모든 하트 클리어
                grp.z_allcollected.visible=true;
                grp.z_cleared=true;
            }
        }

        // switch (curMyStars) {
        //     case 0:
        //         grp.z_star1.visible = false;
        //         grp.z_star2.visible = false;
        //         grp.z_star3.visible = false;
        //         break;
        //     case 1:
        //         grp.z_star1.visible = true;
        //         grp.z_star2.visible = false;
        //         grp.z_star3.visible = false;
        //         break;
        //     case 2:
        //         grp.z_star1.visible = true;
        //         grp.z_star2.visible = true;
        //         grp.z_star3.visible = false;
        //         break;
        //     case 3:
        //         grp.z_star1.visible = true;
        //         grp.z_star2.visible = true;
        //         grp.z_star3.visible = true;
        //         break;
        //     default:
        //         break;
        // }
        grp.z_star1.visible = true;
        grp.z_star2.visible = true;
        grp.z_star3.visible = true;

        grp.z_stageNumber.z_number.text = lvidx + 1 - Math.floor(lvidx / LV4x4); //0~15,16, 16~30,31, ...
        grp.z_stageNumber_b.z_number.text = lvidx + 1 - Math.floor(lvidx / LV4x4); //0~15,16, 16~30,31, ...
    };
    grp.onActiveCl = function (perfect, other) {
        //kData.iHeart +=1;
        //MainUI.z_shopplus.onRefresh(); //선택창만 업데이트해준다
        MainUI.z_shopplus.txgold.text = getMoneyFormatFromNum(kData.iHeart);//shopplus증가
        if(kData.userData[curLevel]<curLives) {
            kData.userData[curLevel] = curLives;
        }
        // if(kData.userDataScore[curLevel]<curScore) {
        //     kData.userDataScore[curLevel] = curScore;
        // }


        var stars=0;
        for (var i = 0; i < LEVEL_MAX; i++) {
            var star3 = kData.userData[i];
            if( star3 !== -1           //클리어레벨인 경우
                && (i + 1) % LV4x4 !== 0){ //보너스아닌 경우
                stars += star3;
            }
        }
        //console.log("local->score: " +stars);
        if(nvmode===true) {
            if (typeof GamePocket.Sdk !== 'undefined') {
                //네이버랭킹기록
                networkManager.RankingAdd(stars, function () {
                        networkManager.RankingGet(function (_data) {
                                console.log("get->score: " + _data.score + ", group:" + _data.group);
                            }
                        );
                    } //fn
                );
                //네이버랭킹기록
                var sends = {};
                sends.userData = kData.userData;//네이버저장하기
                if (typeof GamePocket.Sdk !== 'undefined') {
                    networkManager.AppDataPut(JSON.stringify(sends));
                }
            }
        }else{
            networkManager.ForcedSaveData(); //처리 //in onActiveCl
        }
        ispausemode = true; //클리어창-뜰때->인풋잠금시작

        if(other) {
            //오버창확인사살
            TweenMax.killTweensOf(uigame.state.states.game.uiController.uiGameOver);
            uigame.state.states.game.uiController.uiGameOver.visible = false;
            //컨티뉴창확인사살
            TweenMax.killTweensOf(uigame.state.states.game.uiController.uiContinue);
            uigame.state.states.game.uiController.uiContinue.visible = false;
        }
        //perfect=false; //강제퍼펙트
        if(perfect===true){
            //grp.z_stage.visible =false;
            //grp.z_perfect.visible = true;
            //grp.z_selectMsg = grp.z_perfect;

            setTimeout(function () { //스파인애니생성
                spn_clear.visible = true;
                spn_clear.setAnimationByName(1, "popup_perfect_clear_in", false);
                spn_clear.addAnimationByName(0, "popup_perfect_clear_idle", false);
            }, 750);

        }else{
            //grp.z_stage.visible =true;
            //grp.z_perfect.visible = false;
            //grp.z_selectMsg = grp.z_stage;
            setTimeout(function () {
                spn_clear.visible = true;
                spn_clear.setAnimationByName(1, "popup_stage_clear_in", false);
                spn_clear.addAnimationByName(0, "popup_stage_clear_idle", false);
            }, 750);
        }


        //마지막스테이지면
        if(curLevel<LEVEL_MAX-1){
            grp.z_btnext.visible = true;
        }else{ //올클리어
            grp.z_btnext.visible = false;
        }

        //트윈버젼
        var dlg = grp.z_dlg;
        var bg = grp.z_bg;

        grp.visible = true;
        grp.z_mask.visible = true; //시작


        //트윈버젼
        if(kData.bSoundSE) SE_Popup_ON.play();
        onFadein(bg, 0.75);
        onFadeinScale(dlg, function () {
            TweenMax.delayedCall(0.5, function () {
                grp.z_mask.visible = false;
            });
        });

        if(modeOption[0]===2){
            //보너스모드이면, 완전하트 클리어시 All Collected 등장
            if(grp.z_cleared) {
                var _r =  grp.z_allcollected;
                TweenMax.set(_r, {alpha: 0});
                TweenMax.to(_r, 0.5, {
                    alpha: 1,
                    ease: Linear.easeNone,
                    onStart: function(){if(kData.bSoundSE) SE_Win.play();},//트윈사운드
                    delay:0.75
                });
            }else{                          // 하트그림과 14/99 텍스트 보여주기
                var _r1 = grp.z_bonus_hminmap;
                var _r2 = grp.z_scoreNumber_b;
                TweenMax.set(_r1, {alpha: 0});
                TweenMax.to(_r1, 0.5, {
                    alpha: 1,
                    ease: Linear.easeNone,
                    onStart: function(){if(kData.bSoundSE) SE_Win.play();},//트윈사운드
                    delay:0.75
                });
                TweenMax.set(_r2, {alpha: 0});
                TweenMax.to(_r2, 0.5, {
                    alpha: 1,
                    ease: Linear.easeNone,
                    delay:0.75
                });

            }
        }else{
            //노말모드이면 별애니등장, 시간결과등장
            var st=100;
            var ot=400;
            switch (curMyStars) {
                case 1:
                    setTimeout(function () { if (kData.bSoundSE) SE_Star_Get.play();}, st);//별획득//별박히는
                    setTimeout(function () {
                        spn_star.visible = true;
                        spn_star.setAnimationByName(1, "popup_result_star_idle_1", false);
                        spn_star.setAnimationByName(1, "popup_result_star_in_1", false);
                    }, 250);
                    break;

                case 2:
                    setTimeout(function () { if (kData.bSoundSE) SE_Star_Get.play();}, st);//별획득//별박히는
                    setTimeout(function () { if (kData.bSoundSE) SE_Star_Get.play();}, st+ot);//별획득//별박히는
                    setTimeout(function () {
                        spn_star.visible = true;
                        spn_star.setAnimationByName(1, "popup_result_star_idle_2", false);
                        spn_star.setAnimationByName(1, "popup_result_star_in_2", false);
                    }, 250);
                    break;

                case 3:
                    setTimeout(function () { if (kData.bSoundSE) SE_Star_Get.play();}, st);//별획득//별박히는
                    setTimeout(function () { if (kData.bSoundSE) SE_Star_Get.play();}, st+ot);//별획득//별박히는
                    setTimeout(function () { if (kData.bSoundSE) SE_Star_Get.play();}, st+ot+ot);//별획득//별박히는
                    setTimeout(function () {
                        spn_star.visible = true;
                        spn_star.setAnimationByName(1, "popup_result_star_idle_3", false);
                        spn_star.setAnimationByName(1, "popup_result_star_in_3", false);
                    }, 250);
                    break;
            }
            var _n =  grp.z_scoreNumber; //보통레벨 클리어 타임
            TweenMax.set(_n, {alpha: 0});
            TweenMax.to(_n, 0.5, {
                alpha: 1,
                ease: Linear.easeNone,
                onStart: function(){if(kData.bSoundSE) SE_Win.play();},//트윈사운드
                //onComplete: function () { combo.onHide(); },
                //onUpdate: function () { console.log(combo.y); }
                delay:0.75
            });
            //노말모드이면 별애니등장, 시간결과등장
        }
    };//grp.onActiveCl
    return grp;
}

function CreateUIGameOver() {
    var grp = _createUIDlgBg_bb('uigameover');
    //예스버튼
    grp.z_btyes = createbtn(createUI9a('atlas_bb_ui-0', 'btn_yes_message.png', 0, 0, 210, 95, 45, 45, 45, 45),
        uigame.add.text(0, 0,  GetString("ok"), style_bb_yes),
        undefined,//uigame.add.sprite(0, -5, 'atlas_bb_ui-0', "select_page_1.png"),
        0, 230,
        style_bb_lv1
    );//debug_Sprite(grp.z_btyes);
    grp.z_dlg.addChild(grp.z_btyes);

    //game글자
    grp.z_game_text = uigame.add.sprite(0, -112, 'atlas_bb_ui-0', 'over_game.png');
    grp.z_game_text.anchor.setTo(0.5, 0.5);
    grp.z_game_text.name = 'z_game_text';
    grp.z_dlg.addChild(grp.z_game_text); //debug_Sprite(grp.z_game_text);

    //over글자
    grp.z_over_text = uigame.add.sprite(0, 55, 'atlas_bb_ui-0', 'over_over.png');
    grp.z_over_text.anchor.setTo(0.5, 0.5);
    grp.z_over_text.name = 'z_over_text';
    grp.z_dlg.addChild(grp.z_over_text); //debug_Sprite(grp.z_over_text);

    //에스피마스크-레벨시작시
    grp.z_mask = uigame.add.sprite(0, 0, 'white1x1');
    grp.z_mask.name = 'spMask_selectlevel';
    grp.z_mask.width = 720;
    grp.z_mask.height = 1280;
    grp.z_mask.tint = ColorSet.blue;
    grp.z_mask.alpha = 0;//0.555;
    grp.z_mask.anchor.setTo(0.5, 0.5);
    grp.z_mask.inputEnabled = true;
    grp.addChild(grp.z_mask);
    grp.z_mask.visible = false;
    //에스피마스크-레벨시작시

    grp.z_btyes.fnok = function () { //게임오버시
        if('menu'!== uigame.state.current) {
            var stgame = uigame.state.states.game;
            var dlg =stgame.uiController.uiGameOver.z_dlg;
            var bg = stgame.uiController.uiGameOver.z_bg;


            TweenMax.delayedCall(0.5,function() {
                if(kData.bSoundSE) SE_Popup_OFF.play();
                onFadeout(bg, 0.75);
                onFadeoutScale(dlg, function () {
                    ispausemode=false;//게임오버 일시정지끄기
                    uimode = uimodeset.select;
                    uigame.state.game.state.start('menu');
                });
            });
        }
    };

    grp.onActiveGv = function (otheronoff) {
        if(otheronoff) {
            //클리어창확인사살
            TweenMax.killTweensOf(uigame.state.states.game.uiController.uiClearLevel);
            uigame.state.states.game.uiController.uiClearLevel.visible = false;
            //컨티뉴창확인사살
            TweenMax.killTweensOf(uigame.state.states.game.uiController.uiContinue);
            uigame.state.states.game.uiController.uiContinue.visible = false;
        }
        ispausemode=true;//게임오버 일시정지시작
        grp.z_game_text.visible = true;

        //트윈버젼
        var dlg = grp.z_dlg;
        var bg = grp.z_bg;

        grp.visible = true;
        grp.z_mask.visible = true; //시작
        //트윈버젼
        if(kData.bSoundSE) SE_Popup_ON.play();
        onFadein(bg, 0.75);
        onFadeinScale(dlg, function () {
            TweenMax.delayedCall(0.3, function () {
                grp.z_mask.visible = false;
            });
        });

        //게임글자,오버글자 트윈----------
        TweenMax.fromTo( grp.z_game_text.scale,
            0.5, //time
            {
                x: 0,
                y: 0

            }, {
                x: 1,
                y: 1,
                ease: Elastic.easeOut,
                //onComplete: fnEnd,
                onStart:function () { if(kData.bSoundSE) SE_GameOver.play();}, //게임오버 문구
                delay: 0.2
            }
        );
        TweenMax.fromTo( grp.z_over_text.scale,
            0.5, //time
            {
                x: 0,
                y: 0

            }, {
                x: 1,
                y: 1,
                ease: Elastic.easeOut,
                //onComplete: fnEnd,
                delay: 0.5
            }
        );
    };//grp.onActiveCl
    return grp;
}

function CreateUIContinue() { //컨티뉴창//계속하기창 생성
    //var grp1 = _createUIDlgBg_bb('uicontinue');
    var grp = uigame.add.group();

    grp.z_bg = uigame.add.sprite(xc, yc, 'white1x1');
    grp.z_bg.name = 'bguipause';
    grp.addChild(grp.z_bg);
    grp.z_bg.inputEnabled = true;
    grp.z_bg.width = 720;
    grp.z_bg.height = 1280;
    grp.z_bg.tint = ColorSet.black;
    grp.z_bg.alpha = 0.5;
    grp.z_bg.anchor.setTo(0.5, 0.5);

    grp.z_dlg = uigame.add.sprite(xc, yc, 'atlas_bb_ui_dlg-0', 'popup_continue.png');
    grp.z_dlg.anchor.setTo(0.5, 0.5);
    grp.z_dlg.name = 'dlgbg9';
    grp.addChild(grp.z_dlg); //debug_Sprite(grp.z_dlgdown);

    //grp.position.set(xc, yc);

    //예스버튼

    //코리안폰트스타일로 변경 //컨티뉴시 메세지
    switch(CURRENT_LANGUAGE)
    {
        case LANGUAGE_ENG:
            break;
        case LANGUAGE_JPN:
            break;
        case LANGUAGE_KOR:
            style_bb_doyougetheart = {
                font: "bold 35px gulim",
                fill: hex2str(ColorSet.white),
                align: "center",
                stroke: '#6a005f',
                strokeThickness: 6,
                boundsAlignH: "center",
                boundsAlignV: "middle"
            };
            break;
    }
    //코리안폰트스타일로 변경

    grp.z_btyes = createbtn(createUI9a('atlas_bb_ui-0', 'btn_yes_message.png', 0, 0, 210, 95, 45, 45, 45, 45),
        uigame.add.text(0, 0,  GetString("yes"), style_bb_yes),
        undefined,//uigame.add.sprite(0, -5, 'atlas_bb_ui-0', "select_page_1.png"),
        122, 120,//241,
        style_bb_lv1
    );//debug_Sprite(grp.z_btyes);
    grp.z_dlg.addChild(grp.z_btyes);

    //하트소모연출리소스 //컨티뉴창
    grp.z_spnHeart = CreateUIDropHeart();//하트파괴
    grp.z_spnHeart.visible = false;//debug_Sprite(this.uiDropStar);
    grp.z_spnHeart.x = 550;
    grp.z_spnHeart.y = 730;
    //하트소모연출리소스 //컨티뉴창
    
    //노버튼
    grp.z_btno = createbtn(createUI9a('atlas_bb_ui-0', 'btn_no_message.png', 0, 0, 210, 95, 45, 45, 45, 45),
        uigame.add.text(0, 0,  GetString("no"), style_bb_no),
        undefined,//uigame.add.sprite(0, -5, 'atlas_bb_ui-0', "select_page_1.png"),
        -122, 120,
        style_bb_lv1
    );//debug_Sprite(grp.z_btno);
    grp.z_dlg.addChild(grp.z_btno);
  
    // //패들배경
    // grp.z_minibg = uigame.add.sprite(0, -113, 'atlas_bb_ui_dlg-0', 'start_map_bg.png');
    // grp.z_minibg.anchor.setTo(0.5, 0.5);
    // grp.z_minibg.scale.set(1.15, 0.85);
    // grp.z_minibg.name = 'z_minibg';
    // grp.z_dlg.addChild(grp.z_minibg); //debug_Sprite(grp.z_minibg);
    // //패들
    // //grp.z_paddle = uigame.add.sprite(0, -130, 'atlas_bb_ui-0', 'continue_paddle.png');
    // grp.z_paddle = uigame.add.sprite(0, -130, 'atlas_bb-0', 'paddle_160.png');
    // grp.z_paddle.scale.set(1.75, 1.75);
    // grp.z_paddle.anchor.setTo(0.5, 0.5);
    // grp.z_paddle.name = 'z_paddle';
    // grp.z_dlg.addChild(grp.z_paddle); //debug_Sprite(grp.z_paddle);
    // //+3글자
    // grp.z_plus3 = uigame.add.text(0, -50,  "+3", style_bb_plus3); //debug_Sprite(grp.z_plus3);
    // grp.z_plus3.anchor.setTo(0.5,0.5);
    // grp.z_dlg.addChild(grp.z_plus3);



    grp.z_title = uigame.add.text(0, -135,  "CONTINUE?", style_bb_continue); //debug_Sprite(grp.z_title);
    grp.z_title.anchor.setTo(0.5,0.5);
    grp.z_dlg.addChild(grp.z_title);

    grp.z_txmsg = uigame.add.text(0, -20,
        GetString("doyougetlife", 1),
        //"あれ！ハートがないよ！\nチャージしますか？",
        //"Oh, no! No more heart!\nWould you charge the heart?",
        style_bb_doyougetheart); //debug_Sprite(grp.z_txmsg);
    grp.z_txmsg.anchor.setTo(0.5,0.5);
    grp.z_dlg.addChild(grp.z_txmsg);

    //에스피마스크-레벨시작시
    grp.z_mask = uigame.add.sprite(0, 0, 'white1x1');
    grp.z_mask.name = 'spMask_selectlevel';
    grp.z_mask.width = 720;
    grp.z_mask.height = 1280;
    grp.z_mask.tint = ColorSet.blue;
    grp.z_mask.alpha = 0.0;
    grp.z_mask.anchor.setTo(0.5, 0.5);
    grp.z_mask.inputEnabled = true;
    grp.addChild(grp.z_mask);
    grp.z_mask.visible = false;
    //에스피마스크-레벨시작시


    grp.z_btyes.fnok = function () { //컨티뉴 예스 --> 게임 라이프 충전
        var pass=true;
        var sends={};
        if(nvmode===true) {
            //네이버모드 하트가 0이면
            if(kData.iHeart<=0){
                //네이버모드
                if (naverShop2.visible) {
                    naverShop2.visible=false;
                } else {
                    naverShop2.Show(cbNaverShopReward);//네이버샵띄우기
                }
                return;
                //일시정지모드
            }else{
                kData.iHeart -= 1;//네이버컨티뉴
                sends.iHeart = kData.iHeart;//네이버저장하기
                if (typeof GamePocket.Sdk !== 'undefined') {
                    networkManager.AppDataPut(JSON.stringify(sends));
                }
            }

        }else{//개발서버모드 하트가 0이면
            if(kData.iHeart<=0) {
                uigame.state.states.game.uiController.uishop.onRefreshShop();
                //uigame.state.states.menu.uishop.visible = true;
                uigame.state.states.game.uiController.uishop.onOpen();

                //일시정지모드
                var stgame = uigame.state.states.game;
                ispausemode = true;                               //메인창-일시정지클릭-->인풋잠금
                stgame.massiveController.onPauseSaveVelocity(); //속도저장
                return;
            }else{
                
            }
        }

        //하트소비 연출(스파인) //컨티뉴 예스
        var stgame = uigame.state.states.game;
        stgame.uiController.uiContinue.z_spnHeart.visible = true;
        stgame.uiController.uiContinue.z_spnHeart.z_spine.setAnimationByName(1, "heart_bomb_out", false);
        ////stgame.uiController.uiContinue.z_spnHeart.z_spine.addAnimationByName(0, "empty", false);



        //-----로그인 상태 체크-----------in CreateUIContinue
        if(loginTF === 1){          //로그인회원
            if (proto.serPos === 0              //모비서비스
                ||proto.serPos === 1) {              //야후서비스
                if (kData.iHeart<=0) { //하트가 바닥이면 //in CreateUIContinue
                    //우선나가기
                    ispausemode = false; //컨티뉴-오케이->인풋잠금풀기
                    uigame.state.states.game.onGameOver.dispatch();
                    uigame.state.game.state.start('menu');
                    //우선나가기
                }else {
                    networkManager.
                    UseHeart(1, function () {
                        curLives = MaxLife; //in 컨티뉴UI 예스(모비서비스)
                        //var stgame = uigame.state.states.game;
                        //stgame.uiController.uiMain.z_lifestar.onSetLife(curLives); //컨티뉴 예스

                        stgame.massiveController.startContinue();
                    });
                    TweenMax.delayedCall( 0.1, function () {
                        if(kData.bSoundSE) SE_Heart.play(); //하트가 소모될때
                    });
                }
            }
        }else{
            // //우선나가기
            // ispausemode = false;
            // uigame.state.states.game.onGameOver.dispatch();
            // uigame.state.game.state.start('menu')
            // //우선나가기

            if (networkManager.networkState === NET_STATE.LOCALHOST) { //로컬서비스
                // curLives = MaxLife;  //in 컨티뉴UI 예스(로컬)
                // var stgame = uigame.state.states.game;
                // //stgame.uiController.uiMain.z_lifestar.onSetLife(curLives);//컨티뉴 예스
                // stgame.massiveController.startContinue();

                if(kData.iHeart<=0) {
                    pass = false;
                    networkManager.ModalCall(MODAL_BUTTON_TYPE.OKCANCEL, GetShpMsg('signup'),//상점
                        function () {
                            networkManager.JoinMember();
                        },
                        function () {
                        }
                    );
                }else{
                    pass = true;
                    networkManager.UseHeart(1, function () {
                        curLives = MaxLife; //in 컨티뉴UI 예스(모비서비스)
                        //var stgame = uigame.state.states.game;
                        //stgame.uiController.uiMain.z_lifestar.onSetLife(curLives); //컨티뉴 예스

                        stgame.massiveController.startContinue();
                    });
                    TweenMax.delayedCall( 0.1, function () {
                        if(kData.bSoundSE) SE_Heart.play(); //하트가 소모될때
                    });
                }


            }else{ //비회원  //게스트모드
                //
                if(kData.iHeart<=0) {
                    pass = false;
                    networkManager.ModalCall(MODAL_BUTTON_TYPE.OKCANCEL, GetShpMsg('signup'),//상점
                        function () {
                            networkManager.JoinMember();
                        },
                        function () {
                        }
                    );
                }else{
                    pass = true;
                    networkManager.UseHeart(1, function () {
                        curLives = MaxLife; //in 컨티뉴UI 예스(모비서비스)
                        //var stgame = uigame.state.states.game;
                        //stgame.uiController.uiMain.z_lifestar.onSetLife(curLives); //컨티뉴 예스

                        stgame.massiveController.startContinue();
                    });
                    TweenMax.delayedCall( 0.1, function () {
                        if(kData.bSoundSE) SE_Heart.play(); //하트가 소모될때
                    });
                }
            }
        }
        //-----로그인 상태 체크-----------in CreateUIContinue

        if(pass) {
            //--다이얼로그 사라지기--
            var dlg = grp.z_dlg;
            var bg = grp.z_bg;
            if (kData.bSoundSE) SE_Popup_OFF.play();
            onFadeout(bg, 0.75);
            onFadeoutScale(dlg, function () {
                grp.visible = false;
                grp.z_mask.visible = false;
                ispausemode = false; //패들 고정시킨거 풀어줄려고
            });
            grp.z_mask.visible = true;
            //--다이얼로그 사라지기--
        }

    };
    grp.z_btno.fnok = function () { //컨티뉴 노클릭 --> 게임오버
        //--다이얼로그 사라지기--
        var dlg = grp.z_dlg;
        var bg = grp.z_bg;
        if(kData.bSoundSE) SE_Popup_OFF.play();
        onFadeout(bg, 0.75);
        onFadeoutScale(dlg, function () {
            grp.visible = false;
            grp.z_mask.visible = false;
            ispausemode = false; //컨티뉴-노클릭->인풋잠금풀기
            uigame.state.states.game.endGame(); //컨티뉴 노우
        });
        grp.z_mask.visible = true;
        //--다이얼로그 사라지기--
    };

    grp.onActiveCn = function (hideother) {
        if(hideother) {
            //클리어창확인사살
            TweenMax.killTweensOf(uigame.state.states.game.uiController.uiClearLevel);
            uigame.state.states.game.uiController.uiClearLevel.visible = false;
            //게임오버창확인사살
            TweenMax.killTweensOf(uigame.state.states.game.uiController.uiGameOver);
            uigame.state.states.game.uiController.uiGameOver.visible = false;
        }
        //--다이얼로그 등장하기--
        var dlg = grp.z_dlg;
        var bg = grp.z_bg;

        grp.visible = true;
        grp.z_mask.visible = true; //시작
        
        ispausemode=true; //컨티뉴창뜰때->인풋잠금시작
        if(kData.bSoundSE) SE_Popup_ON.play();
        onFadein(bg, 0.75);
        onFadeinScale(dlg, function () {
            TweenMax.delayedCall(0.3, function () {
                grp.z_mask.visible = false;
            });
        });
        //--다이얼로그 등장하기--
    };//grp.onActiveCl
    return grp;
}
function CreateHideHeart1() {
    var heart = uigame.add.sprite(0, 0, "atlas_bb_ani-0", "heart_ani_1.png");
    heart.anchor.setTo(0.5,0.5);
    heart.animations.add('hideheart', [
        'heart_ani_1.png',
        'heart_ani_2.png',
        'heart_ani_3.png',
        'heart_ani_4.png',
        'heart_ani_5.png',
        'heart_ani_6.png',
        'heart_ani_7.png',
        'heart_ani_8.png',
        'heart_ani_9.png',
        'heart_ani_10.png',
        'heart_ani_11.png'
    ]);
    //debug_Sprite(heart);
    return heart;
}
function CreateUIWarning() {//
    var grp = uigame.add.group();
    grp.z_xinit=0;
    grp.z_yinit=0;
    //grp.z_msg = createUITextAndNumber(-19, -536, 8, 0, "SCORE:", style_30_stage, style_30_stageNumber, 1, 0.5, 0, 0.5, false);
    grp.z_msg = uigame.add.text(0, 0, "HURRY UP", style_40_Warning);
    grp.z_msg.anchor.setTo(0.5,0.5);
    grp.z_msg.alpha = 0.5;
    grp.addChild(grp.z_msg); //debug_Sprite(grp.z_scoreNumber);

    grp.onHide = function () {
        SE_HurryUp.mute=true;
        if (TweenMax.isTweening(grp.z_msg)) TweenMax.killTweensOf(grp.z_msg);
        grp.visible = false;
    };
    grp.onShow = function () {
        if (kData.bSoundSE) {
           SE_HurryUp.mute=false;
        }

        grp.visible = true;
        if (TweenMax.isTweening(grp.z_msg)) TweenMax.killTweensOf(grp.z_msg);
        TweenMax.fromTo(grp.z_msg, 0.2, { alpha:0.5 }, { alpha:0, ease:Power1.easeOut, yoyo:true, repeat:-1, delay: 0 });
    };
    return grp;
}
function CreateUIItemSelected() {//
    var grp = uigame.add.group();
    grp.z_xinit=0;
    grp.z_yinit=0;
    //grp.z_msg = createUITextAndNumber(-19, -536, 8, 0, "SCORE:", style_30_stage, style_30_stageNumber, 1, 0.5, 0, 0.5, false);
    grp.z_arrspr = [
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_04.png"),//xx
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_04.png"),//01
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_07.png"),//02
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_09.png"),//03
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_03.png"),//04
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_02.png"),//05
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_01.png"),//06
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_06.png"),//07
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_08.png"),//08
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_05.png"),//09
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_10.png"),//10
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_11.png"),//11
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_13.png"),//12
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_12.png"),//13
        uigame.add.sprite(0, 0, "atlas_bb_ui-0", "item_14.png") //14
    ];

    for (var i = 0, len = grp.z_arrspr.length; i < len; i++) {
        grp.z_arrspr[i].anchor.setTo(0.5,0.5);
        grp.z_arrspr[i].alpha = 1;
        grp.z_arrspr[i].visible=false;
        grp.addChild(grp.z_arrspr[i]);
    }

    for (var arr1 in grp.z_arrspr) {

    }

    grp.onHide = function () {
        for (var arr1 in grp.z_arrspr) {
            if (TweenMax.isTweening(arr1)) TweenMax.killTweensOf(arr1);
        }
        grp.visible = false;
    };
    grp.onShow = function (idx) {
        grp.visible = true;
        var spr1 = grp.z_arrspr[idx];
        spr1.visible=true;
        if (TweenMax.isTweening(spr1)) TweenMax.killTweensOf(spr1);
        TweenMax.fromTo(spr1, 1.5, { alpha:1 }, { alpha:0, ease: Linear.easeNone, delay: 0 });
    };
    return grp;
}

function CreateUICombo() {//콤보생성
    var grp = uigame.add.group();
    grp.z_xinit=0;
    grp.z_yinit=0;
    grp.z_combo = uigame.add.sprite(-60*1.5, 0, "atlas_bb_ui-0", "combo.png");
    grp.z_combo.anchor.setTo(0.5,0.5);
    grp.z_combo.alpha=0.7;
    grp.addChild(grp.z_combo);
    grp.z_x00 = uigame.add.bitmapText(30*1.5, 0, 'combo_no-export', "x0", 71, undefined);//비트맵폰트 크기가 71
    grp.z_x00.align = 'left';
    grp.z_x00.anchor.setTo(0, 0.5);
    grp.z_x00.alpha=0.7;
    grp.addChild(grp.z_x00);

    grp.onSetNumber = function (cnt) {
        grp.z_x00.text = "x" + cnt;
        //grp.z_x00.text = "x" + uigame.rnd.integerInRange(1, 100);//페이저랜덤모드는 min,max를 포함;

        //grp.z_x00.text.x = uigame.width / 2 -  grp.z_x00.text.textWidth / 2;//중앙정열시
        //then whenever you set the text, you need to reposition it:
        // this.scoreText.setText('100');
        // this.scoreText.x = this.game.width / 2 - this.scoreText.textWidth / 2;
        //text.setText('test');
        //text.updateTransform();
        //text.position.x = 100 - text.textWidth / 2;

    };
    grp.onHide = function () {
        grp.visible = false;
    };
    grp.onShow = function () {
        grp.visible = true;
    };


    return grp;
}


function CreateNavi(){ //인디케이터
    var grp = uigame.add.group();
    grp.navCount=12;        //grp.navCount=6;
    grp.colCnt=0;        //grp.colCnt=0;
    grp.distCnt=-1;        //grp.distCnt=-1;
    grp.sprNav=[];        //grp.sprNav=[];
    grp.navOffset=30;        //grp.navOffset=25;
    grp._distOff=0;        //grp._distOff=0;
    grp._angle=20;        //grp._angle=20;
    grp.navRotOld=0;        //grp.navRotOld=0;
    grp.ColMinX=0;        //grp.ColMinX=0;
    grp.ColMaxX=720;        //grp.ColMaxX=720;
    grp.dir= 1;        //grp.dir= 1;

    for (var idx = 0; idx < grp.navCount; idx++) {
        grp.sprNav[idx] =uigame.add.sprite(0, -(idx*grp.navOffset), "atlas_bb-0", "point.png");
        grp.sprNav[idx].anchor.setTo(0.5,0.5);
        grp.sprNav[idx].scale.setTo((1.0-(idx*0.01))-0.25); //0.9부터 스케일 줄어들기

        var a = 0.75-((idx/(grp.navCount-1))*0.75);
        if(a>1.0) a=1.0;
        grp.sprNav[idx].alpha=a; // //0.9~부터 알파줄기
        //grp.sprNav[idx].alpha=1.0-(idx/(grp.navCount)); // //0.9~부터 알파줄기

        grp.addChild(grp.sprNav[idx]);
    }

    //업데이트에서 온패들모드시 작동 -->releaseStart로 배포-->this.navi.x(y)로 각도 찾기
    grp.onUpdateAngle = function (navRot) {
        if (grp._angle !== grp.navRotOld) {
            grp.navRotOld = grp._angle;

            var colCnt = 0;
            var distCnt=-1;
            
            for (var n = 0; n < grp.navCount; n++) {
                grp._distOff= grp.navOffset * n;            //35*현재갯수
                var xy = moveToAngle(grp._angle, grp._distOff);  //로컬회전위치
                var x = xy[0];                   //고정플레이어위치+오프셋
                var y = xy[1];                   //고정플레이어위치+오프셋

                if(false) {
                    //타일영역충돌시 처리---------------
                    //그리드범위벗어남처리

                    var gridpos = getGridPosition(x, y); //월드좌표->그리드좌표로 변환
                    // Make sure the grid position is valid
                    if (gridpos.x < 0) gridpos.x = 0;
                    if (gridpos.x >= level.columns) gridpos.x = level.columns - 1;
                    if (gridpos.y < 0) gridpos.y = 0;
                    if (gridpos.y >= level.rows) gridpos.y = level.rows - 1;

                    if (level.tiles[gridpos.x][gridpos.y].type !== -1) colCnt = 3;

                    if (colCnt > 2) {
                        if (distCnt === -1) {
                            distCnt = n;
                        }
                        grp.sprNav[n].x = navX;
                        grp.sprNav[n].y = navY;
                    } else {
                        grp.sprNav[n].x = x;
                        grp.sprNav[n].y = y;
                    }
                    //타일영역충돌시 처리---------------
                }else {
                    //여기다 이식
                    //console.log("xy:"+grp._angle+","+n+","+x+","+y);
                    grp.sprNav[n].x = x;
                    grp.sprNav[n].y = y;
                }                
                //if(n===0)console.log("[0].xy:"+grp.sprNav[n].x+","+grp.sprNav[n].y+",a:"+grp.sprNav[n].alpha);
                //if(n===1)console.log("[1].xy:"+grp.sprNav[n].x+","+grp.sprNav[n].y+",a:"+grp.sprNav[n].alpha);
                //if(n===2)console.log("[2].xy:"+grp.sprNav[n].x+","+grp.sprNav[n].y+",a:"+grp.sprNav[n].alpha);
            }//false
            
        }//회전값 변화가 있으면
        grp._angle+=(1*grp.dir);
        if(grp._angle>160) grp.dir= -1;
        if(grp._angle<20) grp.dir= 1;
    };
    grp.onShow = function () {
        grp.alpha = 0;
        grp.visible = true;
        if (TweenMax.isTweening(grp)) TweenMax.killTweensOf(grp);
        TweenMax.fromTo(grp, 0.5, {alpha: 0}, {alpha: 1, ease: Linear.easeNone});
    };
    grp.onHideNv = function () {
        if (TweenMax.isTweening(grp)) TweenMax.killTweensOf(grp);
        TweenMax.fromTo(grp,0.75,{alpha:1}, {alpha:0, ease: Linear.easeNone, onComplete:function(){grp.visible=false;}});
    };

    return grp;
}

function CreateUIHelp() {
    var grp = _createUIDlgBg_bb('uihelp');//'uiclear'

    grp.z_curpage = 0;
    grp.z_stagging = false;
    grp.z_title = uigame.add.text(0, -495,  "HELP", style_bb_continue); //debug_Sprite(grp.z_title);
    grp.z_title.anchor.setTo(0.5,0.5);
    grp.z_dlg.addChild(grp.z_title);

    //좌우버튼 왼쪽버튼
    grp.sLeft = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', "btn_select_arrow.png"),
        undefined,
        undefined,
        -200, 390,
        undefined
    );
    grp.sLeft.anchor.setTo(0.5, 0.5);
    grp.z_dlg.addChild(grp.sLeft); //debug_Sprite(grp.sLeft);
    grp.sLeft.fnok = function () {
        //왼쪽버튼작동
        if(0<=grp.z_curpage-1)
            grp.onPage(grp.z_curpage-1);  //아아템그림,설명 업데이트
    };

    //오른쪽버튼
    grp.sRight = createbtn(uigame.add.sprite(0, 0, 'atlas_bb_ui-0', "btn_select_arrow.png"),
        undefined,
        undefined,
        200, 390,
        undefined
    );
    grp.sRight.sx = -1;
    grp.sRight.anchor.setTo(0.5, 0.5);
    grp.sRight.scale.setTo(-1, 1);
    grp.z_dlg.addChild(grp.sRight); //debug_Sprite(grp.sRight);
    grp.sRight.fnok = function () {
        //오른쪽버튼작동
        if(grp.z_table.length>grp.z_curpage+1)
            grp.onPage(grp.z_curpage+1);  //아아템그림,설명 업데이트

    };


    //도움말 코멘트
    grp.z_table = [
        [ 'item_4', 'item_7', 'item_9', 'item_3', 'item_2' ],
        [ 'item_1', 'item_6', 'item_8', 'item_5', 'item_none' ],
        [ 'item_10', 'item_11', 'item_13', 'item_12', 'item_14' ]
    ];

    //도움말 페이지배경
    grp.txPageBg = createUI9a('atlas_bb_ui-0', 'select_page.png', 0, 384, 270,  70, 20, 20, 20, 20);
    grp.z_dlg.addChild(grp.txPageBg); //debug_Sprite(grp.txPageBg);

    //도움말 페이지숫자
    grp.txPage = uigame.add.text(0, 384+3, "0/"+grp.z_table.length, style_bb_page);
    grp.txPage.anchor.setTo(0.5, 0.5);
    grp.z_dlg.addChild(grp.txPage); //debug_Sprite(dlbg.txPage);

    //도움말 슬록5개
    grp.z_slots=[];
    grp.z_slots.push(_createUIHelpSlot1());
    grp.z_slots.push(_createUIHelpSlot1());
    grp.z_slots.push(_createUIHelpSlot1());
    grp.z_slots.push(_createUIHelpSlot1());
    grp.z_slots.push(_createUIHelpSlot1());

    //도움말 업데이트
    grp.onPage = function(pg){
        //언어별 테스트
        //CURRENT_LANGUAGE = LANGUAGE_ENG; //CURRENT_LANGUAGE = LANGUAGE_JPN; //CURRENT_LANGUAGE = LANGUAGE_KOR;

        //스태거적용
        if(grp.z_stagging===false) {
            grp.z_stagging = true;
            TweenMax.staggerFrom(grp.z_slots, 0.2,
                {
                    alpha: 0, //rotation:0.2,
                    //ease: Linear.easeNone,//ease:Power1.easeOut,//ease:Elastic.easeOut,
                    delay: 0 //첫시작1번만
                },
                0.1,//callNextTween
                function () { grp.z_stagging = false;}//onCompleteAll
            );
        }
        grp.z_curpage = pg;
        for(var i=0; i<5; i++){
            if(grp.z_table[grp.z_curpage][i]==="item_none") { //테이블 값이 없으면 숨기고
                grp.z_slots[i].visible = false;
            }else {                                             //테이블 값이 있으면 출력
                grp.z_slots[i].visible = true;
                grp.z_slots[i].icon1_c.loadTexture('atlas_bb-0', grp.z_table[grp.z_curpage][i] + ".png");
                grp.z_slots[i].icon2_tx.text = GetString(grp.z_table[grp.z_curpage][i]);
            }
        }
        grp.txPage.text= ""+(pg+1)+"/"+grp.z_table.length;
    };

    //도움말 초기화 업데이트
    var offy= -300;
    for(var i=0; i<5; i++){
        grp.z_dlg.addChild(grp.z_slots[i]);
        grp.z_slots[i].y = offy+(140*i);
        grp.onPage(0);
    }


    //노버튼
    grp.z_btno = createbtn(uigame.add.sprite(0,0,'atlas_bb_ui-0', 'btn_close_item.png'),
        undefined,//uigame.add.text(0, 0,  GetString("no"), style_bb_no),
        undefined,//uigame.add.sprite(0, -5, 'atlas_bb_ui-0', "select_page_1.png"),
        288, -451,
        style_bb_lv1
    ); //debug_Sprite(grp.z_btno);
    grp.z_dlg.addChild(grp.z_btno);

    grp.z_btno.fnok = function () {
        var dlg = grp.z_dlg;
        var bg = grp.z_bg;
        if(kData.bSoundSE) SE_Popup_OFF.play();
        onFadeout(bg, 0.75);
        onFadeoutScale(dlg, function () {
            grp.visible = false;
            //grp.z_mask.visible = false;
        });
        //grp.z_mask.visible = true;

    };

    grp.onActiveHp = function () {

        grp.onPage(grp.z_curpage);  //아아템그림,설명 업데이트
        
        //트윈버젼
        var dlg = grp.z_dlg;
        var bg = grp.z_bg;

        grp.visible = true;
        //grp.z_mask.visible = true; //시작
        //트윈버젼
        if(kData.bSoundSE) SE_Popup_ON.play();
        onFadein(bg, 0.75);
        onFadeinScale(dlg, function () {
            TweenMax.delayedCall(0.5, function () {
                //grp.z_mask.visible = false;
            });
        });

    };

    return grp;
}

function _createUIHelpSlot1() {
    //코리안폰트스타일로 변경 //도움말표시
    switch(CURRENT_LANGUAGE) 
    {
        case LANGUAGE_ENG:
            break;
        case LANGUAGE_JPN:
            break;
        case LANGUAGE_KOR:
            style_bb_help = {
                font: "bold 32px gulim",
                fill: hex2str(ColorSet.white),
                align: "center",
                stroke: '#7F2D00',
                strokeThickness: 6,
                boundsAlignH: "center",
                boundsAlignV: "middle"
            };
            break;
    }
    //코리안폰트스타일로 변경

    var grp = uigame.add.group();
    grp.icon1_a = uigame.add.sprite(-203, 0, 'atlas_bb_ui-0', "item_1.png");
    grp.icon1_a.anchor.setTo(0.5,0.5);
    grp.icon1_b = uigame.add.sprite(0, 0, 'atlas_bb_ui-0', "item_bg.png");
    grp.icon1_b.anchor.setTo(0.5,0.5);
    grp.icon1_c = uigame.add.sprite(0, 0, 'atlas_bb-0', "item_1.png");
    grp.icon1_c.anchor.setTo(0.5,0.5);
    grp.addChild(grp.icon1_a); //debug_Sprite(grp.icon1_a);
    grp.icon1_a.addChild(grp.icon1_b);
    grp.icon1_b.addChild(grp.icon1_c);

    grp.icon2_a = uigame.add.sprite(71, 0, 'atlas_bb_ui-0', "item_2.png");
    grp.icon2_a.anchor.setTo(0.5,0.5);
    grp.icon2_tx = uigame.add.text(0, 0, "패들이 길어져요!", style_bb_help);
    grp.icon2_tx.anchor.setTo(0.5,0.5);
    grp.addChild(grp.icon2_a);// debug_Sprite(grp.icon2_a);
    grp.icon2_a.addChild(grp.icon2_tx);
    return grp;
}

var tweenGlobalNum=0;
function tweenText( textobj, addscore) { //this.scoreText //텍스트트윈스코어트윈점수트윈텍스트
    if(textobj===undefined || textobj===null) {
        console.log("tweenText(null,...)");
        return;
    }
    var start = tweenGlobalNum;//var start = curScore;
    textobj.z_num = tweenGlobalNum;//textobj.z_num = curScore;
    tweenGlobalNum += addscore;

    if (TweenMax.isTweening(textobj))
        TweenMax.killTweensOf(textobj);

    TweenMax.fromTo( textobj,
        1.5,
        {
            z_num:start //시작값
        }, {
            z_num:tweenGlobalNum,
            ease: Linear.easeNone,//ease:Power1.easeOut,//ease: Bounce.easeOut,//ease: Elastic.easeOut,
            //yoyo:true,
            //repeat:1,
            //onComplete: function () {  },
            //onStart: function () { },
            onUpdate: function () {
                textobj.text = getMoneyFormatFromNum(textobj.z_num);
                if(dm) console.log("istweening:"+ TweenMax.isTweening(textobj));
            },
            delay: 0.2
        }
    );
}

function CreateUIDev() {
    var grp = uigame.add.group();
    grp.position.set(xc, yc);
    var xb=-360+50;
    var yb=640-50;
    var xoff=100;
    var yoff=50;
    var xgrid=0;
    var ygrid=0;
    //예스버튼

    grp.z_arr=[];
    for(var ya=0; ya<2; ya++){
        for(var xa=0; xa<7; xa++){
            xgrid=0; ygrid=0;
            var btn0 = createbtn(createUI9a('atlas_bb_ui-0', '_alpha1_4x4.png', 0, 0, 100, 50, 2, 2, 2, 2),
                uigame.add.text(0, 0,  "dev1", {}), undefined, xb+(xoff*xa), yb-(yoff*ya), undefined);
            btn0.alpha=0.25;
            if(ya%2===0){
                btn0.tint = (xa%2===0?ColorSet.white:ColorSet.red); //첫째행
            }else{
                btn0.tint = (xa%2===1?ColorSet.white:ColorSet.red); //위로 2째행
            }
            grp.addChild(btn0);
            grp.z_arr.push(btn0);
        }
    }
    grp.z_arr[0].tx.text='close';
    grp.z_arr[0].fnok = function () {
        grp.visible = false;
    };
    grp.z_arr[1].tx.text='init';
    grp.z_arr[1].fnok = function () {
        curLevel=0;
        kData.userData = undefined;         //개발자버튼
        kData.userDataPage = undefined; //개발자버튼
        InitData();
        networkManager.ForcedSaveData();//개발자버튼

    };
    grp.z_arr[2].tx.text='';
    grp.z_arr[2].fnok = function () {
    };
    grp.z_arr[3].tx.text='balls';
    grp.z_arr[3].fnok = function () {
        var stgame = uigame.state.states.game;
        stgame.massiveController.onCopyBalls();
        stgame.massiveController.onReleaseBalls();
    };
    grp.z_arr[4].tx.text='';
    grp.z_arr[4].fnok = function () {
    };
    grp.z_arr[5].tx.text='';
    grp.z_arr[5].fnok = function () {
    };
    grp.z_arr[6].tx.text='unlo14';
    grp.z_arr[6].fnok = function () {
        // for (var i = LEVEL_MAX - 1; i >= 0; --i) kData.userData[i] = -1;
        // for (var i = 0; i <40; i++) kData.userData[i] = 1;

        //치트코드 //16까지//개발치트//개발자치트
        for (var i = LEVEL_MAX - 1; i >= 0; --i) {
            //if(i<45) kData.userData[i] = 2;
            if (i <14) { //보너스언락연출시작
                //페이지 열리기전 조건
                if (i < 9) kData.userData[i] = 3;
                else  kData.userData[i] = 2;
            }
            //if(i<3) kData.userData[i] = 2;
            //if(i<LEVEL_MAX-1) kData.userData[i] = 3;
            else kData.userData[i] = -1;
        }
    };
    grp.z_arr[7].tx.text='coll';
    grp.z_arr[7].fnok = function () {
        if(dmCollision===true){
            dmCollision=false;
            this.game.debug.reset();
        }else{
            dmCollision=true;
        }
    };
    grp.z_arr[13].tx.text='unlock';
    grp.z_arr[13].fnok = function () {
        for (var i = LEVEL_MAX - 1; i >= 0; --i) {
            if (i < 310) kData.userData[i] = 3;
            else  kData.userData[i] = 1;
        }
        kData.userData[LEVEL_MAX - 1] = 0; //0레벨 오픈
    };

    grp.onSetDv = function () {

    };
    grp.onActiveDv = function () {


    };

    return grp;
}
if(false) {
    var net_yourname_source = "user";
    var net_yourname = "user";
    var net_usercount = 0;
    var net_myrank = undefined;
    var net_name4 = [undefined, undefined, undefined, undefined]; //사이드UI상 이름들 //로그인서치할때순위?
//var net_ecount =0;
//var net_ename = [undefined,undefined,undefined,undefined];
//var net_ename_attack=-1;
    var _i_ = 0;
    var _j_ = 0;
    var _k_ = 0;

    var net_resultcount = 0;
    var net_resultname4 = [undefined, undefined, undefined, undefined];
    var net_resultrank4 = [undefined, undefined, undefined, undefined];

    var net_userall = [undefined, undefined, undefined, undefined]; //순위정렬 이름들
    var net_userallfin = [undefined, undefined, undefined, undefined]; //도착한 이름들
    var net_userscore = [];
    var net_userallkill = [undefined, undefined, undefined, undefined]; //순위정렬 상태에서 kill들
    var net_killcountall = 0;
    var net_killcountall_cur = 0;
    var net_useridx = [];
    var net_userfin = [];
    var net_userfinscore = [];
    var tempname = "";
    var tempidx = -1;
    var isfinresult = 0;
    var net_bakename = [];
    var saveData = {"WinCnt": 0, "CumulMedal": 0, "DayMedal": 0, "ITEM_1": 10, "ITEM_2": 10, "ITEM_3": 10};
    var itemTYPE = {"ITEM_1": 1, "ITEM_2": 2, "ITEM_3": 3};
    var item_num = 1; // itemTYPE index 현재 순서대로 1,2,3번 데이터를 보냄 //총갯수
    var playst = true;
//$(function(){


    window.onunload = function () {
        if (socket) socket.disconnect();
    };


    var myVar = null;
    var myscore = 0;

    function myTimer() { //PlayGoGo에서 2초단위로 진행거리 메세지 쏴주는 인터벌
        // //원본소스
        // var min = 0.1;
        // var min = 1;
        // var max = 10;
        // var random = Math.floor(Math.random() * (max - min + 1)) + min;
        // myscore +=  random;
        // myscore = myscore > 100 ? 100 : myscore; //자동차 진행값 크롭
        // socket.emit('MoveCar',{"score":myscore}); //자동차 진행값 보내기
        // if(myscore == 100.0) myStopFunction();//자동차 골지점 도착시
        // //원본소스


        myscore = playtime_bias * 100; //1.0-->100 으로로 진행
        myscore = myscore > 100 ? 100 : myscore; //자동차 진행값 크롭
        socket.emit('MoveCar', {"score": myscore}); //자동차 진행값 보내기
        if (myscore >= 100.0) myStopFunction();//자동차 골지점 도착시

    }

    function myStopFunction() {
        clearInterval(myVar);
        socket.emit('GoalIn');
    }


    var socket = io.connect('http://movigame.com:8001', {'forceNew': true, reconnection: false});
    socket.on('connect', function () {
        if (alonemode) return;
        // 입장정보
        socket.on('msgAlert', function (data) { //전체메세지 수신
            alert(JSON.stringify(data));
        });

        //자동으로 플레이시 작동//강제시작시에도 발생
        socket.on('PlayGoGo', function (data) {//레이싱시작시 수신 -->myscore += 1~3이하 인터벌생성
            if (alonemode) return;
            //alert(JSON. stringify(data));
            //$('#goalin').html('');
            //$('#compulsiongogo').hide();
            item_num = 1;
            playst = false;
            myscore = 0;
            myVar = setInterval(function () {
                myTimer()
            }, 2000);//인터발 작동 시작

            net_started = true;                               //네트워크게임모드 진입
            //matchUImode=false;                              //서치ui 중지 용도
            uimode = uimodeset.matchfind;

            if (uigame.state.states.menu.uifind.visible == true) {
                //다른선수가 강제진행시, 또는 자동 진행시 ui업데이트
                uimode = uimodeset.select;

                uigame.state.states.menu.advanceToGame();
                uigame.state.states.menu.uifind.visible = false;
            }
            net_userfin = []; //끝난선수 초기화
        });

        // 플레이 상황
        socket.on('PlayingINFO', function (data) {//다같이 출발 수신-->data.addinfo(현재하는 전체 선수들)
            if (alonemode) return;

            //alert(JSON. stringify(data));
            TagetList(data);
            //모든선수들
            //data[0].id = "VkBziGf8gzIwc-dFAACn"
            //data[0].killMark =0
            //data[0].score = 100
            //data[0].uid = "22"

        });

        // 입장 == 대기
        // data.addinfo[0].uid="aa"
        // data.addinfo[0].killMark=0
        // data.addinfo[0].score=0
        // data.addinfo[0].status=2 //룸
        // data.addinfo[1].uid="yourdevice"
        socket.on('inRoom', function (data) {//누군가방진입시 수신 -->data.addinfo(현재하는 전체 선수들)1
            //alert(JSON. stringify(data));
            if (alonemode) return;


            TagetList(data.addinfo);
            net_usercount = data.addinfo.length;//전체유저수 //룸안에서
            net_ecount = data.addinfo.length - 1;//상대캐릭수

            //net_name4[]에는 유저전체 이름 넣는다

            //[나, 선수1, 선수2, undefined] 이렇게 넣는다--------------
            _i_ = 1;
            for (_k_ = 0; _k_ < 4; _k_++) {
                if (_k_ < net_usercount) {
                    if (data.addinfo[_k_].uid == net_yourname) { //내이름을 맨위로
                        net_name4[0] = data.addinfo[_k_].uid;
                    } else {
                        net_name4[_i_] = data.addinfo[_k_].uid; //선수들이름을 밑으로
                        _i_ += 1;
                    }
                }
                else net_name4[_k_] = undefined;
            }
            //[나, 선수1, 선수2, undefined] 이렇게 넣는다--------------

            //이건 수동 소트용?
            for (_i_ = 0; _i_ < data.addinfo.length; _i_++) {
                net_userall[_i_] = data.addinfo[_i_].uid;
            }
            switch (data.addinfo.length) {
                case 1:
                    net_userall[1] = undefined;
                case 2:
                    net_userall[2] = undefined;
                case 3:
                    net_userall[3] = undefined;
                    break;
            }

        });

        // 방에서 나감
        socket.on('outRoom', function (data) {//누군가 나가면 수신-->data.addinfo(현재하는 전체 선수들)
            if (alonemode) return;
            //alert(JSON. stringify(data));
            TagetList(data.addinfo);

            net_usercount = data.addinfo.length;//전체유저수 //방을나갈때
            net_ecount = data.addinfo.length - 1;//상대캐릭수

            //[나, 선수1, 선수2, undefined] 이렇게 넣는다--------------
            _i_ = 1;
            for (_k_ = 0; _k_ < 4; _k_++) {
                if (_k_ < net_usercount) {
                    if (data.addinfo[_k_].uid == net_yourname) { //내이름을 맨위로
                        net_name4[0] = data.addinfo[_k_].uid;
                    } else {
                        net_name4[_i_] = data.addinfo[_k_].uid; //선수들이름을 밑으로
                        _i_ += 1;
                    }
                }
                else net_name4[_k_] = undefined;
            }
            //[나, 선수1, 선수2, undefined] 이렇게 넣는다--------------

            //이건 수동 소트용?
            for (_i_ = 0; _i_ < data.addinfo.length; _i_++) {
                net_userall[_i_] = data.addinfo[_i_].uid;
            }
            switch (data.addinfo.length) {
                case 1:
                    net_userall[1] = undefined;
                case 2:
                    net_userall[2] = undefined;
                case 3:
                    net_userall[3] = undefined;
                    break;
            }
        });

        //공격받으면 수신
        // -->//data.ITEM=1
        //data.TargetID="aa"
        //data.userID="dd"
        socket.on('ataack', function (data) {
            if (alonemode) return;
            var uid = data.useID;
            var tid = data.TargetID;
            var item = data.ITEM;
            var my = 0;
            switch (data.ITEM) {
                case 1:
                    //대화창//포그폭탄 투하시 연출
                    //uigame.state.states.game.uiController.uievent.onRunEventRight(my, "fog_o", 0);
                    //uigame.state.states.game.uiController.itembomb.spawnBomb(); //아이템실행

                    uigame.state.states.game.uiController.spawnStack.push(1);//var retE = shift();
                    uigame.state.states.game.uiController.spawnStackFrom.push(data.useID);
                    uigame.state.states.game.uiController.spawnStackTo.push(data.TargetID);
                    break;
                case 2:
                    //방해전파 투하시 연출
                    // uigame.state.states.game.uiController.onReversePrevAct();//전파방해폭탄 떨어지는 효과
                    // TweenMax.delayedCall(1, function () {
                    //     reverseTime = 0;
                    //     reverseMode = true;
                    //     uigame.state.states.game.uiController.uievent.onRunEventRight(my, "reverse_o", 0);
                    //     uigame.state.states.game.uiController.onReverseLeftOn();
                    //     uigame.state.states.game.uiController.onReverseRightOn();
                    // });

                    uigame.state.states.game.uiController.spawnStack.push(2);//var retE = shift();
                    uigame.state.states.game.uiController.spawnStackFrom.push(data.useID);
                    uigame.state.states.game.uiController.spawnStackTo.push(data.TargetID);

                    break;
                case 3:
                    //일반미사일폭탄 연출
                    // uigame.state.states.game.uiController.uievent.onRunEventRight(my, "missile_o", 0);
                    // uigame.state.states.game.uiController.itemmissile.spawnMissile();//아이템실행

                    uigame.state.states.game.uiController.spawnStack.push(3);//var retE = shift();
                    uigame.state.states.game.uiController.spawnStackFrom.push(data.useID);
                    uigame.state.states.game.uiController.spawnStackTo.push(data.TargetID);

                    break;
            }
        });

        //GoalINFO 골인 정보
        socket.on('GoalINFO', function (data) {
            if (alonemode) return;
            // $('#goalin').html('');
            // for(var i in data){
            //     var s = $("<div id='g_"+data[i].uid+"'></div>");
            //     s.append(JSON.stringify(data[i]));
            //     $('#goalin').append(s);
            // }

            if (true) {
                for (_i_ = 0; _i_ < 4; _i_++) {
                    net_userallfin[_i_] = undefined;
                }
                for (_i_ = 0; _i_ < data.length; _i_++) {
                    net_userallfin[_i_] = data[_i_].uid;
                }
            }//true

            //종료 타이머 시작
            mode20sec = true; //게임1등 기록후, 종료타이머 시작
            //1등이면 타이머 출력 안되기ㅔ
            if (data[0].uid == net_yourname) {
                uigame.state.states.game.uiController.tx20sec.visible = false;
            }

        });
        //1명당 골인시 받는데이터
        //data[0].goalTime = "2017-4-12 14:46:31::830"
        //rank = 1
        //uid = "your device"

        //게임 종료 게임상태가 play : 2 -> Rady : 1
        socket.on('gameEnd', function (data) {

            //alert('end game');
            playst = true;
            TagetList(data.addinfo);

            //TweenMax.delayedCall(1.5, function () {
            uigame.state.states.menu.uiresult.onRefreshResult();


            // }); //자동꺼짐


            //게임종료 결과 저장 하려고
        });

    });
//-------------------------------클릭시 이벤트 함수들
    $('#leaveRoomBut').click(function () {
        socket.emit('leaveRoom'); //방에서 나가기 html버튼클릭시
    });
    $('#msgSendBut').click(function () {
        socket.emit('sendMsg', 'TEST_MSG'); //전체메세지 보내기
    });

    // 내정보 전달
    $('#loginINFO').click(function () {
        socket.emit('loginINFO', {"uid": $('#uid').val(), "saveData": saveData}); //로그인실행
    });

    //radyRoomIn
    $('#radyRoomIn').click(function () {
        socket.emit('radyRoomIn', {"uid": "angelical2"}); //방에 들어가기
    });

    // 강제시작 compulsiongogo
    $('#compulsiongogo').click(function () {
        $('#compulsiongogo').hide();
        playst = false;
        socket.emit('compulsionGo');
    });

    //TGmsgSendBut
    $('#TGmsgSendBut').click(function () { //선택한 상대방에게 메세지 보내기
        // 아이템 카운트 같은 아이템은 1개만 사용가능 서버에서 같은 아이템을 받을 경우 패스 예외처리됨
        if (item_num <= 3) {
            var item = itemTYPE['ITEM_' + item_num++];
            socket.emit('sendTargetMsg', {"useID": $('#uid').val(), "TargetID": $('#TargetID').val(), "ITEM": item});
        }
    });

    var TagetList = function (data) {
        if (false) {
            // $('#TargetID').html('');
            // $('#listINFO').html('');
            for (var i in data) {
                if (data[i].uid != $('#uid').val()) {
                    $('#TargetID').append('<option value="' + data[i].uid + '">' + data[i].uid + '</option>');
                }
                var s = $("<div id='" + data[i].uid + "'></div>");
                s.append(JSON.stringify(data[i]));
                $('#listINFO').append(s);
            }
            if (playst && data.length > 1) {
                $('#compulsiongogo').show();
            } else {
                $('#compulsiongogo').hide();
            }
        }//false
        //------------------------------------------

        if (alonemode) {
        } else {
            for (_i_ = 0; _i_ < data.length; _i_++) {
                net_userall[_i_] = data[_i_].uid;
            }
            for (_i_ = 0; _i_ < data.length; _i_++) {
                net_userallkill[_i_] = data[_i_].killMark;
            }
            switch (data.length) {
                case 1:
                    net_userall[1] = undefined;
                case 2:
                    net_userall[2] = undefined;
                case 3:
                    net_userall[3] = undefined;
                    break;
            }
            if (dm) console.log("targetlist: " + net_userall[0] + ", " + net_userall[1] + ", " + net_userall[2] + ", " + net_userall[3] + ", ");
        }

    };
//});
}
/*
 * Globally accessible object with useful functions.
 */
Utilities = function() {};

Utilities.prototype = {
    lerp: function (v0, v1, t) {
        return v0 + (v1 - v0) * t;
    },

    clamp: function (min, max, val) {
        if (val < min) return min;
        else if (val > max) return max;
        return val;
    },

    zeroVelocity: function (sprite) {
        sprite.body.velocity.setTo(0, 0);
    },
    normalmaxVelocity: function (sprite) {
        if(sprite.name[0]!="m"
        && sprite.name[1]!="y") {
            sprite.body.velocity.setTo(0, cars_velocity_max);
        }
    },
    reverseVelocity: function (sprite) {
        //var isPlayer =  sprite.name[0]=='m' && sprite.name[1]=='y' && sprite.name[2]=='_';
        //if(isPlayer) return;
        if (!sprite.isPlayerVehicle) {
            var x = sprite.body.velocity.x;
            var y = sprite.body.velocity.y;
            sprite.body.velocity.setTo(x, y * -1);
        }
    },
    setVelocity: function (sprite) //적자동차 이동
    {
        if (!sprite.isPlayerVehicle)
            sprite.body.velocity.y = cars_velocity;
    },
    setVelocityBG: function (sprite) //부스터 이동
    {
        //sprite.body.velocity.y = cars_velocity*0.07;
        sprite.y += cars_velocity * uigame.state.states.game.bgController.bias_v;
        if (sprite.y > 1280 + sprite.height) sprite.kill();
    },


// var arSprCar = [
//     "enemy_car_small_4.png",   //0 //car_buggys
//     "enemy_car_small_5.png",   //1"enemy_car_small_3.png",   //1
//     "enemy_car_small_2.png",   //2
//     "enemy_car_small_1.png",   //3
//     "xcar1_middle_3_1.png",//"enemy_car_middle_3.png",  //4 //car_Humvees //프레임추가
//     "xcar2_middle_4_1.png",//"enemy_car_middle_2.png",  //5
//     "xcar3_middle_5_1.png",//"enemy_car_middle_1.png",  //6
//     "enemy_car_big_1.png",     //7 //car_trucks
//     "enemy_car_big_3.png"      //8"enemy_car_big_2.png"      //8
// ];
// var xcarFrm = [
//     ["xcar1_middle_3_1.png","xcar1_middle_3_2.png"],
//     ["xcar2_middle_4_1.png","xcar2_middle_4_2.png"],
//     ["xcar3_middle_5_1.png","xcar3_middle_5_2.png"]
// ];

    // setTextureAni: function (sprite){//텍스쳐애니1개
    //     // if(sprite.name[0]=="m" && sprite.name[1]=="y"){
    //     //     if(dm)console.log("sprite not changed texture: ");
    //     //     return;
    //     // }
    //     if(sprite.name[0]=="x" && sprite.name[1]=="c"){
    //
    //         // if(true) {
    //         //     if(dm)console.log("sprite changed texture: ");
    //         //     return;
    //         // }
    //         // //
    //         // sprite.namefrm=0;
    //         // sprite.namepic=0;
    //         // sprite.frm=0;
    //         // sprite.frmmax=0;
    //         // //
    //         if(sprite.frm>=sprite.frmmax-1){
    //             sprite.frm=0;
    //         }else{
    //             sprite.frm+=1;
    //         }
    //         var caridx =  Number(sprite.name[4]-1);
    //         var frmidx =  sprite.frm;
    //         var name = xcarFrm[caridx][frmidx];
    //         sprite.loadTexture('game_a',
    //             name
    //         );
    //         if(dm) console.log("sprite.name:"+"xcar1_middle_4_2.png");
    //     }
    //
    // },
    // setForEachTexutrAni: function () {//텍스쳐애니전체차들
    //     uigame.state.states.game.massiveController.vehicles.forEachAlive( this.utilities.setTextureAni, null);
    //
    // },


    // this.vehicles.forEachAlive( this.utilities.setVelocity, //적자동차 이동
    // null
    // );


    updateFxNormal: function () {
        // if(dm) console.log("--updateFxNormal--");
        // if(cars_velocity==0
        //     ||mistaking) {
        //     if(this.attachedVehicle.fxnormal.visible) this.attachedVehicle.fxnormal.visible=false;
        //     return;
        // }
        // if(this.attachedVehicle==null) return;
        // if(cars_velocity<cars_velocity_min){//속도0상태
        //     this.attachedVehicle.fxnormal.visible=false;
        // }else if(cars_velocity==cars_velocity_booster){ //부스터속도상태에서 노말이펙트 끄기
        //     this.attachedVehicle.fxnormal.visible=false;
        // }else{ //노말속도상태
        //     if(this.attachedVehicle.fxnormal.visible)
        //         this.attachedVehicle.fxnormal.visible=false;
        //     else
        //         this.attachedVehicle.fxnormal.visible=true;
        // }

    },


    setKill: function(sprite)
    {
        if(sprite.name[0]!='m'
            && sprite.name[1]!='y'
            && sprite.name[2]!='_')
        {
            sprite.kill();
        }
    },
    getLaneWhat: function (xp) {
	    //확율1/3으로 벗어나게
        var rand = uigame.rnd.integerInRange(0, 2);
        if(rand==0) return uigame.rnd.integerInRange(0, 2);
        //확율1/3으로 벗어나게

        var xbegin = 178;
        var xgrid1 = 122;

        if(xp < xbegin+(xgrid1*0.5) + (xgrid1*0)) return 0;
        else if(xp < xbegin+(xgrid1*0.5)+ (xgrid1*1)) return 1;
        else if(xp < xbegin+(xgrid1*0.5)+ (xgrid1*2)) return 2;
        else if(xp < xbegin+(xgrid1*0.5)+ (xgrid1*3)) return 3;
    },
    updateSide4: function () {
        if(alonemode){ //부스터 총량이 많으면 등수반전-->승리
            if(boostSumTimer>45) {
                if (net_yourname != net_userall[0]) swapArrayElements(net_userall, 0, 1);
            }
        }
        uigame.state.states.game.uiController.side4.onSwapRankSide4();//랭킹업데이트

        //사용자가 1명일때 메뉴 사라지게
        if(net_userall[1]==undefined) {
            item3btn[0].visible = false;
            item3btn[1].visible = false;
            item3btn[2].visible = false;
        }
    },

    updateTx20Sec: function () {
        //인게임 ~ 랭킹결과창 나오는 사이 업데이트
        if(mode20sec && timer20sec<11) { //예전<6초였음 //경기종료 신호
            //5초 적게 출력해서  5~0으로 보여주고, 0일때 경기 결과창으로 이동
            //나의 점수만 환산하는 코너
            if(uigame.state.states.game.uiController.tx20sec.visible===false) {
                if(0 != net_userall.indexOf(net_yourname)) {
                    uigame.state.states.game.uiController.tx20sec.visible = true;
                }
            }
            uigame.state.states.game.uiController.tx20sec.text = "TIME: " + float2int(timer20sec-6 > 0 ? timer20sec-6 : 0);
            //한번만 실행
            if (timer20sec-5 < 0) {
                //uigame.state.states.game.uiController.tx20sec.text.tint = ColorSet.yellow;
                // //게임진행중에 결과창으로나가는 조건
                // var myrankidx = net_userall.indexOf(net_yourname);//등수알기
                // var addMD = myrankidx===0?4
                //     :myrankidx===1?3
                //     :myrankidx===2?2
                //     :1;
                // var decMd=0; //메달
                // decMd+= net_userall[3]===undefined?-1:0;
                // decMd+= net_userall[2]===undefined?-1:0;
                // decMd+= net_userall[1]===undefined?-1:0;
                //
                // //메달저장
                // var v = addMD+decMd;
                // kData.WinCnt = (kData.WinCnt + (addMD+decMd));
                // kData.DayMedal = (kData.DayMedal + (addMD+decMd));
                // kData.CumulMedal = (kData.CumulMedal + (addMD+decMd));
                // networkManager.ForcedSaveData();
                //
                // if (!dm) console.log("save Medal-- win:" + kData.WinCnt + ", dayMd:" + kData.DayMedal + ", allMd:" + kData.CumulMedal);
                // //메달저장--end


                uimode = uimodeset.result;//게임중 강제로 결과창 나오게 하려고
                //대기시간 기본 5초, 내랭킹기준으로 차등
                //var myrankidx = net_userallfin.indexOf(net_yourname);
                //uigame.state.states.game.uiController.uiresult.onRefreshResult();
                //uigame.state.states.game.uiController.uiresult.visible = true;
                this.game.state.start('menu');


            }

            // if (timer20sec < 0) {
            //     //강제나가기
            //     mode20sec=false; //종료타이머 tx업데이트가 0이되면
            //     if (matchmode) {
            //         socket.emit('leaveRoom'); //타이머가 0
            //     }
            //
            //     uimode = uimodeset.select;
            //     uigame.state.game.state.start('menu');
            //     //강제나가기
            // }
        }

    }
};
LoadState = function(game) {
	this.game = game;
    this._i = 0;
    this._i2 = 0;
    this._i3 = 0;
    this._i4 = 0;
    this._i5 = 0;
};

LoadState.prototype = {
	preload: function()
	{
        if(dm) console.log("- LoadState.preload");

        //리사이즈 함수 시작 가능시점
        beginResize=true;
        //새로추가
        xc=this.world.centerX;
        yc=this.world.centerY;

        var logopicy = 440; //모비로고 y위치
        var logonamey = 610;//"0%"글자 y위치

        //배경색
        this.stage.backgroundColor = '#FFFFFF';
        //로고흑백
        this.backgroundlogoMono = this.add.sprite(xc, logopicy, 'preloaderLogoMono');
        this.backgroundlogoMono.anchor.setTo(0.5, 0.5);
        //로고컬러
        this.zXoff = this.backgroundlogoMono.width*0.5;
        this.backgroundlogoColor = this.add.sprite(xc-this.zXoff, logopicy, 'preloaderLogoColor'); //마스크적용-위치
        this.backgroundlogoColor.anchor.setTo(0, 0.5);                                      //마스크적용-피봇
        this.load.setPreloadSprite(this.backgroundlogoColor);                               //마스크적용
        //회사이름이미지
        this.backgroundText = this.add.sprite(xc, logonamey, 'preloaderLogoText');
        this.backgroundText.anchor.setTo(0.5, 0.5);
        //퍼센트표시
        this.loadingText = this.add.text(xc, 730, "99%", { font: "23px Arial", fill: "#2E85ED", align: "center" });
        this.loadingText.anchor.setTo(0.5, 0.5);

        //이벤트콜백 //this.game.load도 동일
        this.load.onLoadStart.add(this.loading_start, this);
        this.load.onFileComplete.add(this.loading_fileComplete, this);
        this.load.onLoadComplete.add(this.loading_loadComplete, this);


        this.dummytext = this.add.text(720, 1280, "", { font: "40px Conv_FZHPFW_GB1", fill: "#ffffff", align: "center" });
        // //디버그 dddd//
        // boottxt+="load ";
        // var dddd = "\nfirst_width:"+first_width
        //     +"\nfirst_height:"+first_height
        //     +"\n.innerWidth:"+window.innerWidth
        //     +"\n.innerHeight:"+window.innerHeight
        //     +"\nw.width():" + $(window).width()
        //     +"\nw.height():" +$(window).height()
        //     +"\nisPotrait:"+isPotrait
        //     + "\nseq:"+boottxt;
        //
        //
        // ddtx = this.add.text(xc, yc-300, dddd, { font: "50px Bold Arial",
        //     fill: "#000000", align: "center" });
        // ddtx.anchor.setTo(0.5, 0.5);
        // //디버그 dddd//

        //새로추가
        var i, len;
        //피엔지리스트를 로더에 준비
        for(i=0, len=PngList.length; i<len; i++){
            this.load.image(PngList[i].name, PngList[i].url);//이름,png
        }
        //미니맵이미지들(이미지압축때문에 아틀라스사용 안함)
        for(i=0, len=PngList_minimap.length; i<len; i++){
            this.load.image(PngList_minimap[i].name, PngList_minimap[i].url);//이름,png
        }

        //아틀라스리스트를 로더에 준비
        for(i=0, len=AtlasList.length; i<len; i++) {
            this.load.atlas(AtlasList[i].name, AtlasList[i].url[0], AtlasList[i].url[1]);//이름,png,json
        }
        //스파인리스트를 로더에 준비
        this.game.plugins.add(PhaserSpine.SpinePlugin);
        for(var i=0, len=SpineList.length; i<len; i++) {
            this.load.spine(SpineList[i].name, SpineList[i].url);
        }

        //비트맵폰트를 로더에 준비
        for(i=0, len=BitmapFontList.length; i<len; i++) {
            this.load.bitmapFont( BitmapFontList[i].name, BitmapFontList[i].url[0], BitmapFontList[i].url[1]);
        }
        //사운드리스트를 로더에 준비
        for(i=0, len=SoundList.length; i<len; i++){
            this.load.audio(SoundList[i].name, SoundList[i].url);
        }
        //새로추가
    },

    loading_start: function() {
        this.loadingText.setText("0%");
    },
    loading_fileComplete: function(progress, cacheKey, success, totalLoaded, totalFiles) {
        this.loadingText.setText(progress + "%");
        //디버깅// this.loadingText.setText(progress + " (prgress)\n"+cacheKey+" (cacheKey)\n"+success+" (success)\n"+totalLoaded+" (totalLoaded)\n"+totalFiles+" (totalFiles)");
    },

    loading_loadComplete: function() {
        this.loadingText.setText("100%");
    },
    //--오디오압축풀어 사운드 나오게 하려다 실패--
    // loading_loadComplete: function() {
    //     this.loadingText.setText("100%");
    //     mp3name = [];
    //     for(i=0, len=SoundList.length; i<len; i++){
    //         mp3name.push(SoundList[i].name);
    //     }
    //     //this.game.sound.setDecodedCallback(mp3name, this.audioReady, this);
    //     uigame.sound.setDecodedCallback(mp3name, this.audioReady, this);
    //
    // },
    // audioReady: function(){
    //     console.log("audioReady!!");
    // },
    //--오디오압축풀어 사운드 나오게 하려다 실패--

	create: function()
	{

        //naverShop = new NaverShop(uigame, this.naver); //혜관님 추가본
        //naverShop2 = new NaverShop(uigame, this.naver); //혜관님 추가본
        if(dm) console.log("- LoadState.create");

		this.game.state.start('menu');

        //사운드 추가
        BGM_ALL                    = this.game.add.audio( 'BGM_ALL.mp3', 1, true);         //타이틀 배경음
        BGM_ALL.loop = true;
        BGM_Game_Nomal             = this.game.add.audio( 'BGM_Game_Nomal.mp3', 1, true);          //게임 배경음
        BGM_Game_Nomal.loop = true;
        BGM_Game_Ranking           = this.game.add.audio( 'BGM_Game_Ranking.mp3', 1, true);          //게임 배경음
        BGM_Game_Ranking.loop = true;

        SE_Click                   = this.game.add.audio( 'SE_Click.mp3', 1, false);         //기본 클릭음
        //-------
        SE_Ball                    = this.game.add.audio( 'SE_Ball.mp3', 1, false);         //기본 클릭음
        SE_BearJelly_Produce       = this.game.add.audio( 'SE_BearJelly_Produce.mp3', 1, false);//곰 젤리 생성음//곰 젤리 생성 시.
        SE_BearJelly_Transform     = this.game.add.audio( 'SE_BearJelly_Transform.mp3', 1, false);//곰 젤리 변신음//곰 젤리가 분열하거나, 팽창할 때 사운드.
        SE_Brick_Extinction        = this.game.add.audio( 'SE_Brick_Extinction.mp3', 1, false);//벽돌 소멸음//벽돌 소멸 시.

        SE_BrickShell_Remove       = this.game.add.audio( 'SE_BrickShell_Remove.mp3', 1, false);//벽돌 껍질 제거음 //	초코 벽돌 껍질 제거 시.
        SE_InvincibleBrick_Blow    = this.game.add.audio( 'SE_InvincibleBrick_Blow.mp3', 1, false);//무적 벽돌 타격음	//공과 무적 벽돌 충돌 시.
        SE_Item_Bad                = this.game.add.audio( 'SE_Item_Bad.mp3', 1, false);//나쁜 아이템 획득음 //나쁜 아이템 획득 시.
        SE_Item_Good               = this.game.add.audio( 'SE_Item_Good.mp3', 1, false);//좋은 아이템 획득음 //좋은 아이템 획득 시.
        SE_Paddle_Apper            = this.game.add.audio( 'SE_Paddle_Apper.mp3', 1, false);//패들 등장음	//패들이 생성 될 때.
        SE_Popup_OFF               = this.game.add.audio( 'SE_Popup_OFF.mp3', 1, false); //팝업창 닫힘음	//모든 팝업창이 닫힐 때.
        SE_Popup_ON                = this.game.add.audio( 'SE_Popup_ON.mp3', 1, false);  //팝업창 열림음	//모든 팝업창이 열릴 때.
        SE_Star_Get                = this.game.add.audio( 'SE_Star_Get.mp3', 1, false);  //별점 연출음 //획득한 별점이 박힐 때.
        SE_Transform               = this.game.add.audio( 'SE_Transform.mp3', 1, false);  //변신음 //	아이템을 획득하여 패들이나 공에 사이즈 변화가 있을 때 사운드.
        //-------
        //-------새로 추가된 효과음
        SE_BearJelly_Hit           = this.game.add.audio( 'SE_BearJelly_Hit.mp3',           1, false); //곰젤리 맞았을때
        SE_Fire                    = this.game.add.audio( 'SE_Fire.mp3',                    1, false); //공 발사시
        SE_GameOver                = this.game.add.audio( 'SE_GameOver.mp3',                1, false); //게임오버 문구
        SE_Go                      = this.game.add.audio( 'SE_Go.mp3',                      1, false); //go 등장 -------------------------------------
        SE_Heart                   = this.game.add.audio( 'SE_Heart.mp3',                   1, false); //하트가 소모될때
        SE_InvincibleBrick_Blow_01 = this.game.add.audio( 'SE_InvincibleBrick_Blow-01.mp3', 1, false); //엔딩 무적블록터지는 연출사운드
        SE_Magnet                  = this.game.add.audio( 'SE_Magnet.mp3',                  1, false); //공 접착시
        SE_Paddle_Dead             = this.game.add.audio( 'SE_Paddle_Dead.mp3',             1, false); //패들이 파괴될때
        SE_Ready                   = this.game.add.audio( 'SE_Ready.mp3',                   1, false); //READY 등장 -------------------------------------
        SE_Score                   = this.game.add.audio( 'SE_Score.mp3',                   1, false); //점수가 올라갈 때
        SE_Shot                    = this.game.add.audio( 'SE_Shot.mp3',                    1, false); //미사일 발사
        SE_Star_off                = this.game.add.audio( 'SE_Star_off.mp3',                1, false); //패들이 죽어서 별점이 줄어들때
        SE_Brick_Extinction_F      = this.game.add.audio( 'SE_Brick_Extinction_F.mp3',      1, false); //폭발시(+관통조합)
        SE_Brick_Extinction_F_a    = this.game.add.audio( 'SE_Brick_Extinction_F.mp3',      1, false); //폭발시(+관통조합)
        SE_Brick_Extinction_F_b    = this.game.add.audio( 'SE_Brick_Extinction_F.mp3',      1, false); //폭발시(+관통조합)
        SE_Win                     = this.game.add.audio( 'SE_Win.mp3',                     1, false); //클리어문구가 나올때
        //-------새로 추가된 효과음

        //-------새로 추가된 효과음2
        SE_HurryUp                 = this.game.add.audio( 'SE_HurryUp.mp3',                 1, true); //
        SE_HurryUp2                = this.game.add.audio( 'SE_HurryUp2.mp3',                1, false); //
        SE_Heart_Brick_Extinction  = this.game.add.audio( 'SE_Heart_Brick_Extinction.mp3',  1, false); //
        SE_Page_Open               = this.game.add.audio( 'SE_Page_Open.mp3',               1, false); //
        SE_Brick_Drop              = this.game.add.audio( 'SE_Brick_Drop.mp3',              1, false); //
        //-------새로 추가된 효과음2
        //if(bSoundSE) SE_Transform.play();


        // //치트코드 //16까지 loadstate
        // kData = new Data();
        // InitData();
        // for (var i = LEVEL_MAX - 1; i >= 0; --i) {
        //     //if(i<45) kData.userData[i] = 2;
        //     if (i <14) { //보너스언락연출시작
        //         //페이지 열리기전 조건
        //         if (i < 9) kData.userData[i] = 3;
        //         else  kData.userData[i] = 2;
        //     }
        //     //if(i<3) kData.userData[i] = 2;
        //     //if(i<LEVEL_MAX-1) kData.userData[i] = 3;
        //     else kData.userData[i] = -1;
        // }
        // //치트코드 //16까지
	},
	
	shutdown: function() //로드상태제거
	{//게임시작1-3
        if(dm) console.log("- LoadState.shutdown");

		this.game = null;
		this.loadBar = null;
	},
    
    //update: function () { console.log("loadstate update!!!!"); },

    loadStart:function()  {
	        //text.setText("Loading ...");
            console.log("loadStart");
    },
    fileComplete: function(progress, cacheKey, success, totalLoaded, totalFiles) {
        // text.setText("File Complete: " + progress + "% - " + totalLoaded + " out of " + totalFiles);
        // var newImage = game.add.image(x, y, cacheKey);
        // newImage.scale.set(0.3);
        // x += newImage.width + 20;
        // if (x > 700) {
        //     x = 32;
        //     y += 332;
        // }
        console.log("fileComplete");
    },
    loadComplete: function () {
	    // text.setText("Load Complete");
        console.log("loadComplete");
    }

};

MenuState = function (game) {
    this.game = game;
};

MenuState.prototype = {
    game: null, // typeof Phaser.Game
    text: null, // typeof Phaser.Text
    logo: null, // typeof Phaser.Sprite
    grpTitleScreen: null,
    grpsprJPSound:null,
    uiselectlevel: null,
    uishopplus: null,
    uishop: null,
    uifind: null,
    uiresult: null,
    uishopresult: null,
    uidev: null,
    hide2: null,
    hide3: null,
    hide4: null,
    title_spine: null,
    whiteshop: null,
    _i: 0,
    _j: 0,
    _e: 1,
    _existname: false,

    start: function () { //실행안됨
        console.log("- MenuState.start");
    },

    create: function () {//게임시작1-4
        //networkManager.GetShoplist(ShopType.HEART, function () { });
        //console.log("- MenuState.created"); //press to play 정지화면

        //배경음악첫시작//첫사운드
        if(bPhone&&firsttime) {
            kData.bSoundBGM = false;
            kData.bSoundSE = false;
        }
        if(firsttime) {
            if (!BGM_ALL.isPlaying) {
                BGM_ALL.play();
                if(kData.bSoundBGM===false)
                    BGM_ALL.mute=true;//추가//소리수정
            }
            if (!BGM_Game_Nomal.isPlaying){
                BGM_Game_Nomal.play();
                BGM_Game_Nomal.mute=true;//추가//소리수정
            }
        }
        if(uimode === uimodeset.result){
            //if(bSoundBGM)
                selectBGM("BGM_Game_Ranking", false);
        }else{
            //if(bSoundBGM)
                selectBGM("BGM_ALL", false);
        }
        //---게임첫화면 새로추가---------------------------- <<
        this.grpTitleScreen = this.game.add.group();

        if (firsttime) {
            //스파인타이틀 MenuState에 추가
            this.title_spine = this.game.add.spine(360, 640, "title_spine");
            this.grpTitleScreen.addChild(this.title_spine);
            spn_title_spine = this.title_spine;


            //타이틀스파인은 track 1로 호출시 사라지게 한다.
            this.title_spine.state.onComplete = function (trackIndex, count) {
                switch (trackIndex) {
                    case 0:
                        if(dm) console.log("-------------- track 0: emptytrack ------------------");
                        break;
                    case 1:
                        if(dm) console.log("-------------- track 1: emptytrack ------------------");
                        //setTimeout( function () { title_spine.visible=false; }, 500 );//0.5초뒤
                        break;
                }
            };

            var version = "Ver 1.0.1b";
            this.txVersion = this.add.text(710, 1250, version, {font: "17px Arial", fill: "#000000", align: "center"});
            this.txVersion.anchor.setTo(1, 0.5);

            //야후추가 //타이틀화면중 저작권표시
            var tx_copyrightcontext = undefined;
            if (document.location.href.indexOf("game.jp") > -1) {
                tx_copyrightcontext = "(C) RECOM Co.,Ltd. 2017 All Rights Reserved.";
                this.txCopyright = this.add.text(xc, 1250, tx_copyrightcontext, {
                    font: "17px Arial",
                    fill: "#000000",
                    align: "center"
                });
                this.txCopyright.anchor.setTo(0.5, 0.5);
            }else if (document.location.href.indexOf("neolith") > -1) {
            //}else if (document.location.href.indexOf("localhost") > -1) { //테스트
                tx_copyrightcontext = "";
                this.txCopyright = this.add.text(xc, 1250, tx_copyrightcontext, {
                    font: "17px Arial",
                    fill: "#000000",
                    align: "center"
                });
                this.txCopyright.anchor.setTo(0.5, 0.5);
            } else {
                tx_copyrightcontext = "Copyright Ⓒ 2017 Game Corp. All rights reserved";
                this.txCopyright = this.add.text(xc, 1250, tx_copyrightcontext, {
                    font: "17px Arial",
                    fill: "#000000",
                    align: "center"
                });
                this.txCopyright.anchor.setTo(0.5, 0.5);
            }
            //야후추가 //저작권
            if (nvmode === true
                || document.location.href.indexOf("movigame.com") > 0
                || document.location.href.indexOf("local") > 0
            ) {
                this.allgrade = this.game.add.sprite(0, 0, 'all.png');
                this.allgrade.anchor.setTo(0.5, 0.5);
                this.allgrade.position.setTo(xc + 285, yc - 555);
                allusermark = this.allgrade;
            }
        }

        if (firsttime) {
            //첫시작일 때만 타이틀스파인 플레이 되게 한다.
            this.title_spine.setAnimationByName(0, "title_in", false);
            this.title_spine.addAnimationByName(0, "title_idle", true);


        } else {
            //this.txCopyright.visible=false;
            //this.txVersion.visible=false;
            //this.allgrade.visible=false;
            //this.title_spine.setAnimationByName(0, "empty", false);
            //this.title_spine.visible=false;
            //다시 앞으로 오면 정지화면 되게 한다.
            //스테이지클리어시 오므로
            //임시데이터라 애니가없는 문제가 잇어서
            //this.racing_title_ani.addAnimationByName(0, "title_stop", false)
            //이걸로 문제해결
            //this.title_spine.addAnimationByName(0, "title_idle", true);;
        }

        //스파인타이틀추가
        //debug_Sprite(titletx);
        //--게임첫화면 새로추가---------------------------- >>

        // // //어디서나 클릭시 넘가가게
        // this.game.input.onDown.addOnce(this.advanceToGame, this);
        // // //err: not a function// this.game.input.keyboard.addOnce(this, this.advanceToGame);
        // this.game.input.keyboard.addCallbacks(this, this.advanceToGame);

        if (firsttime) {
            //예전 타이틀없는 버젼
            if (false) {
                //스타트샵// this.game.input.onDown.addOnce(this.showUISelectLevel, this);
                // //err: not a function// this.game.input.keyboard.addOnce(this, this.showUIFind);
                //스타트샵// this.game.input.keyboard.addCallbacks(this, this.showUISelectLevel);
            }
            //타이틀있는 버젼
            if (true) {
                //networkManager.GetShoplist(ShopType.HEART, function () { });
                this.game.input.onDown.addOnce(this.showUISelectLevelWithTitle, this);
                // //err: not a function// this.game.input.keyboard.addOnce(this, this.showUIFind);
                this.game.input.keyboard.addCallbacks(this, this.showUISelectLevelWithTitle);
            }
        }


        this.grpsprJPSound = this.game.add.group();
        this.grpsprJPSound.position.setTo(xc, yc);
        titlesprJPSoundRoot = this.grpsprJPSound;
        //새로추가 - 스타트샵---------
        this.uiselectlevel = createUISelectLevel();        //this.uiselectlevel.dlgbg9.scale.set(0.5,0.5);


        // kData.userData = [];
        // for (var i = LEVEL_MAX-1; i >= 0; -- i) kData.userData[i] = -1;
        // for (var i = 0; i <20; i++) kData.userData[i] = uigame.rnd.integerInRange(1, 3);
        // kData.userData[20]=0; //0레벨 오픈

        if(false) {
            this.uiselectlevel.dlbg.btmulti.fninsert = function () { //멀티버튼클릭시

                //--------------------
                matchmode = true;
                //matchUImode=true;
                uimode = uimodeset.matchfind;

                //내정보전달
                //이름자동생성
                if (net_yourname_source == "user") {
                    net_yourname = net_yourname_source + uigame.rnd.integerInRange(0, 9999); //999포함
                }
                //자동이름으로 로그인시작
                socket.emit('loginINFO', {"uid": net_yourname, "saveData": saveData});  //넷 멀티버튼 누를때 로그인하는

                //방진입
                setTimeout(function () {
                        socket.emit('radyRoomIn', {"uid": net_yourname}); //소켓아이오, 방 진입
                    }, 500 //0.5초 뒤
                ); //--> clickGameMode


                //멀티모드는 검색창 나오게

                //멀티모드로
                net_usercount = 1;//유저카운트는 1로 초기화 한후에 다이얼로그 띄우기
                var stmenu = uigame.state.states.menu;
                stmenu.showUIFind();
                //멀티모드 전환

                if (dm) console.log("fnmulti");
                //------------------
            };
        }
        this.uiselectlevel.visible = false;



        //this.uiDev = CreateUIDev();
        //this.uiDev.visible=false;

        //새로추가 - 스타트샵-------------
        uishopinmenu = true;
        this.uishop = createUIShop();
        this.uishop.visible = false;//초기화 삽ui 숨기기
        this.uishop.onRefreshInitShop();

        this.uishopresult = createUIShopResult();
        this.uishopresult.visible = false;


        this.uishopplus = createUIShopPlusButton();
        this.uishopplus.visible = false;//초기화 삽플러스ui 숨기기

        if(false) {
            //새로추가 - 검색창---------------
            this.uifind = createUIMatchSearch();
            //this.uifind.dlgbg9.slots[0].onActive(false);
            this.uifind.dlgbg9.slots[1].onActive(false);
            this.uifind.dlgbg9.slots[2].onActive(false);
            this.uifind.dlgbg9.slots[3].onActive(false);
            //uifind 스타트버튼
            this.uifind.dlgbg9.startbtn.fnok = function () {

                //matchUImode=false;//서치상태 끄는 용도
                uimode = uimodeset.select;//result나 find로 나올수 있으나 우선 임시적으로

                uigame.state.states.menu.advanceToGame();
                if (dm) console.log("find and start");

                //playtime_cur=0; //유저 검색창에서 스타트버튼//플레이타임
                playtime_bias = 0;
                socket.emit('compulsionGo');            //넷 스타트버튼으로 강제진행
            };

            //멀티닫기버튼
            this.uifind.dlgbg9.btnx.fnok = function () { //넷 멀티메뉴에서 바로 나가기

                if (matchmode) {
                    socket.emit('leaveRoom'); //방에서 시작전에 스타트샵으로 나갈때
                }
                uimode = uimodeset.select;
                uigame.state.game.state.start('menu'); //검색창 닫고, 맨앞으로
            };

            this.uifind.visible = false;
            this.uifind.onSetReady();
            //새로추가 - 검색창---------

            //새로추가 - 랭킹결과창----------------------------------------------------------
            this.uiresult = createUIMatchResult();
            this.uiresult.visible = false;
            //this.uiresult.visible = true;//제작중에 강제로 보기

            //랭킹결과창ok버튼
            this.uiresult.dlgbg9.rsbtn.fnok = function () {
            };

            //새로추가 - 랭킹결과창-------------


            //menu상태로 바뀌엇을때 실행: 랭킹결과창 보이기
            if (uimode == uimodeset.result) {           //경기 끝 났을때
                if (matchmode) {                     //넷 경기 끝 났을때

                    //대기시간 기본 5초, 내랭킹기준으로 차등
                    //grp.dlgbg9.rsbtn.tx.text = "TIME: " + 5;
                    var myrankidx = net_userall.indexOf(net_yourname);
                    this.uiresult.onRefreshResult();
                    this.uiresult.visible = true;

                    //BGM_Game_Nomal.mute = false; //게임중음악중지
                    selectBGM("BGM_Game_Nomal", true); //in 네트워크 결과창
                    //uimode = uimodeset.retry;
                    //uigame.state.game.state.start('menu');
                } else {                              //싱글 경기 끝 났을때
                    uimode = uimodeset.select;
                    uigame.state.game.state.start('menu'); //여기까지 안음
                }

                //menu상태로 바뀌엇을때 실행: 재시작창 보이기
            } else if (uimode == uimodeset.retry) {

                matchmode = true;
                //matchUImode=true;
                uimode = uimodeset.matchfind;

                this.uiselectlevel.visible = false;
                this.uifind.visible = true;
                this.uisoundonoff.visible = false;//사운드강제숨기기
                this.uiresult.visible = false;
                //menu상태로 바뀌엇을때 실행: 디폴트--스타트샵보이기
            } else {
                //네트워크매치이면 시작부분 부터
                //싱글모드이면
                //if (firsttime != false) this.showUIStartShop();//바로출력

                if (firsttime) {
                    firsttime = false;
                }
                else this.showUISelectLevel();//바로출력


            }

            //this.uiStartLevel = CreateUIStartLevel();
        }//false

        //상점막이
        this.whiteshop = uigame.add.sprite(xc, yc, 'white1x1');
        this.whiteshop.width = 720;
        this.whiteshop.height = 1280;
        this.whiteshop.tint = ColorSet.red;
        this.whiteshop.alpha =0.0;
        this.whiteshop.anchor.setTo(0.5, 0.5);
        this.whiteshop.name = "whiteshop";//레이싱레디
        this.whiteshop.inputEnabled = true;
        this.whiteshop.events.onInputDown.add(function () {console.log("whiteshop"); }  );
        this.whiteshop.visible =false;
        whiteshopguard = this.whiteshop;
        //상점막이
		if(nvmode===true){
	        this.naver = uigame.add.group();
	        naverShop = new NaverShop(uigame, this.naver);//원본
            //this.naver.addChild(naverShop.main); //혜관님 수정본
	        naverShop.loadImg();
		}
        //uigame.time.events.loop(Phaser.Timer.SECOND, updateMenuState, this);

        this.txDebug =  uigame.add.text(0, 0, "", style_debug); //레벨선택화면 디버그용
        this.txDebug.anchor.setTo(1,1);
        this.txDebug.position.setTo(720,1280-50);
        this.txDebug.name="menustate";
        txdebug = this.txDebug;
        //

        if (firsttime===false) {
            //this.spn_
            this.showUISelectLevel();
        }
        //if(dm) hsDebug.onSet("aasaa", 1234);
        //if(dm) hsDebug.onSet("d23", 100.11);
    }, //create

    update: function () {
        //console.log("----- memustate.update -----");
        //넷 선수찾기
        if (uimode == uimodeset.matchfind && matchmode) { //네트워크모드에서만

            if (net_usercount == 2) vsmode = true;
            else vsmode = false;

            //playtime_cur=0; //유저 검색창 업데이트//플레이타임
            playtime_bias=0;
            // //강제싱글모드-----------------
            // alonemode=true; //강제 시작
            // timer20sec=alonemode?9:time20secMax;
            // net_usercount = 2;
            // vsmode = true;
            // var othername = "user" + uigame.rnd.integerInRange(0, 9999);
            // net_name4 = [net_yourname,othername,undefined,undefined]; //사이드UI상 이름들 //로그인서치할때순위?
            // net_userall=[net_yourname,othername,undefined,undefined]; //순위정렬 이름들
            // net_userallfin=[net_yourname,othername,undefined,undefined]; //순위정렬 이름들
            // net_userallkill=[          0,        0,undefined,undefined]; //
            // uimode = uimodeset.select;//result나 find로 나올수 있으나 우선 임시적으로
            // uigame.state.states.menu.advanceToGame();
            // return;
            // //강제싱글모드-----------------------

            alonemode = false;
            //싱글모드 생성준비  10초 대기
            matchupsingle += this.game.time.elapsed;
            //console.log("matchupsingle:"+matchupsingle+", matchupsinglemax:"+matchupsinglemax);

            // //소켓아이오 없이 가능하게 처리
            // //로컬상태에서는 여기서 "user"
            // //로그인상태에서는 "rambo119
            // if(net_yourname.includes(net_yourname_source)
            //     && net_userall[0]==undefined
            // ){
            //정상인경우도 여기에 도달함!!!
            //     //소켓아이오에러인경우 "rambo119-e"로 변환하고, "rambo119-e-e-e-e"를 방지
            //     if(net_yourname[net_yourname.length-1] !== "e"
            //     && net_yourname[net_yourname.length-2] !== "-"
            //     ) {
            //         net_yourname += "-e";
            //     }
            //     net_name4[0] = net_yourname;
            //     net_userall[0] = net_yourname;
            // }
            // //소켓아이오 없이 가능하게 처리

            if (matchupsingle > matchupsinglemax
                && net_userall[1] === undefined
                && (net_userall[0] === net_yourname)
            ) { //10후면 싱글모드 강제 진입

                //혼자하는모드에서 네트워크종료
                socket.emit('leaveRoom');   //얼론모드 시작시

                alonemode = true; //강제 시작

                net_usercount = 2;
                vsmode = true;
                var othername = "user" + uigame.rnd.integerInRange(0, 9999);
                net_name4 = [net_yourname, othername, undefined, undefined]; //사이드UI상 이름들 //로그인서치할때순위?
                net_userall = [net_yourname, othername, undefined, undefined]; //순위정렬 이름들
                net_userallfin = [net_yourname, othername, undefined, undefined]; //순위정렬 이름들
                net_userallkill = [0, 0, undefined, undefined]; //
                uimode = uimodeset.select;//result나 find로 나올수 있으나 우선 임시적으로


                uigame.state.states.menu.advanceToGame();
            }
            //싱글모드 생성준비


            // console.log("matchupdatetime:"+matchupdatetime);
            matchupdatetime += this.game.time.elapsed;
            if (matchupdatetime > matchupdatetimemax) //1초단위 업데이트
            {
                //내이름이 없으면 리턴
                for (this._i = 0; this._i < 4; this._i++) {
                    if (net_name4[this._i] === net_yourname) this._existname = true;
                }
                if (!this._existname) return;

                matchupdatetime = 0;
                if (net_usercount > 1) {
                    //스타트버튼 나오게
                    if (this.uifind.dlgbg9.startbtn.visible === false) this.uifind.onSetStart(); //MenuState안에 this.uifind.dlgbg9.startbtn.fnok에서 정의
                }
                if (net_usercount > 0) {
                    //선수들 리스트 업데이트
                    this._e = 1;

                    for (this._i = 0; this._i < 4; this._i++) {
                        if (this._i === 0) this._e = 1;
                        //내자신 정보를 맨위로
                        if (net_yourname === net_name4[this._i]) {
                            //사용자액자 //this.uifind.dlgbg9.slots[0].youframe9.tint = this.uifind.dlgbg9.slotscolora[0];
                            this.uifind.dlgbg9.slots[0].txname.text = net_name4[this._i];
                            this.uifind.dlgbg9.slots[this._e].onActive(true);
                        }
                        else {//다른 선수들만
                            if (this._e < 4) {
                                if (net_name4[this._i] !== undefined && this._i < net_usercount) {
                                    if (net_name4[this._i] !== this.uifind.dlgbg9.slots[this._e].txname.text) {
                                        //사용자액자 //this.uifind.dlgbg9.slots[this._e].youframe9.tint = this.uifind.dlgbg9.slotscolora[this._e];
                                        this.uifind.dlgbg9.slots[this._e].txname.text = net_name4[this._i];
                                        this.uifind.dlgbg9.slots[this._e].onActive(true);
                                    }
                                }
                                else {
                                    if (net_name4[this._i] === undefined || net_name4[this._i] !== this.uifind.dlgbg9.slots[this._e].txname.text) {
                                        //사용자액자 //this.uifind.dlgbg9.slots[this._e].youframe9.tint = ColorSet.lightgrey;
                                        this.uifind.dlgbg9.slots[this._e].txname.text = "";
                                        this.uifind.dlgbg9.slots[this._e].onActive(false);

                                    }
                                }
                                this._e += 1;
                            }
                        }//다른 선수들만
                    } //for
                }
            }
            if (net_started) {

            }
        }

        // //넷 결과보기
        // if (uimode == uimodeset.result && matchmode) {
        //     if (net_usercount == 2) vsmode = true;
        //     else vsmode = false;
        //
        //     matchupdatetime += this.game.time.elapsed;
        //     if (matchupdatetime > matchupdatetimemax) //1초단위 업데이트
        //     {
        //         this.uiresult.onRefresh();
        //         matchupdatetime = 0;
        //     }
        // }

        if (uimode == uimodeset.result && matchmode) {

        }
        //if(hsdm) hsDebug.onSet("mn","");
        // if(hsdm) hsDebug.onAdd("ielapsed", this.game.time.elapsed*0.001);
        if(hsdm) hsDebug.onUpdateHash();


    },//update

    //menustate.create에서 인풋을 입력하면 이걸 실행한다.
    showUISelectLevel: function () {  //메뉴상태에서 스타트샵을 띄우기
        if (dm) console.log("- MenuState.showUISelectLevel");
        alonemode = false;

        MainsprJpSoundRoot.addChild(globaluisoundonoff);
        globaluisoundonoff.position.setTo(290, -588);

        this.uiselectlevel.visible = true;
        //this.uiselectlevel.onUpdatePage(curLevel);//레벨선택창보이기


        //lastOpenedId = -1; 첫시작시
        //lastOpenedId = 현재플레이레벨; 진행중

        //마지막 오픈된 레벨 인덱스 구하기 1차(0인경우)
        //0(오픈시작)이 없으면 보너스레벨을 지정해버리는 문제가 있어 안사용
        var templast1=-1;
        for (var i = LEVEL_MAX - 1; i >= 0; --i) {
            if(templast1 === -1 && kData.userData[i]===0) templast1 = i;
        }
        
        //마지막 오픈된 레벨 인덱스 구하기 2차(0보다 큰경우)
        //현재 사용중인 방법
        var templast2=-1;
        for (var i = LEVEL_MAX - 1; i >= 0; --i) {
            if (templast2 === -1 && kData.userData[i] > -1) templast2 = i;
        }
        if(dm) console.log("templast1:"+templast1+", templast2:"+templast2+", lastOpenedId:"+lastOpenedId);

        if(templast2>lastOpenedId) lastOpenedId = templast2;
        
        curLevel = lastOpenedId; //여기서 마지막레벨과 현재레벨 일치시켜버린다

        this.uiselectlevel.onUpdatePage(lastOpenedId);//레벨선택창보이기
        this.grpTitleScreen.visible = false;

        //playtime_cur= 0; //in showUISelectLevel//플레이타임
        playtime_bias=0;

        var mystars = 0;
        mystars = this.uiselectlevel.getMyStar();
        var allstars = this.uiselectlevel.getAllStar();
        if(allstars !== undefined)
            this.uiselectlevel.dlbg.sTopStarBg.txTopStar.text = mystars+"/"+allstars;



        net_name4 = [undefined, undefined, undefined, undefined]; //사이드UI상 이름들 //로그인서치할때순위?
        net_userall = [undefined, undefined, undefined, undefined]; //순위정렬 이름들
        net_userallfin = [undefined, undefined, undefined, undefined]; //순위정렬 이름들
        net_userallkill = [undefined, undefined, undefined, undefined]; //


        //this.uiselectlevel.dlbg.uisoundonoff.visible = true;//사운드버튼 보이기
        this.uiselectlevel.dlbg.uisoundonoff.position.setTo(290, -588);

        if (kData.bSoundBGM) {
            if (this.uiselectlevel.dlbg.uisoundonoff.icon.visible)
                this.uiselectlevel.dlbg.uisoundonoff.icon.visible = false; //사운드켜기 상태표시
        } else {
            if (!this.uiselectlevel.dlbg.uisoundonoff.icon.visible)
                this.uiselectlevel.dlbg.uisoundonoff.icon.visible = true; //사운드끄기 상태표시
        }
        //사운드버튼 보이기

        mode20sec = false; //종료타이머 게임 시작시 초기화(스타트샵)
        timer20sec = time20secMax;///스타트샵시작시 초기화
        matchupsingle = 0; //uifind삽 싱글용 타이머

        if (true) {//샵플러스버튼도 활성화
            this.uishopplus.onRefresh();
            this.uishopplus.visible = true;
            uigame.state.states.menu.uishop.onGetList();
        }

        //hide1.visible  = false;//라이벌레이싱 2d title
        //err this.game.input.keyboard.addCallbacks(); // clear keyboard callback
        //err this.game.input.keyboard.stop(); //이건 키보드를 먹통으로 하닌거이니 조심

        //키보드먹통해결책
        var keyboard = this.game.input.keyboard;
        keyboard.onDownCallback = keyboard.onUpCallback = keyboard.onPressCallback = null;

        //addonce는 한번하고 사라지는것같은 null로 넘어옴
        //this.game.input.onDown.remove(this.advanceToGame, this); // clear mouse callback
        //
        // TODO: Find out why switching to fullscreen doesn't work well on desktop (offsets window).
        if (this.game.device.desktop === false) {
            //테스트주석// this.game.scale.startFullScreen(); //크롬모바일모드로 할때 에러가 나서 고침
        }
        //this.game.state.start('game');
    },
    showUISelectLevelWithTitle: function () {
        firsttime=false;
        // //치트코드 -- 모든레벨 오픈 in showUISelectLevelWithTitle

        // if(whereServerNet===NET_STATE.DEV_SERVER) {
        //     kData.userData = []; //in uiSelectLevel.onUpdatePage //cheat Mode
        //     for (var i = LEVEL_MAX - 1; i >= 0; --i) kData.userData[i] = 3;
        //     kData.userData[LEVEL_MAX - 1] = 0; //0레벨 오픈
        //     networkManager.ForcedSaveData();
        // }
        // //치트코드 -- 모든레벨 오픈 in showUISelectLevelWithTitle

        if (kData.bSoundSE) SE_Click.play();         //시작 클릭음                 --타이틀에서 스타트 버튼을 눌렀을 때 나오는 클릭음
        if (loginTF === 1) {                                          //로그인상태
            //if (proto.serPos == 0) {                                   //모비서비스

            //------------------------
            //첫시작시 타이틀 사라지기

            //메모리로더에서 에러가 나서 주석처리
            this.title_spine.setAnimationByName(0, "title_out", false);
            this.title_spine.addAnimationByName(1, "empty", false);//emptytrack
            //메모리로더에서 에러가 나서 주석처리




            //첫시작시 레벨선택화면으로
            setTimeout(function () { if('menu'=== uigame.state.current) {
                    console.log("menu=== uigame.state.current");
                    uigame.state.states.menu.showUISelectLevel();
                }else{
                    console.log("menu!== uigame.state.current");
                }
            }, 500);//1초뒤
            //}
        }
        else//if(loginTF == 0){ //비로그인
        {
            if (networkManager.networkState === NET_STATE.LOCALHOST) {//로컬서비스
                //------------------------
                //첫시작시 타이틀 사라지기

                //메모리로더에서 에러가 나서 주석처리
                this.title_spine.setAnimationByName(0, "title_out", false);
                this.title_spine.addAnimationByName(1, "empty", false);//emptytrack
                //메모리로더에서 에러가 나서 주석처리

                //첫시작시 스타트샵 등장
                setTimeout(function () { if('menu'=== uigame.state.current) {
                         if(dm) console.log("menu=== uigame.state.current");
                         uigame.state.states.menu.showUISelectLevel();
                     }else{
                         if(dm) console.log("menu!== uigame.state.current");
                     }
                }, 500);//1초뒤
                //------------------------

            } else {//비회원
                // //비회원나가기처리-----
                // networkManager.ModalCall(MODAL_BUTTON_TYPE.OKCANCEL, GetShpMsg('signup'), //타이틀
                //     function () {
                //         networkManager.JoinMember();
                //     },
                //     function () {
                //         uigame.input.onDown.addOnce(uigame.state.states.menu.showUISelectLevelWithTitle, uigame.state.states.menu);
                //         // //err: not a function// this.game.input.keyboard.addOnce(this, this.showUIFind);
                //         uigame.input.keyboard.addCallbacks(uigame.state.states.menu, uigame.state.states.menu.showUISelectLevelWithTitle);
                //     }
                // );
                // //비회원나가기처리----

                //------------------------
                //첫시작시 타이틀 사라지기
                //메모리로더에서 에러가 나서 주석처리
                this.title_spine.setAnimationByName(0, "title_out", false);
                this.title_spine.addAnimationByName(1, "empty", false);//emptytrack
                //메모리로더에서 에러가 나서 주석처리

                //첫시작시 스타트샵 등장
                setTimeout(function () { if('menu'=== uigame.state.current) {
                        console.log("menu=== uigame.state.current");
                        uigame.state.states.menu.showUISelectLevel();
                    }else{
                        console.log("menu!== uigame.state.current");
                    }
                }, 500);//1초뒤
                //------------------------

            }//비회원
        }


    },

    showUIFind: function () { //메뉴상태에서 검색창을 띄우기
        if (dm) console.log("- MenuState.goUIFind");
        this.uifind.visible = true;
        this.uisoundonoff.visible = false;//사운드강제숨기기
        this.uiresult.visible = false;
        //err this.game.input.keyboard.addCallbacks(); // clear keyboard callback
        //err this.game.input.keyboard.stop(); //이건 키보드를 먹통으로 하닌거이니 조심

        //키보드먹통해결책
        var keyboard = this.game.input.keyboard;
        keyboard.onDownCallback = keyboard.onUpCallback = keyboard.onPressCallback = null;

        //addonce는 한번하고 사라지는것같은 null로 넘어옴
        //this.game.input.onDown.remove(this.advanceToGame, this); // clear mouse callback
        //
        // TODO: Find out why switching to fullscreen doesn't work well on desktop (offsets window).
        if (this.game.device.desktop === false) {
            //테스트주석//this.game.scale.startFullScreen(); //크롬모바일모드로 할때 에러가 나서 고침
        }

        //this.game.state.start('game');


    },


    advanceToGame: function () {//게임시작1-5
        if (dm) console.log("- MenuState.advanceToGameed");
        this.grpTitleScreen.visible = false;
        //err this.game.input.keyboard.addCallbacks(); // clear keyboard callback
        //err this.game.input.keyboard.stop(); //이건 키보드를 먹통으로 하닌거이니 조심
        //키보드먹통해결책

        //var keyboard = this.game.input.keyboard;
        var keyboard = uigame.input.keyboard;
        keyboard.onDownCallback = keyboard.onUpCallback = keyboard.onPressCallback = null;

        //addonce는 한번하고 사라지는것같은 null로 넘어옴
        //this.game.input.onDown.remove(this.advanceToGame, this); // clear mouse callback
        //
        // TODO: Find out why switching to fullscreen doesn't work well on desktop (offsets window).
        //if(this.game.device.desktop === false){//데스크탑에서 에러뜸--> Uncaught TypeError: Cannot read property 'device' of null
        //this.game.stage.scale.startFullScreen();//크롬모바일모드로 할때 에러가 나서 주석처리
        //}

        //this.game.stage.disableVisibilityChange = true; //포커스잃엇을때 정지시킨다


        //if(false)
        //this.game.state.start('game');

        uigame.state.start('game');

        // if(true){
        //     net_started=true;                               //네트워크게임모드 진입
        //     //matchUImode=false;                              //서치ui 중지 용도
        //     uimode=uimodeset.matchfind;
        //
        //     if( uigame.state.states.menu.uifind.visible == true) {
        //         //다른선수가 강제진행시, 또는 자동 진행시 ui업데이트
        //         uimode=uimodeset.select;
        //         uigame.state.states.menu.uifind.visible = false;
        //         uigame.state.states.menu.advanceToGame();
        //     }
        // }

    },

    showUIResult: function () {
        if (dm) console.log("- MenuState.showUIResult");

        this.uiresult.visible = true; //여긴안오는것같음
        //err this.game.input.keyboard.addCallbacks(); // clear keyboard callback
        //err this.game.input.keyboard.stop(); //이건 키보드를 먹통으로 하닌거이니 조심

        //키보드먹통해결책
        var keyboard = this.game.input.keyboard;
        keyboard.onDownCallback = keyboard.onUpCallback = keyboard.onPressCallback = null;

        //addonce는 한번하고 사라지는것같은 null로 넘어옴
        //this.game.input.onDown.remove(this.advanceToGame, this); // clear mouse callback
        //
        // TODO: Find out why switching to fullscreen doesn't work well on desktop (offsets window).
        if (this.game.device.desktop === false) {
            //테스트주석//this.game.scale.startFullScreen(); //크롬모바일모드로 할때 에러가 나서 고침
        }

        //this.game.state.start('game');
    },

    shutdown: function () {//메뉴상태제거 //게임시작1-6 메뉴파괴후 --> GameState.create로
        //console.log("- MenuState.shutdowned");//ready메뉴가 나온다


        //this.uiselectlevel = createUISelectLevel();
        this.uiselectlevel.spine_unlock_n.destroy(true);
        this.uiselectlevel.spine_unlock_b.destroy(true);
        this.uiselectlevel.dlbg.sLeft.destroy(true);
        this.uiselectlevel.dlbg.sRight.destroy(true);
        this.uiselectlevel.z_page_lock.z_lock_life.destroy(true);
        this.uiselectlevel.z_spine_page_lock.destroy(true);
        this.uiselectlevel.dlbg.txPageBg.destroy(true);
        this.uiselectlevel.dlbg.txPage .destroy(true);
        this.uiselectlevel.dlbg.uisoundonoff.destroy(true);
        this.uiselectlevel.dlbg.btmulti .destroy(true);
        this.uiselectlevel.spMask_sel.destroy(true);
        for (var i = 0; i < LV4x4; i++) {
            this.uiselectlevel.dlbg.sIcons[i].sOn.sStar1.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].sOn.sStar2.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].sOn.sStar3.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].sSelected.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].sOn.icon.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].sOn.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].sOff.destroy(true);

            this.uiselectlevel.dlbg.sIcons[i].sBonusTx.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].sLockBonus.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].sBonusClearM.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].sBonusSP1.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].sBonusSP2.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].sBonusSP3.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].sBonusSP4.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].z_panel_h.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].z_panel_c.destroy(true);

            this.uiselectlevel.dlbg.sIcons[i].sBonus.destroy(true);
            this.uiselectlevel.dlbg.sIcons[i].destroy(true);
        }
        this.uiselectlevel.dlbg.sTopStarBg.txTopStar.destroy(true);
        this.uiselectlevel.dlbg.sTopStarBg.destroy(true);
        this.uiselectlevel.dlbg.destroy(true);




        this.text = null;
        this.logo = null;
        if(this.title_spine!==null) this.title_spine.destroy(true);

        if(this.grpTitleScreen !== null)
            this.grpTitleScreen.destroy(true);
        //this.dude.destroy()


        if(this.uiselectlevel !== null)
            this.uiselectlevel.destroy(true);
        if(this.uishopplus !== null)
            this.uishopplus.destroy(true);
        if(this.uishop !== null)
            this.uishop.destroy(true);

        if(this.uifind !== null)
            this.uifind.destroy(true);

        if(this.uiresult !== null)
            this.uiresult.destroy(true);

        if(this.uishopresult !== null)
            this.uishopresult.destroy(true);

        if(this.uidev !== null)
            this.uidev.destroy(true);

        if(this.whiteshop !== null)
            this.whiteshop.destroy(true);

        this._i = null;
        this._j = null;
        this._e = null;
        this._existname = null;


        //this.game.world.removeAll();
        this.game = null;

    }


};

var playergame;
var playercursor;
PlayerController = function(game) {
    this.updatecnt=0;
	this.game = game;
	playergame=game;

	this.gameState = game.state.states[game.state.current];
	this.utilities = this.gameState.utilities;
	this.massiveController = this.gameState.massiveController;

};

PlayerController.prototype = {
	// constants
	struggleDuration: 500,	// duration of cop struggle animation (on PC)
	struggleVelocity: 180,	// velocity applied for the duration of cop struggle (on PC)
	moveSpeed: 550, //250,				// X velocity that player vehicle moves when FOLLOW_TOUCH is set to true
	followTouchSpeed: 800,//150,		// X velocity that player vehicle tracks touch point when FOLLOW_TOUCH is set to true
	followTouchDeadZone: 10,	// player vehicle will follow touch location if X distance is less than this value
	roadBounds: {
		min:170, //90,
		max:720-170, //230
	},							// min and max range that player vehicle's 'x' property can have
	
	init: function()
	{
        if(dm) console.log("- PlayerController.init");
        endgameonoff = false;  //게임종료 아님으로 (시간도달,체크배경도달)

        //this.upperbar = this.game.add.sprite(xc, 40, 'game_b', 'start_road_4.png');//상단바
        //this.upperbar.anchor.setTo(0.5,0.5);
        
		//this.game.input.enabled=true;
		//this.applyStruggleTimer = 0;	// timer (in milliseconds) that counts down while cop is truggling
		//this.struggleDirection = 0;		// value that gets multiplied by cop struggle velocity delta (-1 or 1)
		
		//leap 뛰어오르기
		//this.playerLeap = this.game.add.sprite(0, 0, 'sprite_atlas');
        //this.playerLeap = this.game.add.sprite(0, 0, 'game_a', 'my_car_3.png'); //뛸때 애니
		//this.playerLeap.animations.add('player_leap', ['player_leap.png']);
		//this.playerLeap.animations.stop('player_leap');

		// this.playerLeap.reset(
         //    this.massiveController.xLanePositions[1],
         //    this.game.world.height + this.playerLeap.height
        // );
		// this.playerLeap.anchor.setTo(0.5, 0.5);
		// this.playerLeap.kill();
		
		if(this.game.device.desktop)
		{
			this.leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);
			this.rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
            this.qKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Q);

            this.aKey = this.game.input.keyboard.addKey(Phaser.Keyboard.A);
            this.dKey = this.game.input.keyboard.addKey(Phaser.Keyboard.D);

            this.oneKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ONE);
            this.twoKey = this.game.input.keyboard.addKey(Phaser.Keyboard.TWO);
            this.threeKey = this.game.input.keyboard.addKey(Phaser.Keyboard.THREE);
        }
        //this.gameState.onMistake.add(this.onMistake, this);

        //mistake4 = [0,1,2,3];

        //mistake4 = [0,1,2,3];//실수카운트를 저장, 초기값은 싱글모드
        //mistake4_sort=[0,0,0,0]; //임시데이터 랭크용
        //mistake4_myrank=0;
        //sortMistake4();
        //getMyRank();

        uigame.time.events.loop(Phaser.Timer.QUARTER, this.utilities.updateFxNormal, this);
    },


	destroy: function()
	{//게임재시작1-4
        if(dm) console.log("- PlayerController.destroy");

		this.gameState = null;
		this.utilities = null;
		this.massiveController = null;
		this.attachedVehicle = null;
		this.playerLeap = null;
		
		if(this.game.device.desktop)
		{
			this.leftKey = null;
			this.rightKey = null;
			this.debugKey = null;
		}
		this.game = null;
	},
	update: function()
	{
        // if(this.updatecnt<10) {
        //     console.log("- PlayerController.update "+this.updatecnt);
        //     this.updatecnt+=1;
        // }
		if(!this.gameState.gameBegun)
			return;
		

        if(this.gameState.gameOver)
        {
            // stop player movement when game is over
            //this.attachedVehicle.body.velocity.x = 0;
            return;
        }

        // // process input
        // if(mistaking) {
        //     this.attachedVehicle.body.velocity.x = 0;
        //     return;
        // }

        if(this.game.device.desktop)
        {

            //spaceKey
            //if(this.spaceKey.isDown) {
            //if(Paddle===undefined) return;
            if(game.state.current !== "game") return;

            if(this.qKey.isDown && false){ //잠궈놨음
                //if(game.input.keyboard.isDown(Phaser.Keyboard.SHIFT)) {
                    this.gameState.onCopyBalls.dispatch();
                    this.gameState.onReleaseBalls.dispatch();
                //}
            }else if(this.dKey.isDown && false){//잠궈놨음
                if(dmCollision===true){
                    dmCollision=false;
                    this.game.debug.reset();
                }else{
                    dmCollision=true;
                }
            }else if(game.input.keyboard.isDown(Phaser.Keyboard.NUMPAD_DECIMAL)){ //개발메뉴
                //ctrl+shift+h//'dev'메뉴//데브메뉴//
                //return; //치트키끄기
                //if(game.input.keyboard.isDown(Phaser.Keyboard.SHIFT)
                //   &&
                if(game.input.keyboard.isDown(Phaser.Keyboard.CONTROL)) {
                    var stgame = uigame.state.states.game;
                    stgame.uiController.uiDev.visible=true;

                }
                //ctrl+shift+h//'dev'메뉴//데브메뉴//
            }else if(game.input.keyboard.isDown(Phaser.Keyboard.F)){
                //'h'key
                //var stgame = uigame.state.states.game;
                //stgame.uiController.uiDev.visible=true;
                //'h'key
            }
        }
        else {
            if(this.game.input.activePointer.isDown) //터치모드
            {
                    if(this.game.input.activePointer.x < this.game.world.centerX) {
                        //if(uigame.state.states.game.uiController.btnleft.input.isDragged) {
                            //if (reverseMode) this.moveRight(); //리버스모드
                            //else this.moveLeft(); //노말모드
                        //}
                    }
                    else {
                        //if(uigame.state.states.game.uiController.btnright.input.isDragged) {
                            //if (reverseMode) this.moveLeft(); //리버스모드
                            //else this.moveRight(); //노말모드
                        //}
                    }
                //}//follow_touch
            }
            else {
                //this.attachedVehicle.angle = 0;
                //this.attachedVehicle.body.velocity.x = 0;
            }
        }//if(this.game.device.desktop)

	},
			
	postUpdate: function()
	{
        // // if(this.updatecnt<10) {
        // //     console.log("- PlayerController.postUpdate");
        // //     this.updatecnt+=1;
        // // }
        //
        // // restrain player vehicle's x position so it stays within the road
        // if(this.attachedVehicle)
        // {
		 //    //플레이어 이동 범위를 제어한다.
			// if(this.attachedVehicle.x < this.roadBounds.min)
			// 	this.attachedVehicle.x = this.roadBounds.min;
			// else if(this.attachedVehicle.x > this.roadBounds.max)
			// 	this.attachedVehicle.x = this.roadBounds.max;
        // }
        //
        // // handle vehicle-to-vehicle collisions
        // if(!DEBUG) {    this.game.physics.arcade.collide(this.attachedVehicle, //신코드
        //                     this.massiveController.vehicles,
        //                     this.collisionHandler, //==paddleHitBallHandler
        //                     null,
        //                     this
        //             );
        //
        //             //this.game.physics.collide(this.attachedVehicle, //구코드
        //             // this.massiveController.vehicles,
        //             // this.collisionHandler,
        //             // null,
        //             // this);
        //
        //             this.game.physics.arcade.overlap(this.attachedVehicle, //신코드
        //                 this.massiveController.boosters,
        //                 this.overlapHandler, //==paddleHitBallHandler
        //                 null,
        //                 this
        //             );
        // }
	},
	
	collisionHandler: function(attachedVehicle, roadVehicle) //충돌시
	{

	},
     overlapHandler: function(attachedVehicle, roadVehicle) //트리거시 오버랩시 //부스터 오버랩
    {
        if(!mistaking) {

        }
    },
	moveRight: function()
	{
        if(dm) console.log("- PlayerController.moveRight");

		if(//this.applyStruggleTimer === 0 &&
            this.attachedVehicle.x < this.roadBounds.max) {
            this.attachedVehicle.body.velocity.x = this.moveSpeed;
            //인풋회전처리
            if(this.attachedVehicle.angle<0) this.attachedVehicle.angle=0;
            else if(this.attachedVehicle.angle<10) this.attachedVehicle.angle+=2.5;
            else this.attachedVehicle.angle = 10;
            //인풋회전처리
        }
		else {
            this.attachedVehicle.body.velocity.x = 0;
            this.attachedVehicle.angle=0;
        }
	},
	
	moveLeft: function()
	{
        if(dm) console.log("- PlayerController.moveLeft");


		if(//this.applyStruggleTimer === 0 &&
            this.attachedVehicle.x > this.roadBounds.min) {
            this.attachedVehicle.body.velocity.x = -this.moveSpeed;
            //인풋회전처리
            if(this.attachedVehicle.angle>0) this.attachedVehicle.angle=0;
            else if(this.attachedVehicle.angle>-10) this.attachedVehicle.angle-=2.5;
            else this.attachedVehicle.angle = -10;
            //인풋회전처리
        }
		else {
            this.attachedVehicle.body.velocity.x = 0;
            this.attachedVehicle.angle=0;
        }
	},

	attachToVehicle: function(vehicle)//- UIController.onGameBegun이후 한번 호출, motorcycle_police
	{
        if(dm) console.log("- PlayerController.attachToVehicle("+ vehicle.name +")");

		if(this.attachedVehicle)
			this.massiveController.restoreVehicleToCache(this.attachedVehicle);

		//this.attachedVehicle = this.massiveController.cachedVehicles[vehicle.name + '_player'];
		this.attachedVehicle = this.massiveController.cachedVehicles[ vehicle.name];


		this.attachedVehicle.reset(vehicle.x, vehicle.y);
		this.attachedVehicle.lane = vehicle.lane;
		
		this.massiveController.vehicles.bringToTop(this.attachedVehicle);//레이어상위로이동
		
		this.massiveController.restoreVehicleToCache(vehicle);
		vehicle.inputEnabled = false;
		this.playerLeap.kill();
	},
    attachToVehicle_edit: function(vehiclename)//- UIController.onGameBegun이후 한번 호출, motorcycle_police
    {
        if(dm) console.log("- PlayerController.attachToVehicle_new("+ vehiclename +")");
        this.attachedVehicle = this.massiveController.cachedVehicles[ vehiclename];
        this.attachedVehicle.reset(playerx, playery);
        this.attachedVehicle.lane = 1;
        this.massiveController.vehicles.bringToTop(this.attachedVehicle);//레이어상위로이동
    },

    attachToVehicle_edit_fx: function()
    {
        //자동차 사이드 이펙트
        var grp = uigame.add.group();
        this.attachedVehicle.addChild(grp);
        this.attachedVehicle.fxside = grp;
        //옆구리
        var fx1 = uigame.add.sprite(-1, 20, 'game_a', 'booster_eff_2.png');
        fx1.blendMode = Phaser.blendModes.ADD;
        fx1.scale.setTo(0.75,0.75);
        fx1.anchor.setTo(0.5,0.5);
        this.attachedVehicle.fxside.addChild(fx1);
        this.attachedVehicle.fxside.visible=false;

        //앞쪽 헤드 이펙트
        var grp2 = uigame.add.group();
        this.attachedVehicle.addChild(grp2);
        this.attachedVehicle.fxhead = grp2;
        var fx3 = uigame.add.sprite(-1, -50, 'game_a', 'booster_eff_1.png');
        fx3.blendMode = Phaser.blendModes.ADD;
        fx3.scale.setTo(1,1);
        fx3.anchor.setTo(0.5,0.5);
        this.attachedVehicle.fxhead.addChild(fx3);
        //뒤쪽 트레일
        var fx2 = uigame.add.sprite(0, 80, 'game_a', 'booster_eff_3.png');
        //fx2.blendMode = Phaser.blendModes.SCREEN;
        fx2.scale.setTo(1,1);
        fx2.anchor.setTo(0.5,0.5);

        this.attachedVehicle.fxhead.addChild(fx2);
        this.attachedVehicle.fxhead.visible=false;

        //그룹fxnormal
        var grpfxnormal = uigame.add.group();
        this.attachedVehicle.addChild(grpfxnormal);
        this.attachedVehicle.fxnormal = grpfxnormal;
        var fxnormal = uigame.add.sprite(0, 60, 'game_a', 'speed_eff.png');
        //fx2.blendMode = Phaser.blendModes.SCREEN;
        fxnormal.scale.setTo(1,1);
        fxnormal.alpha=0.8;
        fxnormal.anchor.setTo(0.5,0.5);

        this.attachedVehicle.fxnormal.addChild(fxnormal);
        this.attachedVehicle.fxnormal.visible=false;


    },
    beginfxhead: function()
    {
        this.attachedVehicle.fxhead.visible=true;
        //알파등장
        TweenMax.fromTo( this.attachedVehicle.fxhead,
            0.15, //time
            {
                alpha: 1
            }, {
                alpha: 0.5,
                ease: Sine.easeInOut,//ease: Linear.easeNone,
                yoyo:true,
                repeat:-1,
                delay: 0//car1.delay
                //onStart:function () { grp.num123[3].visible=true; },
                //onComplete: function () {}
            }
        );
    },
    beginfxside: function()
    {
        this.attachedVehicle.fxside.visible=true;
        //알파등장
        TweenMax.fromTo( this.attachedVehicle.fxside,
            0.1, //time
            {
                alpha: 1
            }, {
                alpha: 0,
                ease: Sine.easeInOut,//ease: Linear.easeNone,
                //yoyo:true,
                //repeat:1,
                delay: 0//car1.delay
                //onStart:function () { grp.num123[3].visible=true; },
                //onComplete: function () {}
            }
        );
    },
    endfx: function () {
        TweenMax.killTweensOf(this.attachedVehicle.fxhead);
        TweenMax.killTweensOf(this.attachedVehicle.fxside);
        this.attachedVehicle.fxhead.visible=false;
        this.attachedVehicle.fxside.visible=false;

    },
    // beginfxnormal: function()
    // {
    //     this.attachedVehicle.fxnormal.visible=true;
    //     //알파등장
    //     TweenMax.fromTo( this.attachedVehicle.fxnormal,
    //         0.15, //time
    //         {
    //             alpha: 1
    //         }, {
    //             alpha: 0.5,
    //             ease: Sine.easeInOut,//ease: Linear.easeNone,
    //             yoyo:true,
    //             repeat:-1,
    //             delay: 0,//car1.delay
    //             //onStart:function () { grp.num123[3].visible=true; },
    //             onComplete: function () {}
    //         }
    //     );
    // },
    // endfxnormal: function () {
    //     TweenMax.killTweensOf(this.attachedVehicle.fxnormal);
    //     this.attachedVehicle.fxnormal.visible=false;
    // },
    // copStruggle: function(direction)
    // {
    //     if(dm) console.log("- PlayerController.copStruggle("+ direction +")");
    //
		// if(this.attachedVehicle)
		// {
		// 	this.struggleDirection = direction;
		// 	this.attachedVehicle.animations.play(direction < 0 ? 'swerve_right' : 'swerve_left');
		// }
    // },
    // onMistake: function()
    // {
    //
    // },
                              //updateGoalBG: 에서 endgameonoff=true; 해준다( playtime_bias초과시, playtime_all_cur+4초과시)
    updateGoal: function () { //endgameonoff==true일때 PlayerController.update()안에서 업데이트
	    if(this.attachedVehicle.y>-100) {
	        //게임오버되고 연출시, 속도가0으로 되서 나가지 못하는 경우가 발생
            // if (endgameonoff && cars_velocity < cars_velocity_max) {
             //    cars_velocity_max = 800;
            // }
            //this.attachedVehicle.y -= (cars_velocity * 0.07);

            this.attachedVehicle.y -= (cars_velocity_max * 0.07);
        }
	    else {
	        //차량이 위로 -100까지 넘어 이동 완료되면
	        if(!uigame.state.states.game.gameOver) {
                this.attachedVehicle.y = -100;

                //if(bSoundSE) SE_Run.mute = true;

                uigame.state.states.game.endGame(); //한번만 호출하려는 의도(ongameover, 인풋할당) //현재 안사용
            }

        }
    }
};

PowerupController = function (game) {
    this.updatecnt = 0;
    this.game = game;
    this.gameState = game.state.states[game.state.current];
    this.utilities = this.gameState.utilities;
};

PowerupController.prototype = {
    powerupsInFront: false,		// boolean that determines whether powerups are positioned in front, or behind vehicles
    positionOffsetEasy: 25,		// distance between vehicle and powerup when difficulty == 0
    positionOffsetHard: 50,		// distance between vehicle and powerup when difficulty == 1

    init: function () {
        if (dm) console.log("- PowerupController.init");
        if (false) {
            this.powerups = this.game.add.group();	// group of powerups used for collision and rendering
            this.tmpPowerup = null;					// temporary storage for powerup operations (to reduce garbage)
            this.cachedPowerups = {};				// hash map of an powerups indexable by key

            this.cachePowerup('bear', "atlas_bb-0", "ani_idle", [
                'bear_ani_1.png',
                'bear_ani_2.png',
                'bear_ani_3.png',
                'bear_ani_4.png',
                'bear_ani_5.png',
                'bear_ani_6.png',
                'bear_ani_7.png',
                'bear_ani_8.png',
                'bear_ani_9.png',
                'bear_ani_10.png',
                'bear_ani_11.png',
                'bear_ani_12.png',
                'bear_ani_13.png'
            ]);
            this.cachePowerup('itemjam', "atlas_bb-0", "ani_idle", ["item_3.png"]);
            this.cachePowerup('blocktw', "atlas_bb-0", "ani_idle", [
                'block_gold_ani_1.png', //"atlas_bb-0"
                'block_gold_ani_2.png',
                'block_gold_ani_3.png',
                'block_gold_ani_4.png',
                'block_gold_ani_5.png',
                'block_gold_ani_6.png',
                'block_gold_ani_7.png',
                'block_gold_ani_8.png',
                'block_gold_ani_9.png'
            ]);
            //this.tmpPowerup.animations.stop('powerup_star_1'); //바로전 생성한 애니메이션에 대해 스톱

            this.gameState.onGameOver.add(this.onGameOver, this); //골인 내랭킹 트로피 연출
            //this.gameState.onMistake.add(this.onMistake, this);
            this.gameState.onVehicleSpawned.add(this.onVehicleSpawned, this);

            this.spawnPowerup_xy('bear', 680, 200);
            this.tmpPowerup.animations.play('ani_idle', 15, false, undefined); //1time
            var bear = this.tmpPowerup;
            this.tmpPowerup.events.onAnimationComplete.add(function () {
                //this.tmpPowerup.animations.frame=13;
                setTimeout(function () { bear.animations.play('ani_idle', 15, false, undefined); //1time
                }, 1000);

            }, this);

            this.spawnPowerup_xy('itemjam', 680, 350);
            this.tmpPowerup.animations.play('ani_idle', 15, true, undefined); //loop

            this.spawnPowerup_xy('blocktw', 680, 400);
            this.tmpPowerup.animations.play('ani_idle', 15, true, undefined); //loop
            //this.tmpPowerup.animations.play('ani_twinkle', 15, false, true); //hide
        }
    },

    //-----------------
    destroy: function () {   //게임재시작1-5
        if (dm) console.log("- PowerupController.destroy");//게임재시작1-4

        this.powerups = null;
        this.tmpPowerup = null;
        this.cachedPowerups = null;
        this.gameState = null;
        this.utilities = null;
        this.game = null;
    },

    // TODO: add support for multiple frame animations for powerups.
    //		 currently, animationData takes in an array of frame names
    cachePowerup: function (powerupKey, atlasName, aniName, aniData) {

        if (dm) console.log("- PowerupController.cachePowerup_Ani(" + powerupKey + ", " + aniData + ")");

        this.tmpPowerup = this.powerups.create(0, 0, atlasName, aniData[0]); //스프라이트생성
        this.tmpPowerup.kill(); //초기화용도,끄기
        var anim = this.tmpPowerup.animations.add(aniName, aniData);         //애니메이션생성

        //rb
        this.game.physics.enable(this.tmpPowerup, Phaser.Physics.ARCADE);
        this.tmpPowerup.body.collideWorldBounds = true;
        this.tmpPowerup.body.bounce.set(1);
        //this.paddle.body.immovable = true;
        //rb

        this.tmpPowerup.body.setSize(anim.currentFrame.sourceSizeW, anim.currentFrame.sourceSizeH);
        this.tmpPowerup.anchor.setTo(0.5, 0.5);
        this.tmpPowerup.initialDifficulty = 0; // necessary to slow down vehicle when 'powerup_slow' powerup is collected
        this.tmpPowerup.outOfBoundsKill = true;
        this.tmpPowerup.inWorld = false;
        this.tmpPowerup.name = powerupKey;
        this.cachedPowerups[powerupKey] = this.tmpPowerup;

    },

    //스폰후 오브젝트에 붙이기
    spawnPowerup: function (powerupKey, vehicleToAttach) {
        if (dm) console.log("- PowerupController.spawnPowerup(" + powerupKey + ", " + vehicleToAttach + ")");

        this.tmpPowerup = this.cachedPowerups[powerupKey];
        // can't have more than one of the same type active at once
        if (!this.tmpPowerup.alive) {
            var offset = vehicleToAttach.body.height / 2;
            //20					//50						//0 or 1
            offset += this.utilities.lerp(this.positionOffsetEasy, this.positionOffsetHard, this.gameState.difficulty);
            if (this.powerupsInFront) offset *= -1;							  //앞위치이면 -y값으로 변경
            this.tmpPowerup.reset(vehicleToAttach.x, vehicleToAttach.y + offset);//난이도에 따라 기본차량y높이+난이도별y
            this.tmpPowerup.body.velocity.y = vehicleToAttach.body.velocity.y; //차량속도를 아이템에 그대로 적용
            this.tmpPowerup.initialDifficulty = this.gameState.difficulty;    //아이템난이도에 저장
        }
    },
    spawnPowerup_xy: function (powerupKey, xpos, ypos) {
        if (dm) console.log("- PowerupController.spawnPowerup_xy(" + powerupKey + ")");

        this.tmpPowerup = this.cachedPowerups[powerupKey];
        if (!this.tmpPowerup.alive) {
            this.tmpPowerup.reset(xpos, ypos);

        }
    },


    //시그날 //해당오브젝트에 맞는 아이템 스폰시도
    onVehicleSpawned: function (vehicle) {
        if (dm) console.log("- PowerupController.onVehicleSpawned(" + vehicle.name + ")");

        switch (vehicle.name) {
            case 'motorcycle_police':
                //if (DEBUG) console.log("Motorcycle spawned - creating CALM POWERUP");
                this.spawnPowerup('powerup_calm', vehicle);
                break;
            case 'car_police':
                //if (DEBUG) console.log("Police Car spawned - creating STAR POWERUP");
                this.spawnPowerup('powerup_star', vehicle);
                break;
            case 'truck':
                //if (DEBUG) console.log("Truck spawned - creating SLOW POWERUP");
                this.spawnPowerup('powerup_slow', vehicle);
                break;
        }
    }
    ,

    onGameOver: function ()//모든파워업0
    {
        if (dm) console.log("- PowerupController.onGameOver");
        // when game is over stop all vehicles
        this.powerups.forEachAlive(this.utilities.zeroVelocity, null); //gameover
    }
    ,

    // onMistake: function () {
    //     if (dm) console.log("- PowerupController.onMistake");
    //     // when game is over stop all vehicles
    //     //this.powerups.forEachAlive(this.utilities.zeroVelocity, null );
    // },

    update: function () {},
    postUpdate: function () {},

//플레이이와 아이템이 오버랩시
//     checkPowerupCollected: function (powerup) {
//         //console.log("- PowerupController.checkPowerupCollected("+powerup.name+")");
//
//         if (this.game.physics.arcade.overlap(this.gameState.playerSprite, powerup))
//         //if(this.game.physics.overlap(this.gameState.playerSprite, powerup))
//         {
//             switch (powerup.name) {
//                 case 'powerup_calm':
//                     this.gameState.calmDown();
//                     break;
//                 case 'powerup_slow':
//                     this.gameState.slowDown();
//                     break;
//                 case 'powerup_star':
//                     this.gameState.starCollected();
//                     break;
//             }
//             powerup.kill();
//         }
//     },
}
;

MassiveController = function (game) {
    this.spawncnt = 0;
    this.updatecnt = 0;
    this.game = game;
    this.h = game.height;
    this.gameState = game.state.states[game.state.current];
    this.utilities = this.gameState.utilities;


    //bb---------------------------------------------------------------<<생성

        this.targetxy = {x:0, y:0},
        this.RedorGreen;
        this.prev,//
        this.last,//ball.body.position;
        this.dirc,//같은 방향
        this.dirr,//반전


        this.mskl,
        this.mskr,
        this.mskllen,
        this.mskrlen,
        this.msklmax,
        this.mskrmax,
        this.mskloff,
        this.mskroff,
        this.mskldir,
        this.mskrdir,

        this._mskx, //업데이트용 변수
        this._msky,
        this._mxobj,
        this._mski,

        this._i=0,//i,j,k, ijk
        this._j=0,
        this._k=0,
        this._m=0,
        this._n=0,
        this._o=0,
        this._p=0,
        this._pos,
        this._ai=0,
        this._aj=0,

        this._tmptile=0;
        this._tmpcolor=0;
        //this._tmptile_y=0;

        this._ri=0, //릴리즈할때 사용
        this._rk=0,

        this._xa=0, //폭발공 아이템 사용시
        this._xb=0,
        this._ya=0,
        this._yb=0,
        this._cntliving=0,

        this.ball,
        this.paddle,
        this.paddlePosY=1000, //패들 높이값 1120
        this.attrTimer=60, //속성타이머
        this.padatt = PadAttr.normal, //속성ㅊ
        this.padsize = PadSize.normal, //길이
        this.padsizeold = PadSize.normal,
        this.ballstate = BallType.normal_n, //속성 //초기화
        this.tiles = [],
        // this.livesText = 0,
        //this.introText = 0,
        this.introboxcap=0;
        //this.introbox=0;
        //this.scoreText = null,
        this.stageText = null,
        this._sideblk = null,
        this.uiCombo = null,

        this.background = 0,
        this.ballOnPaddle = true, //선언
        this.ballOnPaddleTweening = false, //선언
        //this.ballsize = 1, //0 작음, 1 노말, 2 큼
        //this.lives = 3,//선언
        //this.livesUI = null,
        //this.score = 0,
        //this.intro_fin = false;

        this.navi = null,

        this.DtSec = 0;

        //새로추가된
        //this.currentLevel = 0,
        this.countDownTime = 3,
        this.countDownTimeElapsed = 0,
        this.countDondTick = 1,
        this.isCountDownOff = false,
        this.paddleNerfTime = 6000,
        bbLevel = [],      //113버젼 모든레벨
        bbLevel_coloronly = [],      //113버젼 모든레벨
        this.background = 0,           //배경 그림
        //this.isPaddleNerfed=false,   //isSmall //this.padsize = PadSize.nerf;
        this.bricks = [],              //113버젼 플레이레벨 //지워질예정
        this.brickCount = 0,
        this.bricksWithItems = [], //블록이름만 저장 //dropOneItems: 에서 랜덤아이템제공
        this.dropItemLimit = 5,//4,//3, //5개===0빈것,1네가티브,2,포지티브,3복제공,4,총알
        this.tile1width = 0,
        this.tile1height = 0,
        this.balls = 0,//피직스볼
        this.trails = 0,
        this.ballInitialX = 0,
        this.ballInitialY = 0,
        //this.ballSpeed = 220,
        this.ballMaxVel = 300,

        this.redbeardelaytimer = -1,
        this.redbeardelaymax = 5,

        this.redBearVel=70;
        this.redBears = 0,//적색곰
        this.redbeartimer = -1, //생성
        //this.redbeartimemax = 7,

        this.greenBearVel=70;
        this.greenBears = 0,//녹색곰
        this.greenbeartimer = -1, //생성
        //this.greenbeartimemax = 7,

        this.bounds3 = [],
        this.boundLeftOffsetByPaddle = 0,
        this.boundRightOffsetByPaddle = 0,

        this.fixedballs = [],


        this.bullets,
        this.SHOT_DELAY = 300,//200,                   // milliseconds (10 bullets/second)
        this.BULLET_SPEED = 700,                 // pixels/second
        this.lastBulletShotAt = 0,
        //this.gunpos = [{x: -23, y: -20}, {x: 23, y: -20}],

        this.gunpos = [[31, -20], [66,-20], [107,-20], [146, -20], [188, -20]], //총배치y는 -12
        this.bulletx=this.gunpos[1][0];
        this.bullety=this.gunpos[1][1];
        guntimer = 0,   //초단위로 차감
        //this.guntimeroldbak = 0,
        gunstate = ThreeState.none,
        this.temp_delete_dup_count = 0,

        this.releasetimer = 0,
        this.releasetimemax = 5,//tick

        //this.maxwithoutgold=0;
        //this.curwithoutgold=0;
        this.countgold =0;
        this.countgoldcur =0;

        //this.ballsCount = 0,

        this.se_brickDeath = 0,
        this.se_powerdown = 0,
        this.se_powerup = 0,
        this.se_recover = 0,
        //새로추가된


        this.defaultTextOptions = {
            font: "20px Arial",
            align: "left",
            fill: "#ffffff"
        },

        this.boldTextOptions = {
            font: "40px Arial",
            fill: "#ffffff",
            align: "center"
        },

        //ending_fin=false;
        //ending_fin_begin=false;
        ending_step=_steps.none; //in massive

        //공발사, 공-패들죽음, 총알죽음, 충돌(총알-블록, 패들-공, 아이템-패들)
        this.helpers = {
            /**
             * Releases ball from the paddle.
             */
            release: function () { //클릭시
                if(dm) console.log('--release--');

                return;
            },

            /**
             * Ball went out of bounds.
             */
            death: function (ball1) { //적곰//녹곰들도 사용중이다 //공이 죽거나 곰이 죽으면 호출

                //현재볼1을 죽이고, 남은 갯수==0이면 게임오버
                if(dm) console.log("-------------------------death():"+ball1.name+", "+ball1.x+", "+ball1.y);
                ball1.kill();
                this.setTrails(); //in death

                
                if (this.balls.countLiving() <= 0) { //공이없어서 패들사망으로-----
                    this.death_Force();
                } //공이없어서 패들사망으로-----
            },

            deathbullet1: function (bullet1) {
                bullet1.kill();
            },

            /**
             * Game over, all lives lost.
             */
            gameOver: function (ball1) {
                ball1.body.velocity.setTo(0, 0);
                //this.introText.text = "Game Over!";
                //this.introText.visible = true;
            },



            /**
             * Callback for when ball collides with Tiles.
             */
            ballCollideWithTile: function (ball, tile) { //볼과타일충돌

                if(dm) console.log("collide "+tile.name);
                //     var a =ball.body.prev;
                //     var b =ball.body.position;
                //     var c =ball.body.preRotation;
                //     var d =ball.body.rotation;
                if (ball.body.velocity.y > 0) {
                    if (ball.body.velocity.y < 845) ball.body.velocity.y += uigame.rnd.integerInRange(-5, 15);
                    else ball.body.velocity.y += uigame.rnd.integerInRange(-15, 5); //최고속일때 줄인다
                } else {
                    if (ball.body.velocity.y > -845) ball.body.velocity.y += uigame.rnd.integerInRange(-15, 5);
                    else ball.body.velocity.y += uigame.rnd.integerInRange(-5, 15); //최고속일때 줄인다
                }

                if(dm) console.log("collide:"+tile.name);
                //죽은속성이면 처리
                if(tile.z_step<0) return;

                //먼저 폭발공처리
                _chk1_SE_Brick_Extinction_F = false;
                _chk2_SE_Brick_Extinction_F = false;
                
                //볼속성 폭발공이때 블록처리
                if(this.ballstate === BallType.bomb_n
                    ||this.ballstate === BallType.bomb_s
                    ||this.ballstate === BallType.bomb_b) {

                    //첫번째 this블록제거-----
                    if(kData.bSoundSE) SE_Brick_Extinction_F.play();//블록폭발파괴 //1/3차
                    //stgame.massiveController.tiles.bringToTop(tile);//브링투탑

                    //에러감시//에러체크//
                    if(typeof(bbLevel) === 'undefined') console.log("bbLevel == undefined");
                    if(typeof(bbLevel[tile.z_y]) === 'undefined') console.log("bbLevel[] == undefined, "+tile.z_y);
                    if(typeof(bbLevel[tile.z_y][tile.z_x]) === 'undefined') console.log("bbLevel[][] == undefined, "+tile.z_z);
                    //에러감시
                    bbLevel[tile.z_y][tile.z_x]=-1; //타일 속성배열에서 초기화
                    tile.z_step=-1;
                    //하트블록도 태워버린다.
                    tile.animations.play('fire', 25, false, true);

                    tile.body.enable=false;

                    if(modeOption[0]===2 &&tile.z_isheart) {
                        if (kData.userData[curLevel] < modeOption[2]) {
                            if(dm) console.log("heart increased - old:"+kData.userData[curLevel]+",cur:"+(kData.userData[curLevel]+1)+", name:"+tile.name);
                            kData.userData[curLevel]+=1;//보너스모드,하트블록이면 보너스하트습득
                            //kData.iHeart+=1;
                            MainUI.z_shopplus.onRefresh();
                            //하트증가
                        }else{
                            kData.userData[curLevel]=modeOption[2];
                            if(dm) console.log("heart over!!!!"+", name:"+tile.name);
                        }
                        MainUI.z_heartcnt_b.text=kData.userData[curLevel];//보너스모드
                        MainUI.z_heartcnt_b.z_number.text="/"+modeOption[2];
                        if (kData.bSoundSE) SE_Item_Good.play();//하트획득사운드
                    }

                    this.runTweenCombo(1); //폭발공으로 점수

                    //무적이 아니면, 아이템드롭시도
                    if (tile.z_color!==9 && this.bricksWithItems.indexOf(tile.name) > -1) {
                        //this.bricksWithItems.pop(tile.name);
                        if(dm) console.log("this.bricksWithItems.length:"+this.bricksWithItems.length);
                        this.dropOneItems(tile.x, tile.y);
                    }
                    //첫번째 this블록제거-----

                    //x그리드 11개 y그리드 18개
                    
                    //오른쪽,왼쪽용 좌표
                    this._xa = tile.z_x + 1;
                    this._xb = tile.z_x - 1;
                    var masscon = uigame.state.states.game.massiveController;

                    //오른쪽 폭발공주변
                    aroundtile = bbLevel[tile.z_y][this._xa];
                    if (this._xa < 11
                        && aroundtile !== -1 && aroundtile.alive && aroundtile.z_step >= 0
                    ) {
                        var delay1a = bbLevel[tile.z_y][this._xa];
                        bbLevel[tile.z_y][this._xa].z_step -= 1;
                        _chk1_SE_Brick_Extinction_F=true;

                        if(modeOption[0]===2 && aroundtile.z_isheart) {
                            if (kData.userData[curLevel] < modeOption[2]) {
                                if(dm) console.log("heart increased - old:"+kData.userData[curLevel]+",cur:"+(kData.userData[curLevel]+1)+", name:"+tile.name);
                                kData.userData[curLevel]+=1;//보너스모드,하트블록이면 보너스하트습득
                                //kData.iHeart+=1;
                                MainUI.z_shopplus.onRefresh();
                            }else{
                                kData.userData[curLevel]=modeOption[2];
                                if(dm) console.log("heart over!!!!"+", name:"+tile.name);
                            }
                            MainUI.z_heartcnt_b.text=kData.userData[curLevel];
                            MainUI.z_heartcnt_b.z_number.text="/"+modeOption[2];
                            if (kData.bSoundSE) SE_Item_Good.play();//하트획득사운드
                        }
                        setTimeout(function () { delay1a.animations.play('fire', 25, false, true);
                        }, 150);
                        setTimeout(function () { masscon.runTweenCombo(1);//폭발공으로 점수
                        }, 150);

                    }

                    //왼쪽 폭발공 주변
                    aroundtile = bbLevel[tile.z_y][this._xb];
                    if (this._xb > -1
                        && aroundtile !== -1 && aroundtile.alive && aroundtile.z_step >= 0
                    ) {

                        var delay2a = bbLevel[tile.z_y][this._xb];
                        bbLevel[tile.z_y][this._xb].z_step -= 1;
                        _chk1_SE_Brick_Extinction_F=true;

                        if(modeOption[0]===2 && aroundtile.z_isheart) {
                            if (kData.userData[curLevel] < modeOption[2]) {
                                if(dm) console.log("heart increased - old:"+kData.userData[curLevel]+",cur:"+(kData.userData[curLevel]+1)+", name:"+tile.name);
                                kData.userData[curLevel]+=1;//보너스모드,하트블록이면 보너스하트습득
                                //kData.iHeart+=1;
                                MainUI.z_shopplus.onRefresh();
                            }else{
                                kData.userData[curLevel]=modeOption[2];
                                if(dm) console.log("heart over!!!!"+", name:"+tile.name);
                            }
                            MainUI.z_heartcnt_b.text=kData.userData[curLevel];
                            MainUI.z_heartcnt_b.z_number.text="/"+modeOption[2];
                            if (kData.bSoundSE) SE_Item_Good.play();//하트획득사운드
                        }

                        setTimeout(function () { delay2a.animations.play('fire', 25, false, true);
                            //if(bSoundSE) SE_Brick_Extinction_F.play();//블록폭발파괴
                        }, 150);
                        setTimeout(function () { masscon.runTweenCombo(1);//폭발공으로 점수
                        }, 150);
                    }
                    
                    //위쪽 ,아래쪽 좌표
                    this._ya = tile.z_y + 1;
                    this._yb = tile.z_y - 1;
                    //위쪽 폭발공 주변
                    if(this._ya < 18) aroundtile = bbLevel[this._ya][tile.z_x];
                    if (this._ya < 18
                        && aroundtile !== -1 && aroundtile.alive && aroundtile.z_step >= 0
                    ) {
                        var delay3a = bbLevel[this._ya][tile.z_x];
                        bbLevel[this._ya][tile.z_x].z_step -= 1;
                        _chk1_SE_Brick_Extinction_F=true;

                        if(modeOption[0]===2 && aroundtile.z_isheart) {
                            if (kData.userData[curLevel] < modeOption[2]) {
                                if(dm) console.log("heart increased - old:"+kData.userData[curLevel]+",cur:"+(kData.userData[curLevel]+1)+", name:"+tile.name);
                                kData.userData[curLevel]+=1;//보너스모드,하트블록이면 보너스하트습득
                                //kData.iHeart+=1;
                                MainUI.z_shopplus.onRefresh();
                            }else{
                                kData.userData[curLevel]=modeOption[2];
                                if(dm) console.log("heart over!!!!"+", name:"+tile.name);
                            }
                            MainUI.z_heartcnt_b.text=kData.userData[curLevel];
                            MainUI.z_heartcnt_b.z_number.text="/"+modeOption[2];
                            if (kData.bSoundSE) SE_Item_Good.play();//하트획득사운드
                        }

                        setTimeout(function () {
                            delay3a.animations.play('fire', 25, false, true);
                            //if(bSoundSE) SE_Brick_Extinction_F.play();//블록폭발파괴
                        }, 150);
                        setTimeout(function () {
                            masscon.runTweenCombo(1);//폭발공으로 점수
                        }, 150);
                    }
                    //아래쪽 폭발공주변
                    if(this._yb > -1) aroundtile = bbLevel[this._yb][tile.z_x];
                    if (this._yb > -1
                        && aroundtile !== -1 && aroundtile.alive && aroundtile.z_step >= 0
                    ) {
                        var delay4a = bbLevel[this._yb][tile.z_x];
                        bbLevel[this._yb][tile.z_x].z_step -= 1;
                        _chk1_SE_Brick_Extinction_F=true;

                        if(modeOption[0]===2 && aroundtile.z_isheart) {
                            if (kData.userData[curLevel] < modeOption[2]) {
                                if(dm) console.log("heart increased - old:"+kData.userData[curLevel]+",cur:"+(kData.userData[curLevel]+1)+", name:"+tile.name);
                                kData.userData[curLevel]+=1;//보너스모드,하트블록이면 보너스하트습득
                                //kData.iHeart+=1;
                                MainUI.z_shopplus.onRefresh();
                            }else{
                                kData.userData[curLevel]=modeOption[2];
                                if(dm) console.log("heart over!!!!"+", name:"+tile.name);
                            }
                            MainUI.z_heartcnt_b.text=kData.userData[curLevel];
                            MainUI.z_heartcnt_b.z_number.text="/"+modeOption[2];
                            if (kData.bSoundSE) SE_Item_Good.play();//하트획득사운드
                        }

                        setTimeout(function () {
                            delay4a.animations.play('fire', 25, false, true);
                            //if(bSoundSE) SE_Brick_Extinction_F.play();//블록폭발파괴
                        }, 150);
                        setTimeout(function () {
                            masscon.runTweenCombo(1);//폭발공으로 점수
                        }, 150);
                    }
                    //--2/3차 폭발사운드처리
                    if(_chk1_SE_Brick_Extinction_F){
                        setTimeout(function () {
                            if(kData.bSoundSE) SE_Brick_Extinction_F_a.play();//블록폭발파괴
                        }, 150);
                    }


                    //대각선-왼 위쪽 폭발공주변
                    if(this._xb > -1 && this._ya < 18) aroundtile = bbLevel[this._ya][this._xb];
                    if (this._xb > -1 && this._ya < 18
                        && aroundtile !== -1 && aroundtile.alive && aroundtile.z_step >= 0
                    ) {
                        var delay1 = bbLevel[this._ya][this._xb];
                        bbLevel[this._ya][this._xb].z_step -= 1;
                        _chk2_SE_Brick_Extinction_F=true;

                        if(modeOption[0]===2 && aroundtile.z_isheart) {
                            if (kData.userData[curLevel] < modeOption[2]) {
                                if(dm) console.log("heart increased - old:"+kData.userData[curLevel]+",cur:"+(kData.userData[curLevel]+1)+", name:"+tile.name);
                                kData.userData[curLevel]+=1;//보너스모드,하트블록이면 보너스하트습득
                                //kData.iHeart+=1;
                                MainUI.z_shopplus.onRefresh();
                            }else{
                                kData.userData[curLevel]=modeOption[2];
                                if(dm) console.log("heart over!!!!"+", name:"+tile.name);
                            }
                            MainUI.z_heartcnt_b.text=kData.userData[curLevel];
                            MainUI.z_heartcnt_b.z_number.text="/"+modeOption[2];
                            if (kData.bSoundSE) SE_Item_Good.play();//하트획득사운드
                        }

                        setTimeout(function () {
                            delay1.animations.play('fire', 25, false, true);
                           ////if(bSoundSE) SE_Brick_Extinction_F.play();//블록폭발파괴
                        }, 300);
                        setTimeout(function () {
                             masscon.runTweenCombo(1);//폭발공으로 점수
                        }, 300);
                    }
                    //대각선-왼 아래쪽 폭발공주변
                    if(this._xb > -1 && this._yb > -1) aroundtile = bbLevel[this._yb][this._xb];
                    if (this._xb > -1 && this._yb > -1
                        && aroundtile !== -1 && aroundtile.alive && aroundtile.z_step >= 0
                    ) {
                        var delay2 = bbLevel[this._yb][this._xb];
                        bbLevel[this._yb][this._xb].z_step -= 1;
                        _chk2_SE_Brick_Extinction_F=true;

                        if(modeOption[0]===2 && aroundtile.z_isheart) {
                            if (kData.userData[curLevel] < modeOption[2]) {
                                if(dm) console.log("heart increased - old:"+kData.userData[curLevel]+",cur:"+(kData.userData[curLevel]+1)+", name:"+tile.name);
                                kData.userData[curLevel]+=1;//보너스모드,하트블록이면 보너스하트습득
                                //kData.iHeart+=1;
                                MainUI.z_shopplus.onRefresh();
                            }else{
                                kData.userData[curLevel]=modeOption[2];
                                if(dm) console.log("heart over!!!!"+", name:"+tile.name);
                            }
                            MainUI.z_heartcnt_b.text=kData.userData[curLevel];
                            MainUI.z_heartcnt_b.z_number.text="/"+modeOption[2];
                            if (kData.bSoundSE) SE_Item_Good.play();//하트획득사운드
                        }

                        setTimeout(function () {
                            delay2.animations.play('fire', 25, false, true);
                           //if(bSoundSE) SE_Brick_Extinction_F.play();//블록폭발파괴
                        }, 300);
                        setTimeout(function () {
                             masscon.runTweenCombo(1);//폭발공으로 점수
                         }, 300);
                    }
                    //대각선-오른 위쪽 폭발공주변
                    if(this._xa < 11 && this._ya < 18) aroundtile = bbLevel[this._ya][this._xa];
                    if (this._xa < 11 && this._ya < 18
                        && aroundtile !== -1 && aroundtile.alive && aroundtile.z_step >= 0
                    ) {
                        var delay3 = bbLevel[this._ya][this._xa];
                        bbLevel[this._ya][this._xa].z_step -= 1;
                        _chk2_SE_Brick_Extinction_F=true;

                        if(modeOption[0]===2 && aroundtile.z_isheart) {
                            if (kData.userData[curLevel] < modeOption[2]) {
                                if(dm) console.log("heart increased - old:"+kData.userData[curLevel]+",cur:"+(kData.userData[curLevel]+1)+", name:"+tile.name);
                                kData.userData[curLevel]+=1;//보너스모드,하트블록이면 보너스하트습득
                                //kData.iHeart+=1;
                                MainUI.z_shopplus.onRefresh();
                            }else{
                                kData.userData[curLevel]=modeOption[2];//보너스모드 별 모두
                                if(dm) console.log("heart over!!!!"+", name:"+tile.name);
                            }
                            MainUI.z_heartcnt_b.text=kData.userData[curLevel];
                            MainUI.z_heartcnt_b.z_number.text="/"+modeOption[2];
                            if (kData.bSoundSE) SE_Item_Good.play();//하트획득사운드
                        }

                        setTimeout(function () {
                            delay3.animations.play('fire', 25, false, true);
                           //if(bSoundSE) SE_Brick_Extinction_F.play();//블록폭발파괴
                        }, 300);
                        setTimeout(function () {
                             masscon.runTweenCombo(1);//폭발공으로 점수
                        }, 300);
                    }
                    //대각선-오른 아래쪽 폭발공주변
                    if(this._xa < 11 && this._yb > -1) aroundtile = bbLevel[this._yb][this._xa];
                    if (this._xa < 11 && this._yb > -1
                        && aroundtile !== -1 && aroundtile.alive && aroundtile.z_step >= 0
                    ) {
                        var delay4 = bbLevel[this._yb][this._xa];
                        bbLevel[this._yb][this._xa].z_step -= 1;
                        _chk2_SE_Brick_Extinction_F=true;

                        if(modeOption[0]===2 && aroundtile.z_isheart) {
                            if (kData.userData[curLevel] < modeOption[2]) {
                                if(dm) console.log("heart increased - old:"+kData.userData[curLevel]+",cur:"+(kData.userData[curLevel]+1)+", name:"+tile.name);
                                kData.userData[curLevel]+=1;//보너스모드,하트블록이면 보너스하트습득
                                //kData.iHeart+=1;
                                MainUI.z_shopplus.onRefresh();
                            }else{
                                kData.userData[curLevel]=modeOption[2];
                                if(dm) console.log("heart over!!!!"+", name:"+tile.name);
                            }
                            MainUI.z_heartcnt_b.text=kData.userData[curLevel];
                            MainUI.z_heartcnt_b.z_number.text="/"+modeOption[2];
                            if (kData.bSoundSE) SE_Item_Good.play();//하트획득사운드
                        }

                        setTimeout(function () {
                            delay4.animations.play('fire', 25, false, true);
                            //if(bSoundSE) SE_Brick_Extinction_F.play();//블록폭발파괴
                        }, 300);
                        setTimeout(function () {
                            masscon.runTweenCombo(1);//폭발공으로 점수
                        }, 300);
                    }
                    //--3/3차 폭발사운드처리
                    if(_chk2_SE_Brick_Extinction_F){
                         setTimeout(function () {
                            if(kData.bSoundSE) SE_Brick_Extinction_F_b.play();//블록폭발파괴
                        }, 300);
                    }
                    //폭발공처리 BallType.bomb_n BallType.bomb_s BallType.bomb_b
                }else if(tile.z_color===9) {
                    //무적타일처리
                    //무적타일반짝이기                     //'block_gold.png'//무적//레벨21번(인덱스20) 무적
                    tile.animations.play('show0', 15, false, undefined); //1time
                    // this.runTweenCombo(ScoreGold0, tile.x, tile.y, 1); //무적타일 번쩍거림
                    if(kData.bSoundSE) SE_InvincibleBrick_Blow.play();//무적블록
                }else if(tile.z_color===8) {
                    //'block_choco_3.png'//하드//레벨11번(인덱스10)
                    //초코릿타일 벗기기
                    switch (tile.z_step) {
                        case 2:
                            tile.animations.play('show0', 15, false, undefined); //1time
                            tile.z_step = 1;
                            if(kData.bSoundSE) SE_BrickShell_Remove.play();//초코블록
                            //타일점수text올라가기
                            // this.runTweenCombo(ScoreBcHP2, tile.x, tile.y, 1); //초코블록 점수2
                            break;

                        case 1:
                            tile.animations.play('show1', 15, false, undefined); //1time
                            tile.z_step = 0;
                            if(kData.bSoundSE) SE_BrickShell_Remove.play();//초코블록
                            //타일점수text올라가기
                            // this.runTweenCombo(ScoreBcHP1, tile.x, tile.y, 1); //초코블록 점수1
                            break;

                        case 0:
                            tile.z_step = -1;
                            var stgame = uigame.state.states.game;
                            stgame.massiveController.tiles.bringToTop(tile);//레이어상위로이동
                            bbLevel[tile.z_y][tile.z_x]=-1;
                            //tile.animations.play('kill', 25, false, true); //1time //kill
                            tile.animations.play('kill_choco', 25, false, true); //1time //kill //초코
                            tile.body.enable=false;

                            if(modeOption[0]===2 &&tile.z_isheart) {
                                if (kData.userData[curLevel] < modeOption[2]) {
                                    if(dm) console.log("heart increased - old:"+kData.userData[curLevel]+",cur:"+(kData.userData[curLevel]+1)+", name:"+tile.name);
                                    kData.userData[curLevel]+=1;//보너스모드,하트블록이면 보너스하트습득
                                    //kData.iHeart+=1;
                                    MainUI.z_shopplus.onRefresh();
                                }else{
                                    kData.userData[curLevel]=modeOption[2];
                                    if(dm) console.log("heart over!!!!"+", name:"+tile.name);
                                }
                                MainUI.z_heartcnt_b.text=kData.userData[curLevel];
                                MainUI.z_heartcnt_b.z_number.text="/"+modeOption[2];
                                if (kData.bSoundSE) SE_Item_Good.play();//하트획득사운드
                            }

                            if(kData.bSoundSE) SE_Brick_Extinction.play();//블록파괴
                            //아이템이 있으면 아이템드롭
                            if (this.bricksWithItems.indexOf(tile.name) > -1) {
                                //this.bricksWithItems.pop(tile.name);
                                if(dm) console.log("this.bricksWithItems.length:"+this.bricksWithItems.length);
                                this.dropOneItems(tile.x, tile.y);
                            }
                            //타일점수text올라가기
                            this.runTweenCombo(1); //초코블록 점수0

                            break;
                    }
                }else {
                    //일반블록처리//타일점수text올라가기
                    this.runTweenCombo(1); //일반블록 점수

                    if(modeOption[0]===2 &&tile.z_isheart) {
                        if (kData.userData[curLevel] < modeOption[2]) {
                            if(dm) console.log("heart increased - old:"+kData.userData[curLevel]+",cur:"+(kData.userData[curLevel]+1)+", name:"+tile.name);
                            kData.userData[curLevel]+=1;//보너스모드,하트블록이면 보너스하트습득
                            //kData.iHeart+=1;
                            MainUI.z_shopplus.onRefresh();
                        }else{
                            kData.userData[curLevel]=modeOption[2];
                            if(dm) console.log("heart over!!!!"+", name:"+tile.name);
                        }
                        MainUI.z_heartcnt_b.text=kData.userData[curLevel];
                        MainUI.z_heartcnt_b.z_number.text="/"+modeOption[2];
                        if (kData.bSoundSE) SE_Item_Good.play();//하트획득사운드
                    }

                    //일반블록이 아이템있으면
                    //아이템떨어뜨리기
                    tile.z_step = -1;
                    if (this.bricksWithItems.indexOf(tile.name) > -1) {//아이템할당 타일이름이면
                        //this.bricksWithItems.pop(tile.name);
                        if(dm) console.log("this.bricksWithItems.length:"+this.bricksWithItems.length);
                        this.dropOneItems(tile.x, tile.y);
                    }
                    //폭발공은 위쪽에서 처리되고 있어서
                    // if(this.ballstate === BallType.bomb_n
                    // ||this.ballstate === BallType.bomb_s
                    // ||this.ballstate === BallType.bomb_b) {
                    //     bbLevel[tile.z_y][tile.z_x]=-1;
                    //     tile.animations.play('fire', 25, false, true);
                    //     tile.body.enable=false;
                    //
                    //     if(bSoundSE) SE_Brick_Extinction.play();//블록파괴
                    // }else {
                        var stgame = uigame.state.states.game;
                        stgame.massiveController.tiles.bringToTop(tile);//레이어상위로이동


                        //에러감시//에러체크//
                        //if(typeof(bbLevel) === 'undefined') console.log("bbLevel == undefined");
                        //if(typeof(bbLevel[tile.z_y]) === 'undefined') console.log("bbLevel[] == undefined, "+tile.z_y);
                        //if(typeof(bbLevel[tile.z_y][tile.z_x]) === 'undefined') console.log("bbLevel[][] == undefined, "+tile.z_z);
                        //에러감시

                        bbLevel[tile.z_y][tile.z_x]=-1;
                        if(tile.z_isheart){
                            tile.animations.play('kill_heart', 25, false, true);//일반블록중하트
                        }else {
                            tile.animations.play('kill', 25, false, true); //1time //kill
                        }
                        tile.body.enable=false;


                        if(kData.bSoundSE) SE_Brick_Extinction.play();//블록파괴
                    //} //폭발공이면 처리
                    //tile.kill();

                    //this.curwithoutgold-=1;
                    if(dm) console.log("this.tiles.countLiving(): " + this.tiles.countLiving());

                }
                this.debugTiles();
            },

            bulletCollideWithTile: function (bullet, tile) { //오리지날추가 함수
                if(dm) console.log("coll bullet:" + bullet.name + ", tile:" + tile.name);

                if (kData.bSoundSE) SE_Click.play();//블록파괴음

                if(tile.z_color===9) { //'block_gold.png'//무적//레벨21번(인덱스20) 무적
                    tile.animations.play('show0', 15, false, undefined); //1time
                    if(kData.bSoundSE) SE_InvincibleBrick_Blow.play();//무적블록
                }else if(tile.z_color===8) { //'block_choco_3.png'//하드//레벨11번(인덱스10)초코블록
                    switch (tile.z_step) {
                        case 2:
                            tile.animations.play('show0', 15, false, undefined); //1time
                            tile.z_step = 1;
                            if(kData.bSoundSE) SE_BrickShell_Remove.play();//초코블록
                            // this.runTweenCombo(ScoreBcHP2, tile.x, tile.y, 1); //총알로 초코블록 파괴2
                            break;
                        case 1:
                            tile.animations.play('show1', 15, false, undefined); //1time
                            tile.z_step = 0;
                            if(kData.bSoundSE) SE_BrickShell_Remove.play();//초코블록
                            // this.runTweenCombo(ScoreBcHP1, tile.x, tile.y, 1); //총알로 초코블록 파괴1
                            break;
                        case 0:
                            tile.z_step = -1;
                            var stgame = uigame.state.states.game;
                            stgame.massiveController.tiles.bringToTop(tile);//레이어상위로이동
                            //tile.animations.play('kill', 25, false, true); //1time //kill

                            if(modeOption[0]===2 &&tile.z_isheart) {
                                if (kData.userData[curLevel] < modeOption[2]) {
                                    if(dm) console.log("heart increased - old:"+kData.userData[curLevel]+",cur:"+(kData.userData[curLevel]+1)+", name:"+tile.name);
                                    kData.userData[curLevel]+=1;//보너스모드,하트블록이면 보너스하트습득
                                    //kData.iHeart+=1;
                                    MainUI.z_shopplus.onRefresh();
                                }else{
                                    kData.userData[curLevel]=modeOption[2];
                                    if(dm) console.log("heart over!!!!"+", name:"+tile.name);
                                }
                                MainUI.z_heartcnt_b.text=kData.userData[curLevel];
                                MainUI.z_heartcnt_b.z_number.text="/"+modeOption[2];
                                if (kData.bSoundSE) SE_Item_Good.play();//하트획득사운드
                            }

                            tile.animations.play('kill_choco', 25, false, true); //1time //kill //초코
                            tile.body.enable=false;
                            bbLevel[tile.z_y][tile.z_x]=-1;


                            if(kData.bSoundSE) SE_Brick_Extinction.play();//블록파괴
                            //this.runTweenCombo(ScoreBcHP0, tile.x, tile.y, 1); //총알로 초코블록 파괴0
                            TweenMax.killTweensOf(tile);

                            break;
                        default:
                            if(dm) console.log("tile.z_step.default!!");
                            break;
                    }//초코블록단계별
                }else {
                    // this.runTweenCombo(10, tile.x, tile.y, 1); //총알로 일반블록

                    //보통블록일경우만 아이템 생성
                    tile.z_step = -1;
                    if (this.bricksWithItems.indexOf(tile.name) > -1) {//아이템할당 타일이름이면
                        //this.bricksWithItems.pop(tile.name);
                        this.dropOneItems(tile.x, tile.y);
                    }
                    var stgame = uigame.state.states.game;
                    stgame.massiveController.tiles.bringToTop(tile);//레이어상위로이동

                    if(modeOption[0]===2 &&tile.z_isheart) {
                        if (kData.userData[curLevel] < modeOption[2]) {
                            if(dm) console.log("heart increased - old:"+kData.userData[curLevel]+",cur:"+(kData.userData[curLevel]+1)+", name:"+tile.name);
                            kData.userData[curLevel]+=1;//보너스모드,하트블록이면 보너스하트습득
                            //kData.iHeart+=1;
                            MainUI.z_shopplus.onRefresh();
                        }else{
                            kData.userData[curLevel]=modeOption[2];
                            if(dm) console.log("heart over!!!!"+", name:"+tile.name);
                        }
                        MainUI.z_heartcnt_b.text=kData.userData[curLevel];
                        MainUI.z_heartcnt_b.z_number.text="/"+modeOption[2];
                        if (kData.bSoundSE) SE_Item_Good.play();//하트획득사운드
                    }

                    tile.animations.play('kill', 25, false, true); //1time //kill
                    tile.body.enable=false;
                    bbLevel[tile.z_y][tile.z_x]=-1;

                    if(kData.bSoundSE) SE_Brick_Extinction.play();//블록파괴
                    TweenMax.killTweensOf(tile);

                }
                //bullet.kill();
                bullet.body.enable = false;
                bullet.animations.play('kill', 25, false, true); //1time

                this.debugTiles();
            },

            bulletCollideWithBounds3: function (bullet, tile) {
                //bullet.kill();
                bullet.body.enable = false;
                bullet.animations.play('kill', 25, false, true); //1time
                if(kData.bSoundSE) SE_Ball.play();//임시소리
            },

            ballCollideWithBounds3: function (ball, wall) {
                if (kData.bSoundSE) SE_Ball.play();
                if(Math.abs(ball.body.angle)>2.8) {//공이 왼쪽벽 충돌시(수평각 범위로)
                    if (ball.body.angle<0) {//-160도↖//상승방향
                        //console.log("ball angle:"+ball.body.angle+", --> " +(ball.body.angle+0.1));
                        uigame.physics.arcade.velocityFromRotation(ball.body.angle + 0.1, curVelocity, ball.body.velocity); //라디언값 됨
                    }else{//160도↙ //하강뱡향 방향문자( ← → ↑ ↓ ↗ ↙ ↖ ↘ )
                        //console.log("ball angle:"+ball.body.angle+", --> " +(ball.body.angle-0.1));
                        uigame.physics.arcade.velocityFromRotation(ball.body.angle - 0.1, curVelocity, ball.body.velocity); //라디언값 됨
                    }
                }else if(Math.abs(ball.body.angle)<0.349066) {//오른쪽벽충돌(수평각 범위로)
                    if (ball.body.angle < 0) {//-20도↗ //상승뱡향
                        //console.log("ball angle:"+ball.body.angle+", --> " +(ball.body.angle-0.1));
                        uigame.physics.arcade.velocityFromRotation(ball.body.angle - 0.1, curVelocity, ball.body.velocity); //라디언값 됨
                    } else {//20도↘ //하강방향
                        //console.log("ball angle:"+ball.body.angle+", --> " +(ball.body.angle+0.1));
                        uigame.physics.arcade.velocityFromRotation(ball.body.angle + 0.1, curVelocity, ball.body.velocity); //라디언값 됨
                    }
                }

            },
            bearsCollideWithBounds4: function (bear, bound) { //적곰,녹곰 테두리 충돌
               if(dm) console.log("---------bear-coll(xy):" + bear.x+","+bear.y+", ---bound:"+bound.x+","+bound.y+", vel:"+bear.body.speed);

                if(bear.x>360+200){//오른쪽위치에 있을 경우
                    if(bear.body.velocity.x>0) bear.body.velocity.x=(-bear.body.velocity.x);
                }else if(bear.x<360-200){//왼쪽
                    if(bear.body.velocity.x<0) bear.body.velocity.x=(-bear.body.velocity.x);
                }
                //(786-130)*0.5=328 --> 운동장height/2
                //(786-130)*0.5+130= 458 0-->운동장중심y
                if(bear.y>458+200){
                    if(bear.body.velocity.y>0) bear.body.velocity.y=(-bear.body.velocity.y);
                }else if(bear.y<458-200){
                    if(bear.body.velocity.y<0) bear.body.velocity.y=(-bear.body.velocity.y);
                }

               if(bound.x===360){//충돌박스 위아래
                    switch (bound.y){
                        case 130://위
                            if(130 > bear.y-bear.body.halfHeight) bear.y = 130+30-bear.body.halfHeight;
                            //bear.body.velocity.y += 100;
                        break;
                        case 786://아래
                            if(786 < bear.y+bear.body.halfHeight) bear.y = 786-30+bear.body.halfHeight;
                            //bear.body.velocity.y -= 100;
                        break;
                    }

                }else if(bound.y===1280){//충돌박스 왼쪽,오른쪽
                    switch (bound.x){
                        case 0://왼쪽
                            if(0 > bear.x-bear.body.halfWidth) bear.x = 0+30-bear.body.halfWidth;
                            //bear.body.velocity.x += 100;
                            break;
                        case 720://오른쪽
                            if(692 < bear.x+bear.body.halfWidth) bear.x = 692-30+bear.body.halfWidth;
                            //bear.body.velocity.x -= 100;
                            break;
                    }
                }

                if (kData.bSoundSE) SE_Ball.play();
                //벽충돌시 각도설정
                TweenMax.fromTo( bear.scale, 0.025, //time
                    { x: 1, y: 1 },
                    { //메달트윈
                        x: 1.2,
                        y: 1.2,
                        repeat: 1,
                        ease: Linear.easeNone, //ease: Power1.easeInOut, //ease: Elastic.easeOut,
                        yoyo: true,
                        //onComplete: fnEnd,
                        delay: 0
                    }
                );
            },
            bearsCollideWithBounds4_prev: function (bear, bound) {//여러번 호출됨(3번까지도)
            },
            bearsCollideWithBalls: function (bear, ball) { //적곰, 녹곰 공충돌 곰충돌

                //공충돌회전각
                // var dircByPoint = Phaser.Math.angleBetweenPoints(ball.body.prev, ball.body.position);
                // var dirrByPoint = Phaser.Math.angleBetweenPoints(this.last, this.prev); //반전
                // console.log("radian: point="+dircByPoint
                //     +", reverse="+dirrByPoint
                //     +", angle(ball)="+ball.body.angle
                //     +", angle(ball_reverse)="+ (
                //             ball.body.angle>0?(ball.body.angle%Math.PI)-Math.PI:(ball.body.angle%Math.PI)+Math.PI
                //     )+", angle(bear)="+bear.body.angle);

                if(dm) console.log("---------acccum:" + bear.z_accum+", hit:"+ bear.z_hitcount );
                var isRed = bear.z_color==="red";

                var isBullet = ball.name.indexOf('ball') === -1; //이름에 'ball' 안포함이면 총알이다
                //총알제거
                if (isBullet){
                    ball.body.enable = false;
                    ball.animations.play('kill', 25, false, true); //1time
                }
                //총알제거


                switch (bear.z_hitcount){
                    case 0: //1번째스킨변신 0-->2-->4
                        //공충돌회전각

                        // if (isBullet){
                        //     this.dirc = generateRandomNumber(-Math.PI, Math.PI);
                        //     this.dirr = this.dirc > 0 ? (this.dirc % Math.PI) - Math.PI : (this.dirc % Math.PI) + Math.PI;
                        // }else {
                            this.dirc = ball.body.angle; //=== Phaser.Math.angleBetweenPoints(ball.body.prev, ball.body.position);
                            this.dirr = ball.body.angle > 0 ? (ball.body.angle % Math.PI) - Math.PI : (ball.body.angle % Math.PI) + Math.PI;
                        // }
                        uigame.physics.arcade.velocityFromRotation( this.dirr+1, curVelocity, ball.body.velocity);//공속도

                        //라디안,각도비교// 0.0174533rad=1deg, 0.0523599rad=3deg //1rad=57deg, 2rad=114deg, 0.1rad=5.7deg

                        //degree값으로 제어하려면
                        //var _degree = Phaser.Math.radToDeg(this.dirc);
                        //uigame.physics.arcade.velocityFromAngle(_degree, 400, ball.body.velocity); //각도값을 넣어줘야함

                        //새로운 적곰 탄생
                        if(isRed) { //적곰이면 분화1번, 새복제곰만들고, 속도,히트카운트2,무한트윈,물리를 적용한다.
                            var bearnew0;
                            bearnew0 = this.redBears.getFirstDead();
                            bearnew0.revive();
                            bearnew0.body.enable = true;
                            bearnew0.alpha = 1;
                            bearnew0.reset(bear.x, bear.y);
                            //이동속도지정
                            uigame.physics.arcade.velocityFromRotation(this.dirc + 0.2, this.redBearVel*1.5, bearnew0.body.velocity);//새적곰속도지정

                            bearnew0.animations.play('div_0', 15, false, undefined); //1time
                            //물리속성지정
                            bearnew0.body.setSize(bearnew0.width - 20, bearnew0.height - 20, 10, 10);//bearnew0.body.setSize(bear1.width / bearnew0.scale.x, bearnew0.height / bearcase0.scale.y);
                            delayHitCount_Change(bearnew0, ball, 2);

                            TweenMax.killTweensOf(bearnew0); //기존트윈 삭제
                            TweenMax.fromTo( bearnew0, 10, { rotation: 0 }, { rotation: 6.28, ease:Linear.easeNone, repeat: -1 } );//곰 360 회전
                        }//if(isRed)

                        //기존곰 분화 애니(적곰,녹곰 공용)
                        if(isRed) uigame.camera.shake(0.005*0.75, 500);//카메라 흔들림
                        else  uigame.camera.shake(0.005*0.5, 500);//카메라 흔들림

                        bear.animations.play('div_0', 15, false, undefined); //1time
                        if(kData.bSoundSE) SE_BearJelly_Hit.play(); //곰젤리 맞았을때

                        if(isRed) {
                            //기존 적곰, 물리크기변경, 속도변경
                            bear.body.setSize(bear.width - 20, bear.height - 20, 10, 10);
                            uigame.physics.arcade.velocityFromRotation(this.dirc-0.2, this.redBearVel*1.5, bear.body.velocity);//기존적곰속도
                            delayHitCount_Change(bear, ball, 2);
                        }else{
                            //기존 녹곰 물리크기변경, 속도변경
                            bear.body.setSize(bear.width - 20, bear.height - 20, 10, 10);
                            uigame.physics.arcade.velocityFromRotation(this.dirc-0.2, this.greenBearVel*0.75, bear.body.velocity);//기존녹곰속도
                            //녹곰위치보정
                            if(bear.x>360+200){//오른쪽위치에 있을 경우
                                if(bear.body.velocity.x>0) bear.body.velocity.x=(-bear.body.velocity.x);
                            }else if(bear.x<360-200){//왼쪽
                                if(bear.body.velocity.x<0) bear.body.velocity.x=(-bear.body.velocity.x);
                            }
                            //(786-130)*0.5=328 --> 운동장height/2
                            //(786-130)*0.5+130= 458 0-->운동장중심y
                            if(bear.y>458+200){
                                if(bear.body.velocity.y>0) bear.body.velocity.y=(-bear.body.velocity.y);
                            }else if(bear.y<458-200){
                                if(bear.body.velocity.y<0) bear.body.velocity.y=(-bear.body.velocity.y);
                            }
                            //녹곰위치보정

                            //녹곰이면 2번 맞고 변하게
                            switch (bear.z_accum){ //총알2번 맞고 다음스킨으로 바뀌게 하려고
                                case 0:
                                    //if(bSoundSE) SE_BearJelly_Hit.play(); //곰젤리 맞았을때
                                    //임시흔들림방지 uigame.camera.shake(0.005, 500);//카메라 흔들림
                                    bear.z_accum=1;
                                    delayHitCount_Change(bear, ball, 2);
                                    break;
                                case 1:
                                case 2://예외 누적충돌
                                case 3://예외 누적충돌
                                case 4://예외 누적충돌
                                    //임시흔들림방지 uigame.camera.shake(0.005, 500);//카메라 흔들림
                                    delayHitCount_Change(bear, ball, 2);
                                    var b3 = bear;
                                    setTimeout(function () { b3.z_accum=0; }, 750);
                                    break;
                            }
                        }

                        break; //case 0:

                    case 2: //2번째스킨변신
                        //공충돌회전각
                        if (isBullet){
                            this.dirc = generateRandomNumber(-Math.PI, Math.PI);
                            this.dirr = this.dirc > 0 ? (this.dirc % Math.PI) - Math.PI : (this.dirc % Math.PI) + Math.PI;
                        }else {
                            this.dirc = ball.body.angle; //=== Phaser.Math.angleBetweenPoints(ball.body.prev, ball.body.position);
                            this.dirr = ball.body.angle > 0 ? (ball.body.angle % Math.PI) - Math.PI : (ball.body.angle % Math.PI) + Math.PI;
                        }
                        uigame.physics.arcade.velocityFromRotation( this.dirr+1, curVelocity, ball.body.velocity);//공속도

                        if(isRed) {
                            //적곰이면 분화2번, 새복제곰만들고, 속도,히트카운트4,무한트윈,물리를 적용한다.
                            var bearnew1 = bear1 = this.redBears.getFirstDead();
                            bearnew1.revive();
                            bearnew1.reset(bear.x, bear.y);
                            bearnew1.body.enable=true;
                            bearnew1.alpha=1;
                            bearnew1.animations.play('div_1', 15, false, undefined); //1time
                            bearnew1.body.setSize(bearnew1.width - 20, bearnew1.height - 20, 10, 10);//bearnew1.body.setSize(bearnew1.width / bearnew1.scale.x, bearnew1.height / bearnew1.scale.y);

                            // if(isBullet)
                            //     accelerateToXYFromLocal(bearnew1, bearnew1.body.velocity.x, bearnew1.body.velocity.y, this.redBearVel*2);//새적곰속도지정
                            // else
                                 uigame.physics.arcade.velocityFromRotation( this.dirc + 0.2, this.redBearVel*2, bearnew1.body.velocity);//새적곰속도지정

                            delayHitCount_Change(bearnew1, ball, 4);

                            TweenMax.killTweensOf(bearnew1);
                            TweenMax.fromTo( bearnew1, 10, { rotation: 0 }, { rotation: 6.28, ease:Linear.easeNone, repeat: -1 } );
                        }//if isRed

                        if(isRed) uigame.camera.shake(0.005*0.5, 500);//카메라 흔들림
                        else uigame.camera.shake(0.005*0.75, 500);//카메라 흔들림
                        //기존곰 분화 애니(적곰,녹곰 공용)
                        bear.animations.play('div_1', 15, false, undefined); //1time
                        //if(bSoundSE) SE_BearJelly_Transform.play();
                        if(kData.bSoundSE) SE_BearJelly_Hit.play(); //곰젤리 맞았을때

                        if(isRed) { //기존 적곰, 물리크기변경, 속도변경
                            bear.body.setSize(bear.width - 20, bear.height - 20, 10, 10);
                            // if(isBullet)
                            //     accelerateToXYFromLocal(bear, bear.body.velocity.x, bear.body.velocity.y, this.redBearVel*2); //기존적곰속도
                            // else
                                uigame.physics.arcade.velocityFromRotation(this.dirc-0.2, this.redBearVel*2, bear.body.velocity); //기존적곰속도
                            delayHitCount_Change(bear, ball, 4);
                        }else{     //녹곰이면 5번 맞고 변하게
                            bear.body.setSize(bear.width - 40, bear.height - 40, 20, 20)
                            // if(isBullet)
                            //     accelerateToXYFromLocal(bear, bear.body.velocity.x, bear.body.velocity.y, this.redBearVel*2);//기존녹곰속도
                            // else
                                uigame.physics.arcade.velocityFromRotation(this.dirc-0.2, this.greenBearVel*0.5, bear.body.velocity);//기존녹곰속도
                            //녹곰위치보정
                            if(bear.x>360+200){//오른쪽위치에 있을 경우
                                if(bear.body.velocity.x>0) bear.body.velocity.x=(-bear.body.velocity.x);
                            }else if(bear.x<360-200){//왼쪽
                                if(bear.body.velocity.x<0) bear.body.velocity.x=(-bear.body.velocity.x);
                            }
                            //(786-130)*0.5=328 --> 운동장height/2
                            //(786-130)*0.5+130= 458 0-->운동장중심y
                            if(bear.y>458+200){
                                if(bear.body.velocity.y>0) bear.body.velocity.y=(-bear.body.velocity.y);
                            }else if(bear.y<458-200){
                                if(bear.body.velocity.y<0) bear.body.velocity.y=(-bear.body.velocity.y);
                            }
                            //녹곰위치보정

                            switch (bear.z_accum){ //총알2번 맞고 다음스킨으로 바뀌게 하려고
                                case 0:
                                    bear.z_accum=1;
                                    delayHitCount_Change(bear, ball, 2);
                                    break;
                                case 1:
                                    bear.z_accum=2; //초기화
                                    delayHitCount_Change(bear, ball, 2);
                                    break;
                                case 2:
                                    bear.z_accum=3; //초기화
                                    delayHitCount_Change(bear, ball, 2);
                                    break;
                                case 3:
                                case 4://예외 누적충돌
                                case 5://예외 누적충돌
                                case 6://예외 누적충돌
                                    bear.z_accum=0; //초기화
                                    bear.z_hitcount=-1;

                                    this.dropOneItems(bear.x, bear.y);

                                    bear.body.setSize(bear.width-80, bear.height-80, 40, 40);//녹곰전용 크기조절

                                    //녹곰죽기----
                                    bear.body.velocity.set(0);
                                    bear.body.enable=false;
                                    TweenMax.fromTo( bear,0.5,{alpah:1},{alpha:0,ease:Linear.easeNone,
                                        onComplete: function () {
                                            bear.kill();
                                            if(dm) console.log("kill greenbear:"+bear.name);
                                            //bear.animations.play('kill', 15, false, true); //1time
                                        }
                                    });
                                    //녹곰죽기----
                                    break;
                            }
                        }//녹곰처리

                        break;//case 2:

                    case 4: //적곰만 해당, 스킨은 안 바뀌고 죽는 애니만
                        //공충돌회전각
                        // if (isBullet){
                        //     this.dirc = generateRandomNumber(-Math.PI, Math.PI);
                        //     this.dirr = this.dirc > 0 ? (this.dirc % Math.PI) - Math.PI : (this.dirc % Math.PI) + Math.PI;
                        //     uigame.physics.arcade.velocityFromRotation( this.dirc-0.2, bear.body.speed, bear.body.velocity);
                        //     uigame.physics.arcade.velocityFromRotation( this.dirr+1, ball.body.speed, ball.body.velocity);
                        // }else {
                            this.dirc = ball.body.angle; //=== Phaser.Math.angleBetweenPoints(ball.body.prev, ball.body.position);
                            this.dirr = ball.body.angle > 0 ? (ball.body.angle % Math.PI) - Math.PI : (ball.body.angle % Math.PI) + Math.PI;
                            uigame.physics.arcade.velocityFromRotation(this.dirc-0.2, bear.body.speed, bear.body.velocity);
                            uigame.physics.arcade.velocityFromRotation( this.dirr+1, ball.body.speed, ball.body.velocity);
                        // }
                        if(isRed)
                            uigame.camera.shake(0.005*0.25, 500);//카메라 흔들림
                        else
                            uigame.camera.shake(0.005, 500);//카메라 흔들림
                        if(kData.bSoundSE) SE_BearJelly_Hit.play(); //곰젤리 맞았을때

                        this.dropOneItems(bear.x, bear.y);
                        bear.body.setSize(bear.width-20, bear.height-20, 10, 10); //적곰전용 크기조절
                        bear.z_hitcount=-1;
                        //적곰죽기----
                        bear.body.velocity.set(0);
                        bear.body.enable=false;
                        TweenMax.fromTo( bear,0.5,{alpah:1},{alpha:0,ease:Linear.easeNone,
                            onComplete: function () {
                                bear.kill();
                                if(dm) console.log("kill :"+bear.name);
                                //bear.animations.play('kill', 15, false, true); //1time
                            }
                        });
                        //적곰죽기----

                        break;
                }//switch (bear.z_hitcount)
            },//bearsCollideWithBalls()

            /**
             * Callback for when ball collides with the players paddle.
             */

            ballCollideWithPaddle: function (paddle, ball) { //262버젼

                //온패들상태, 공1개가 있으면 시작상태이므로 취소
                //if(this.ballOnPaddle && this.ball===ball) return;

                //물리찾기1
                // var a =ball.body.prev; //angleBetweenPoints 으로 앵글값찾기
                // var b =ball.body.position;
                // var c =ball.body.preRotation;
                // var d =ball.body.rotation;
                // var e = uigame.physics.arcade.angleToXY(ball, a.x, a.y);
                // var f = Phaser.Math.radToDeg(e);
                // var g = ball.body.checkCollision;
                // var h = ball.body.facing; //velocity의존적 //NONE: 0, LEFT: 1, RIGHT: 2, UP: 3, DOWN: 4,
                // var i = paddle.body.facing; //velocity의존적  //NONE: 0, LEFT: 1, RIGHT: 2, UP: 3, DOWN: 4,

                playtime_clock+=curComboCount;//콤보시간충전
                if(playtime_clock>=playtime_clock_max+1) { //in ballcollidepaddle
                    //맥스타임이면
                    playtime_clock=playtime_clock_max+1; //in ballcollidepaddle
                }
                else {
                     //맥스타임이 아니면
                    if(curComboCount>0) uiProgGlobal.onTweenSec(curComboCount);
                }
                curComboCount = 0; //패들충돌시

                //console.log("coll ball:" + ball.name + "," + "paddle:" + paddle.name);

                //반사각설정 각도기준
                var ag = uigame.physics.arcade.angleBetween(paddle, ball);
                //console.log("paddle-ball-angle:",ag);
                if(ag>0) ag=ag*-1;
                uigame.physics.arcade.velocityFromRotation(ag, curVelocity, ball.body.velocity);

                //console.log("ball.vel:"+ball.body.velocity+", pos:"+ball.position+", isb:"+ball.body.enable+", isp:"+paddle.body.enable);
                //console.log("--end--");
                //패들 반사각설정 옵셋기준
                // var diff = 0;
                // //패들충돌시 각도설정
                // // Super simplistic bounce physics for the ball movement
                // if (ball.x < paddle.x) {
                //     //  Ball is on the left-hand side
                //     diff = paddle.x - ball.x;                   //포지션 차이값(양수)
                //     //ball.body.velocity.x = (-10 * diff);
                //     ball.body.velocity.x = (-10 * (diff + 25));   //(차+25)*-10으로 속도를 넣어준다
                // } else if (ball.x > paddle.x) {
                //     //  Ball is on the right-hand side
                //     diff = ball.x - paddle.x;
                //     //ball.body.velocity.x = (10 * diff);
                //     ball.body.velocity.x = (10 * (diff + 25));
                // } else {
                //     //  Ball is perfectly in the middle
                //     //  Add a little random X to stop it bouncing straight up!
                //     //ball.body.velocity.x = 2 + Math.random() * 8;
                //     ball.body.velocity.x = 10 + Math.random() * 8;
                // }
                // ball.body.velocity.y -= 10;


                switch (this.padatt) {
                    case PadAttr.fixed:         //2 //패들에 접착 시작한다
                        //if(dm) console.log(ball.body.velocity);
                        if(kData.bSoundSE) SE_Magnet.play(); //공 접착시
                        if(dm) console.log("-------------- catch velocity: "
                            +ball.body.velocity.x
                            +","+ball.body.velocity.y
                        );
                        if(dm) console.log("-------------- ball.x.y: "+ball.x+","+ball.y);

                        var yb=ball.y;
                        var pb=paddle.y-(paddle.body.halfHeight*0.5);
                        if(ball.y<paddle.y-(paddle.body.halfHeight*0.5)) { //패들이 밑쪽, 공이 위쪽
                            ball.body.velocity.set(0);
                            ball.z_balltype=BallType.fixed;
                            var curoff = ball.x - paddle.x;
                            var p = (paddle.body.halfWidth)-ball.body.halfWidth;
                            var m = -(paddle.body.halfWidth)+ball.body.halfWidth;
                            if(curoff>0){
                                if(curoff>p) ball.z_xoff=p;
                                else ball.z_xoff= curoff;
                            }else{
                                if(curoff<m) ball.z_xoff=m;
                                else ball.z_xoff= curoff;
                            }
                            var curoffy = ball.y - paddle.y;
                            //var py = paddle.body.halfHeight+ball.body.halfHeight;
                            //박스두배크기 충돌일경우
                            //var my = -(paddle.body.halfHeight*0.5)-ball.body.halfHeight;
                            //박스1배크기 충돌경우
                            var my = -(paddle.body.halfHeight)-ball.body.halfHeight;
                            //if(curoffy>0){
                            //    if(curoff>p) ball.z_xoff=p;
                            //    else ball.z_xoff= curoff;
                            //}else{
                                //if(curoff<m)
                                    ball.z_yoff=my-6;//6픽셀더위로
                                //else ball.z_xoff= curoff;
                            //}
                            this.fixedballs.push(ball);
                            ball.body.velocity.set(0);
                        }

                        break;
                    default:
                        if (kData.bSoundSE) SE_Ball.play();
                        break;
                }
                this.moveVertical();
            },
            ballCollideWithPaddle_prev: function (paddle, ball) {
                //물리찾기2
                //온패들상태, 공1개가 있으면 시작상태이므로 취소
                //if(this.ballOnPaddle && this.ball===ball) return;

                var a = ball.body.checkCollision;
                var b = ball.body.facing; // NONE: 0, LEFT: 1, RIGHT: 2, UP: 3, DOWN: 4,
                var c = paddle.body.facing; // NONE: 0, LEFT: 1, RIGHT: 2, UP: 3, DOWN: 4,
                var aa = ball;
            },

            itemCollideWithPaddle: function (paddle, item) { //아이템 먹은후 변화 //262버젼 //아이템분화
                //itmidx = uigame.rnd.weightedPick([7,13,5,6,14]);
                if(curLives===0) return;

                MainUI.z_itemsel.onShow(item.itmidx);

                switch (item.itmidx) { //아이템습득,아이템획득
                    // case 0:
                    //     itemEffectName = undefined;
                    //     break;
                    case 1:         //1 //패들 확대 (1단계씩)
                        this.onReleaseBalls();
                        this.setPadSizeLocal(1);
                        if (kData.bSoundSE) SE_Item_Good.play();
                        break;

                    case 2:         //2 //공 복사
                        this.onReleaseBalls();
                        if (this.padatt === PadAttr.fixed) { //접착모드시 기존공을 가지고 잇으면 쏴버리고, 복제한다.
                            this.onReleaseBalls(); //
                            var v1 = this;
                            setTimeout(function () {
                                v1.copyBalls();
                            }, 500);
                        } else if (this.ballOnPaddle) {  //첫시작상태이면 쏴버리고, 복제한다.
                            this.onReleaseStart(); //복사아이템습득시 in itemCollideWithPaddle
                            var v1 = this;
                            setTimeout(function () {
                                v1.copyBalls();
                            }, 500);
                        }
                        else this.copyBalls(); //복제공모드
                        if (kData.bSoundSE) SE_Item_Good.play();
                        break;

                    case 3:         //3 //총알모드
                        this.onReleaseBalls();
                        this.setPadSizeDirect(this.padsize);
                        gunstate = ThreeState.begin;
                        //코드를 이곳으로 우선 가져왔음
                        guntimer = guntimemax;
                        //this.guntimeroldbak = this.game.time.now; //현재시간 백업
                        gunstate = ThreeState.run;
                        //상태를 run으로 바꾼다
                        PadAttr_bullet = true; //아이템습득


                        //총구켜기
                        this.paddle.z_left.reset(-this.bulletx, -5);
                        this.paddle.z_right.reset(this.bulletx, -5);
                        this.paddle.z_left.visible = true;
                        this.paddle.z_right.visible = true;
                        //총구켜기
                        if (kData.bSoundSE) SE_Item_Good.play();
                        break;

                    case 4:         //4 //접착모드
                        this.padatt = PadAttr.fixed;
                        this.setPadSizeDirect(this.padsize);
                        this.releasetimer = this.releasetimemax;
                        if (kData.bSoundSE) SE_Item_Good.play();
                        break;

                    case 5:         //5 //블록 관통
                        this.onReleaseBalls();
                        //this.ballstate = BallType.through_n;
                        //
                        if (this.ballstate === BallType.normal_s) this.setBallStateDirect(BallType.through_s);          //노말-->관통
                        else if (this.ballstate === BallType.normal_n) this.setBallStateDirect(BallType.through_n);
                        else if (this.ballstate === BallType.normal_b) this.setBallStateDirect(BallType.through_b);
                        else if (this.ballstate === BallType.bomb_s) this.setBallStateDirect(BallType.throughbomb_s);//폭발속성-->폭관
                        else if (this.ballstate === BallType.bomb_n) this.setBallStateDirect(BallType.throughbomb_n);
                        else if (this.ballstate === BallType.bomb_b) this.setBallStateDirect(BallType.throughbomb_b);
                        //else if(this.ballstate===BallType.through_s) this.setBallStateDirect(BallType.through_s);//관통속성-->관통
                        //else if(this.ballstate===BallType.through_n) this.setBallStateDirect(BallType.through_n);
                        //else if(this.ballstate===BallType.through_b) this.setBallStateDirect(BallType.through_b);
                        // else if(this.ballstate===BallType.throughbomb_s) this.setBallStateDirect(BallType.throughbomb_s);//폭관통-->폭관통
                        // else if(this.ballstate===BallType.throughbomb_n) this.setBallStateDirect(BallType.throughbomb_n);
                        // else if(this.ballstate===BallType.throughbomb_b) this.setBallStateDirect(BallType.throughbomb_b);

                        if (kData.bSoundSE) SE_Item_Good.play();
                        break;

                    case 6:         //6 //공 불덩이 (폭발)
                        this.onReleaseBalls();
                        //this.ballstate = BallType.bomb_n;
                        //
                        if (this.ballstate === BallType.normal_s) this.setBallStateDirect(BallType.bomb_s);                //노말-->폭발
                        else if (this.ballstate === BallType.normal_n) this.setBallStateDirect(BallType.bomb_n);
                        else if (this.ballstate === BallType.normal_b) this.setBallStateDirect(BallType.bomb_b);
                        // else if(this.ballstate===BallType.bomb_s) this.setBallStateDirect(BallType.throughbomb_s);//폭발속성-->폭발
                        // else if(this.ballstate===BallType.bomb_n) this.setBallStateDirect(BallType.throughbomb_n);
                        // else if(this.ballstate===BallType.bomb_b) this.setBallStateDirect(BallType.throughbomb_b);
                        else if (this.ballstate === BallType.through_s) this.setBallStateDirect(BallType.throughbomb_s);//관통속성-->폭관통
                        else if (this.ballstate === BallType.through_n) this.setBallStateDirect(BallType.throughbomb_n);
                        else if (this.ballstate === BallType.through_b) this.setBallStateDirect(BallType.throughbomb_b);
                        // else if(this.ballstate===BallType.throughbomb_s) this.setBallStateDirect(BallType.throughbomb_s);//폭관-->폭관
                        // else if(this.ballstate===BallType.throughbomb_n) this.setBallStateDirect(BallType.throughbomb_n);
                        // else if(this.ballstate===BallType.throughbomb_b) this.setBallStateDirect(BallType.throughbomb_b);

                        if (kData.bSoundSE) SE_Item_Good.play();
                        break;

                    case 7:         //7 //공 확대 (1단계씩)
                        this.onReleaseBalls();
                        if (this.ballstate === BallType.normal_s) {
                            this.setBallStateDirect(BallType.normal_n);                //노말-->노말
                            this.setBallsPosOffset();
                        } else if (this.ballstate === BallType.normal_n) {
                            this.setBallStateDirect(BallType.normal_b);
                            this.setBallsPosOffset();
                            //}else if(this.ballstate===BallType.normal_b) {this.setBallStateDirect(BallType.normal_b);
                        } else if (this.ballstate === BallType.bomb_s) {
                            this.setBallStateDirect(BallType.bomb_n);               //폭발속성-->폭발
                            this.setBallsPosOffset();
                        } else if (this.ballstate === BallType.bomb_n) {
                            this.setBallStateDirect(BallType.bomb_b);
                            this.setBallsPosOffset();
                            //}else if(this.ballstate===BallType.bomb_b) {this.setBallStateDirect(BallType.bomb_b);
                        } else if (this.ballstate === BallType.through_s) {
                            this.setBallStateDirect(BallType.through_n);       //관통속성-->관통
                            this.setBallsPosOffset();
                        } else if (this.ballstate === BallType.through_n) {
                            this.setBallStateDirect(BallType.through_b);
                            this.setBallsPosOffset();
                            //}else if(this.ballstate===BallType.through_b) {this.setBallStateDirect(BallType.through_b);
                        } else if (this.ballstate === BallType.throughbomb_s) {
                            this.setBallStateDirect(BallType.throughbomb_n);    //폭관-->폭관
                            this.setBallsPosOffset();
                        } else if (this.ballstate === BallType.throughbomb_n) {
                            this.setBallStateDirect(BallType.throughbomb_b);
                            this.setBallsPosOffset();
                            //}else if(this.ballstate===BallType.throughbomb_b) {this.setBallStateDirect(BallType.throughbomb_b);
                        }

                        if(kData.bSoundSE) SE_Item_Good.play();
                        break;

                    case 8:         //8 //공 느리게 (1단계씩)
                        curVelocity=VelocityInit;
                        this.balls.forEach(function (n) {
                            if (n.alive) {
                                // //속도줄이기
                                // var vmax = Math.abs(n.body.velocity.x)>Math.abs(n.body.velocity.y)?n.body.velocity.x:n.body.velocity.y;
                                // var vbias = 270/vmax;
                                // if(vbias<0) vbias*=(-1);
                                // n.body.velocity.x = n.body.velocity.x * vbias;
                                // n.body.velocity.y = n.body.velocity.y * vbias;
                                // //속도줄이기
                                var ang = accelerateToXYFromLocal(n, n.body.velocity.x, n.body.velocity.y, curVelocity);
                            }
                        }, this);

                        if(kData.bSoundSE) SE_Item_Good.play();
                        break;
                    case 9:         //9 //블록 hp=1
                        //초코블록만 껍질 벗기기
                        this.tiles.forEach(function (n) {
                            if (n.alive && n.z_color===8 && n.z_step>0) {
                                n.z_step=0; //2:은박,1:반은박,0:초코블록
                                n.animations.play('show1', 15, false, undefined); //1time
                            }//if n.alive
                        }, this);
                        if(kData.bSoundSE) SE_Item_Good.play();
                        break;

                    case 10:         //10//패들 축소
                        this.onReleaseBalls();
                        this.setPadSizeLocal(-1);//this.nerfPaddle();
                        if(kData.bSoundSE) SE_Item_Bad.play();
                        break;

                    case 11:        //11//패들 축소(강제)
                        this.onReleaseBalls();
                        this.setPadSizeDirect(PadSize.nerf);
                        if(kData.bSoundSE) SE_Item_Bad.play();
                        break;

                    case 12:        //12//공 빠르게(4단계)
                        curVelocity+=200;
                        if(curVelocity>VelocityMax) curVelocity = VelocityMax;
                        if(kData.bSoundSE) SE_Item_Bad.play();

                        //---볼전체속도를 빠르게 한다.----

                        this.balls.forEach(function (n) {
                            if (n.alive) {
                                //커스텀버젼
                                var ang = accelerateToXYFromLocal(n, n.body.velocity.x, n.body.velocity.y, curVelocity);
                                //포인트인자버전 마찰력같은게 생겨서 에러
                                //this.targetxy = {x:n.body.velocity.x, y:n.body.velocity.y};
                                //var ang = game.physics.arcade.accelerateToObject(n, this.targetxy, curVelocity, 1000, 1000);
                                //xy인자버젼 -- 마찰력같은게 생겨서 에러
                                //var ang = game.physics.arcade.accelerateToXY(n, n.x+n.body.velocity.x, n.y+n.body.velocity.y, curVelocity);
                                //console.log("-------------angle:"+ang);

                            }
                        }, this);
                        //---볼전체속도를 빠르게 한다.----
                        break;

                    case 13:        //13//공 축소
                        if(kData.bSoundSE) SE_Item_Bad.play();
                        this.onReleaseBalls();
                        // BallType = { normal, small, big, through_n, through_s, through_b, bomb_n, bomb_s, bomb_b };
                        if(this.ballstate===BallType.normal_n) this.setBallStateDirect(BallType.normal_s); //축소습득
                        else if(this.ballstate===BallType.through_n) this.setBallStateDirect(BallType.through_s);
                        else if(this.ballstate===BallType.bomb_n) this.setBallStateDirect(BallType.bomb_s);
                        //

                        //if(this.ballstate===BallType.normal_s) this.setBallStateDirect(BallType.normal_n);                //노말-->노말
                        //else
                        if(this.ballstate===BallType.normal_n) this.setBallStateDirect(BallType.normal_s);
                        else if(this.ballstate===BallType.normal_b) this.setBallStateDirect(BallType.normal_n);
                        //else if(this.ballstate===BallType.bomb_s) this.setBallStateDirect(BallType.bomb_n);               //폭발속성-->폭발
                        else if(this.ballstate===BallType.bomb_n) this.setBallStateDirect(BallType.bomb_s);
                        else if(this.ballstate===BallType.bomb_b) this.setBallStateDirect(BallType.bomb_n);
                        //else if(this.ballstate===BallType.through_s) this.setBallStateDirect(BallType.bomb_n);            //관통속성-->관통
                        else if(this.ballstate===BallType.through_n) this.setBallStateDirect(BallType.through_s);
                        else if(this.ballstate===BallType.through_b) this.setBallStateDirect(BallType.through_n);
                        //else if(this.ballstate===BallType.throughbomb_s) this.setBallStateDirect(BallType.throughbomb_n);   //폭관-->폭관
                        else if(this.ballstate===BallType.throughbomb_n) this.setBallStateDirect(BallType.throughbomb_s);
                        else if(this.ballstate===BallType.throughbomb_b) this.setBallStateDirect(BallType.throughbomb_n);
                        break;

                    case 14:        //14//죽기
                        if(kData.bSoundSE) SE_Item_Bad.play();
                        //예전죽기 아이템
                        //this.death_Force();
                        //예전죽기 아이템

                        //현재초기화아이템
                        this.onReleaseBalls();
                        // BallType = { normal, small, big, through_n, through_s, through_b, bomb_n, bomb_s, bomb_b };
                        if(this.ballstate!==BallType.normal_n) {
                            this.setBallStateDirect(BallType.normal_n);
                            this.setBallsPosOffset();
                        }
                        this.setPadSizeDirect(PadSize.normal);

                        //총구 사라지기
                        this.setBulletOffset();
                        guntimer=0;
                        gunstate = ThreeState.end;
                        PadAttr_bullet = false; //in 아이템14(죽는아이템)
                        this.paddle.z_left.visible=false;
                        this.paddle.z_right.visible=false;
                        //총구 사라지기

                        //현재초기화아이템
                        //
                        break;
                } //switch (item.itemEffectName)
                item.kill();
            } ,//itemCollideWithPaddle

            overlapHandler: function(ball, tile) { //트리거//오버랩
                if(tile.z_color==-1) return;//1번만 실행목적
                if(tile.z_step==-1) return;
                //if(tile.z_color===9) this.countgold-=1;//무적블록이면 차감(오버랩

                //아이템떨어뜨리기
                if (this.bricksWithItems.indexOf(tile.name) > -1) {//아이템할당 타일이름이면
                    //this.bricksWithItems.pop(tile.name);
                    this.dropOneItems(tile.x, tile.y);
                }
                var stgame = uigame.state.states.game;
                stgame.massiveController.tiles.bringToTop(tile);//레이어상위로이동
                tile.animations.play('kill', 25, false, true); //1time //kill
                tile.body.enable=false;
                bbLevel[tile.z_y][tile.z_x]=-1;
                tile.z_step=-1;

                if(kData.bSoundSE) SE_Brick_Extinction.play();
                //tile.kill();

                tile.z_color = -1;//1번만 실행목적

                this.runTweenCombo(1); //폭발공으로 점수

            },//overlapHandler
            overlapHandler_through: function(ball, tile) { //트리거//오버랩
                if(tile.z_color==-1) return;//1번만 실행목적
                if(tile.z_step==-1) return;
                //if(tile.z_color===9) this.countgold-=1;//무적블록이면 차감(오버랩

                //관통폭발 처리---------------------------------- 1/3
                //아이템떨어뜨리기
                if (this.bricksWithItems.indexOf(tile.name) > -1) {//아이템할당 타일이름이면
                    //this.bricksWithItems.pop(tile.name);
                    this.dropOneItems(tile.x, tile.y);
                }
                tile.animations.play('fire', 25, false, true); //1time //kill
                tile.body.enable=false;
                tile.z_step=-1;
                //에러감시
                if(typeof(bbLevel) === 'undefined') console.log("bbLevel == undefined");
                if(typeof(bbLevel[tile.z_y]) === 'undefined') console.log("bbLevel[] == undefined, "+tile.z_y);
                if(typeof(bbLevel[tile.z_y][tile.z_x]) === 'undefined') console.log("bbLevel[][] == undefined, "+tile.z_x);
                //에러감시

                bbLevel[tile.z_y][tile.z_x]=-1;

                if(kData.bSoundSE) SE_Brick_Extinction_F.play();//블록폭발파괴
                //tile.kill();

                this.runTweenCombo(1); //폭발공으로 점수

                tile.z_color = -1;//1번만 실행목적
                //관통폭발공처리-------------------------------------


                //x 11개 y 18개
                this._xa = tile.z_x+1;
                this._xb = tile.z_x-1;

                _chk1_SE_Brick_Extinction_F = false;
                _chk2_SE_Brick_Extinction_F = false;

                _combotemp=0;
                //오른쪽
                if(this._xa<11&&bbLevel[tile.z_y][this._xa]!==-1&&bbLevel[tile.z_y][this._xa].alive){
                    var delay1a =  bbLevel[tile.z_y][this._xa];
                    _chk1_SE_Brick_Extinction_F = true;
                    setTimeout(function () {
                        delay1a.animations.play('kill', 25, false, true);
                        delay1a.body.enable=false;
                        //if(bSoundSE) SE_Brick_Extinction.play();
                        }, 150);
                    _combotemp+=1;
                }
                //왼쪽
                if(this._xb>-1&&bbLevel[tile.z_y][this._xb]!==-1&&bbLevel[tile.z_y][this._xb].alive){
                    var delay2a =  bbLevel[tile.z_y][this._xb];
                    _chk1_SE_Brick_Extinction_F = true;
                    setTimeout(function () {
                        delay2a.animations.play('kill', 25, false, true);
                        delay2a.body.enable=false;
                        //if(bSoundSE) SE_Brick_Extinction.play();
                        }, 150);
                    _combotemp+=1;
                }
                this._ya = tile.z_y+1;
                this._yb = tile.z_y-1;
                //위쪽
                if(this._ya<18&&bbLevel[this._ya][tile.z_x]!==-1&&bbLevel[this._ya][tile.z_x].alive){
                    var delay3a =  bbLevel[this._ya][tile.z_x];
                    _chk1_SE_Brick_Extinction_F = true;
                    setTimeout(function () {
                        delay3a.animations.play('kill', 25, false, true);
                        delay3a.body.enable=false;
                        //if(bSoundSE) SE_Brick_Extinction.play();
                        }, 150);
                    _combotemp+=1;
                }
                //아래쪽
                if(this._yb>-1&&bbLevel[this._yb][tile.z_x]!==-1&&bbLevel[this._yb][tile.z_x].alive){
                    var delay4a =  bbLevel[this._yb][tile.z_x];
                    _chk1_SE_Brick_Extinction_F = true;
                    setTimeout(function () {
                        delay4a.animations.play('kill', 25, false, true);
                        delay4a.body.enable=false;
                        //if(bSoundSE) SE_Brick_Extinction.play();
                        }, 150);
                    _combotemp+=1;
                }
                //소리취합
                if(_chk1_SE_Brick_Extinction_F){   //--2/3차 폭발사운드처리
                    setTimeout(function () {
                        if(kData.bSoundSE) SE_Brick_Extinction_F_a.play();//블록폭발파괴
                        _chk1_SE_Brick_Extinction_F=false;
                    }, 150);
                }
                //콤보취합
                if(_combotemp>0) {

                    setTimeout(function () {
                        var masscon = uigame.state.states.game.massiveController;
                        masscon.runTweenCombo(_combotemp);
                    }, 150);
                }

                _combotemp=0;
                //왼 위쪽
                if(this._xb>-1 && this._ya<18&&bbLevel[this._ya][this._xb]!==-1&&bbLevel[this._ya][this._xb].alive){
                    var delay1 =  bbLevel[this._ya][this._xb];
                    _chk2_SE_Brick_Extinction_F = true;
                    setTimeout(function () {
                        delay1.animations.play('kill', 25, false, true);
                        delay1.body.enable=false;
                        //if(bSoundSE) SE_Brick_Extinction.play();
                        }, 300);
                    _combotemp+=1;
                }
                //왼 아래쪽
                if(this._xb>-1 && this._yb>-1&&bbLevel[this._yb][this._xb]!==-1&&bbLevel[this._yb][this._xb].alive){
                    var delay2 = bbLevel[this._yb][this._xb];
                    _chk2_SE_Brick_Extinction_F = true;
                    setTimeout(function () {
                        delay2.animations.play('kill', 25, false, true);
                        delay2.body.enable=false;
                        //if(bSoundSE) SE_Brick_Extinction.play();
                        }, 300);
                    _combotemp+=1;
                }
                //오른 위쪽
                if(this._xa<11 && this._ya<18&&bbLevel[this._ya][this._xa]!==-1&&bbLevel[this._ya][this._xa].alive){
                    var delay3 = bbLevel[this._ya][this._xa];
                    _chk2_SE_Brick_Extinction_F = true;
                    setTimeout(function () {
                        delay3.animations.play('kill', 25, false, true);
                        delay3.body.enable=false;
                        //if(bSoundSE) SE_Brick_Extinction.play();
                        }, 300);
                    _combotemp+=1;
                }
                //오른 아래쪽
                if(this._xa<11 && this._yb>-1&&bbLevel[this._yb][this._xa]!==-1&&bbLevel[this._yb][this._xa].alive){
                    var delay4 = bbLevel[this._yb][this._xa];
                    _chk2_SE_Brick_Extinction_F = true;
                    setTimeout(function () {
                        delay4.animations.play('kill', 25, false, true);
                        delay4.body.enable=false;
                        //if(bSoundSE) SE_Brick_Extinction.play();
                        }, 300);
                    _combotemp+=1;
                }
                //사운드2차취합
                if(_chk2_SE_Brick_Extinction_F){   //--2/3차 폭발사운드처리
                    setTimeout(function () {
                        if(kData.bSoundSE) SE_Brick_Extinction_F_a.play();//블록폭발파괴
                        _chk2_SE_Brick_Extinction_F=false;
                    }, 300);
                }
                //콤보2차취합
                if(_combotemp>0) {

                    setTimeout(function () {
                        var masscon = uigame.state.states.game.massiveController;
                        masscon.runTweenCombo(_combotemp);
                    }, 300);
                }
                
                //관통폭발공처리------------------------------------------------





            }//overlapHandler_through
        } //this.helpers
    //bb--------------------------------------------------------------->>
};

MassiveController.prototype = {

    numLanes: 4,					// number of lanes
    xLanePositions: [181, 303, 421, 542],	// x locations of the three lanes
    _a: 0,
    _b: 0,

    init: function () {//게임시작2-3, 게임재시작2-3 //매시브초기화 //massive init mass init

        enablePlayTime=false;
        this.RedorGreen=0;
        //디버그그래픽스
        //this.rect = new Phaser.Rectangle( 100, 100, 100, 100 ) ;
        this.circle = new Phaser.Circle( 0, 0, 10 ) ;
        //this.point = new Phaser.Point( 100, 280 ) ;
        //디버그그래픽스

        if (dm) console.log("- MassiveController.init");

        this.leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);
        this.rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
        this.upKey = this.game.input.keyboard.addKey(Phaser.Keyboard.UP);
        this.downKey = this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN);
        this.spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

        // curScore = 0; //massi.. init
        // curLives = 3; //massi.. init

        PadAttr_bullet=false; //in init
        this.padatt = PadAttr.normal;
        this.padsize = PadSize.normal;
        this.padsizeold = PadSize.normal;
        this.ballstate = BallType.normal_n;
        this.tiles = [];
        this.ballOnPaddle = true; //초기화init
        this.redbeartimer = -1; //초기화
        this.greenbeartimer = -1; //초기화

        playtime_all_cur = playtime_all;

        this.gameState.onGameOver.add(this.onGameOver, this); //골인 내랭킹 트로피 연출
        //this.gameState.onMistake.add(this.onMistake, this);
       // this.gameState.onMistakeRecover.add(this.onMistakeRecover, this);
        this.gameState.onReleaseBalls.add(this.onReleaseBalls, this);
        this.gameState.onCopyBalls.add(this.onCopyBalls, this);

        this.gameState.onGameBegin.add(this.onGameBegun, this);

        this.gameState.onFinishLevelUI.add(this.onFinishLevelUI, this);

        //텍스쳐애니
        //uigame.time.events.loop(Phaser.Timer.QUARTER, this.utilities.setForEachTexutrAni, this); //사이렌자동차애니
        uigame.time.events.loop(Phaser.Timer.SECOND*2, this.updateBallVelocity, this);//2초당업데이트(볼속도,곰수기록)
        uigame.time.events.loop(Phaser.Timer.HALF, this.attrTimerDecrease, this);  //속성타이머 //초당업데이트


        uigame.time.events.loop(
           timeStepHorizontal,//25,
           this.moveLoopHorizontal, this);  //블록이동업데이트//블럭이동초당업데이트

        //uigame.time.events.loop(Phaser.Timer.SECOND*modeoption[3]*0.1, this.moveVerticalTime, this);  //패들충돌시에 이동하므로
        //uigame.time.events.loop(Phaser.Timer.SECOND, this.moveVerticalTime, this);  //패들충돌시에 이동하므로
        //bb----------------------------------------------------------<< create
        this.se_brickDeath = _BGame.se_brickDeath;
        this.se_powerdown = _BGame.se_powerdown;
        this.se_powerup = _BGame.se_powerup;
        this.se_recover = _BGame.se_recover;


        //인덱스게임에서 실행
        //this.game.physics.startSystem(Phaser.Physics.ARCADE);
        // All walls collide except the bottom
        //this.game.physics.arcade.checkCollision.down = false;
        //인덱스게임에서 실행

        //새로추가된 //113
        this.initGameVars(); //lives, score, curLevel 초기화
        this.initLevel();
        this.createSoundsAndMusic();

        //this.game.add.sprite(0, 0, 'bg');
        //this.background = this.game.add.tileSprite(0, 0, 800, 600, "background");
        //this.background = this.game.add.sprite(0,0,"background");

        //게임값들  리셋
        //this.ballsCount = 0;
        this.countDownTime = 3;
        this.countDownTimeElapsed = 0;

        this.game.camera.setSize(this.game.world.width, this.game.world.height);
        //remove the camera bounds so we can shake it later ;)
        this.game.camera.bounds = null;

        this.createPaddle();
        this.paddle.visible = false; //in init
        //새로추가된 //113


        //여기로 이사옴
        this.tiles = this.game.add.group();//113 this.bricks = this.game.add.group();
        this.tiles.enableBody = true;
        this.tiles.physicsdBodyType = Phaser.Physics.ARCADE;

        if(dm) console.log("curLevel:"+curLevel);
        this.copyLevel(curLevel);//113 //메시브 init
        this.tiles.visible = false; //타일숨기기

        this.bounds3 = this.game.add.group();
        this.createBounds3Sprite();

        this.bounds4 = this.game.add.group();
        this.createBounds4Sprite();

        this.trails = this.game.add.group(); //피직스볼 처음 생성
        this.createtrailsSprite();

        //this.trails.z_p[ ID ][ POS ][0];
        //this.trails.z_p[ ID ][ POS ][1];

        //ball 1 --> 5, total 5
        //ball 2 --> 4, total 8
        //ball 3 --> 3, total 9
        //ball 4 --> 2, total 8
        //ball 5 --> 1, total 5

        this.balls = this.game.add.group(); //피직스볼 처음 생성
        this.createballsSprite();


        this.bullets = this.game.add.group(); //총알 생성
        this.createbulletsSprite();

        this.redBears = this.game.add.group(); //적곰생성
        this.createbearsRSprite();
        this.greenBears = this.game.add.group();//녹곰생성
        this.createbearsGSprite();

        this.navi = CreateNavi();
        this.navi.x= game.world.centerX;
        this.navi.y= this.paddlePosY;// - this.paddle.body.halfHeight - this.ball.body.halfHeight;
        //볼의바디를 계산하니 에러

        this.navi.visible = false; //초기화 숨기기

        this.copyBall1(); //패들위에 공을 배치

        this.ball.visible = false;
        //this.game.input.onDown.add(this.helpers.release, this);

        //여기도 이동
        this.items = this.game.add.group();

        this.tiles_score = this.game.add.group();
        //this.createTileScore(this.tiles_score);

        this.createHUD(); //113

        //bb---------------------------------------------------------->>
    },
    onGameBegun: function () { //게임메인ui보이기, 스코어:, 스테이지: 업데이트, 블록타일 보이기

        // 메인ui 구조
        // uiMain.z_life[3]
        //              [0].z_star
        //              [0].z_paddle
        //       .z_stageNumber
        //       .z_scoreNumber

        //메인메뉴 레벨 표시
        var ui = uigame.state.states.game.uiController.uiMain;
        MainUI=uigame.state.states.game.uiController.uiMain;
        ////this.scoreText = ui.z_scoreNumber.z_number;  //텍스트 오브젝트 가져오기
        this.stageText = ui.z_stageName;  //텍스트 오브젝트 가져오기
        //this.stageText.z_number.text = (curLevel+1)+" ";//this.stageText.text = (curLevel+1)+" ";
        //메인메뉴 레벨 표시

        curLives = MaxLife; //in onGameBegun
        //curScore = 0;
        curLines = 0;
        curComboCount = 0; //onGameBegun
        seamlessLines = 0;
        //this.livesUI = ui.z_lifestar;
        //this.livesUI.onSetLife(curLives);//in onGameBegin

        this.tiles.visible = true;

        this.uiCombo = ui.z_combo;
        uiComboGlobal = ui.z_combo;
        uiProgGlobal = ui.z_prog;


    },



    create: function () {
        if (dm) console.log("- MassiveController.create(new update)");

    },



    attrCountDecrease:function () {
        if(this.padatt === PadAttr.fixed) {

        }else{

        }
    },

    moveLoopHorizontal:function() { //블록이동초당업데이트함수//좌우스크롤//마스크스크롤//블록이동수평

        if(modeOption[0]!==0) return; 
        if(this.mskllen===0 && this.mskrlen===0) return; //마스크가 있는지

        if(//this.ballOnPaddle||
            this.gameState.gameOver
            || ispausemode
        ) return;

        //console.log("(0.025sec) moveLoop: mskloff="+this.mskloff +", msklmax:"+this.msklmax);
        if(this.mskldir===true) {//왼쪽 사라지기
            this.mskloff +=timeStepMoveOff; //min 0, max 240
            if(this.mskloff>this.msklmax) {//err:한칸부족하게 넘어감
                this.mskloff = this.msklmax;
                this.mskldir=false;              //마스크왼쪽으로만 이동방향체크
            }
        }else{                  //왼쪽 등장하기(0 -> -max)
            this.mskloff -=timeStepMoveOff;
            if(this.mskloff<0) {
                this.mskloff = 0;
                this.mskldir=true;               //마스크왼쪽으로만 이동방향체크
            }
        }
        if(this.mskrdir===true) {//오른쪽 사라지기
            this.mskroff -=timeStepMoveOff; //min 0, max -240
            if(this.mskroff<0){
                this.mskroff = 0;
                this.mskrdir=false;
            }
        }else{                  //오른쪽 등장하기(0 -> -max)
            this.mskroff +=timeStepMoveOff;
            if(this.mskroff>this.mskrmax) {
                this.mskroff = this.mskrmax;
                this.mskrdir=true;
            }

        }
        for (this._i = 0; this._i < this.mskllen; this._i++) {
            this._mskx=this.mskl[this._i][0];
            this._msky=this.mskl[this._i][1];
            this._mxobj = bbLevel[this._msky][this._mskx];
            if(this._mxobj !== -1)
                this._mxobj.x = this._mxobj.z_initx-this.mskloff;
        }
        for (this._i = 0; this._i < this.mskrlen; this._i++) {
            this._mskx=this.mskr[this._i][0];
            this._msky=this.mskr[this._i][1];
            this._mxobj = bbLevel[this._msky][this._mskx];
            if(this._mxobj !== -1)
                this._mxobj.x = this._mxobj.z_initx+this.mskroff;
        }

    },

    debugTiles:function(){
        //그리드속성출력(타일색상번호)
        // level 100(index99)    // level 1(index0)
        // 9 9 9 9 9 9 9 9 9 9 9 // - - - - - - - - - - -
        // 9 9 9 9 9 9 9 9 9 9 9 // - - - - - - - - - - -
        // 3 1 3 3 3 1 3 3 3 1 3 // - - - - - - - - - - -
        // 1 1 3 3 1 3 1 3 1 3 1 // - - - - - - - - - - -
        // 3 1 9 9 1 3 1 9 1 9 1 // - 0 - 2 - 4 - 6 - 0 -
        // 3 1 9 9 1 3 1 3 1 3 1 // - - 1 - 3 - 5 - 7 - -
        // 3 1 3 3 1 3 1 3 1 3 1 // - 0 - 2 - 4 - 6 - 0 -
        // 3 1 3 3 1 3 1 3 1 3 1 // - - 1 - 3 - 5 - 7 - -
        // 3 1 3 3 1 3 1 3 1 3 1 // - 0 - 2 - 4 - 6 - 0 -
        // 3 1 3 3 1 3 1 3 1 3 1 // - - 1 - 3 - 5 - 7 - -
        // 3 1 9 9 1 3 1 9 1 3 1 // - 0 - 2 - 4 - 6 - 0 -
        // 3 1 9 9 1 3 1 9 1 3 1 // - - 1 - 3 - 5 - 7 - -
        // 3 1 9 9 1 3 1 9 1 3 1 // - 0 - 2 - 4 - 6 - 0 -
        // 3 1 3 3 1 3 1 3 1 3 1 // - - 1 - 3 - 5 - 7 - -
        // 3 1 3 3 1 3 1 3 1 3 1 // - - - - - - - - - - -
        // 1 1 1 3 3 1 3 3 3 1 9 // - - - - - - - - - - -
        // 9 9 9 3 3 3 3 3 3 9 9 // - - - - - - - - - - -
        // 9 9 9 3 3 3 3 3 9 9 9 // - - - - - - - - - - -
        if(true) {
            var strarr1 = "";
            for (this._j = 0; this._j < gridszy; this._j++) { //y
                for (this._i = 0; this._i < gridszx; this._i++) { //x
                    if (bbLevel[this._j][this._i] === -1) {
                        strarr1 += "- ";
                    } else {
                        strarr1 += (bbLevel[this._j][this._i].z_color + " ");
                    }

                }
                strarr1 += "\n";
            }
            if(dm) console.log("----info1:\n" + strarr1);
            //그리드출력(현재 타일색상번호)

            // var strarr1_s = "";
            // for (this._j = 0; this._j < gridszy; this._j++) { //y
            //     for (this._i = 0; this._i < gridszx; this._i++) { //x
            //         if (bbLevel_coloronly[this._j][this._i] === -1) {
            //             strarr1_s += "- ";
            //         } else {
            //             strarr1_s += (bbLevel_source[this._j][this._i] + " ");
            //         }
            //
            //     }
            //     strarr1_s += "\n";
            // }
            // console.log("----info1_s:\n" + strarr1_s);
            //그리드출력(첫배치 타일색상번호)
        }


        if(false) {
        //그리드좌표출력(그리드xy)
        //( 0, 0) ( 1, 0) ... (10, 0)
        //( 0, 1) ( 1, 1) ....
        // .................. (10,17)
            var strarr2 = "";
            var vx = 0;
            var vy = 0;
            for (this._j = 0; this._j < gridszy; this._j++) { //y
                for (this._i = 0; this._i < gridszx; this._i++) { //x
                    if (bbLevel[this._j][this._i] === -1) {
                        strarr2 += "(  ,  ) ";
                    } else {
                        vx = bbLevel[this._j][this._i].z_x;
                        vy = bbLevel[this._j][this._i].z_y;
                        if (vx < 10) vx = " " + vx;
                        if (vy < 10) vy = " " + vy;
                        strarr2 += ( "(" + vx + "," + vy + ") ");
                    }
                }
                strarr2 += "\n";
            }
            if(dm) console.log("----info2:\n" + strarr2);
            //그리드출력(그리드xy)
        }
    },

    update_bbLeve:function(){

    },

    moveVertical:function() { //블록수직이동//패들충돌이후//블록스크롤
        if(modeOption[0]!==1) return; //0:노말 1:하강모드 2:보너스

        if (//this.ballOnPaddle||
        this.gameState.gameOver
        || ispausemode
        ) return;


        if (curLines < 3) { //전체 1칸씩 이동 //4칸만 이동
            for (this._i = 0; this._i < gridszx; this._i++) { //x
                for (this._j = 0; this._j < gridszy; this._j++) { //y
                    if (bbLevel[this._j][this._i] !== -1) {
                        bbLevel[this._j][this._i].y += szy;
                    }
                }
            }
            curLines += 1;
        } else {//기본4칸이동이후
            // y축 기준 맨밑칸이 빈칸이 있으면//이동
            var isEmpty=false;
            var ylast = gridszy - 1;
            for (this._i = 0; this._i < gridszx; this._i++) { //
                //x0번 컬럼라인 검사
                isEmpty = bbLevel[ylast][this._i] === -1;//-1이면 true, 아니면 false
                if (isEmpty) {//밑줄이 타일이 없으면
                         //y축 전체 1줄 밑으로
                    for (this._j = gridszy - 2; this._j>=0; this._j--) { //예:4,3,2,1,(0)제외
                        //타일1개 이동
                        bbLevel[this._j][this._i].y += szy;

                        //타일1개 그리드 좌표저장 속성 변경//밑으로 y축으로 이동
                        bbLevel[this._j][this._i].z_y = bbLevel[this._j][this._i].z_y+1;

                        //그리드1개 덮어쓰기(밑으로이동하므로)
                        bbLevel[this._j+1][this._i] = bbLevel[this._j][this._i];
                        bbLevel[this._j][this._i] = -1;                           //예전 그리드 삭제
                    }
                }
            }
            // y축 기준 맨밑칸이 빈칸이 있으면//이동
        }
        if(kData.bSoundSE) SE_Brick_Drop.play(); //벽돌내려올때
        if(dm) console.log("----moveVertical:curLines:"+curLines);
    },
    moveVerticalTime:function() { //블록수직이동//시간//블록스크롤

        //seamlessLines+=1;

        if(modeOption[1]<=seamlessLines){
            finalClearBonus = true;
        }

        if(finalClearBonus===true
        && ((modeOption[1]+18)<=seamlessLines||this.tiles.countLiving()===1)) {
            isClearBonus = true;
            return;
        }

        //x0            x1
        // :             :
        //x0            x1
        //밑으로 이동후, 다음컬럼을 이동
        for (this._i = 0; this._i < gridszx; this._i++) { //
            // console.log("this._i:"+this._i+", this._j:"+this._j);
            //y=0값 맨밑 블록 검사해서 temp저장 //0
            //맨밑줄에 있는 블록(gridszy - 1)을 가르킴
            if(bbLevel[gridszy - 1][this._i]!==-1) {
                this._tmptile = bbLevel[gridszy - 1][this._i];
            }else{
                this._tmptile = -1;
                //console.log("bbLevel[][]값이 -1이다. xy:"+this._i+","+(gridszy - 1));
            }

            //1컬럼 전체 1밑으로 이동
            for (this._j = gridszy - 2; this._j>=0; this._j--) { //예:4,3,2,1,(0)제외
                //타일1개 이동
                // console.log("-- gridxy:"+this._i
                //     +","+this._j
                //     +", y1:"+ bbLevel[this._j][this._i].y
                //     +"--before");
                bbLevel[this._j][this._i].y += szy;
                // console.log("-- gridxy:"
                //     +this._i
                //     +","+this._j
                //     +", y1:" +bbLevel[this._j][this._i].y
                //     +"--after");

                //타일1개 그리드 좌표저장 속성 변경//밑으로 y축으로 이동
                bbLevel[this._j][this._i].z_y = bbLevel[this._j][this._i].z_y+1;

                //그리드1개 덮어쓰기(밑으로이동하므로)
                bbLevel[this._j+1][this._i] = bbLevel[this._j][this._i];
                bbLevel[this._j][this._i] = -1;                           //예전 그리드 삭제
            }//1컬럼 전체 1밑으로
            
            //y축 맨 윗줄 타일 제거
            if(this._tmptile!==-1) this._tmptile.kill();

            //if(this._tmptile!==-1) {
                //블록이 있으면 그대로 위로 이동
                // bbLevel[0][this._i]=this._tmptile;
                // bbLevel[0][this._i].y = strty;
                // bbLevel[0][this._i].z_y = 0;

                // console.log("--seamlessLines:" +seamlessLines
                //     +", curX:" + this._i
                //     +", bbLevel_coloronly:" + ((gridszy-1)-(seamlessLines%gridszy))
                //     +", gridszy:" + gridszy
                //     +", istile: object"
                // );
            //}else{

                //블록생성-기존그리드위치에
                //(gridszy-1)-->맨밑줄기준 삼아
                //(seamlessLines%gridszy)-->이동한 줄수만큼 빼준다 //1줄 이동이면-->그리드 9행->8행의 속성값을 참고
                //움직이지 않는 원본 그리드에서 다음 칼라를 가져온다
                this._tmpcolor = bbLevel_coloronly[((gridszy-1)-(seamlessLines%gridszy))][this._i];

            // //디버깅
            // console.log("--seamlessLines:" +seamlessLines
            //     +", curX:" + this._i
            //     +", bbLevel_coloronly:" + ((gridszy-1)-(seamlessLines%gridszy))
            //     +", gridszy:" + gridszy
            //     +", this.color:" + this._tmpcolor
            //
            // );//디버깅


            if(-1 !== this._tmpcolor    //속성(컬러)값이 있고
            && finalClearBonus===false  //보너스클리어가 아니면
            ) {

                    this._tmptile = this.tiles.getFirstDead();

                    if(this._tmptile !== null) {

                    }else{
                        this._tmptile = this.createTile1(0, this._i, this._tmpcolor);
                        if(dm) console.log(" this.tiles.getFirstDead()값이 null이다. xy:"+this._i+","+0);
                    }

                    this._tmptile.revive();
                    this._tmptile.body.enable = true;
                    this._tmptile.alpha = 1;
                    this._tmptile.z_color = this._tmpcolor;
                    this._tmptile.z_step = 0;

                    this._tmptile.loadTexture(
                        'atlas_bb-0',
                        (this._tmpcolor === 0 ? 'block_white.png'
                            : this._tmpcolor === 1 ? 'block_crimson.png'
                                : this._tmpcolor === 2 ? 'block_red.png'		//오렌지
                                    : this._tmpcolor === 3 ? 'block_yellow.png'
                                        : this._tmpcolor === 4 ? 'block_green.png'
                                            : this._tmpcolor === 5 ? 'block_lightblue.png'     //하늘색
                                                : this._tmpcolor === 6 ? 'block_deepblue.png'     //파랑
                                                    : this._tmpcolor === 7 ? 'block_pupple.png'  //보라
                                                        : this._tmpcolor === 8 ? 'block_choco_3.png'   //하드
                                                            : this._tmpcolor === 9 ? 'block_gold.png'    //무적
                                                                : 'block_white.png')
                    );

                    this._tmptile.reset(strtx + (this._i * szx), strty);

                    bbLevel[0][this._i] = this._tmptile;
                    //bbLevel[0][this._i].z_y=0;
                    bbLevel[0][this._i].y = strty;
                    bbLevel[0][this._i].z_x = this._i;
                    bbLevel[0][this._i].z_y = 0;

                //} //타일이 -1일때 처리



                //블록생성

                //블록그리드값추가
                //bbLevel[0][this._i]=this._tmptile;
                //블록그리드값추가
            }//배열컬러값체크 //y축 맨 윗줄로 이동처리

            //this.debugTiles();
            if(kData.bSoundSE) SE_Brick_Drop.play(); //벽돌내려올때
            // console.log("this._ai:"+this._i+", this._aj:"+this._j+"--last");
        }//_i 즉 x값반복

        //----------하트를 심을 블록들을 고른다.--시작--------- y==0만 업데이트 //타임에 따라
        BonusXArr=[];
        var xidx = 0;
        //var yremain=0;//나머지를 누적치시킬 변수
        //for (var iy = 11 - 1; iy >= 0; iy--) {//맨밑에서 위로 오라오면서
            //for (var ix = 0; ix <11; ix++) { //모든 x에 대해서

        //1줄당 평균치 하트갯수 지정
        var xcnt = BonusHeartPerLine + (RemainAccum<=BonusHeartRemain?1:0);

        //1줄을 블록만 콜렉션
        for (var ix = 0; ix <11; ix++) {
            if(bbLevel[0][ix]!==-1) BonusXArr.push(ix);
        }

        //1줄 콜렉션 섞기
        BonusXArr = Phaser.ArrayUtils.shuffle(BonusXArr);
        //지정하트갯수보다 블록수가 적으면, 블럭수에 맞춘다
        if(BonusXArr.length<xcnt) xcnt = BonusXArr.length;

        for (var ix = 0; ix <xcnt; ix++) {
            xidx=BonusXArr[ix];
            if(bbLevel[0][xidx]!==-1){

                bbLevel[0][xidx].loadTexture('atlas_bb-0', 'block_heart.png');
                bbLevel[0][xidx].z_isheart = true;

                BonusLocated+=1;//이동
                if(dm) console.log("BonusLocated(ing):"+BonusLocated +", xy:"+xidx +",0");
                
                // BonusGridIdx+=1;
                // if(BonusGridIdx>=11) BonusGridIdx=0;
            }
        }//ix
        RemainAccum+=1;//한줄 움직이기 때문에//1개 추가됬다고 생각하고// 나머지의 누적치 +1증가

        //}//iy
        //----------하트를 심을 블록들을 고른다.--끝---------

        seamlessLines+=1;
    },

    attrTimerDecrease:function(){ //초당업데이트함수
        if( this.gameState.gameOver //여기서는 인풋정지용도
            || ispausemode
        ) return;
        //총알체크
        if(guntimer>0) {
            guntimer-=1;
            if(dm) console.log("guntimer:"+guntimer);
        }

        //초당속도증가
        if(!this.ballOnPaddle) {
            curVelocity += VelocityAdd;
            if (curVelocity > VelocityMax) curVelocity = VelocityMax;
            //if(hsdm) hsDebug.onSet("v", curVelocity);
        }
        if(modeOption[0]!==2
        //&& curLevel+1>=StartBearLevel) { //in attrTimerDecrease
        &&  isUseBear) { //in attrTimerDecrease
            if(this.redBears.countLiving()>0){
                if(dm) console.log("--bears--");
                var p="";
                this.redBears.forEach(function (n) {
                    if (n.alive){
                        if(dm) console.log(""+n.name+","+n.z_hitcount+", enable:"+n.body.enable);
                    }
                }, this);
            }
            if (this.redBears.countLiving() === 0 && this.greenBears.countLiving() === 0) {
                if (0 === this.RedorGreen) {

                    //적곰체크 초당
                    if (this.redbeartimer > 0) {              //곰이없고, 대기시간이 남은 상황
                        this.redbeartimer -= 1;
                    } else if (this.redbeartimer === 0) {     //곰이없고, 대기시간이 0 상황
                        this.onReleaseRedBear();                //적곰소환

                        this.RedorGreen = (this.RedorGreen+1) % 2;// uigame.rnd.integerInRange(0, 1); //적곰과 녹곰중에서 선택한다.
                        if (this.RedorGreen === 0) {
                            this.redbeartimer = BearTimeMax; //대기시간 충전
                            this.greenbeartimer = -1;
                        } else {
                            this.redbeartimer = -1;
                            this.greenbeartimer = BearTimeMax; //대기시간충전
                        }
                    } else {
                        //마이너스상황
                    }
                } else {//rnd===1

                    //녹곰체크 초당
                    if (this.greenbeartimer > 0) {              //곰이없고, 대기시간이 남은 상황
                        this.greenbeartimer -= 1;
                    } else if (this.greenbeartimer === 0) {     //곰이없고, 대기시간이 0 상황
                        this.onReleaseGreenBear();                //녹곰소환

                        this.RedorGreen = (this.RedorGreen+1) % 2;//uigame.rnd.integerInRange(0, 1); //적곰과 녹곰중에서 고른다.
                        if (this.RedorGreen === 0) {
                            this.redbeartimer = BearTimeMax;
                            this.greenbeartimer = -1;
                        } else {
                            this.redbeartimer = -1;
                            this.greenbeartimer = BearTimeMax;
                        }

                    } else {
                        //마이너스상황
                    }

                }//if rnd
            }//bearcount
            if(dm) console.log("redtime:"+this.redbeartimer+", green:"+this.greenbeartimer);

        }//curLevel+1>=StartBearLevel //보너스를 제외한모드, 곰사용가능한 모드,

        //console.log("-------------blockCountAll:"+this.tiles.countLiving()+",Gold:"+this.countgoldcur);


            //엔딩시작체크 및 타일수체크
        if(ending_step === _steps.none){ //초당체크
            //골드블록숫자 만큼 블록이 남으면 남은 블록갯수 감시
            this._cntliving = this.tiles.countLiving();
            //현재블럭숫자가 초기골드블록보다 적을때
            if( ((modeOption[0]===0 || modeOption[0]===1) && this._cntliving<=this.countgold)
                || ( modeOption[0]===2 && isClearBonus===true )) {
                //골드갯수체크
                var gcnt = 0;
                this.tiles.forEach(function (n) {
                    if (n.alive && n.z_color === 9) {         //무적9//초코블록8
                        gcnt += 1;                            //현재골드블록만 숫자세기
                    }
                }, this);
                this.countgoldcur = gcnt;
                //클리어조건 달성
                if ( ((modeOption[0]===0 || modeOption[0]===1) && this._cntliving <= this.countgoldcur)
                    || ( modeOption[0]===2 && isClearBonus===true)) { //현재블록갯수<=현재골드갯수이면(골드만 남앗으면)

                    //레벨클리어조건이 됨
                    this.hideTrails();//25버전 트레일 숨기기 --- 레벨 클리어시

                    //엔딩연출시작
                    ending_step = _steps.begin; //다시 여기 진입못하게

                    curVelocity = 0; //2초당업데이트에서 속도가 남아서 움직이므로, endgame에 넣엇엇는데...안되는 경우가 잇어서 여기로

                    this.ballOnPaddleTweening = true;             //패들정지용도

                    //클리어-무적블록 폭발연출
                    this.onStopObjAll(); //볼,아이템,적곰,총알 정지
                    this.onBurstObjAll();
                    var massive = uigame.state.states.game.massiveController;

                    setTimeout(function () {

                        spn_paddle_out.x = Paddle.x;
                        spn_paddle_out.y = Paddle.y;
                        spn_paddle_out.setAnimationByName(4, "paddle_out", false);

                        if (TweenMax.isTweening(Paddle)) TweenMax.killTweensOf(Paddle);
                        Paddle.visible = false;
                    },
                        burstBrickTime
                    );

                    setTimeout(function () {
                        //massive.playanimPadDeath(massive.padsize);//패들사망연출 //게임클리어

                        // setTimeout(function () {
                        //     if (TweenMax.isTweening(Paddle)) TweenMax.killTweensOf(Paddle);
                        //     Paddle.visible = false;
                        // }, 0.25);
                        ending_step = _steps.end;
                    }, burstBrickTime + 500);
                    //클리어-무적블록 폭발연출

                }//현재블록수<=현재골드 이면 클리어연출진행
            }//현블록갯수<=초기골드


        }
        //엔딩연출끝단계에 도달시 ui출력
        if( ending_step === _steps.end) {
            this.ballOnPaddleTweening=false; //패들정지풀기용도
            this.gameState.gameOver=true;//여기서는 인풋정지용도, 초당 업데이트도 중지됨

            //tweenText( this.scoreText, +1000);

            var fn = this.finishLevelUI; //클리어 초당 업데이트
            setTimeout(function () {
                if (game.state.current !== "game") return;
                fn();
            }, 0.75);

        }

        //1초전 메달 복구 해주려고 초당업데이트 맨나중에 저장
        //medalbefore1sec = MainUI.z_prog.onGetMedalByBias(playtime_clock / playtime_clock_max);


        if(dm) console.log( "(1sec) isRed: "+this.RedorGreen);
        if(dm) console.log( "(1sec) redTime: "+this.redbeartimer +", greenTime:"+this.greenbeartimer );
        if(dm) console.log( "(1sec) tiles:"+ this.tiles.countLiving() +", gold:"+ this.countgold);
        if(dm) console.log( "(1sec) balltype:"
            + (this.ballstate===BallType.normal_n?"normal_n"
                :this.ballstate===BallType.normal_s?"normal_s"
                :this.ballstate===BallType.normal_b?"normal_b"
                :this.ballstate===BallType.through_n?"through_n"
                :this.ballstate===BallType.through_s?"through_s"
                :this.ballstate===BallType.through_b?"through_b"
                :this.ballstate===BallType.bomb_n?"bomb_n"
                :this.ballstate===BallType.bomb_s?"bomb_s"
                :this.ballstate===BallType.bomb_b?"bomb_b"
                :this.ballstate===BallType.throughbomb_n?"throughbomb_n"
                :this.ballstate===BallType.throughbomb_s?"throughbomb_s"
                :this.ballstate===BallType.throughbomb_b?"throughbomb_b"
                :"err")
            +", padtype:"
            + (this.padatt===PadAttr.normal?"normal"
                :this.padatt===PadAttr.fixed?"fixed"
                :"err")
        );

    },
    updateBallVelocity:function() { //2초당업데이트
        if(this.gameState.gameOver
            || this.ballOnPaddle
            || ispausemode
        ) return;
        //공속도 업데이트
        this.balls.forEach(function (n) { if (n.alive) { //모든 볼의 속도를 증가시켜주려고
                accelerateToXYFromLocal(n, n.body.velocity.x, n.body.velocity.y, curVelocity);
            }
        }, this);
        //곰갯수체크
        //var aa = this.redBears.countLiving();//곰생성추적 2초업데이트
        //var ab = this.greenBears.countLiving();//곰생성추적 2초업데이트
        //console.log("update red:"+aa+", green:"+ab);
    },


    finishLevelUI: function(){ //초당검사에서 클리어창오픈
        if(game.state.current!=="game") return;
        var stgame = uigame.state.states.game;
        if (stgame.uiController.uiClearLevel.visible === false) {
            selectBGM("none", true);
            //stgame.uiController.uiClearLevel.onSetCl( curLevel, (convertTimeFormatFromSec(float2int(playtime_clock) - 1)));
            //var _medal = MainUI.z_prog.onGetMedalByBias(playtime_clock / playtime_clock_max);
            //if(medalbefore1sec>_medal){//메달복구
            //
            //}
            stgame.uiController.uiClearLevel.onSetCl( curLevel, MainUI.z_prog.z_timer.text);
            stgame.uiController.uiClearLevel.onActiveCl(curMyStars>=3?true:false, true);
        }

    },


    startContinue: function() {
          //this.livesUI.onSetLife(curLives); //in startContinue

            this.paddle.visible = false; //in start continue
            TweenMax.delayedCall( 0.25,
                function () {
                    //시작연출-레디고
                    var stgame = uigame.state.states.game;
                    //console.log("introshow in starcontinue");
                    TweenMax.delayedCall(0.5,function() { stgame.massiveController.introShow(); });//인트로시작1?
                    //레디고플레이
                    stgame.uiController.uiReadyGo.visible = true;
                    stgame.uiController.uiReadyGo.z_spine.setAnimationByName(1, "ready_go_ani", false); //in startContinue
                    //엠프티에러//stgame.uiController.uiReadyGo.z_spine.addAnimationByName(0, "empty", false);

                    //stgame.massiveController.introShow();
                    //시작연출-레디고
                }
            );
    },

    onFinishLevelUI: function(){//비어있음

    },

    onStopObjAll: function(){
        //공속도0
        this.balls.forEach(function (n) {
            if (n.alive) {
                n.body.velocity.set(0);
            }//if n.alive
        }, this);
        //아이템속도0
        this.items.forEach(function (n) {
            if (n.alive) {
                n.body.velocity.set(0);
            }//if n.alive
        }, this);
        //총알속도0
        this.bullets.forEach(function (n) {//총알제거 //총알은 바로 제거
            if (n.alive) {
                n.kill();// n.body.velocity.set(0);
            }
        }, this);
        //총알끄기,총알속성끄기
        guntimer=0;
        gunstate = ThreeState.end;
        PadAttr_bullet=false; //in onStopObjAll
        
        //총구끄기
        this.paddle.z_left.visible=false;
        this.paddle.z_right.visible=false;
        //총구끄기
        
        //적곰속도0
        this.redBears.forEach(function (n) {
            if (n.alive) {
                n.body.velocity.set(0);
            }
        }, this);
        //녹곰속도0
        this.greenBears.forEach(function (n) {
            if (n.alive) {
                n.body.velocity.set(0);
            }
        }, this);
    },
    onPauseSaveVelocity: function(){
        if(dm) console.log("----onPauseSaveVelocity---");
        //공속도0
        this.balls.forEach(function (n) {
            if (n.alive) {
                n.z_velx = n.body.velocity.x;
                n.z_vely = n.body.velocity.y;
                n.body.velocity.set(0);
            }//if n.alive
        }, this);
        //아이템속도0
        this.items.forEach(function (n) {
            if (n.alive) {
                n.z_velx = n.body.velocity.x;
                n.z_vely = n.body.velocity.y;
                n.body.velocity.set(0);
            }//if n.alive
        }, this);
        //총알속도0
        // this.bullets.forEach(function (n) {//총알제거 //총알은 바로 제거
        //     if (n.alive) {
        //         n.z_velx = n.body.velocity.x;
        //         n.z_vely = n.body.velocity.y;
        //         n.body.velocity.set(0);
        //     }
        // }, this);
        // var stgame = uigame.state.states.game;
        // stgame.massiveController.bullets.forEach(function (n) {//총알제거 //총알은 바로 제거
        //     if (n.alive) {
        //         n.kill();// n.body.velocity.set(0);
        //     }
        // }, stgame.massiveController);
        this.bullets.forEach(function (n) {//총알제거 //총알은 바로 제거
            if (n.alive) {
                n.kill();// n.body.velocity.set(0);
            }
        }, this);

        //적곰속도0
        this.redBears.forEach(function (n) {
            if (n.alive) {
                n.z_velx = n.body.velocity.x;
                n.z_vely = n.body.velocity.y;
                n.body.velocity.set(0);
            }
        }, this);
        //녹곰속도0
        this.greenBears.forEach(function (n) {
            if (n.alive) {
                n.z_velx = n.body.velocity.x;
                n.z_vely = n.body.velocity.y;
                n.body.velocity.set(0);
            }
        }, this);
    },
    onPauseLoadVelocity: function(){
        if(dm) console.log("----onPauseLoadVelocity---");
        //공속도0
        this.balls.forEach(function (n) {
            if (n.alive) {
                n.body.velocity.set(n.z_velx, n.z_vely);
            }//if n.alive
        }, this);
        //아이템속도0
        this.items.forEach(function (n) {
            if (n.alive) {
                n.body.velocity.set(n.z_velx, n.z_vely);
            }//if n.alive
        }, this);
        // //총알속도0
        // this.bullets.forEach(function (n) {//총알제거 //총알은 바로 제거
        //     if (n.alive) {
        //         n.body.velocity.set(n.z_velx, n.z_vely);
        //     }
        // }, this);

        //적곰속도0
        this.redBears.forEach(function (n) {
            if (n.alive) {
                n.body.velocity.set(n.z_velx, n.z_vely);
            }
        }, this);
        //녹곰속도0
        this.greenBears.forEach(function (n) {
            if (n.alive) {
                n.body.velocity.set(n.z_velx, n.z_vely);
            }
        }, this);
    },
    onBurstObjAll: function(){
        //공속도0
        var i=0;
        var masscon = uigame.state.states.game.massiveController;
        this.balls.forEach(function (n) {
            if (n.alive) {
                n.kill();
                // i+=35;
                // setTimeout(function () {
                //     n.animations.play('killpoint', 25, false, true);
                //     if(bSoundSE) SE_Brick_Extinction.play();
                //     }, i);
            }//if n.alive
        }, this);
        burstBrickTime=this.tiles.countLiving()*50;
        this.tiles.forEach(function (n) {
            if (n.alive) {
                i+=50;
                setTimeout(function () {
                    n.animations.play('killpoint', 25, false, true);
                    // masscon.runTweenCombo(ScoreGold0, n.x, n.y, 1);           //남은 블록 점수
                    if(kData.bSoundSE) SE_InvincibleBrick_Blow_01.play(); //엔딩 무적블록터지는 연출사운드
                }, i);
            }//if n.alive
        }, this);
        //아이템속도0
        this.items.forEach(function (n) {
            if (n.alive) {
                n.kill();
                // i+=35;
                // setTimeout(function () {
                //     n.animations.play('killpoint', 25, false, true);
                //     if(bSoundSE) SE_Brick_Extinction.play();
                // }, i);

            }//if n.alive
        }, this);
        //총알속도0
        this.bullets.forEach(function (n) {//총알제거
            if (n.alive) {
                n.kill();
                //n.body.velocity.set(0);
            }
        }, this);
        //적곰속도0
        this.redBears.forEach(function (n) {
            if (n.alive) {
                n.kill();
                //n.body.velocity.set(0);
            }
        }, this);
        //녹곰속도0
        this.greenBears.forEach(function (n) {
            if (n.alive) {
                n.kill();
                //n.body.velocity.set(0);
            }
        }, this);
        ending_step = _steps.step1;
        //burstBrickTime=i;
    },
    onGameOverUI: function(){ //게임오버창오픈
        if(game.state.current!=="game") return;
        var stgame = uigame.state.states.game;
        if (stgame.uiController.uiGameOver.visible === false) {
            selectBGM("none", true);
            stgame.uiController.uiGameOver.onActiveGv();
        }
    },

    onReleaseStart: function(){
        if(!uigame.state.states.game.gameBegun) return;
        //if(!this.gameState.gameBegun) return;
        if(this.gameState.gameOver) return;

        var gg = uigame.state.states.game;
        if(intro_fin === false) return;

        if(dm) console.log('--onReleaseStart--');

        if (this.ballOnPaddle) { //패들시작모드일때

            this.initTrails(); //25버전개조-트레일초기화
            this.setTrails(); //25버전개조-트레일

            this.ballOnPaddle = false;
            this.ballOnPaddleTweening=true;

            //공통적용//물리크기설정
            //1://
            this.paddle.body.setSize(this.paddle.width / this.paddle.scale.x, this.paddle.height / this.paddle.scale.y);

            //2://
            // var szx=this.paddle.width / this.paddle.scale.x;
            // var szy=(this.paddle.height / this.paddle.scale.y)*3;
            // var offx=0;
            // var offy=0;
            // this.paddle.body.setSize(szx, szy, offx, offy);
            //2://

            this.boundLeftOffsetByPaddle = 28 + this.paddle.body.halfWidth;
            this.boundRightOffsetByPaddle = 720 - 28 - this.paddle.body.halfWidth;

            BoundLeftOffsetByPaddle=this.boundLeftOffsetByPaddle;
            BoundRightOffsetByPaddle=this.boundRightOffsetByPaddle;

            BoundTopOffsetByPaddle= this.paddlePosY-110;
            BoundBottomOffsetByPaddle=this.paddlePosY+110;

            //공통적용


            if(inputmode===InputMode.keyboard) {
                this.ballOnPaddleTweening=false;
            }else{
                //마우스모드일때만 트윈연출모드
                var pd = this.paddle;
                var ipx = this.game.input.x;
                // TweenMax.to(pd, 0.5, {
                //     x: ipx, ease: Linear.easeNone, onComplete: function () {
                //         gg.massiveController.ballOnPaddleTweening = false;
                //     }
                // });
                TweenMax.to(pd, 0.5, {
                    x: xc, ease: Linear.easeNone, onComplete: function () {
                        gg.massiveController.ballOnPaddleTweening = false;
                    }
                });
            }


            curVelocity = VelocityInit;
            playtime_cur =0; //in massive..OnReleaseStart()//플레이타임
            var ag = uigame.physics.arcade.angleBetween(this.paddle, this.ball);

            //미친다

            if(dm) console.log("this.navi._angle:"+this.navi._angle);

            // html:0-->phaser:360
            // html:90-->phaser:270
            // htm1:180         180
            uigame.physics.arcade.velocityFromAngle( (360-this.navi._angle),  curVelocity, this.ball.body.velocity ); //각도
            // var rad = Phaser.Math.degToRad(this.navi._angle);
            // uigame.physics.arcade.velocityFromRotation(
            //     rad,
            //     curVelocity,
            //     this.ball.body.velocity
            // );//라디언
            //this.introText.visible = false;
            //애니볼이면 //ball.animations.play('spin');
            if(curLives===MaxLife               //첫 시작부터
            //&& curLevel+1>=StartBearLevel       //등장가능레벨
            && isUseBear
            && modeOption[0]!==2                //일반모드
            ) {   //곰시작가능레벨부터 in onReleaseStart
                // BearTimeMax = float2int(40 - ((curLevel + 1) / 10));
                // BearTimeMax = float2int(40 - ((curLevel + 1) / 10));

                this.RedorGreen=0;
                if(0===this.RedorGreen){
                    this.redbeartimer = BearTimeMax; //적곰 타이머 첫시작
                }else{
                    this.greenbeartimer = BearTimeMax; //녹곰 타이머 첫시작
                }

            }
            this.navi.onHideNv();

            //ending_fin=false;
            //ending_fin_begin=false;
            ending_step = _steps.none;

            enablePlayTime=true;
        }else {
            //예외처리: 게임오버상태에서 다시 시작처리
            if (curLives === 0) { //라이프가 없을때 클릭시(볼 릴리즈 타이밍) in onReleaseStart
                if(dm) console.log("-------------- crazy err!!! --------------------");
                uigame.state.states.game.endGame(); //벽돌게임오버 in onReleaseStart
            }else{
                //점착속성처리
                this.onReleaseBalls();
            }
        }
    },

    onReleaseBalls: function() {
        if(dm) console.log('--onReleaseBalls--');
        if(this.padatt === PadAttr.fixed) {
            this._rk = this.fixedballs.length;
            if (this._rk > 0) {
                for (this._ri = 0; this._ri < this._rk; this._ri++) {
                    // if(false) {
                    //     this.fixedballs[this._ri].body.velocity.set(
                    //         curVelocity * (this.fixedballs[this._rk].z_xoff / this.paddle.body.halfWidth), //generateRandomNumber(-75, 75), //-592 417
                    //         -700  //generateRandomNumber(-150, -150) //-350 -310
                    //     );
                    // }
                    if(this.fixedballs[this._ri].alive) {
                        var ag = uigame.physics.arcade.angleBetween(this.paddle, this.fixedballs[this._ri]);
                        uigame.physics.arcade.velocityFromRotation(ag, curVelocity, this.fixedballs[this._ri].body.velocity);

                        if(dm) console.log("-------------- shoot velocity: "+this.fixedballs[this._ri].body.velocity.x+","+this.fixedballs[this._ri].body.velocity.y);
                    }
                }

                this.fixedballs=[];
                //릴리스카운트 감소시키고 0이면 처리
                if(this.releasetimer>0) this.releasetimer-=1;
                if(this.releasetimer===0){                          //부착속성이 소멸햇으면
                    if(PadAttr.normal!==this.padatt) {              //패들이 노말속성이 아니면 노말속성으로
                        this.padatt = PadAttr.normal;
                        this.setPadSizeDirect(this.padsize);
                    }
                }
            }//배열크기 0보다 크면


        }//부착속성이면
    },

    //예전 플로팅스코어를 수정하여 콤보메세지로 사용
    runTweenCombo: function(combos) {
        if(ending_step !== _steps.none) return;
        if(modeOption[0]===2) return;
        //curScore += score;
        //스코어보드 업데이트
        //this.scoreText.text = getMoneyFormatFromNum(curScore)+" "; //in runTweenCombo

        if(false) {
            // //플로팅스코어텍스트 애니메이션
            // if (x1 === undefined || y1 === undefined) return;
            //
            // var sc1 = this.tiles_score.getFirstDead();//부활시킬 한개를 가져온다.
            // if (sc1 !== null && sc1 !== undefined) { //이상없으면
            //     sc1.revive();//"alive"상태로
            //     sc1.text = score;
            //     TweenMax.set(sc1, {alpha: 1, x: x1, y: y1});
            //     TweenMax.to(sc1, 0.5, {
            //         y: "-=100", alpha: 0, ease: Linear.easeNone, onComplete: function () {
            //             sc1.kill();
            //         }
            //     });
            // }
            // //플로팅스코어텍스트 애니메이션
        }
        curComboCount+=combos;
        if(combos!==undefined && combos>0){ //콤보텍스트 애니
            //전 트윈 제거
            if (TweenMax.isTweening(this.uiCombo)) {
                TweenMax.killTweensOf(this.uiCombo);
            }
            //콤보 숫자 적용
            this.uiCombo.onSetNumber(curComboCount);
            //위치고정도 필요없어서 주석
            //this.uiCombo.position.setTo(this.uiCombo.z_xinit, this.uiCombo.y_xinit);
            //보이기
            this.uiCombo.onShow();

            //트윈적용
            //var combo = this.uiCombo;
            //로컬이동트윈
            // TweenMax.set(combo, {alpha: 1});
            // TweenMax.to(combo, 0.5, {
            //     //y: "-=100",
            //     alpha: 0,
            //     ease: Linear.easeNone,
            //     onComplete: function () { combo.onHide(); },
            //     //onUpdate: function () { console.log(combo.y); }
            //     dealy:0
            // });
            TweenMax.set(uiComboGlobal.scale, {x: 0.8, y:0.8});
            TweenMax.to(uiComboGlobal.scale, 0.5, {
                //y: "-=100",
                x: 1.0,
                y: 1.0,
                ease: Elastic.easeOut,//ease: Linear.easeNone,
                onComplete: function () { uiComboGlobal.onHide(); },
                //onUpdate: function () { console.log(combo.y); }
                dealy:0
            });

            // playtime_clock+=curComboCount;
            // if(playtime_clock>=playtime_clock_max+1) {
            //     //맥스타임이면
            //     playtime_clock=playtime_clock_max+1;
            // }else {
            //     //맥스타임이 아니면
            //     uiProgGlobal.onTweenSec(curComboCount);
            // }
        }
        //플로팅스코어텍스트 애니메이션
    },
    onCopyBalls: function() {
        //this.helpers.releaseAll();
        if(dm) console.log('--onCopyBalls--');
        this.copyBalls(); //in onCopyballs
    },
    onReleaseRedBear: function(){ //적곰풀기
        this.releaseBear("red");
    },
    onReleaseGreenBear: function(){ //적곰풀기
        this.releaseBear("green");
    },
    releaseBear: function (bearcolor) {
        if(kData.bSoundSE) SE_BearJelly_Produce.play();

        var bear1;
        if(bearcolor==="red") bear1 = this.redBears.getFirstDead();
        else bear1 = this.greenBears.getFirstDead();//bearcolor==="green"

        bear1.body.enable=true; //죽을때 false이므로, 살아날때 true
        bear1.alpha=1;

        var xp = uigame.rnd.integerInRange(xc-100, xc+100);
        var yp = uigame.rnd.integerInRange(yc, yc-200);
        bear1.reset(xp,yp);
        bear1.z_hitcount=0;

        var ag = uigame.physics.arcade.angleToXY(bear1, xc, yc-100);

        //애니메이션 실행
        if(bearcolor==="red") {
            uigame.physics.arcade.velocityFromRotation( ag, this.redBearVel, bear1.body.velocity);
            bear1.animations.play('redbearshow', 35, false, undefined); //1time
        }
        else{
            uigame.physics.arcade.velocityFromRotation( ag, this.greenBearVel, bear1.body.velocity);
            bear1.animations.play('greenbearshow', 35, false, undefined); //1time
        }
        //물리크기
        bear1.body.setSize(bear1.width - 40, bear1.height - 40, 20, 20);

        TweenMax.killTweensOf(bear1);
        TweenMax.fromTo( bear1, 10, { rotation: 0 }, { rotation: 6.28, ease:Linear.easeNone, repeat: -1 } );//곰트윈 //적곰,녹곰
        bear1.body.enable=true;
        bear1.alpha=1;
    },

    randloop: function () { //부스터 쿨타임 랜덤 루프 //아직 안사용
        this.rndidx += 1;
        if (this.rndidx > 9) this.rndidx = 0;
        return this.rndarr[this.rndidx];
    },

    //구조: 캐쉬배열에 같은이름으로 갯수만큼저장
    //cachedVehicles = {
    //    key1:[sprA1, sprA2, sprA3,...], <--loopcount
    //    key2:[sprB1, sprB2, sprB3,...],
    //    key3:...
    //}
    //'game_a'
    cacheVehicle: function (atlas, key, loopcount) {
        if (dm) console.log("- MassiveController.cacheVehicle(" + key + ")");
        this.cachedVehicles[key] = [];
        this.vehicleSpawnList.push(key);
        // cache a vehicle of each type per lane - this is enough since there can't be more than one vehicle per lane
        for (this._i2 = 0; this._i2 < loopcount; ++this._i2) {
            this.tmpVehicle = this.vehicles.create(0, 0, atlas, key);
            //var anim = this.tmpVehicle.animations.add(key, [key + '.png']);

            //rb
            this.game.physics.enable(this.tmpVehicle, Phaser.Physics.ARCADE);
            //this.tmpVehicle.body.collideWorldBounds = true;
            //this.tmpVehicle.body.checkWorldBounds = true;
            this.tmpVehicle.body.bounce.set(1);//(1);
            //this.paddle.body.immovable = true;
            //rb

            //this.tmpVehicle.body.setSize(anim.currentFrame.sourceSizeW, anim.currentFrame.sourceSizeH);
            this.tmpVehicle.body.setSize(this.tmpVehicle.body.width - 20, this.tmpVehicle.body.height - 20, 10, 10);

            this.tmpVehicle.anchor.setTo(0.5, 0.5);
            this.tmpVehicle.lane = -1;
            this.tmpVehicle.name = key;
            this.tmpVehicle.angle = 0;
            this.tmpVehicle.inWorld = false;
            this.tmpVehicle.isPlayerVehicle = false;
            this.tmpVehicle.initialDifficulty = 0; // necessary to slow down vehicle when 'powerup_slow' powerup is collected
            this.tmpVehicle.checkWorldBounds = true;

            this.tmpVehicle.frm = 0;
            this.tmpVehicle.frmmax = 2;

            //작동안되서 주석처리
            // this.tmpVehicle.events.onEnterBounds.add(function () { if (dm) console.log("----onEnterBounds----" + this.tmpVehicle.name); }, this);
            // this.tmpVehicle.events.onKilled.add(function () { if (dm) console.log("----onKilled----" + this.tmpVehicle.name); }, this);
            // this.tmpVehicle.events.onRevived.add(function () { if (dm) console.log("----onRevived----" + this.tmpVehicle.name); }, this);
            // this.tmpVehicle.events.onAddedToGroup.add(function () { if (dm) console.log("----onAddedToGroup: ----" + this.tmpVehicle.name); }, this);
            //작동안되서 주석처리

            this.tmpVehicle.kill();

            if (true) { //리스토어 이벤트
                this.tmpVehicle.events.onOutOfBounds.add(this.restoreVehicleToCache, this);
            }
            if (false) { //리스토어 콜솔로그
                this.tmpVehicle.events.onOutOfBounds.add(function () {
                    if (dm) console.log("----onOutOfBounds----" + this.tmpVehicle.name);
                }, this);
            }
            this.cachedVehicles[key].push(this.tmpVehicle);
        }
    },
    //sprite 1개를 캐쉬배열에 저장한다. key1:[spr1],
    cachePlayerVehicle: function (key) {
        if (dm) console.log("- MassiveController.cachePlayerVehicle(" + key + ")");

        this.tmpVehicle = this.vehicles.create(0, 0, 'game_a', key);
        //var anim = this.tmpVehicle.animations.add(key, [key + '.png']);
        //rb
        this.game.physics.enable(this.tmpVehicle, Phaser.Physics.ARCADE);
        this.tmpVehicle.body.collideWorldBounds = true;
        this.tmpVehicle.body.bounce.set(1);//(1);

        //this.paddle.body.immovable = true;
        //rb

        //this.tmpVehicle.body.setSize(anim.currentFrame.sourceSizeW, anim.currentFrame.sourceSizeH);
        this.tmpVehicle.body.setSize(this.tmpVehicle.body.width - 20, this.tmpVehicle.body.height - 20, 10, 10);
        //this.tmpVehicle.body.setSize(100, 50, 50, 25);

        this.tmpVehicle.anchor.setTo(0.5, 0.5);
        this.tmpVehicle.lane = -1;
        this.tmpVehicle.name = key;
        this.tmpVehicle.inWorld = false;
        this.tmpVehicle.isPlayerVehicle = true;
        this.tmpVehicle.kill();
        this.cachedVehicles[key] = this.tmpVehicle;
    },
    //sprite 1개를 캐쉬배열에 저장한다. key1:[spr1],
    cacheBooster: function (key)//<--cachePlayerVehicle복제품 //캐쉬부스터
    {
        this.tmpBooster = this.boosters.create(0, 0, 'game_a', key);
        //var anim = this.tmpVehicle.animations.add(key, [key + '.png']);
        //rb
        this.game.physics.enable(this.tmpBooster, Phaser.Physics.ARCADE);
        this.tmpBooster.body.collideWorldBounds = true;
        this.tmpBooster.body.bounce.set(1);//(1);

        //this.paddle.body.immovable = true;
        //rb

        //this.tmpVehicle.body.setSize(anim.currentFrame.sourceSizeW, anim.currentFrame.sourceSizeH);
        this.tmpBooster.body.setSize(this.tmpBooster.body.width - 20, this.tmpBooster.body.height - 20, 10, 10);
        //this.tmpVehicle.body.setSize(100, 50, 50, 25);

        this.tmpBooster.anchor.setTo(0.5, 0.5);
        this.tmpBooster.lane = -1;
        this.tmpBooster.name = key;
        this.tmpBooster.inWorld = false;
        this.tmpBooster.isPlayerVehicle = true;
        this.tmpBooster.kill();
        this.cachedBoosters[key] = this.tmpBooster;
        // //--
        // var pic = uigame.add.sprite(0, 0, 'game_a', 'gauge_1.png');
        // pic.anchor.setTo(0.5, 0.5);
        // this.tmpVehicle.addChild(pic);
        // //--
        if (true) { //리스토어 이벤트 //부스터는 트리거박스(오버랩)이다보니 작동 안됨
            this.tmpBooster.events.onOutOfBounds.add(this.restoreBoosterToCache, this);
        }
    },

    canSpawnVehicle: function () //라인이 꽉차면 스폰을 안한다.
    {
        return this.numAvailableLanes > 0;//---------------------------------------------------
    },

    spawnVehicle: function (key, occupiesLane, isPlayerVehicle, lane, aistyle, aidir)//스폰비클
    {
        this.spawncnt += 1;
        if (dm) console.log("- MassiveController.spawnVehicle(" + key + ", " + occupiesLane + ", " + isPlayerVehicle + "), spawncnt:" + this.spawncnt);

        //안사용
        if (isPlayerVehicle) this.tmpVehicle = this.cachedVehicles[key];
        else this.tmpVehicle = this.cachedVehicles[key].pop();
        //안사용

        this.tmpVehicle.lane = lane; //this.tmpVehicle.lane = this.availableLanes[this._lane];

        this.tmpVehicle.reset(this.xLanePositions[this.tmpVehicle.lane], this.yPositionSpawnOffset);


        cars_baisVelocity = 100.0 / cars_velocity; //리스폰용
        this.tmpVehicle.body.velocity.y = cars_velocity;

        if (occupiesLane) {
            this.lanesInUse[this.tmpVehicle.lane] = true;
            this.gameState.onVehicleSpawned.dispatch(this.tmpVehicle);
        }
    },

    restoreVehicleToCache: function (vehicle)//리스토어 함수 //해당차량을 제거한다.
    {
        if (dm) console.log("- MassiveController.restoreVehicleToCache(" + vehicle.name + ", xy:" + vehicle.x + "," + vehicle.y + ")");
        if (0 > vehicle.y) return; //화면상단 위에 있으면 리턴
        TweenMax.killTweensOf(vehicle);
        vehicle.kill();
        vehicle.inWorld = false;

        if (this.cachedVehicles && !vehicle.isPlayerVehicle) //적 차량이면
            this.cachedVehicles[vehicle.name].push(vehicle); //전체차량캐쉬에 저장

        // don't affect lanes in use for intro truck, prevents double spawn on middle lane
        if (vehicle !== this.introTruck)                     //모든차량(인트로트럭만 빼고)
        {
            if (this.lanesInUse && !vehicle.isPlayerVehicle) //적차량이면
                this.lanesInUse[vehicle.lane] = false;       //사용 차선을 꺼준다
        }
        else
            this.introTruck = null;                         //인트로트럭이면 인트로트럭 차량을 없애준다

        if (dm) console.log("restored " + vehicle.name + " to cache");
    },

    //부스터는 트리거박스(오버랩)이다보니 작동 안됨
    restoreBoosterToCache: function (booster)//리스토어 함수 //부스터 제거한다.
    {

    },
    //헷갈리게 해서 안사용
    // onPauseModeBegin: function () {
    //     ispausemode=true;
    //     this.onPauseSaveVelocity();
    // },
    // onPauseModeEnd: function () {
    //     ispausemode=false;
    //     this.onPauseLoadVelocity();
    // },

    onGameOver: function () { //모든차량속도0
        //여기서 에러 발생
        //if (dm) console.log("- MassiveController.onGameOver(vehicles.length:" + this.vehicles.length + ")");

        // when game is over stop all vehicles
        //this.vehicles.forEachAlive(this.utilities.zeroVelocity, null); //onGameOver
    },
    // onMistake: function () {
    //     if (dm) console.log("- MassiveController.onMistake(vehicles.length:" + this.vehicles.length + ")");
    //
    //     this.vehicles.forEachAlive(this.utilities.reverseVelocity, null); //onMistake
    //
    //
    // },
    // onMistakeRecover: function () {
    //     if (dm) console.log("----MassiveController.onMistake(vehicles.length:" + this.vehicles.length + ")");
    //
    //     this.vehicles.forEachAlive(this.utilities.reverseVelocity, null); //onMistakeRecover
    // },

    followPaddle: function(){
        this.ball.body.velocity.set(0);
        this.ball.x = this.paddle.x;//-this.ball.body.halfWidth;
        //패들노말 이동시 공배치
        this.ball.y = this.paddle.y - this.paddle.body.halfHeight - this.ball.body.halfHeight;
        //패들2배높이 이동시 공배치
        //this.ball.y = this.paddle.y - (this.paddle.body.halfHeight/2) - this.ball.body.halfHeight;
    },

    update: function () { //메인업데이트//매시브업데이트//메시브업데이트//massupdate //람보에러
        //true;

        // if(this.updatecnt<10) {
        //     console.log("- MassiveController.update "+this.updatecnt);
        //     this.updatecnt+=1;
        // }
        //return;

        if (ispausemode) return;

        // var s="";
        // this.balls.forEach(function (n) {
        //     if (n.alive) {
        //         s+= ("a -- "+n.name+"(xy:"+n.x+","+n.y+", vel:"+n.body.velocity+")" + ", pd:"+this.paddle.x+","+this.paddle.y);
        //     }
        // }, this);
        // console.log(s);


        if (this.gameState.gameBegun
            && !this.gameState.gameOver) {

            this.DtSec = this.game.time.elapsed * 0.001;

            //console.log("playtime_clock:"+playtime_clock+", playtime_cur:"+playtime_cur);
            if(playtime_clock<0){
                uigame.state.states.game.endGame();
            }
            if(playtime_clock<warning_min_time){
                if(modeOption[0]!==2 && uiWarningGlobal.visible===false) uiWarningGlobal.onShow();
            }

            //초당속도증가
            // curVelocity+=(this.DtSec*10);
            // console.log("curVelocity:"+curVelocity);
            // if(curVelocity>VelocityMax) curVelocity = VelocityMax;

            //적곰과 테두리
            this.game.physics.arcade.collide(
                this.redBears,
                this.bounds4,
                this.helpers.bearsCollideWithBounds4, //적곰 테두리충돌
                null,
                this
            );
            //녹곰과 테두리
            this.game.physics.arcade.collide(
                this.greenBears,
                this.bounds4,
                this.helpers.bearsCollideWithBounds4, //녹곰 테두리충돌
                null,
                this
            );

            if (!this.ballOnPaddle) {

                if(enablePlayTime) {
                    playtime_cur += this.DtSec;
                    playtime_clock-=this.DtSec;//게임에서 사용중인 감소하는 타이머
                    bonusmovetimer -= this.DtSec;
                    if(modeOption[0]===2) {//0:노말 1:하강모드 2:보너스
                        //-------------보너스 스테이지 수직 이동-------------
                        // if (this.ballOnPaddle                  //공쏘기전
                        //     || this.gameState.gameOver             //게임오버상태
                        //     || ispausemode                         //메뉴정지상태
                        //     || !uigame.state.states.game.gameBegun //게임시작안된상태
                        // ) return;
                        if(bonusmovetimer<=0) {
                            this.moveVerticalTime();
                            bonusmovetimer=bonusmovetimermax;
                        }
                        //-------------보너스 스테이지 수직 이동-------------
                    }else{
                        //프로그래스업데이트
                        if(ending_step === _steps.none){
                            uiProgGlobal.onUpdateProg(playtime_clock / playtime_clock_max);//in update
                            uiProgGlobal.onUpdateTime(
                                convertTimeFormatFromSec(
                                    float2int(playtime_clock)
                                )
                            );
                        }
                    }

                }//플레이타임

                this.onsavePosTrails(); //25버전개조--- 업데이트에서 저장
                this.onupdateSetPosTrail(); //25버전개조--- 업데이트에서 배치

                // Check collisions
                //볼과패들 충돌
                this.game.physics.arcade.collide(this.balls,
                    //this.game.physics.arcade.collide(   this.ball,
                    this.paddle,
                    this.helpers.ballCollideWithPaddle, //==paddleHitBallHandler
                    function(p,b){
                        //if(20<Math.abs(p.x-p.oldx){
                        //console.log("ball.vel_prev:"+b.body.velocity+", pos:"+b.position+", isb:"+b.body.enable+", isp:"+p.body.enable);
                        //console.log("ball.vel_prev: abs:"+Math.abs(p.x-p.oldx)+", "+Math.abs(p.y-p.oldy));
                        //console.log("padatt:"+( this.padatt===PadAttr.fixed? "fixed":"not fixed"));

                        if (this.padatt !== PadAttr.fixed) {//접착이 아니면
                            if (1 < Math.abs(p.x - p.oldx) || 1 < Math.abs(p.y - p.oldy)) {
                                //console.log(p.name+",old:"+p.body.prev.x+",cur:"+p.body.position.x+", "+b.name);
                                var s = b.body.velocity.x + "," + b.body.velocity.y;
                                b.y = p.y - p.body.halfHeight - b.body.halfHeight;
                                if (b.body.velocity.y > 0) {
                                    b.body.velocity.y = (-1 * b.body.velocity.y);
                                }
                                //console.log("_prev b.vel: old:" + s + ", new:" + b.body.velocity.x + "," + b.body.velocity.y);
                            }
                        }

                        //console.log("ball.vel_prev: end");
                    },
                    this
                );


                if (this.ballstate === BallType.through_n
                    || this.ballstate === BallType.through_s
                    || this.ballstate === BallType.through_b) {
                    this.game.physics.arcade.overlap(this.balls,
                        this.tiles,
                        this.helpers.overlapHandler,
                        null,
                        this
                    );
                } else if (this.ballstate === BallType.throughbomb_n
                    || this.ballstate === BallType.throughbomb_s
                    || this.ballstate === BallType.throughbomb_b) {
                    this.game.physics.arcade.overlap(this.balls,
                        this.tiles,
                        this.helpers.overlapHandler_through,
                        null,
                        this
                    );
                } else {
                    //볼과블럭 충돌
                    this.game.physics.arcade.collide(this.balls,
                        //this.game.physics.arcade.collide(   this.ball,
                        this.tiles,
                        this.helpers.ballCollideWithTile, //==ballHitBrickHandler
                        null,
                        this
                    );
                }

                //아이템과 패들 충돌
                this.game.physics.arcade.collide(this.items,
                    this.paddle,
                    this.helpers.itemCollideWithPaddle, //==ballHitBrickHandler
                    null,
                    this
                );
                //총알과 타일 충돌
                this.game.physics.arcade.collide(
                    this.bullets,
                    this.tiles,
                    this.helpers.bulletCollideWithTile,
                    null,
                    this
                );
                //볼과 테투리
                this.game.physics.arcade.collide(
                    this.balls,
                    this.bounds3,
                    this.helpers.ballCollideWithBounds3,
                    null,
                    this
                );
                //총알과 테두리
                this.game.physics.arcade.collide(
                    this.bullets,
                    this.bounds3,
                    this.helpers.bulletCollideWithBounds3,
                    null,
                    this
                );
                //총알과 적곰
                this.game.physics.arcade.collide(
                    this.redBears,
                    this.bullets,
                    this.helpers.bearsCollideWithBalls,
                    null,
                    this
                );
                //총알과 녹곰
                this.game.physics.arcade.collide(
                    this.greenBears,
                    this.bullets,
                    this.helpers.bearsCollideWithBalls,
                    null,
                    this
                );

                //공과 적곰
                this.game.physics.arcade.overlap(
                    this.redBears,
                    this.balls,
                    this.helpers.bearsCollideWithBalls, //적곰 공충돌
                    null,
                    this
                );

                //공과 녹곰
                this.game.physics.arcade.overlap(
                    this.greenBears,
                    this.balls,
                    this.helpers.bearsCollideWithBalls, //녹곰 공충돌
                    null,
                    this
                );
                if (gunstate === ThreeState.run) {

                    if (guntimer === 0 //백업시간과 현재시간의 차 == 시간이다.
                    ) { //게임오버시
                        //if (this.game.time.now - this.guntimeroldbak > this.guntimemax) {
                        gunstate = ThreeState.end;
                        PadAttr_bullet = false; //시간초과
                        //총구끄기
                        this.paddle.z_left.visible = false;
                        this.paddle.z_right.visible = false;
                        //총구끄기
                    } else {
                        this.shootBullet();
                    }
                } //this.gunstate == ThreeState.run

            }//온패들모드이 아니면 //충돌이벤트 함수들
            //bb---------------------------------------------------------------->>
            // var s="";
            // this.balls.forEach(function (n) {
            //     if (n.alive) {
            //         s+= ("c -- "+n.name+"(xy:"+n.x+","+n.y+", vel:"+n.body.velocity+")" + ", pd:"+this.paddle.x+","+this.paddle.y);
            //     }
            // }, this);
            // console.log(s);
            
            if (game.input.activePointer.isDown || game.input.pointer1.isDown) {
                //마우스클릭
                inputmode = InputMode.mouse;
            }else if(this.leftKey.isDown || this.rightKey.isDown || this.upKey.isDown || this.downKey.isDown || this.spaceKey.isDown) {
                //키보드클릭
                inputmode = InputMode.keyboard;
            }
            if (this.ballOnPaddle) { //패들시작모드일때
                //공쏘기전 게임상황
                this.followPaddle(); //온패들모드시 이동시 //t2
                if(this.navi.visible) {
                    this.navi.onUpdateAngle();
                    this.paddle.x = xc;
                    this.paddle.y = this.paddlePosY;
                    //이스다운이벤트,이즈다운이벤트
                    if(inputmode===InputMode.mouse) {
                        //터치입력
                        if (game.input.activePointer.isDown
                            || (game.input.pointer1.isUp && touched === true)) {
                            if (kData.bSoundSE) SE_Fire.play(); //공 발사시
                            //모바일에서만 터치 카운드
                            touchfirst=true; //in update ballonpaddle
                            this.onReleaseStart(); //처음쏘기
                        }
                    }else if(inputmode===InputMode.keyboard){
                        //키보드 입력
                        if(this.spaceKey.isDown){
                             if (kData.bSoundSE) SE_Fire.play();
                             this.onReleaseStart(); //처음쏘기
                        }
                    }
                }//네비 보일때

                // hsDebug.onSet("touchfirst", touchfirst);//
                // hsDebug.onSet("point1isup", game.input.pointer1.isUp);//
                // hsDebug.onSet("point1isdown", game.input.pointer1.isDown);//
                // hsDebug.onSet("activeisup", game.input.activePointer.isUp);//
                // hsDebug.onSet("activeisdown", game.input.activePointer.isDown);//
                // hsDebug.onUpdateHash();

                //
            }else {
                //온패들모드가 아닐때 //공쏜 후의 게임상황 //게임중, 접착속성이면 따라 이동
                this.paddle.oldx=this.paddle.x;
                this.paddle.oldy=this.paddle.y;//상하추가
                if(this.padatt === PadAttr.fixed) {
                    this._j = this.fixedballs.length;
                    if (this._j > 0) {
                        for (this._i = 0; this._i < this._j; this._i++) {
                            this.fixedballs[this._i].x = this.paddle.x+this.fixedballs[this._i].z_xoff;
                            this.fixedballs[this._i].y = this.paddle.y+this.fixedballs[this._i].z_yoff+5;//상하추가
                        }
                    }
                }

                //온패들모드이면 작동안돼어야하므로 여기로 이동 ////잇풋에 따른 패들이동
                if(inputmode===InputMode.mouse) {
                    //일반 마우스 이동시
                    if (!this.ballOnPaddleTweening){ //발사시 트윈으로 패들이 움직일때는 제외

                         if(touchscreen){
                             //터치스크린모드
                             if(touchfirst===true){
                                 //첫터치상태면 스킵처리 //모바일에서만 예외처리
                                 if(game.input.pointer1.isUp) touchfirst=false;
                             }else {
                                 //일반 터치 이동 모드
                                 if(game.input.pointer1.isDown)
                                    this.paddle.x = this.game.input.x;
                                    //this.paddle.y = this.game.input.y-88;//상하추가
                                    //console.log("paddle.xy:"+this.paddle.x+","+this.paddle.y);
                             }

                         }else{
                             //일반 마우스 이동 모드
                             this.paddle.x = this.game.input.x;
                             //this.paddle.y = this.game.input.y-88;//상하추가
                            // console.log("paddle.xy:"+this.paddle.x+","+this.paddle.y);
                         }


                    }


                    if(this.paddle.x < this.boundLeftOffsetByPaddle) {
                        this.paddle.x = this.boundLeftOffsetByPaddle;
                    }else if(this.paddle.x > this.boundRightOffsetByPaddle) {
                        this.paddle.x = this.boundRightOffsetByPaddle;
                    }

                    if(this.paddle.y > BoundBottomOffsetByPaddle) {
                        this.paddle.y = BoundBottomOffsetByPaddle;
                    }else if(this.paddle.y < BoundTopOffsetByPaddle) {
                        this.paddle.y = BoundTopOffsetByPaddle;
                    }

                    //이스다운이벤트,이즈다운이벤트
                    if ((game.input.activePointer.isDown && released === true) //순간 마우스 다운 이벤트//이함수 끝에서 업데이트
                        || (game.input.pointer1.isUp && touched === true)) { //순간 터치 업 이벤트////이함수 끝에서 업데이트
                        //접착패들과 접착공 갯수가 있을때
                        if (this.padatt === PadAttr.fixed && this.fixedballs.length > 0) {
                            if (kData.bSoundSE) SE_Fire.play();
                            this.onReleaseBalls(); //접착모드에서 쏘기
                        } //공 발사시

                    }
                    //일반 마우스 이동시

                    // hsDebug.onSet("touchfirst", touchfirst);
                    // hsDebug.onSet("point1isup", game.input.pointer1.isUp);
                    // hsDebug.onSet("point1isdown", game.input.pointer1.isDown);
                    // hsDebug.onSet("activeisup", game.input.activePointer.isUp);
                    // hsDebug.onSet("activeisdown", game.input.activePointer.isDown);
                    // hsDebug.onUpdateHash();

                }else if(inputmode===InputMode.keyboard) {
                    //일반 키보드 이동시
                    if(this.leftKey.isDown) {
                        if( Paddle.x>BoundLeftOffsetByPaddle) {
                            Paddle.body.velocity.x = -moveSpeed;
                        }
                        else {
                            Paddle.x = BoundLeftOffsetByPaddle;
                            Paddle.body.velocity.x = 0;
                        }

                    }else if(this.rightKey.isDown){
                        if( Paddle.x<BoundRightOffsetByPaddle) {
                            Paddle.body.velocity.x = moveSpeed;
                        }
                        else {
                            Paddle.x = BoundRightOffsetByPaddle;
                            Paddle.body.velocity.x = 0;
                        }
                    }else if(this.spaceKey.isDown){
                        //접착패들과 접착공 갯수가 있을때
                        if (this.padatt === PadAttr.fixed && this.fixedballs.length > 0) {
                            if (kData.bSoundSE) SE_Fire.play();
                            this.onReleaseBalls(); //접착모드에서 쏘기
                        } //공 발사시
                    }else if(this.upKey.isDown){
                        // if(Paddle.y>BoundTopOffsetByPaddle) {//상단범위(값보다 크면)
                        //     Paddle.body.velocity.y = -moveSpeed*moveSpeedupdown;
                        // } else {
                        //     Paddle.y = BoundTopOffsetByPaddle;
                        //     Paddle.body.velocity.y = 0;
                        // }
                    }else if(this.downKey.isDown){
                        // if(Paddle.y<BoundBottomOffsetByPaddle) {//하단단범위(값보다 작으면)
                        //     Paddle.body.velocity.y = moveSpeed*moveSpeedupdown
                        // } else {
                        //     Paddle.y = BoundBottomOffsetByPaddle;
                        //     Paddle.body.velocity.y = 0;
                        // }
                    }else{
                        //if( Paddle.x>BoundRightOffsetByPaddle) BoundRightOffsetByPaddle
                        if(Paddle.body.velocity.x!==0)
                            Paddle.body.velocity.x = 0;
                        if(Paddle.body.velocity.x!==0)
                            Paddle.body.velocity.y = 0;
                    }

                }
              }//온패들모드가 아닐때


        }//gamebegun

        if(game.input.pointer1.isDown) {
            touched = true;
            if(touchscreen===false) touchscreen = true; //1번만 체크한다
        }
        else touched = false;
        if(game.input.activePointer.isDown) {
            released = false;
        }
        else released = true;
    },

    render: function () { //물리디버깅, 충돌박스디버그, 물리디버그
        //return;
        if(dmCollision) {
            uigame.debug.bodyInfo(this.paddle, 32, 32);
            uigame.debug.body(this.paddle);
            this.tiles.forEachAlive(this.game.debug.body, this.game.debug);
            this.redBears.forEachAlive(this.game.debug.body, this.game.debug);
            this.greenBears.forEachAlive(this.game.debug.body, this.game.debug);
            this.balls.forEachAlive(this.game.debug.body, this.game.debug);
            this.bounds4.forEachAlive(this.game.debug.body, this.game.debug);
            this.bullets.forEachAlive(this.game.debug.body, this.game.debug);

            uigame.debug.geom( this.circle, 'rgba(0,255,0,0.5)' ) ;
            this.circle.x = this.paddle.worldPosition.x;
            this.circle.y = this.paddle.worldPosition.y;

        }
    },//render


    //bb-----------------------------------------------------------<< method
    initGameVars: function () {
        curLives = MaxLife; //initGameVars()
        //if(this.livesUI!==null) this.livesUI.onSetLife(curLives); //널에러
        this.score = 0;
        this.initLevelVars();
    },
    initLevelVars: function () {
        this.countDownTime = 3;
        this.countDownTimeElapsed = 0;
        this.countDownsecondTick = 1;
        this.isCountDownOff = false;

        this.padsize = PadSize.normal;//this.isPaddleNerfed = false;

        this.paddleNerfTime = 6000;
    },

    //패들이 +1,-1로 상태를 변화시킨다
    setPadSizeLocal: function (sizedt) {
        //패들상태
        this.padsizeold = this.padsize;
        switch (this.padsize) {
            case PadSize.nerf:
                if (sizedt > 0) this.setPadSizeDirect(PadSize.normal);
                break;
            case PadSize.normal:
                if (sizedt < 0) this.setPadSizeDirect(PadSize.nerf);
                else if(sizedt > 0) this.setPadSizeDirect(PadSize.long);
                break;
            case PadSize.long:
                if (sizedt < 0) this.setPadSizeDirect(PadSize.normal);
                else if(sizedt > 0) this.setPadSizeDirect(PadSize.longa);
                break;
            case PadSize.longa:
                if (sizedt < 0) this.setPadSizeDirect(PadSize.long);
                else if(sizedt > 0) this.setPadSizeDirect(PadSize.longaa);
                break;
            case PadSize.longaa:
                if (sizedt < 0) this.setPadSizeDirect(PadSize.longa);
                break;
            default:
                this.setPadSizeDirect(PadSize.normal);
                break;
        }
    },
    setPadSizeDirect: function (sz) {
        //패들상태
        this.padsizeold = this.padsize;
        this.padsize = sz;

        if(kData.bSoundSE) SE_Transform.play();

        switch (sz) {
            case PadSize.nerf:
                if(PadAttr.fixed === this.padatt) {
                    this.paddle.animations.play('paddle_80j', 35, false, undefined); //1time
                    pad_tw=this.paddle.scale;
                    TweenMax.fromTo(pad_tw, 0.35, {x:1.2}, {x:1, ease:Elastic.easeOut});
                }else{
                    this.paddle.animations.play('paddle_80n', 35, false, undefined); //1time
                    pad_tw=this.paddle.scale;
                    TweenMax.fromTo(pad_tw, 0.35, {x:1.2}, {x:1, ease:Elastic.easeOut});
                }

                    //총구켜기
                    this.setBulletOffset();
                if(PadAttr_bullet) {
                    this.paddle.z_left.reset( -this.bulletx, -5);
                    this.paddle.z_right.reset( this.bulletx, -5);
                    //총구켜기
                }
                break;
            case PadSize.normal:
                if(PadAttr.fixed === this.padatt){
                    this.paddle.animations.play('paddle_160j', 35, false, undefined); //1time
                    pad_tw=this.paddle.scale;
                    TweenMax.fromTo(pad_tw, 0.35, {x:1.2}, {x:1, ease:Elastic.easeOut});
                }else{
                    this.paddle.animations.play('paddle_160n', 35, false, undefined); //1time
                    pad_tw=this.paddle.scale;
                    TweenMax.fromTo(pad_tw, 0.35, {x:1.2}, {x:1, ease:Elastic.easeOut});
                }

                    //총구켜기
                    this.setBulletOffset();
                if(PadAttr_bullet) {
                    this.paddle.z_left.reset( -this.bulletx, -5);
                    this.paddle.z_right.reset( this.bulletx, -5);
                    //총구켜기
                }
                break;
            case PadSize.long:
                if(PadAttr.fixed === this.padatt){
                    this.paddle.animations.play('paddle_240j', 35, false, undefined); //1time
                    pad_tw=this.paddle.scale;
                    TweenMax.fromTo(pad_tw, 0.35, {x:1.2}, {x:1, ease:Elastic.easeOut});
                }else{
                    this.paddle.animations.play('paddle_240n', 35, false, undefined); //1time
                    pad_tw=this.paddle.scale;
                    TweenMax.fromTo(pad_tw, 0.35, {x:1.2}, {x:1, ease:Elastic.easeOut});
                }

                    //총구켜기
                    this.setBulletOffset();
                if(PadAttr_bullet) {
                    this.paddle.z_left.reset( -this.bulletx, -5);
                    this.paddle.z_right.reset( this.bulletx, -5);
                    //총구켜기
                }
                break;
            case PadSize.longa:
                if(PadAttr.fixed === this.padatt){
                    this.paddle.animations.play('paddle_320j', 35, false, undefined); //1time
                    pad_tw=this.paddle.scale;
                    TweenMax.fromTo(pad_tw, 0.35, {x:1.2}, {x:1, ease:Elastic.easeOut});
                }else{
                    this.paddle.animations.play('paddle_320n', 35, false, undefined); //1time
                    pad_tw=this.paddle.scale;
                    TweenMax.fromTo(pad_tw, 0.35, {x:1.2}, {x:1, ease:Elastic.easeOut});
                }

                    //총구켜기
                    this.setBulletOffset();
                if(PadAttr_bullet) {
                    this.paddle.z_left.reset( -this.bulletx, -5);
                    this.paddle.z_right.reset( this.bulletx, -5);
                    //총구켜기
                }
                break;
            case PadSize.longaa:
                if(PadAttr.fixed === this.padatt){
                    this.paddle.animations.play('paddle_400j', 35, false, undefined); //1time
                    pad_tw=this.paddle.scale;
                    TweenMax.fromTo(pad_tw, 0.35, {x:1.2}, {x:1, ease:Elastic.easeOut});
                }else{
                    this.paddle.animations.play('paddle_400n', 35, false, undefined); //1time
                    pad_tw=this.paddle.scale;
                    TweenMax.fromTo(pad_tw, 0.35, {x:1.2}, {x:1, ease:Elastic.easeOut});
                }

                    //총구켜기
                    this.setBulletOffset();
                if(PadAttr_bullet) {
                    this.paddle.z_left.reset( -this.bulletx, -5);
                    this.paddle.z_right.reset( this.bulletx, -5);
                    //총구켜기
                }
                  break;
            default:
                this.paddle.loadTexture('atlas_bb-0', 'paddle_160.png'); //longaaa

                    //총구켜기
                    this.setBulletOffset();
                if(PadAttr_bullet) {
                    this.paddle.z_left.reset( -this.bulletx, -5);
                    this.paddle.z_right.reset( this.bulletx, -5);
                    //총구켜기
                }
                break;
        }

        //공통적용
        this.paddle.body.enable = true;
        //this.paddle.body.setSize(this.paddle.width / this.paddle.scale.x, this.paddle.height / this.paddle.scale.y);
        //1://
        this.paddle.body.setSize(this.paddle.width / this.paddle.scale.x, this.paddle.height / this.paddle.scale.y);

        //2://
        // var szx=this.paddle.width / this.paddle.scale.x;
        // var szy=(this.paddle.height / this.paddle.scale.y)*3;
        // var offx=0;
        // var offy=0;
        // this.paddle.body.setSize(szx, szy, offx, offy);

        this.boundLeftOffsetByPaddle = 28 + this.paddle.body.halfWidth;
        this.boundRightOffsetByPaddle = 720 - 28 - this.paddle.body.halfWidth;

        BoundLeftOffsetByPaddle=this.boundLeftOffsetByPaddle;
        BoundRightOffsetByPaddle=this.boundRightOffsetByPaddle;

        //공통적용

    },

    //-----패들죽이기---
    playanimPadDeath: function (sz) {
        //패들상태
        this.padsizeold = this.padsize;
        this.padsize = sz;

        //총구 사라지기
        this.setBulletOffset();
        guntimer=0;
        gunstate = ThreeState.end;
        PadAttr_bullet = false; //in playanimPadDeath
        this.paddle.z_left.visible=false;
        this.paddle.z_right.visible=false;

        if(kData.bSoundSE) SE_Paddle_Dead.play();//패들죽기//임시

        //공통적용
        //this.paddle.body.setSize(this.paddle.width / this.paddle.scale.x, this.paddle.height / this.paddle.scale.y);
        //1://
        this.paddle.body.setSize(this.paddle.width / this.paddle.scale.x, this.paddle.height / this.paddle.scale.y);

        //2://
        // var szx=this.paddle.width / this.paddle.scale.x;
        // var szy=(this.paddle.height / this.paddle.scale.y)*2;
        // var offx=0;
        // var offy=szy*0.5;
        // this.paddle.body.setSize(szx, szy, offx, offy);


        this.boundLeftOffsetByPaddle = 28 + this.paddle.body.halfWidth;
        this.boundRightOffsetByPaddle = 720 - 28 - this.paddle.body.halfWidth;

        BoundLeftOffsetByPaddle=this.boundLeftOffsetByPaddle;
        BoundRightOffsetByPaddle=this.boundRightOffsetByPaddle;

        //공통적용

        switch (sz) {
            case PadSize.nerf:
                this.paddle.animations.play('paddle_80n_death', 10, false, true); //1time //kill
                this.paddle.z_effect.revive();
                this.paddle.z_effect.position.setTo(this.paddle.x, this.paddle.y);
                this.paddle.z_effect.animations.play('paddle_effect', 10, false, true);
                break;

            case PadSize.normal:
                this.paddle.animations.play('paddle_160n_death', 10, false, true); //1time //kill
                this.paddle.z_effect.revive();
                this.paddle.z_effect.position.setTo(this.paddle.x, this.paddle.y);
                this.paddle.z_effect.animations.play('paddle_effect', 10, false, true);
                break;

            case PadSize.long:
                this.paddle.animations.play('paddle_240n_death', 10, false, true); //1time //kill
                this.paddle.z_effect.revive();
                this.paddle.z_effect.position.setTo(this.paddle.x, this.paddle.y);
                this.paddle.z_effect.animations.play('paddle_effect', 10, false, true);
                break;

            case PadSize.longa:
                this.paddle.animations.play('paddle_320n_death', 10, false, true); //1time //kill
                this.paddle.z_effect.revive();
                this.paddle.z_effect.position.setTo(this.paddle.x, this.paddle.y);
                this.paddle.z_effect.animations.play('paddle_effect', 10, false, true);
                break;

            case PadSize.longaa:
                this.paddle.animations.play('paddle_400n_death', 10, false, true); //1time //kill
                this.paddle.z_effect.revive();
                this.paddle.z_effect.position.setTo(this.paddle.x, this.paddle.y);
                this.paddle.z_effect.animations.play('paddle_effect', 10, false, true);
                break;

            default:
                this.paddle.animations.play('paddle_160n_death', 10, false, true); //1time //kill
                this.paddle.z_effect.revive();
                this.paddle.z_effect.position.setTo(this.paddle.x, this.paddle.y);
                this.paddle.z_effect.animations.play('paddle_effect', 10, false, true);
        }
        enablePlayTime=false;
    },
    //-----패들죽이기---

    // BallType = {
    //     normal: 0,
    //     small: 1,
    //     big: 2,
    //     through_n: 3,
    //     through_s: 4,
    //     through_b: 5,
    //     bomb_n: 6,
    //     bomb_s: 7,
    //     bomb_b: 8
    // };
    setBallStateDirect: function (val_state) { //볼강제변경
        this.ballstate = val_state;
        switch (val_state) {
            //노말--------------------------------------
            case BallType.normal_n:
                //this.paddle.loadTexture('atlas_bb-0', 'ball_normal_middle.png'); //노말중
                this.balls.forEach(function (n) {
                    if (n.alive) {
                        n.loadTexture('atlas_bb-0', 'ball_normal_middle.png'); //노말중
                        n.body.setSize(n.width, n.height);
                    }
                }, this);
                break;
            case BallType.normal_s:
                //this.paddle.loadTexture('atlas_bb-0', 'ball_normal_small.png'); //노말소
                this.balls.forEach(function (n) {
                    if (n.alive) {
                        n.loadTexture('atlas_bb-0', 'ball_normal_small.png'); //노말중
                        n.body.setSize(n.width, n.height);
                    }
                }, this);
                break;
            case BallType.normal_b:
                //this.paddle.loadTexture('atlas_bb-0', 'ball_normal_big.png'); //노말대
                this.balls.forEach(function (n) {
                    if (n.alive) {
                        n.loadTexture('atlas_bb-0', 'ball_normal_big.png'); //노말중
                        n.body.setSize(n.width, n.height);
                    }
                }, this);
                break;
            //통과 --------------------------------------
            case BallType.through_n:
                //this.paddle.loadTexture('atlas_bb-0', 'ball_special_middle.png'); //관통중
                this.balls.forEach(function (n) {
                    if (n.alive) {
                        n.loadTexture('atlas_bb-0', 'ball_normal_middle_special.png'); //노말중
                        n.body.setSize(n.width, n.height);
                    }
                }, this);
                break;
            case BallType.through_s:
                // this.paddle.loadTexture('atlas_bb-0', 'ball_special_small.png'); //관통소
                this.balls.forEach(function (n) {
                    if (n.alive) {
                        n.loadTexture('atlas_bb-0', 'ball_normal_small_special.png'); //노말중
                        n.body.setSize(n.width, n.height);
                    }
                }, this);
                break;
            case BallType.through_b:
                //this.paddle.loadTexture('atlas_bb-0', 'ball_special_big.png'); //관통대
                this.balls.forEach(function (n) {
                    if (n.alive) {
                        n.loadTexture('atlas_bb-0', 'ball_normal_big_special.png'); //노말중
                        n.body.setSize(n.width, n.height);
                    }
                }, this);
                break;
            //폭발--------------------------------------
            case BallType.bomb_n:
                //this.paddle.loadTexture('atlas_bb-0', 'ball_fire_middle.png'); //폭발중
                this.balls.forEach(function (n) {
                    if (n.alive) {
                        //n.loadTexture('atlas_bb-0', 'ball_fire_middle_ani_1.png'); //노말중
                        n.animations.play('fire_normal', 10, true, undefined); //loop
                        n.body.setSize(n.width, n.height);
                    }
                }, this);
                break;
            case BallType.bomb_s:
                //this.paddle.loadTexture('atlas_bb-0', 'ball_fire_small.png'); //폭발소
                this.balls.forEach(function (n) {
                    if (n.alive) {
                        //n.loadTexture('atlas_bb-0', 'ball_fire_small_ani_1.png'); //노말중
                        n.animations.play('fire_small', 10, true, undefined); //loop
                        n.body.setSize(n.width, n.height);
                    }
                }, this);
                break;
            case BallType.bomb_b:
                //this.paddle.loadTexture('atlas_bb-0', 'ball_fire_big.png'); //폭발대
                this.balls.forEach(function (n) {
                    if (n.alive) {
                        //n.loadTexture('atlas_bb-0', 'ball_fire_big_ani_1.png'); //노말중
                        n.animations.play('fire_big', 10, true, undefined); //loop
                        n.body.setSize(n.width, n.height);
                    }
                }, this);
                break;
            //관통 + 폭발--------------------------------------
            case BallType.throughbomb_n:
                //this.paddle.loadTexture('atlas_bb-0', 'ball_fire_middle.png'); //폭발중
                this.balls.forEach(function (n) {
                    if (n.alive) {
                        n.loadTexture('atlas_bb-0', 'ball_fire_middle_special.png'); //노말중
                        n.body.setSize(n.width, n.height);
                    }
                }, this);
                break;
            case BallType.throughbomb_s:
                //this.paddle.loadTexture('atlas_bb-0', 'ball_fire_small.png'); //폭발소
                this.balls.forEach(function (n) {
                    if (n.alive) {
                        n.loadTexture('atlas_bb-0', 'ball_fire_small_special.png'); //노말중
                        n.body.setSize(n.width, n.height);
                    }
                }, this);
                break;
            case BallType.throughbomb_b:
                //this.paddle.loadTexture('atlas_bb-0', 'ball_fire_big.png'); //폭발대
                this.balls.forEach(function (n) {
                    if (n.alive) {
                        n.loadTexture('atlas_bb-0', 'ball_fire_big_special.png'); //노말중
                        n.body.setSize(n.width, n.height);
                    }
                }, this);
                break;
            ///-------------------
            default:
                //this.paddle.loadTexture('atlas_bb-0', 'ball_normal_middle.png'); //longaaa
                this.balls.forEach(function (n) {
                    if (n.alive) {
                        n.loadTexture('atlas_bb-0', 'ball_normal_middle.png'); //노말중
                        n.body.setSize(n.width, n.height);
                    }
                }, this);
                break;
        }//switch

        this.changeTrails(this.ballstate);
    },

    setBallsPosOffset: function () { //볼강제변경
        //lefttop: 28, 130   //righttop: 692, 130
        var coltop=130;
        var colleft=28;
        var colright=692;
        this.balls.forEach(function (n) {
            if (n.alive) {
                if(n.y<coltop+n.body.halfHeight){
                   n.y=coltop+n.body.halfHeight;
                }else if(n.x<colleft+n.body.halfWidth){
                    n.x=colleft+n.body.halfWidth;
                }else if(n.x>colright-n.body.halfWidth){
                    n.x=colleft-n.body.halfWidth;
                }
            }
        }, this);
    },


    //레벨들,레벨모음
    //정보 모비릭스 벽돌깨기 왕: x:11,y:19-> 11x18로변경
    //첫레벨 위에서부터 [1]~[8]행
    initLevel: function () {

        //curLevel = 0; //계속 0으로 해서 로딩하게 함;;

        var r = 'red';
        var b = 'blue';
        var o = 'orange';
        var g = 'green';
        var X = null;

        //you can uncoment the dev level and or/add a level of your own
        //powerUps are not picked from the values bellow but set with: this.dropItemLimit
        //기획-원하는크기 x:11 y:18

        bbLevel = [
                //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,// x:11개
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //0
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //1
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //2
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //3
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //4
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //5
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //6
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //7
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //8
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //9
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //10
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //11
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //12
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //13
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //14
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //15
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //16
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]  //17 //y:18개
            ];
        bbLevel_coloronly = [
            //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,// x:11개
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //0
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //1
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //2
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //3
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //4
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //5
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //6
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //7
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //8
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //9
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //10
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //11
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //12
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //13
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //14
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //15
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], //16
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]  //17 //y:18개
        ];

    },
    createSoundsAndMusic: function () {
        // this.au_brickDeath = this.game.add.audio('brickDeath');
        // this.au_countdownBlip = this.game.add.audio('countdownBlip');
        // this.au_powerdown = this.game.add.audio('powerdown');
        // this.au_powerup = this.game.add.audio('powerup');
        // this.au_recover = this.game.add.audio('recover');
    },
    createPaddle: function () {
        // Setup the player -- paddle
        this.paddle = this.game.add.sprite(game.world.centerX, this.paddlePosY, "atlas_bb-0", "paddle_160.png");//패들위치
        Paddle = this.paddle;
        //총구생성
        this.paddle.z_left=this.game.add.sprite(0, 0, "atlas_bb-0", "gun.png");
        this.paddle.z_left.anchor.set(0.5);
        this.paddle.z_right=this.game.add.sprite(0, 0, "atlas_bb-0", "gun.png");
        this.paddle.z_right.anchor.set(0.5);
        this.paddle.addChild(this.paddle.z_left);
        this.paddle.addChild(this.paddle.z_right);
        this.paddle.z_left.reset( -this.bulletx, -5);
        this.paddle.z_right.reset( this.bulletx, -5);
        this.paddle.z_left.visible=false;
        this.paddle.z_right.visible=false;
        //총구생성
        
        // this.bullety=this.gunpos[1][1];
        // bullet.reset( this.paddle.x + this.bulletx, this.paddle.y + this.bullety ); //총구 위치로


        //this.paddle.animations.play('paddle80n', 35, false, undefined); //1time
        this.paddle.animations.add('paddle_80n', [ //소형 패들 노말
            'paddle_80.png',
            'paddle_80_white.png',
            'paddle_80.png',
            'paddle_80_white.png',
            'paddle_80.png',
            'paddle_80_white.png',
            'paddle_80.png',
            'paddle_80_white.png',
            'paddle_80.png'
        ]);
        this.paddle.animations.add('paddle_160n', [
            'paddle_160.png',
            'paddle_160_white.png',
            'paddle_160.png',
            'paddle_160_white.png',
            'paddle_160.png',
            'paddle_160_white.png',
            'paddle_160.png',
            'paddle_160_white.png',
            'paddle_160.png'
        ]);
        this.paddle.animations.add('paddle_240n', [
            'paddle_240.png',
            'paddle_240_white.png',
            'paddle_240.png',
            'paddle_240_white.png',
            'paddle_240.png',
            'paddle_240_white.png',
            'paddle_240.png',
            'paddle_240_white.png',
            'paddle_240.png'
        ]);
        this.paddle.animations.add('paddle_320n', [
            'paddle_320.png',
            'paddle_320_white.png',
            'paddle_320.png',
            'paddle_320_white.png',
            'paddle_320.png',
            'paddle_320_white.png',
            'paddle_320.png',
            'paddle_320_white.png',
            'paddle_320.png'
        ]);
        this.paddle.animations.add('paddle_400n', [
            'paddle_400.png',
            'paddle_400_white.png',
            'paddle_400.png',
            'paddle_400_white.png',
            'paddle_400.png',
            'paddle_400_white.png',
            'paddle_400.png',
            'paddle_400_white.png',
            'paddle_400.png'
        ]);
        this.paddle.animations.add('paddle_80j', [ //소형 패들 부착
            'paddle_80_magnet.png',
            'paddle_80_white.png',
            'paddle_80_magnet.png',
            'paddle_80_white.png',
            'paddle_80_magnet.png',
            'paddle_80_white.png',
            'paddle_80_magnet.png',
            'paddle_80_white.png',
            'paddle_80_magnet.png'
        ]);
        this.paddle.animations.add('paddle_160j', [
            'paddle_160_magnet.png',
            'paddle_160_white.png',
            'paddle_160_magnet.png',
            'paddle_160_white.png',
            'paddle_160_magnet.png',
            'paddle_160_white.png',
            'paddle_160_magnet.png',
            'paddle_160_white.png',
            'paddle_160_magnet.png'
        ]);
        this.paddle.animations.add('paddle_240j', [
            'paddle_240_magnet.png',
            'paddle_240_white.png',
            'paddle_240_magnet.png',
            'paddle_240_white.png',
            'paddle_240_magnet.png',
            'paddle_240_white.png',
            'paddle_240_magnet.png',
            'paddle_240_white.png',
            'paddle_240_magnet.png'
        ]);
        this.paddle.animations.add('paddle_320j', [
            'paddle_320_magnet.png',
            'paddle_320_white.png',
            'paddle_320_magnet.png',
            'paddle_320_white.png',
            'paddle_320_magnet.png',
            'paddle_320_white.png',
            'paddle_320_magnet.png',
            'paddle_320_white.png',
            'paddle_320_magnet.png'
        ]);
        this.paddle.animations.add('paddle_400j', [
            'paddle_400_magnet.png',
            'paddle_400_white.png',
            'paddle_400_magnet.png',
            'paddle_400_white.png',
            'paddle_400_magnet.png',
            'paddle_400_white.png',
            'paddle_400_magnet.png',
            'paddle_400_white.png',
            'paddle_400_magnet.png'
        ]);

        //죽기애니------------
        //this.paddle.animations.play('paddle_80n_death', 35, false, undefined); //1time
        this.paddle.animations.add('paddle_80n_death', [ //소형 패들 노말
            'paddle_80_white.png',
            'paddle_80.png',
            'paddle_80_bomb.png'
        ]);
        this.paddle.animations.add('paddle_160n_death', [
            'paddle_160_white.png',
            'paddle_160.png',
            'paddle_160_bomb.png'
        ]);
        this.paddle.animations.add('paddle_240n_death', [
            'paddle_240_white.png',
            'paddle_240.png',
            'paddle_240_bomb.png'
        ]);
        this.paddle.animations.add('paddle_320n_death', [
            'paddle_320_white.png',
            'paddle_320.png',
            'paddle_320_bomb.png'
        ]);
        this.paddle.animations.add('paddle_400n_death', [
            'paddle_400_white.png',
            'paddle_400.png',
            'paddle_400_bomb.png'
        ]);
        //죽기애니------------

        this.paddle.name = "paddle";
        this.paddle.anchor.setTo(0.5, 0.5);
        this.game.physics.enable(this.paddle, Phaser.Physics.ARCADE);
        this.paddle.body.collideWorldBounds = true;
        this.paddle.body.bounce.set(1);
        this.paddle.body.immovable = true;

        this.paddle.z_effect = this.game.add.sprite(-100, -100, "atlas_bb-0", 'paddle_bomb_1.png');
        this.paddle.z_effect.anchor.setTo(0.5, 0.5);
        this.paddle.z_effect.animations.add('paddle_effect', [
            'paddle_bomb_1.png',
            'paddle_bomb_2.png',
            'paddle_bomb_3.png',
            'paddle_bomb_4.png',
            'paddle_bomb_5.png',
            'paddle_bomb_6.png'
        ]);
        this.paddle.z_effect.kill();
        //공통적용
        //this.paddle.body.setSize(this.paddle.width / this.paddle.scale.x, this.paddle.height / this.paddle.scale.y);
        //1://
        this.paddle.body.setSize(this.paddle.width / this.paddle.scale.x, this.paddle.height / this.paddle.scale.y);

        //2://
        // var szx=this.paddle.width / this.paddle.scale.x;
        // var szy=(this.paddle.height / this.paddle.scale.y)*2;
        // var offx=0;
        // var offy=szy*0.5;
        // this.paddle.body.setSize(szx, szy, offx, offy);

        this.boundLeftOffsetByPaddle = 28 + this.paddle.body.halfWidth;
        this.boundRightOffsetByPaddle = 720 - 28 - this.paddle.body.halfWidth;

        BoundLeftOffsetByPaddle=this.boundLeftOffsetByPaddle;
        BoundRightOffsetByPaddle=this.boundRightOffsetByPaddle;
        //공통적용

        //---패들 클리어시 사라짐 스파인---
        this.z_spine_paddle_out=uigame.add.spine(0, 0, "paddle_out"); //스파인오브젝트생성
        this.z_spine_paddle_out.x = this.paddle.x;
        this.z_spine_paddle_out.y = this.paddle.y;
        this.z_spine_paddle_out.state.onComplete = function (trackIndex, count) {
            switch (trackIndex) {
                case 0:
                    if(dm) console.log("spn_paddle_out.trackindex:0");
                    break;
                case 1:
                    if(dm) console.log("spn_paddle_out.trackindex:1");
                    break;
                case 2:
                    if(dm) console.log("spn_paddle_out.trackindex:2");
                    break;
                case 3:
                    if(dm) console.log("spn_paddle_out.trackindex:3");
                    break;
                case 4:
                    if(dm) console.log("spn_paddle_out.trackindex:4");
                    //empty만 순차실행 안됨, 딜레이없이 실행 되버린다.
                    //spn_page_lock.visible = false;//여기서 스파인숨김시 다른 애니들이 다 작동안함
                    spn_paddle_out.visible=false;
                    break;
            }
        };
        spn_paddle_out = this.z_spine_paddle_out;//글로벌저장
        //---패들 클리어시 사라짐 스파인---
    },//in createPaddle
    createHUD: function () {
        intro_fin = false;
        // Setup score text
        //this.scoreText = this.game.add.text(32, 1200, "score: 0", this.defaultTextOptions);
        //this.livesText = this.game.add.text(620, 1250, "lives: 3", this.defaultTextOptions); //1/2차생성
        //this.introText = this.game.add.text(game.world.centerX, 700, "START", this.boldTextOptions);//스타트생성
        //this.introText.anchor.setTo(0.5, 0.5);
        
        //인트로용 - 패들박스생성
        // this.introbox = this.game.add.sprite(xc, this.game.world.height, 'atlas_bb-0', 'boxcover.png');
        // this.introbox.anchor.setTo(0.5, 0);
        // this.introbox.visible = false;
        this.intropaddle = this.game.add.sprite(xc, this.game.world.height, 'atlas_bb-0', 'paddle_160.png');
        this.intropaddle.anchor.setTo(0.5, 0.5);
        this.intropaddle.visible = false;
        this.introboxcap = this.game.add.sprite(xc, this.game.world.height, 'atlas_bb_ui-0', 'box.png');
        this.introboxcap.anchor.setTo(0.5, 0);
        this.introboxcap.visible = false;


    },

    introShow: function () { //패들 등장 트윈 //시작창닫고, 딜레이콜로 호출 //시작연출-패들등장
        if('menu'=== uigame.state.current) return;//
        if(dm) console.log("-----------introShow------------");
        //TweenMax.killTweensOf(this.introbox);
        TweenMax.killTweensOf(this.intropaddle);
        TweenMax.killTweensOf(this.introboxcap);

        var p = this.paddle;
        var b = this.ball;
        //var ib = this.introbox;
        var ip = this.intropaddle;
        var ic = this.introboxcap;
        var iboxfin = intro_fin;

        this.intropaddle.x = xc;

        //패들,박스같이 등장
        TweenMax.fromTo( this.intropaddle, 0.25, {y:1280+26}, {y:1192+26-56, ease: Linear.easeNone,  delay: 0.5,
            onStart:function() {
                ip.visible=true;
                ic.visible=true;
            }
        }); //박스
        //this.introboxcap.alpha=0.5;//디버깅용도
        TweenMax.fromTo( this.introboxcap, 0.25, {y:1280}, {y:1192-60,  ease:Linear.easeNone,  delay: 0.5}); //뚜껑


        //박스열기
        //TweenMax.fromTo( this.introbox,  0.25, {y:1192}, {y:1149, ease: Power1.easeOut,  delay: 0.25+0.5}); //뚜껑
        //패들나오기
        TweenMax.fromTo( this.intropaddle,  0.25, {y:1192+26-56}, {y:1000, ease:Linear.easeNone,  delay: 0.5+0.5}); //패들 //Elastic.easeOut
        //박스들어가기
        //TweenMax.fromTo( this.introbox,  0.4, {y:1149}, {y:1280, ease: Power1.easeOut,  delay: 1+0.5}); //박스
        TweenMax.fromTo( this.introboxcap,  0.4, {y:1192-60}, {y:1280,  ease:Linear.easeNone,  delay: 1+0.5}); //박스

        //모든 오브젝트 사라지기
        TweenMax.delayedCall(2.0, function () {
            if('menu'=== uigame.state.current) return;//
            //ib.visible = false;
            ip.visible = false;
            ic.visible = false;
            p.visible = true;
            b.visible = true;
            var gg = uigame.state.states.game;
            gg.massiveController.ballOnPaddle = true; //false라 켠다
            gg.massiveController.paddle.x = xc;
            if(gg.massiveController.balls.countLiving()===0) {
                var aball = gg.massiveController.balls.getFirstDead();  //공1개를 살린다.
                aball.reset(xc,yc);                   //공1 중앙으로 이동후
                aball.revive();                       //공1 부활
                this.ball = aball; //애니볼이면 //ball.animations.stop();
            }

            gg.massiveController.setBallStateDirect(BallType.normal_n);

            gg.massiveController.resetBullets();

            //gg.massiveController.setPadSizeDirect(PadSize.normal);
            gg.massiveController.padsize = PadSize.normal;
            gg.massiveController.padatt = PadAttr.normal;
            gg.massiveController.paddle.loadTexture('atlas_bb-0', 'paddle_160.png');
            gg.massiveController.paddle.revive();
            gg.massiveController.paddle.x = xc;
            intro_fin = true;

            //-----
            gg.massiveController.navi.onShow();

        });
        TweenMax.delayedCall(0.65, function () {
            if('menu'=== uigame.state.current) return;//
            if (kData.bSoundSE) SE_Paddle_Apper.play();
        });
    }, //시작연출-패들등장

    death_Force: function () {
        curComboCount = 0;
        //패들사망처리----------death_force랑 동일
        this.onReleaseBalls();
        this.items.forEach(function (n) { //드롭된 아이템 제거
            if (n.alive) {
                n.kill();
            }
        }, this);

        this.balls.forEach(function (n) { //공 제거
            if (n.alive) {
                n.kill();
            }
        }, this);

        this.setTrails(); //in death_force

        this.redBears.forEach(function (n) {//적곰제거
            if (n.alive) {
                n.kill();
            }
        }, this);
        
        this.greenBears.forEach(function (n) {//녹곰제거
            if (n.alive) {
                n.kill();
            }
        }, this);

        this.bullets.forEach(function (n) {//총알제거
            if (n.alive) {
                n.kill();
            }
        }, this);

        guntimer=0;
        gunstate = ThreeState.end;
        PadAttr_bullet=false; //in playanimPadDeath

        //총구끄기
        this.paddle.z_left.visible=false;
        this.paddle.z_right.visible=false;
        //총구끄기

        //---블록갯수체크----
        this._cntliving = this.tiles.countLiving();
        //골드갯수체크
        var gcnt = 0;
        this.tiles.forEach(function (n) {
            if (n.alive && n.z_color === 9) {         //무적9//초코블록8
                gcnt += 1;                            //현재골드블록만 숫자세기
            }
        }, this);
        this.countgoldcur = gcnt;
        if (this._cntliving <= this.countgoldcur)  //현재블록갯수<=현재골드갯수이면(골드만 남앗으면)
            return;
        //---블록갯수체크----


        this.playanimPadDeath(this.padsize); //in death

        curLives-=1; //죽음
        if(curLives<0) curLives=0;

        TweenMax.delayedCall( 0.75,//0.25,
            function () {
                if('menu'=== uigame.state.current) return;
                //생명차감 연출
                //var stgame = uigame.state.states.game;
                //stgame.massiveController.livesUI.onSetLife(curLives); //in death
                //별숨김// stgame.massiveController.livesUI.onMoveLife(curLives);  //상단메뉴에서 별 사라짐
                //생명차감 연출
            }
        );

        if (curLives === 0) { //다음 라이프 없으면 게임오버 in death
            //블록갯수체크는 위에서
            //
            //블록갯수체크는 위에서
            TweenMax.delayedCall( 1.75,//0.5,
                function () {
                    if('menu'=== uigame.state.current) return;

                    // if(modeOption[0]===2){//보너스에서 게임오버
                    //     var stgame = uigame.state.states.game;
                    //     if (stgame.uiController.uiGameOver.visible === false) {
                    //         selectBGM("none", true);
                    //         stgame.uiController.uiGameOver.onActiveGv();
                    //     }
                    //
                    // }else {
                        //컨티뉴-메뉴
                        var stgame = uigame.state.states.game;
                        if (stgame.uiController.uiContinue.visible === false) {
                            stgame.uiController.uiContinue.onActiveCn(true);
                        }
                        //컨티뉴-메뉴
                    // }

                }
            );
        } else { //공 죽고, 다음공이 남으면 계속 이어하기
            //this.paddle.visible = false; //in death
            TweenMax.delayedCall( 1.75,//0.5,
                function () {
                    //시작연출-죽고다시할때
                    if('menu'=== uigame.state.current) return;
                    console.log("introshow in death_Force");

                    var stgame = uigame.state.states.game;
                    stgame.massiveController.introShow();

                    // if(false) {
                    //     TweenMax.delayedCall(0.5,function() {
                    //         if('menu'=== uigame.state.current) return;
                    //         console.log("introshow in death_Force");
                    //         stgame.massiveController.introShow();
                    //     });
                    //
                    //     //레디고플레이
                    //     stgame.uiController.uiReadyGo.z_spine.setAnimationByName(1, "ready_go_ani", false);//in death
                    //     stgame.uiController.uiReadyGo.z_spine.addAnimationByName(0, "empty", false);
                    //     //
                    // }

                    //stgame.massiveController.introShow();
                    //시작연출-죽고다시할때
                }
            );
        }//생명이 남앗을때
        //패들사망처리----------death_force랑 동일
    },

    copyLevel: function (levelindex) { //레벨로딩,타일로딩,블록로딩,블럭로딩

        //블록레벨 설정------------------------------------------
        //reset bricks
        // Creating a tile group
        //제1안
        //this.tiles.destroy();//bricks                   //기존 제거

        //제2안
        this.tiles.forEach(function (n) {
            if (n.alive) {
                n.kill();
            }
        }, this);

        if(dm) console.log("countDead:" + this.tiles.countDead()); //0으로 출력


        //제3안
        //this.tiles.kill();

        //this.tiles = this.game.add.group();//113 this.bricks = this.game.add.group();
        //this.tiles.enableBody = true;
        //this.tiles.physicsdBodyType = Phaser.Physics.ARCADE;

        //var Level = bbLevel;  //113버젼 모든레벨

        uigame.state.states.game.bgController.Background.onSetTex(levelindex);
        touchfirst = false; //in copylevel
        //레벨가져오기
        var _level;
        var _len;
        var _i;
        var _j;
        var _color;
        var _tile1;
        var _tilecount_colored = 0;

        var _over = false;

        //블록 저장 그리드 초기화
        for (_i = 0; _i < gridszx; _i++) {
            for (_j = 0; _j < gridszy; _j++) {
                bbLevel[_j][_i] = -1;           //초기화 in initLevel: function () {
                bbLevel_coloronly[_j][_i] = -1;
            }
        }

        //this.maxwithoutgold = 0;
        //this.curwithoutgold = 0;
        this.countgold = 0;
        this.countgoldcur = 0;

        //모드설정--
        modeOption = bubble_levels[levelindex].option; //0:노말 1:하강모드 2:보너스

        if (modeOption === undefined) modeOption = [0, 0, 0, 0, 0, 0];
        //modeOption = [1,0,0,0,0,0];//지울것
        //modeOption = [2,30,0,0,0,0];//지울것

        isClearBonus = false;
        finalClearBonus = false;

        switch (modeOption[0]) {
            case 0:
                //노말모드
                break;
            case 1:
                //하강모드
                break;
            case 2:
                //보너스하강모드
                break;
            default:
                //예외
                break;
        }
        //모드설정--

        _level = bubble_levels[levelindex];
        _len = bubble_levels[levelindex].balls.length;
        for (_i = 0; _i < _len; _i++) {

            var randomTileNumber = Math.floor(Math.random() * 6);

            // _tile1 = this.tiles.create(
            //     strtx + (_level.balls[_i].x * szx),                 //x
            //     strty + (_level.balls[_i].y * szy),                 //y
            //     "atlas_bb-0",
            //     "block_pubble.png"        //key //텍스쳐 오브젝트이름
            // );

            _color = _level.balls[_i][2]; //칼라속성

            _tile1 = this.tiles.create(
                strtx + (_level.balls[_i][0] * szx),                 //x속성
                strty + (_level.balls[_i][1] * szy),                 //y속성
                'atlas_bb-0',
                (_color === 0 ? 'block_white.png'
                    : _color === 1 ? 'block_crimson.png'
                        : _color === 2 ? 'block_red.png'		//오렌지
                            : _color === 3 ? 'block_yellow.png'
                                : _color === 4 ? 'block_green.png'
                                    : _color === 5 ? 'block_lightblue.png'     //하늘색
                                        : _color === 6 ? 'block_deepblue.png'     //파랑
                                            : _color === 7 ? 'block_pupple.png'  //보라
                                                : _color === 8 ? 'block_choco_3.png'   //하드
                                                    : _color === 9 ? 'block_gold.png'    //무적
                                                        : 'block_white.png')
            );
            _tile1.z_initx = strtx + (_level.balls[_i][0] * szx);
            _tile1.z_inity = strty + (_level.balls[_i][1] * szy);
            _tile1.z_x = _level.balls[_i][0]; //그리드(타일)좌표 입력
            _tile1.z_y = _level.balls[_i][1];

            _tile1.z_color = _color;
            _tile1.z_step = 0;
            _tile1.body.bounce.set(1);
            _tile1.body.immovable = true;
            _tile1.anchor.setTo(0.5, 0.5); //피봇-->중심으로
            _tile1.body.enable = true;

            _tile1.z_isheart=false;

            if (_color === 9) {
                this.countgold += 1; //블록카운트-골드
                this.countgoldcur += 1;
            } //무적블록수 갯수 합산

            //칼라블록 개수 계산 //아이템 렌덤생성시 사용
            if (_color !== 9) _tilecount_colored += 1;

            _tile1.name = 'brick' + (_i);
            if (_i === 0) { //첫타일이면
                this.tile1width = _tile1.width;
                this.tile1height = _tile1.height;
            }

            //공통 애니 설정
            //'block_bomb_white.png',
            _tile1.animations.add('kill', [//보통블록터짐애니
                // 'block_bomb_type_2_1.png',
                // 'block_bomb_type_2_2.png',
                // 'block_bomb_type_2_3.png',
                // 'block_bomb_type_2_4.png',
                // 'block_bomb_type_2_5.png',
                // 'block_bomb_type_2_6.png',
                // 'block_bomb_type_2_7.png',
                // 'block_bomb_type_2_8.png',
                // 'block_bomb_type_2_9.png',
                // 'block_bomb_type_2_10.png'
                'block_bomb_1.png',
                'block_bomb_2.png',
                'block_bomb_3.png',
                'block_bomb_4.png',
                'block_bomb_5.png',
                'block_bomb_6.png',
                'block_bomb_7.png',
                'block_bomb_8.png',
                'block_bomb_9.png',
                'block_bomb_10.png'
            ]);
            _tile1.z_onkill = function () {
                var emitter = this.game.add.emitter(0, 0, 100);
                emitter.makeParticles('brick-dust');
                emitter.x = _tile1.x + this.width * 0.5;
                emitter.y = _tile1.y + this.height * 0.5;
                emitter.minParticleSpeed.setTo(-50 * SCALE, -50 * SCALE);
                emitter.maxParticleSpeed.setTo(50 * SCALE, 50 * SCALE);
                emitter.minParticleScale = 1 * SCALE;
                emitter.maxParticleScale = 1.5 * SCALE;
                emitter.start(true, 300, null, 10);

                this.game.time.events.add(2000, function () {
                        emitter.destroy();
                    }
                );
            };

            //_tile1.animations.add('fire', ['block_fire.png', 'block_fire_75.png', 'block_fire_50.png', 'block_fire_25.png']);
            _tile1.animations.add('fire', [ //불타는 블록애니
                'block_bomb_fire_1.png',
                'block_bomb_fire_2.png',
                'block_bomb_fire_3.png',
                'block_bomb_fire_4.png',
                'block_bomb_fire_5.png',
                'block_bomb_fire_6.png',
                'block_bomb_fire_7.png'
            ]);

            _tile1.animations.add('killpoint', [//총알터짐애니
                'shot_bomb_ani_1.png',
                'shot_bomb_ani_2.png',
                'shot_bomb_ani_3.png'
            ]);

            _tile1.animations.add('kill_choco', [ //초코 블록애니
                'choco_block_bomb_1.png',
                'choco_block_bomb_2.png',
                'choco_block_bomb_3.png',
                'choco_block_bomb_4.png',
                'choco_block_bomb_5.png',
                'choco_block_bomb_6.png',
                'choco_block_bomb_7.png',
                'choco_block_bomb_8.png',
                'choco_block_bomb_9.png',
                'choco_block_bomb_10.png'
            ]);
            _tile1.animations.add('kill_heart', [ //하트 블록애니
                'heart_block_bomb_1.png',
                'heart_block_bomb_2.png',
                'heart_block_bomb_3.png',
                'heart_block_bomb_4.png',
                'heart_block_bomb_5.png',
                'heart_block_bomb_6.png',
                'heart_block_bomb_7.png',
                'heart_block_bomb_8.png',
                'heart_block_bomb_9.png',
                'heart_block_bomb_10.png',
                'heart_block_bomb_11.png',
                'heart_block_bomb_12.png'
            ]);
            //타일속성에 따라 처리
            switch (_color) {
                case 8:
                    _tile1.animations.add('show0', ['block_bomb_white.png', 'block_choco_2.png']);
                    _tile1.animations.add('showdefault', ['block_choco_3.png']); //레벨11번(인덱스10)
                    //sprite.animations.currentAnim.onComplete.add(function () {	console.log('animation complete');}, this);
                    //var anim = m.animations.play('mole_go_out', 24, false);       anim.onComplete.add(this.stopBunny, this);},
                    _tile1.animations.add('show1', ['block_bomb_white.png', 'block_choco_1.png']);
                    //anim.onComplete.add(_tile1.kill(), this);
                    _tile1.z_step = 2;//초기화
                    break;
                case 9:
                    _tile1.animations.add('show0', [ //레벨21번(인덱스20) 무적
                        'block_gold.png',
                        'block_gold_ani_1.png',
                        //'block_gold_ani_2.png',
                        'block_gold_ani_3.png',
                        //'block_gold_ani_4.png',
                        'block_gold_ani_5.png',
                        //'block_gold_ani_6.png',
                        'block_gold_ani_7.png',
                        //'block_gold_ani_8.png',
                        'block_gold_ani_9.png',
                        'block_gold.png'
                    ]);
                    break;

                default:
                    break;
            }//switch (_color)
            // 배열속에 그리드속성 저장--------
            bbLevel[_level.balls[_i][1]][_level.balls[_i][0]] = _tile1;//타일그리드첫저장
            bbLevel_coloronly[_level.balls[_i][1]][_level.balls[_i][0]] = _tile1.z_color;//타일속성그리드첫저장
            // 배열속에 그리드속성 저장--------

        }//for (_i=0 //level.ball카운트만큼

        //--블록수로 시간생성하기-------------
        //--전체블록tn--
        allblockcount = this.tiles.countLiving();////블록카운트-전체
        //--골드블록, 초코블록 세기--
        goldcnt = 0; //블록카운트-골드
        chococnt= 0; //블록카운트-초코
        normalcnt=0; //블록카운트-노말
        this.tiles.forEach(function (n) {
            if (n.alive){
                if(n.z_color === 9) {      //무적9
                    goldcnt+=1;          //골드 숫자
                }else if(n.z_color === 8) { //초코블록8
                    chococnt+=1;         //초코 숫자
                }else{
                    normalcnt+=1;
                }
            }
        }, this);
        //this.countgoldcur = goldcnt;

        if(goldcnt<chococnt+normalcnt){
            playtime_clock_max = allblockcount*3;
            allstarbias=[0
                , (allblockcount*1)/playtime_clock_max
                , (allblockcount*2.2)/playtime_clock_max
            ];
        }else{
            playtime_clock_max = allblockcount*3*1.2;
            allstarbias=[0
                , (allblockcount*1*1.2)/playtime_clock_max
                , (allblockcount*2.2*1.2)/playtime_clock_max
            ];
        }
        //--블록수로 시간생성하기-------------
        playtime_clock = playtime_clock_max + 1; //in copylevel

        bonusmovetimermax = modeOption[3] * 0.1;
        bonusmovetimer = bonusmovetimermax + 1;
        BearTimeMax = Math.floor(allblockcount*0.5);

        //curLevelFake = curLevel + 1 - Math.floor(curLevel / LV4x4);
        if(-1!==DontStartBearLevel.indexOf(curLevelFake)) isUseBear = false;
        else isUseBear = true;
        //console.log("isUseBear:"+isUseBear);

        switch (modeOption[0]) {
            case 0:
                //노말모드
                break;
            case 1:
                //하강모드
                break;
            case 2:
                //보너스하강모드
                //안보이는 영역에 블록 1개를 생성해서  게임 종료되는 것 방지
                var _fartile = this.createTile1(-10, -10, 0);
                _fartile.revive();
                _fartile.body.enable = true;
                _fartile.alpha = 1;
                _fartile.z_color = this._tmpcolor;
                _fartile.z_step = 0;
                break;
            default:
                //예외
                break;
        }


        // //테스트
        // this.leveloption = bubble_levels[levelindex].mask_test;

        this.mskl = bubble_levels[levelindex].mask_left;
        this.mskr = bubble_levels[levelindex].mask_right;
        //예외처리
        if (this.mskl === undefined) this.mskl = [];
        if (this.mskr === undefined) this.mskr = [];

        this.mskllen = this.mskl.length;
        this.mskrlen = this.mskr.length;
        this.msklmax = 0;
        this.mskrmax = 720;
        this.mskloff = 0;
        this.mskroff = 0;

        this.mskldir = false;//방향
        this.mskrdir = false;//방향

        for (_i = 0; _i < this.mskllen; _i++) {
            this._mskx = this.mskl[_i][0];
            this._msky = this.mskl[_i][1];
            this._mxobj = bbLevel[this._msky][this._mskx];
            if (this.msklmax < this._mxobj.x) {
                this.msklmax = this._mxobj.x; //1번째칸위치기준 옵셋 //다음칸까지 가야하므로 --1
            }
        }
        for (_i = 0; _i < this.mskrlen; _i++) {
            this._mskx = this.mskr[_i][0];
            this._msky = this.mskr[_i][1];
            this._mxobj = bbLevel[this._msky][this._mskx];
            if (this.mskrmax > this._mxobj.x) {
                //this.mskrmax =  this._mxobj.x - (strtx+(11*szx))+strtx; //11번째칸위치기준 옵셋//다음칸까지 가야하므로 ++1
                this.mskrmax = this._mxobj.x;
            }
        }
        var w = strtx + (11 * szx);
        this.mskrmax = Math.abs(this.mskrmax - w);

        if (dm) console.log("load level(copy level)");
        //레벨가져오기



        //modeOption[] 변수들 설명
        //modeOption = [0,1,2,3,4,5]----------설명
        //             [0]모드
        //              0:노말
        //              1:하강모드
        //              2:보너스
        //modeOption = [0,1,2,3,4,5]----------
        //               [1]라인수(수직스크롤)
        //modeOption = [0,1,2,3,4,5]----------
        //                 [2]하트갯수
        //modeOption = [0,1,2,3,4,5]----------
        //                   [3]수직속도(1:0.1초 10:1초)
        //modeOption = [0,1,2,3,4,5]----------더미인덱스
        //                     [4]곰생성시간(초)
        //modeOption = [0,1,2,3,4,5]----------
        //                       [5]미정

        //보너스모드하트배치, 보너스하트배치 랜덤 생성--시작------------------------------------------
        if (modeOption[0] === 2) {//보너스모드인경우
            BonusLineCount = modeOption[1]; //보너스스테이지 이동할 라인수
            //BonusHeartCount = modeOption[2]; //총하트수
            var userheart = kData.userData[curLevel]>0?kData.userData[curLevel]:0;
            BonusHeartCount = modeOption[2]-userheart; //보너스스테이지 총하트수

            //ui는 생성이 안된 상태이므로 업데이트는 여기서 하면 안됨

            //BonusLineCount+18-->총이동 라인수
            BonusHeartRemain = BonusHeartCount % (BonusLineCount+18);   //나머지
            BonusHeartShare  = BonusHeartCount - BonusHeartRemain; //전체라인에 들어갈 하트총수
            BonusHeartPerLine = BonusHeartShare / (BonusLineCount+18);  //라인1개당 들어갈 하트수

            //중복없는 랜덤 배열
            BonusGridxArr = Phaser.ArrayUtils.shuffle(BonusGridxArr);

            //console.log("bbLevel:\n"+convertStr2Arr2D(bbLevel));
            //console.log("bbLevel_coloronly:\n"+convertStr2Arr2D(bbLevel_coloronly));

            //----------하트를 심을 블록들을 고른다.--시작---------초기화 하트배치 현재레벨전체
            BonusXArr=[];
            var xidx = 0;
            RemainAccum=0;//나머지의 +1 누적치
            BonusLocated=0;//배치된 보너스하트 전체 누적치
            //for (var iy = 18 - 1; iy >= 0; iy--) {//맨밑에서 위로 오라오면서
            for (var iy= 0; iy <18; iy++) { //모든 x에 대해서
                //1줄당 평균치 하트갯수 지정                 '<='가 1개더하트가 배치되서 '<'바꿈
                var xcnt = BonusHeartPerLine + (RemainAccum<BonusHeartRemain?1:0);

                //1줄을 블록만 콜렉션
                for (var ix = 0; ix <11; ix++) {
                    if(bbLevel[iy][ix]!==-1) BonusXArr.push(ix);
                }
                //1줄 콜렉션 섞기
                BonusXArr = Phaser.ArrayUtils.shuffle(BonusXArr);
                //지정하트갯수보다 블록수가 적으면, 블럭수에 맞춘다
                if(BonusXArr.length<xcnt) xcnt = BonusXArr.length;
                
                for (var ix = 0; ix <xcnt; ix++) {
                    xidx=BonusXArr[ix];
                    if(bbLevel[iy][xidx]!==-1){

                        bbLevel[iy][xidx].loadTexture('atlas_bb-0', 'block_heart.png');
                        bbLevel[iy][xidx].z_isheart = true;
                        BonusLocated+=1; //첫배치
                        if(dm) console.log("BonusLocated(first):"+BonusLocated +", xy:"+xidx+","+iy);
                        // BonusGridIdx+=1;
                        // if(BonusGridIdx>=11) BonusGridIdx=0;
                    }
                }//ix
                RemainAccum+=1;//첫배치
            }//iy
            //----------하트를 심을 블록들을 고른다.--끝---------첫 전체레벨처리
            
            // //블록 저장 그리드 초기화
            // for (_i = 0; _i < gridszx; _i++) {
            //     for (_j = 0; _j < gridszy; _j++) {
            //         bbLevel[_i][_j] = -1;
            //         bbLevel_source[_i][_j] = -1;
            //     }
            // }
        }
        //보너스모드 하드 랜덤 생성--끝------------------------------------------
        
        //reset items
        //this.items.destroy();
        //this.items = this.game.add.group();
        this.bricksWithItems = [];//블록이름만 저장 //dropOneItems: 에서 랜덤아이템제공
        //clearTimeout(this.recoverTimeout); //줄어든 패들 원상태로

        //---랜덤용 아이템 배치(아이템이름없이 블록에 배치만 한다)------------------------------
        //아이템확률,아이템확율,
        //일반모드인경우
        var _per=modeOption[0]===2?ItemsPercentBonus:ItemsPercent;
        dropItemLimit = float2int(_tilecount_colored * _per) + 1;

        //var dropItemLimit = float2int(_tilecount_colored);
        if(dm) console.log("dropItemLimit:"+dropItemLimit);

        //전체블록을 템갯수만큼 나눈 공간(블록갯수)
        var brickPartLimit = Math.floor(this.tiles.countLiving() / dropItemLimit); // 15/3==>5 //블록 갯수에 비례해서 많아지게

        //템1공간의 시작 지점
        var brickStartLimit = 1;                                                 //초기화==1  //루핑끝나면 16으로

        //템1공간의 끝나는 지점(처음끝은 첫공간의 크기로)
        var brickEndLimit = brickPartLimit;                                      //초기화==5  //루핑끝나면 20으로

        //+brickStartLimit
        //|              +brickEndLimit
        //|              |
        //+---템1공간-----+    +----템2공간----+    +----템3공간----+    +...
        //+-dropItemLimit-+   +-dropItemLimit-+    +-dropItemLimit-+   +...

        //아이템 갯수만큼, 템1공간을 1번씩 나아긴다.
        for (var dropCount = 0; dropCount < dropItemLimit; dropCount++) {        //3번 반복
            //랜덤생성시  처음,끝(둘다포함) 범위로 지정
            var randomBrick = this.getRandomInt(brickStartLimit, brickEndLimit);  //입력1,5-->2리턴
            //아이템드롭//아이템획득//리스트
            this.bricksWithItems.push("brick" + randomBrick);                          //"blick2"저장 //블록이름만 저장 //dropOneItems: 에서 랜덤아이템제공

            brickStartLimit = brickEndLimit + 1;                                 // 5+1 -->6 //다음구간 시작인덱스
            brickEndLimit += brickPartLimit;                                     // 5+5 -->10//다음구간 끝 인덱스
        }

        if(dm) console.log("-----------------------------------bricksWithItems.len:"+this.bricksWithItems.length);
        if(dm) console.log("-----------------------------------bricks.len:"+_len);

        //---랜덤용 아이템 배치(아이템이름없이 블록에 배치만 한다)------------------------------
    },

    createTile1 : function( _xg, _yg, _acolor ){
        var xp = strtx + (_xg * szx);
        var yp = strty + (_yg * szy);
        var _atile1 = this.tiles.create(
            xp,
            yp,
            'atlas_bb-0',
            (_acolor === 0 ? 'block_white.png'
                : _acolor === 1 ? 'block_crimson.png'
                    : _acolor === 2 ? 'block_red.png'		//오렌지
                        : _acolor === 3 ? 'block_yellow.png'
                            : _acolor === 4 ? 'block_green.png'
                                : _acolor === 5 ? 'block_lightblue.png'     //하늘색
                                    : _acolor === 6 ? 'block_deepblue.png'     //파랑
                                        : _acolor === 7 ? 'block_pupple.png'  //보라
                                            : _acolor === 8 ? 'block_choco_3.png'   //하드
                                                : _acolor === 9 ? 'block_gold.png'    //무적
                                                    : 'block_white.png')
        );
        _atile1.z_initx = xp;
        _atile1.z_inity = yp;
        _atile1.z_x=_xg; //그리드(타일)좌표 입력
        _atile1.z_y=_yg;

        _atile1.z_color = _acolor;
        _atile1.z_step = 0;
        _atile1.body.bounce.set(1);
        _atile1.body.immovable = true;
        _atile1.anchor.setTo(0.5,0.5); //피봇-->중심으로
        _atile1.body.enable=true;

        if(_acolor === 9 ) {
            this.countgold += 1;
            this.countgoldcur += 1;
        } //무적블록수 갯수 합산

        //칼라블록 개수 계산 //아이템 렌덤생성시 사용
        //if(_acolor!==0 || _acolor!==8) _tilecount_colored+=1;

        _atile1.name = 'brick' + (new Date());

        //공통 애니 설정
        //'block_bomb_white.png',
        _atile1.animations.add('kill', [//보통블록터짐애니
            // 'block_bomb_type_2_1.png',
            // 'block_bomb_type_2_2.png',
            // 'block_bomb_type_2_3.png',
            // 'block_bomb_type_2_4.png',
            // 'block_bomb_type_2_5.png',
            // 'block_bomb_type_2_6.png',
            // 'block_bomb_type_2_7.png',
            // 'block_bomb_type_2_8.png',
            // 'block_bomb_type_2_9.png',
            // 'block_bomb_type_2_10.png'
            'block_bomb_1.png',
            'block_bomb_2.png',
            'block_bomb_3.png',
            'block_bomb_4.png',
            'block_bomb_5.png',
            'block_bomb_6.png',
            'block_bomb_7.png',
            'block_bomb_8.png',
            'block_bomb_9.png',
            'block_bomb_10.png'
        ]);
        _atile1.z_onkill = function () {
            var emitter = this.game.add.emitter(0, 0, 100);
            emitter.makeParticles('brick-dust');
            emitter.x = _atile1.x + this.width * 0.5;
            emitter.y = _atile1.y + this.height * 0.5;
            emitter.minParticleSpeed.setTo(-50 * SCALE, -50 * SCALE);
            emitter.maxParticleSpeed.setTo(50 * SCALE, 50 * SCALE);
            emitter.minParticleScale = 1 * SCALE;
            emitter.maxParticleScale = 1.5 * SCALE;
            emitter.start(true, 300, null, 10);

            this.game.time.events.add(2000, function () {
                    emitter.destroy();
                }
            );
        };

        //_tile1.animations.add('fire', ['block_fire.png', 'block_fire_75.png', 'block_fire_50.png', 'block_fire_25.png']);
        _atile1.animations.add('fire', [ //불타는 블록애니
            'block_bomb_fire_1.png',
            'block_bomb_fire_2.png',
            'block_bomb_fire_3.png',
            'block_bomb_fire_4.png',
            'block_bomb_fire_5.png',
            'block_bomb_fire_6.png',
            'block_bomb_fire_7.png'
        ]);

        _atile1.animations.add('killpoint', [//총알터짐애니
            'shot_bomb_ani_1.png',
            'shot_bomb_ani_2.png',
            'shot_bomb_ani_3.png'
        ]);

        _atile1.animations.add('kill_choco', [ //초코 블록애니
            'choco_block_bomb_1.png',
            'choco_block_bomb_2.png',
            'choco_block_bomb_3.png',
            'choco_block_bomb_4.png',
            'choco_block_bomb_5.png',
            'choco_block_bomb_6.png',
            'choco_block_bomb_7.png',
            'choco_block_bomb_8.png',
            'choco_block_bomb_9.png',
            'choco_block_bomb_10.png'
        ]);

        //타일속성에 따라 처리
        switch (_acolor) {
            case 8:
                _atile1.animations.add('show0', ['block_bomb_white.png','block_choco_2.png']);
                _atile1.animations.add('showdefault', ['block_choco_3.png']); //레벨11번(인덱스10)
                //sprite.animations.currentAnim.onComplete.add(function () {	console.log('animation complete');}, this);
                //var anim = m.animations.play('mole_go_out', 24, false);       anim.onComplete.add(this.stopBunny, this);},
                _atile1.animations.add('show1', ['block_bomb_white.png', 'block_choco_1.png']);
                //anim.onComplete.add(_tile1.kill(), this);
                _atile1.z_step = 2;//초기화
                break;
            case 9:
                _atile1.animations.add('show0', [ //레벨21번(인덱스20) 무적
                    'block_gold.png',
                    'block_gold_ani_1.png',
                    //'block_gold_ani_2.png',
                    'block_gold_ani_3.png',
                    //'block_gold_ani_4.png',
                    'block_gold_ani_5.png',
                    //'block_gold_ani_6.png',
                    'block_gold_ani_7.png',
                    //'block_gold_ani_8.png',
                    'block_gold_ani_9.png',
                    'block_gold.png'
                ]);
                break;

            default:
                break;
        }//switch (_acolor)
        return _atile1;
    },

    createTileScore: function ( grp ) {
        var _i=0;
        var _len= 198;
        var _tilescore1;
        for (_i = 0; _i < _len; _i++) {
            _tilescore1 = uigame.add.text(0, 0, "", style_bb_floatingscore, grp);
            _tilescore1.anchor.setTo(0.5,0.5);

            var xoff = uigame.rnd.integerInRange(-300, 300);
            var yoff = uigame.rnd.integerInRange(-300, 300);
            _tilescore1.position.setTo(xc+xoff,yc+yoff);

        }//for (_i
        grp.forEach(function (n) {
            if (n.alive) {
                n.kill();
            }
        }, this);
    },
    gotoLevel: function (idx) {
        curLevel = idx;
        curLevelFake = curLevel + 1 - Math.floor(curLevel / LV4x4);
        if(dm) console.log("curLevel:"+curLevel+",  curLevelFake:"+curLevelFake);

        if (idx < 0) curLevel = 0;
        else if (idx >= bubble_levels.length) curLevel = bubble_levels.length - 1;
        else curLevel = idx;

        this.copyLevel(curLevel); // 메시브 gotolevel
        this.resetBalls();      //사용안함
        this.initLevelVars();
        this.resetCountDown(); //없음
        this.resetBullets();

        this.setPadSizeDirect(PadSize.normal);//gotolevel;
        //this.levelText.content = 'level: ' + (curLevel + 1);
    },
    resetBullets: function () {
        this.bullets.callAll('kill');
        gunstate = ThreeState.none;
        PadAttr_bullet= false; //in resetBullet
        this.paddle.z_left.visible = false;
        this.paddle.z_right.visible = false;
    },

    resetCountDown: function () {
        return;

        this.countDown.revive();
        this.countDown.play("counter_three");
        this.countDownTime = 3;
        this.countDownTimeElapsed = 0;
        this.countDownsecondTick = 1;
        this.isCountDownOff = false;
    },

    //볼을 모두죽이고 1개만 살린다.
    resetBalls: function () {//볼을 전체 하이드, nextlevel,prevlevel에서 사용 //안사용
        this.balls.callAll('kill'); //피직스볼 초기화 삭제

        var aball = this.balls.getFirstDead();        //공1개를 가져오기(보이지않는다)

        aball.x = this.paddle.x;
        aball.y = this.paddle.y;

        aball.revive();
        aball.reset(xc,yc);

        this.ball = aball; //애니볼이면 //ball.animations.stop();
        this.followPaddle(); //in resetBalls

        this.ball = aball;
    },

    // reset1ballWithPaddle: function (vball, vpaddle) {
    //     //vpaddle.body.y를 사용하니 위로 올라간 위치로 나와서 수정
    //     //미친다
    //     this.ball=vball;
    //     vball.body.velocity.set(0);
    //     var x = vpaddle.x;// - vball.body.halfWidth;
    //     var y = vpaddle.y - vpaddle.body.halfHeight - vball.body.halfHeight;
    //     vball.reset( x, y );
    //
    // },

    copyBalls: function () {//공복제모드시
        this.ballInitialX = this.game.world.centerX;
        this.ballInitialY = this.paddlePosY - 16;//this.ballInitialY = this.paddle.y - 16;
        if (this.balls.countLiving() < 32) {
            //2승수로 복제하기------------------
            var px = [];
            var py = [];
            var vx = [];
            var vy = [];
            this.balls.forEachAlive(function(n) {
                px.push(n.x);
                py.push(n.y);
                var maxranx = Math.abs(n.body.velocity.x * 0.2);
                var maxrany = Math.abs(n.body.velocity.y * 0.2);
                var ranx = generateRandomNumber(-maxranx, maxranx);
                var rany = generateRandomNumber(-maxrany, maxrany);
                vx.push(n.body.velocity.x + ranx);
                vy.push(n.body.velocity.y + rany);
            }, this);
            var len;
            for(i=0, len=px.length; i<len; i++){
                var ballnew = this.balls.getFirstDead();//복제공모드
                ballnew.z_itemtype = 0;
                ballnew.reset(px[i]+1,py[i]+1);
                ballnew.body.velocity.set(vx[i],vy[i]);
            }
            //2승수로 복제하기-----------------------

            this.setBallStateDirect(this.ballstate);//공텍스쳐교체

            this.setTrails(); //25버전개조---in copyballs
        }
    },
    //스프라이트 볼 생성하고 나서, 사용
    copyBall1: function () {  //active는 복제공모드(속도 지정)을 한다.
        //위치값 초기 설정
        this.ballInitialX = this.game.world.centerX;
        this.ballInitialY = this.paddlePosY - 16;//this.ballInitialY = this.paddle.y - 16;

        //공1개를 살린다.
        var ball1 = this.balls.getFirstDead();//리스타트모드

        ball1.body.velocity.setTo(0);
        ball1.revive(); //공을 "alive"상태로
        ball1.reset(xc,yc);

        this.ball = ball1; //애니볼이면 //ball.animations.stop();
        //패들위에 위치를 잡는다
        this.followPaddle(); //in copyBall1 //t1

        this.navi.x= game.world.centerX;
        //this.navi.y= this.paddlePosY - (this.paddle.body.halfHeight/2) - this.ball.body.halfHeight;
        this.navi.y= this.paddlePosY - this.paddle.body.halfHeight -this.ball.body.halfHeight;
        //공1개를 살린다.
        this.setBallStateDirect(BallType.normal_n);
        gunstate = ThreeState.none;

        this.setTrails();//25버전개조---in copyBall1

    },
    initTrails: function () {
        this.trails.z_idxacum  = [0,0,0,0,0];//누적인덱스// 생성시 누적 위치가 없으면 안나오게
        this.trails.z_idxoff  = 0;//현재인덱스
        this.trails.z_idxaddstep= 1;
        this.trails.z_trailstep    = 5;
        //this.trails.z_len     =15;
        this.trails.z_ballcnt = 0;

        this.changeTrails(BallType.normal_n);
        //this.trails.z_type = BallType.normal_n;

    },
    setTrails: function () {
        //25버전개조---   개조 한것을 볼갯수에 맞게 트레일이 보이게 세팅한다.
        //var _t=0;
        //현재 트레일 가지 개수를 저장
        this.trails.z_ballcnt = this.balls.countLiving();
        if(this.trails.z_ballcnt>5 || this.trails.z_ballcnt===0){
            //공이 없거나 5개 넘으면 트레일 숨기기
            //25버전개조 - 전부 하이드
            for (var k = 0; k < 5; k++) {
                for (var i = 0; i < 5; i++) {
                    if(this.trails.z_obj[k][i].visible === true) {
                        this.trails.z_obj[k][i].visible = false;
                    }//트레일a가 보이면 숨기기
                }//5번 반복
            }//5번 반복
        }else {

            //트레일1줄의 공갯수
            this.trails.z_trailstep = this.trails.z_ballcnt === 1 ? 5
                : this.trails.z_ballcnt === 2 ? 4
                : this.trails.z_ballcnt === 3 ? 3
                : this.trails.z_ballcnt === 4 ? 2
                : this.trails.z_ballcnt === 5 ? 1
                : 0;
            //this.trails.z_trailstep = 5-(this.trails.z_ballcnt-1);//공1개면 5, 공5개면 1

            this.hideTrails();

            //25버전개조 - 해당트레일만 보이게
            for (var k = 0; k < this.trails.z_ballcnt; k++) {
                //for (var i = 0; i < this.trails.z_trailstep; i++) {
                for (var i = 0; i < 5; i++) {
                    if(this.trails.z_obj[k][i].visible === false) {
                        //if(i===0) this.trails.z_obj[k][i].tint = ColorSet.red; //25버전개조--- 빨강색
                        //if(i===1) this.trails.z_obj[k][i].tint = ColorSet.blue; //25버젼개조--- 파랑색
                        this.trails.z_obj[k][i].alpha = 0.25-(i*0.05);
                        this.trails.z_obj[k][i].visible = true;
                        this.trails.z_obj[k][i].position.setTo(-100,-100);
                    }//트레일a가 보이면 숨기기
                }//5번 반복
            }//5번 반복

        }//볼카운트가 5이하면
    },
    hideTrails: function () {
        //25버전개조 - 트레일 전부 하이드
        for (var k = 0; k < 5; k++) {
            for (var i = 0; i < 5; i++) {
                if(this.trails.z_obj[k][i].visible === true) {
                    this.trails.z_obj[k][i].visible = false;
                }//트레일a가 보이면 숨기기
            }//5번 반복
        }//5번 반복
    },
    changeTrails: function (val_state) {//25버전개조 - 트레일 전부 텍스쳐 교체 ==setBallStateDirect(
        if(this.trails.z_type === val_state) return;
        this.trails.z_type = val_state;
        //-------------------------------------------------------------------
        switch (val_state) {
            //노말--------------------------------------
            case BallType.normal_n:
                for (var k = 0; k < 5; k++) {
                    for (var i = 0; i < 5; i++) {
                        this.trails.z_obj[k][i].loadTexture('atlas_bb-0', 'ball_normal_middle.png');
                    }
                }
                break;
            case BallType.normal_s:
                for (var k = 0; k < 5; k++) {
                    for (var i = 0; i < 5; i++) {
                        this.trails.z_obj[k][i].loadTexture('atlas_bb-0', 'ball_normal_small.png');
                    }
                }
                break;
            case BallType.normal_b:
                for (var k = 0; k < 5; k++) {
                    for (var i = 0; i < 5; i++) {
                        this.trails.z_obj[k][i].loadTexture('atlas_bb-0', 'ball_normal_big.png');
                    }
                }
                break;
            //통과 --------------------------------------
            case BallType.through_n:
                for (var k = 0; k < 5; k++) {
                    for (var i = 0; i < 5; i++) {
                        this.trails.z_obj[k][i].loadTexture('atlas_bb-0', 'ball_normal_middle_special.png');
                    }
                }
                break;
            case BallType.through_s:
                for (var k = 0; k < 5; k++) {
                    for (var i = 0; i < 5; i++) {
                        this.trails.z_obj[k][i].loadTexture('atlas_bb-0', 'ball_normal_small_special.png');
                    }
                }
                break;
            case BallType.through_b:
                for (var k = 0; k < 5; k++) {
                    for (var i = 0; i < 5; i++) {
                        this.trails.z_obj[k][i].loadTexture('atlas_bb-0', 'ball_normal_big_special.png');
                    }
                }
                break;
            //폭발--------------------------------------
            case BallType.bomb_n:
                for (var k = 0; k < 5; k++) {
                    for (var i = 0; i < 5; i++) {
                        this.trails.z_obj[k][i].loadTexture('atlas_bb-0', 'ball_fire_middle_ani_1.png');
                    }
                }
                break;
            case BallType.bomb_s:
                for (var k = 0; k < 5; k++) {
                    for (var i = 0; i < 5; i++) {
                        this.trails.z_obj[k][i].loadTexture('atlas_bb-0', 'ball_fire_small_ani_1.png');
                    }
                }
                break;
            case BallType.bomb_b:
                for (var k = 0; k < 5; k++) {
                    for (var i = 0; i < 5; i++) {
                        this.trails.z_obj[k][i].loadTexture('atlas_bb-0', 'ball_fire_big_ani_1.png');
                    }
                }
                break;
            //관통 + 폭발--------------------------------------
            case BallType.throughbomb_n:
                for (var k = 0; k < 5; k++) {
                    for (var i = 0; i < 5; i++) {
                        this.trails.z_obj[k][i].loadTexture('atlas_bb-0', 'ball_fire_middle_special.png');
                    }
                }
                break;
            case BallType.throughbomb_s:
                for (var k = 0; k < 5; k++) {
                    for (var i = 0; i < 5; i++) {
                        this.trails.z_obj[k][i].loadTexture('atlas_bb-0', 'ball_fire_small_special.png');
                    }
                }
                break;
            case BallType.throughbomb_b:
                for (var k = 0; k < 5; k++) {
                    for (var i = 0; i < 5; i++) {
                        this.trails.z_obj[k][i].loadTexture('atlas_bb-0', 'ball_fire_big_special.png');
                    }
                }
                break;
            ///-------------------
            default:
                for (var k = 0; k < 5; k++) {
                    for (var i = 0; i < 5; i++) {
                        this.trails.z_obj[k][i].loadTexture('atlas_bb-0', 'ball_normal_middle.png');
                    }
                }
                break;
        }//switch
        //-------------------------------------------------------------------
    },
    onsavePosTrails: function() {
        // 지정된 무조건 공위치 저장
        if(this.balls.countLiving()>5) return;
        this.balls.forEachAlive(function(n) {
            if(n.z_posidx===-1) {
                n.z_posarr[0][0] = n.x;
                n.z_posarr[0][1] = n.y;
                n.z_posidx=0;
                n.z_accum=0;
            }else{
                n.z_posarr[n.z_posidx][0] = n.x;
                n.z_posarr[n.z_posidx][1] = n.y;
                n.z_posidx+=1;
                n.z_accum+=1;
                if(n.z_posidx>4) n.z_posidx=0;
            }
        }, this);
        //  console.log("--");
    },
    onupdateSetPosTrail: function() {
        //----------------

        if(this.balls.countLiving()>5) return;
        var old04=[-1,-1,-1,-1,-1];
        var old0;
        var old1;
        var old2;
        var old3;
        var old4;
        this._i;
        this._j=0;//-->trailcount
        this._k=0;//old0
        this._m=0;//old1
        this._n=0;//old2
        this._o=0;//old3
        this._p=0;//old4
        var _cnt=0;
        this.balls.forEachAlive(function(n) { //볼의 갯수만큼
            //if(_cnt>this.trails.z_trailstep-1) return;//잘못된 연산

            old04[0]=n.z_posidx-1;
            if(old04[0]<0) old04[0]=5+old04[0];
            old04[1]=n.z_posidx-2;
            if(old04[1]<0) old04[1]=5+old04[1];
            old04[2]=n.z_posidx-3;
            if(old04[2]<0) old04[2]=5+old04[2];
            old04[3]=n.z_posidx-4;
            if(old04[3]<0) old04[3]=5+old04[3];
            old04[4]=n.z_posidx-5;
            if(old04[4]<0) old04[4]=5+old04[4];

            for(this.j=0; this.j<5; this.j++) {//트레일 최대 5단계
                if (n.z_accum === -1) {
                    this.trails.z_obj[_cnt][this.j].x = -100;
                    this.trails.z_obj[_cnt][this.j].y = -100;
                } else if (n.z_accum === 0) {
                    if(this.j===0){
                        this.trails.z_obj[_cnt][this.j].x = n.z_posarr[old04[this.j]][0];
                        this.trails.z_obj[_cnt][this.j].y = n.z_posarr[old04[this.j]][1];
                    }else{
                        this.trails.z_obj[_cnt][this.j].x = -100;
                        this.trails.z_obj[_cnt][this.j].y = -100;
                    }
                } else if (n.z_accum === 1) {
                    if(this.j<=1) {
                        this.trails.z_obj[_cnt][this.j].x = n.z_posarr[old04[this.j]][0];
                        this.trails.z_obj[_cnt][this.j].y = n.z_posarr[old04[this.j]][1];
                    }else{
                        this.trails.z_obj[_cnt][this.j].x = -100;
                        this.trails.z_obj[_cnt][this.j].y = -100;
                    }
                } else if (n.z_accum === 2) {
                    if(this.j<=2) {
                        this.trails.z_obj[_cnt][this.j].x = n.z_posarr[old04[this.j]][0];
                        this.trails.z_obj[_cnt][this.j].y = n.z_posarr[old04[this.j]][1];
                    }else{
                        this.trails.z_obj[_cnt][this.j].x = -100;
                        this.trails.z_obj[_cnt][this.j].y = -100;
                    }
                } else if (n.z_accum === 3) {
                    if(this.j<=3) {
                        this.trails.z_obj[_cnt][this.j].x = n.z_posarr[old04[this.j]][0];
                        this.trails.z_obj[_cnt][this.j].y = n.z_posarr[old04[this.j]][1];
                    }else{
                        this.trails.z_obj[_cnt][this.j].x = -100;
                        this.trails.z_obj[_cnt][this.j].y = -100;
                    }
                } else if (n.z_accum === 4) {
                    if(this.j<=4) {
                        this.trails.z_obj[_cnt][this.j].x = n.z_posarr[old04[this.j]][0];
                        this.trails.z_obj[_cnt][this.j].y = n.z_posarr[old04[this.j]][1];
                    }else{
                        this.trails.z_obj[_cnt][this.j].x = -100;
                        this.trails.z_obj[_cnt][this.j].y = -100;
                    }
                } else if (n.z_accum >= 5) {
                    if(this.j<this.trails.z_trailstep) { //25개버전--- 전체 작동하는 중
                        this.trails.z_obj[_cnt][this.j].x = n.z_posarr[old04[this.j]][0];
                        this.trails.z_obj[_cnt][this.j].y = n.z_posarr[old04[this.j]][1];
//                        this.trails.z_obj[_cnt][old04[this.j]].x = n.z_posarr[old04[this.j]][0];
//                        this.trails.z_obj[_cnt][old04[this.j]].y = n.z_posarr[old04[this.j]][1];
                    }else{
                        if(this.trails.z_obj[_cnt][this.j].y !== -100) {
                            this.trails.z_obj[_cnt][this.j].x = -100;
                            this.trails.z_obj[_cnt][this.j].y = -100;
                        }
                    }
                }

            }
            _cnt+=1;
        }, this);
        //----------------
    },
    dropOneItems: function (dropItemInitialX, dropItemInitialY) { //아이템 떨구기 //아이템 항목지정하는것
        var itmidx = uigame.rnd.integerInRange(1, ItemType.length - 1); //랜덤(0~3포함)

        //아이템드롭하기//속성랜덤
        if(modeOption[0]===2){
            //보너스스테이지
            itmidx = uigame.rnd.weightedPick([1, 2, 3, 7]);
        }else {
            if (curLevelFake >= 1 && curLevelFake <= 9) {
                itmidx = uigame.rnd.weightedPick([1, 2, 3, 4, 5, 6]);
            } else if (curLevelFake === 10) {
                itmidx = uigame.rnd.weightedPick([2, 3, 9]);
            // } else if (curLevelFake === 100 || curLevelFake === 200 || curLevelFake === 300) {
            //     return;
            } else { //11~319
                //기본랜덤 그대로
            }
        }
        // case 1:         //1 //패들 확대 (1단계씩)
        // case 2:         //2 //공 복사
        // case 3:         //3 //총알모드
        // case 4:         //4 //접착모드
        // case 5:         //5 //블록 관통
        // case 6:         //6 //공 불덩이 (폭발)
        // case 7:         //7 //공 확대 (1단계씩)
        // case 8:         //8 //공 느리게 (1단계씩)
        // case 9:         //9 //블록 hp=1
        // case 10:         //10//패들 축소
        // case 11:        //11//패들 축소(강제)
        // case 12:        //12//공 빠르게(4단계)
        // case 13:        //13//공 축소
        // case 14:        //14//죽기

        //itmidx = uigame.rnd.weightedPick([1,2,3,4]);
        //itmidx = uigame.rnd.weightedPick([7,6,9]);//공확대+불공+hp1
        //itmidx = uigame.rnd.weightedPick([12]);   //공속빠르게
        //itmidx = uigame.rnd.weightedPick([10,1]); //패들축소+패들확대
        //itmidx = uigame.rnd.weightedPick([2]);    //공복사만
        //itmidx = uigame.rnd.weightedPick([3,5,6]);//총알+관통+불공
        //itmidx = uigame.rnd.weightedPick([5,6]);  //관통+불공만
        //itmidx = uigame.rnd.weightedPick([4]);    //접착만
        //itmidx = uigame.rnd.weightedPick([3]);    //총알만
        //itmidx = uigame.rnd.weightedPick([5]);    //관통만
        //itmidx = uigame.rnd.weightedPick([7]);    //빅볼만

        if(modeOption[0]===2) {                      //보너스모드면,  //폭발,관통 아이템 중지
            if (itmidx === 6 || itmidx === 5) itmidx = 1;
        }else if( modeOption[0]===1){                //드롭모드       //폭발 중지
            if(itmidx===6) itmidx=1;
        }else if(this.mskllen>0 || this.mskrlen>0){  //수평이동모드 //폭발 아이템 중지
            if(itmidx===6) itmidx=1;
        }

        var dropItem;
        //var xp=this.getRandomInt(32, this.game.world.width - 64);
        //var yp = -32;

        //랜덤x 포지션//아이템 떨이질때
        var offxmax = this.tile1width * 0.5;
        var offx = generateRandomNumber(-offxmax, offxmax);
        var offymax = this.tile1height * 0.5;
        var offy = generateRandomNumber(-offymax, offymax);

        if (dropItemInitialY + offy > 1280 - (this.tile1width*1.5)) {
            dropItemInitialY = 1280;
            offy = -(this.tile1width*1.5);
        } else if (dropItemInitialY + offy < (this.tile1width*1.5)){
            dropItemInitialY = 0;
            offy = this.tile1width*1.5;
        }
        dropItem = this.game.add.sprite(dropItemInitialX + offx, dropItemInitialY+offy,
            'atlas_bb-0',//'tiles',
            ItemType[itmidx]//typeFrame
        );
        //dropItem.enableBody = true;
        //dropItem.physicsdBodyType = Phaser.Physics.ARCADE;
        dropItem.anchor.set(0.5);
        dropItem.checkWorldBounds = true;
        this.game.physics.enable(dropItem, Phaser.Physics.ARCADE);
        dropItem.body.collideWorldBounds = true;
        dropItem.body.bounce.set(1);
        //dropItem.events.onOutOfBounds.add(this.helpers.death, this);

        var tempCount = 0;
        if (this.items.countLiving() > 0) {
            tempCount = this.items.countLiving();
        }
        dropItem.name = 'item' + (tempCount + 1);

        //custom property
        dropItem.itmidx = itmidx;

        // dropItem.body.x = dropItemInitialX;
        // dropItem.body.y = dropItemInitialY;
        dropItem.body.velocity.y = 300;

        TweenMax.killTweensOf(dropItem);
        TweenMax.fromTo( dropItem.scale,
            0.15, //time
            {
                x: 1,
                y: 1,

            }, { //메달트윈
                x: 0.75,
                y: 0.75,
                ease: Linear.easeNone,
                yoyo:true,
                repeat:-1,
                //onComplete: fnEnd,
                //onComplete: function(){ runFadeinScale(con);},
                //onStart: function(){ },
                //onUpdate: function(){},
                //delay: 0.2
            }
        );
        //dropItem.animations.add('killpoint', ['shot_bomb_ani_1.png', 'shot_bomb_ani_2.png', 'shot_bomb_ani_3.png']);

        this.items.add(dropItem);

    },
    setBallVelocity: function (tempBall, thisball) { //공1개의 xy속도 지정한다. //복제시
        // //tempBall.body.velocity.x = this.initialDirection * this.ballSpeed;
        // //tempBall.body.velocity.y = this.ballSpeed;
        // var maxranx = Math.abs(thisball.body.velocity.x * 0.2);
        // var maxrany = Math.abs(thisball.body.velocity.y * 0.2);
        // var ranx = generateRandomNumber(-maxranx, maxranx);
        // var rany = generateRandomNumber(-maxrany, maxrany);
        // tempBall.body.velocity.x = thisball.body.velocity.x + ranx;
        // tempBall.body.velocity.y = thisball.body.velocity.y + rany;

    },
    ballUpdate: function (ball) { //113버젼// update안에서 this.balls.forEachAlive안에서 실행된 함수
        //
        //     //볼이 텍스쳐 애니//ball.animations.play('rotate');
        //
        //     //지하영역으로 가면
        //     if (ball.body.y > this.game.world.height + ball.body.height) {
        //
        //         ball.body.x = this.ballInitialX;
        //         ball.body.y = this.ballInitialY;
        //         ball.body.velocity.x = 0;
        //         ball.body.velocity.y = 0;
        //
        //         ball.kill();
        //         this.ballsCount -= 1;
        //
        //         if (this.ballsCount <= 0) {
        //
        //             this.takeOneLifeDown();
        //
        //             //clear and reset some stuff when player drops the ball and lose a lige
        //             this.items.callAll('kill');
        //             this.padsize = PadSize.normal; //this.isPaddleNerfed = false;
        //
        //         }
        //
        //     }
        //     return;
        //     //벽충돌시 각도설정 아님
        //     //왼쪽 내부벽 충돌인식
        //     if (ball.body.x < this.wallWidth) {
        //         ball.body.x = this.wallWidth;
        //         ball.body.velocity.x *= -1;
        //     }
        //     //오른쪽 내부벽 충돌인식
        //     if (ball.body.x > this.game.world.width - this.wallWidth - ball.body.width) {
        //         ball.body.x = this.game.world.width - this.wallWidth - ball.body.width;
        //         ball.body.velocity.x *= -1;
        //     }
        //     //위쪽 내부벽 충돌
        //     if (ball.body.y < 16) {
        //         ball.body.velocity.y = Math.abs(ball.body.velocity.y);
        //     }
        //     //최고 속도 도달
        //     if (ball.body.velocity.x > this.ballMaxVel) {
        //         ball.body.velocity.x = this.ballMaxVel;
        //     }
        //     if (ball.body.velocity.y > this.ballMaxVel) {
        //         ball.body.velocity.y = this.ballMaxVel;
        // }
    },

    getRandomInt: function (min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    },
    createballsSprite: function () {
        for (var i = 0; i < 64; i++) {
            //스프라이트생성
            //var aball = this.game.add.sprite(this.ballInitialX, this.ballInitialY, "ball");
            var aball = this.game.add.sprite(this.ballInitialX, this.ballInitialY, "atlas_bb-0", "ball_normal_middle.png");
            aball.animations.add('hit_normal', ['ball_normal_middle_white.png', 'ball_normal_middle.png']);
            aball.animations.add('hit_small', ['ball_normal_small_white.png', 'ball_normal_small.png']);
            aball.animations.add('hit_big', ['ball_white_big.png', 'ball_normal_big.png']);
            aball.animations.add('fire_big', [
                'ball_fire_big_ani_1.png',
                'ball_fire_big_ani_2.png',
                'ball_fire_big_ani_3.png',
                'ball_fire_big_ani_4.png'
            ]);
            aball.animations.add('fire_normal', [
                'ball_fire_middle_ani_1.png',
                'ball_fire_middle_ani_2.png',
                'ball_fire_middle_ani_3.png',
                'ball_fire_middle_ani_4.png'
            ]);
            aball.animations.add('fire_small', [
                'ball_fire_small_ani_1.png',
                'ball_fire_small_ani_2.png',
                'ball_fire_small_ani_3.png',
                'ball_fire_small_ani_4.png'
            ]);
            aball.animations.add('killpoint', [
                'shot_bomb_ani_1.png',
                'shot_bomb_ani_2.png',
                'shot_bomb_ani_3.png'
            ]);

            //애니 테스트// aball.animations.play('fire_big', 20, true, undefined); //loop
            //애니 테스트// aball.animations.play('fire_normal', 20, true, undefined); //loop
            //애니 테스트// aball.animations.play('fire_small', 20, true, undefined); //loop

            //this.ballsize = 1;

            //var aball = this.game.add.sprite(this.ballInitialX, this.ballInitialY, "ball_other");
            aball.z_balltype = BallType.normal_n;
            aball.anchor.set(0.5);
            //물리설정
            aball.checkWorldBounds = true;
            this.game.physics.enable(aball, Phaser.Physics.ARCADE);
            aball.body.collideWorldBounds = true;
            aball.body.bounce.set(1);
            aball.x=360;
            aball.y=1000;
            aball.body.velocity.setTo(0);
            aball.events.onOutOfBounds.add(this.helpers.death, this);
            //이름설정
            aball.name = 'ball' + (i + 1);
            //25버전개조---볼1 생성시 각각 저장배열생성
            aball.z_posarr=[[0,0],[0,0],[0,0],[0,0],[0,0]];
            aball.z_posidx=-1;
            aball.z_accum=-1;
            //그룹에 등록
            this.balls.add(aball);
            aball.kill();            // 초기상태를 죽기로 변환
        }
    },
    createtrailsSprite: function () {
        //25버전개조--- 개조 시도(트레일 스프라이트 생성시)
        this.trails.z_idxacum  = [0,0,0,0,0];//누적인덱스// 생성시 누적 위치가 없으면 안나오게
        this.trails.z_idxoff  = 0;//현재인덱스
        this.trails.z_idxaddstep= 1;
        this.trails.z_trailstep    = 5;
        //this.trails.z_len     =15;
        this.trails.z_ballcnt = 0;
        this.trails.z_type = BallType.normal_n;

        this.trails.z_balls = [ //실제 공이 들어갈 배열
            null, null, null, null, null
        ];
        this.trails.z_obj=[     //트레일용 공이 들어갈 배열
            [null,null,null,null,null],
            [null,null,null,null,null],
            [null,null,null,null,null],
            [null,null,null,null,null],
            [null,null,null,null,null]
        ];
        this.trails.z_pos=[
            [[0,0],[0,0],[0,0],[0,0],[0,0]],
            [[0,0],[0,0],[0,0],[0,0],[0,0]],
            [[0,0],[0,0],[0,0],[0,0],[0,0]],
            [[0,0],[0,0],[0,0],[0,0],[0,0]],
            [[0,0],[0,0],[0,0],[0,0],[0,0]]
        ];

        for (var k = 0; k < 5; k++) {
            for (var i = 0; i < 5; i++) {
                //스프라이트생성
                var traila = this.game.add.sprite(this.ballInitialX, this.ballInitialY, "atlas_bb-0", "ball_normal_middle.png");
                traila.anchor.set(0.5);
                traila.position.setTo(360, 1000);
                traila.alpha = 0.25;
                traila.name = 'trail' + (i + 1);

                this.trails.add(traila);            //그룹에 등록

                //traill.kill();            // 초기상태를 죽기로 변환
                traila.visible = false;

                this.trails.z_obj[k][i] = traila;
                //console.log(k);
                //console.log(i);
            }
        }
    },
    createbearsGSprite: function () { //녹곰 작은곰-->큰곰으로 성장
        for (var i = 0; i < 32; i++) {
            //스프라이트생성
            var greenBear = this.game.add.sprite(0, 0, "atlas_bb-0", "jelly_80_green.png");
            greenBear.z_hitcount=0;
            greenBear.z_accum=0;
            greenBear.z_color="green";
            greenBear.animations.add('greenbearshow', [
                'mini_bear_ani_1.png',
                'mini_bear_ani_2.png',
                'mini_bear_ani_3.png',
                'mini_bear_ani_4.png',
                'mini_bear_ani_5.png',
                'mini_bear_ani_6.png',
                'mini_bear_ani_7.png',
                'mini_bear_ani_8.png',
                'mini_bear_ani_9.png',
                'mini_bear_ani_10.png',
                'mini_bear_ani_11.png',
                'mini_bear_ani_12.png',
                'mini_bear_ani_13.png',
                "jelly_80_green.png"
            ]);
            greenBear.animations.add('hit_0', [ //소
                'jelly_80_green.png',
                'jelly_80_green_w25.png',
                'jelly_80_green_w50.png',
                'jelly_80_green_w75.png',
                'jelly_80_white.png',
            ]);
            greenBear.animations.add('hit_1', [ //중
                'jelly_160_green.png',
                'jelly_160_green_w25.png',
                'jelly_160_green_w50.png',
                'jelly_160_green_w75.png',
                'jelly_160_white.png'
            ]);
            greenBear.animations.add('kill', [ //대
                'jelly_240_green.png',
                'jelly_240_green_w25.png',
                'jelly_240_green_w50.png',
                'jelly_240_green_w75.png',
                'jelly_240_white.png'
            ]);

            greenBear.animations.add('div_0', [ //분열0
                'jelly_160_white.png',
                'jelly_160_green_w75.png',
                'jelly_160_green_w50.png',
                'jelly_160_green_w25.png',
                'jelly_160_green.png',
                'jelly_160_green_w25.png',
                'jelly_160_green_w50.png',
                'jelly_160_green_w75.png',
                'jelly_160_white.png',
                'jelly_160_green_w75.png',
                'jelly_160_green_w50.png',
                'jelly_160_green_w25.png',
                'jelly_160_green.png'
            ]);
            greenBear.animations.add('div_1', [ //분열1
                'jelly_240_white.png',
                'jelly_240_green_w75.png',
                'jelly_240_green_w50.png',
                'jelly_240_green_w25.png',
                'jelly_240_green.png',
                'jelly_240_green_w25.png',
                'jelly_240_green_w50.png',
                'jelly_240_green_w75.png',
                'jelly_240_white.png',
                'jelly_240_green_w75.png',
                'jelly_240_green_w50.png',
                'jelly_240_green_w25.png',
                'jelly_240_green.png'

            ]);
            //애니 테스트 aball.animations.play('hit_normal', 15, false, undefined); //1time

            greenBear.anchor.set(0.5);
            //물리설정
            greenBear.checkWorldBounds = true;
            this.game.physics.enable(greenBear, Phaser.Physics.ARCADE);
            greenBear.body.setSize(greenBear.body.width - 50, greenBear.body.height - 50, 25*2, 25*2);
            greenBear.body.collideWorldBounds = true;
            greenBear.body.bounce.set(1);
            greenBear.events.onOutOfBounds.add(this.helpers.death, this);
            //이름설정
            greenBear.name = 'greenBear' + (i + 1);
            //그룹에 등록
            this.greenBears.add(greenBear);
            greenBear.kill();            // 초기상태를 죽기로 변환
        }
    },
    createbearsRSprite: function () { //적색곰 큰곰-->작은곰으로 성장
        for (var i = 0; i <32; i++) {
            //스프라이트생성
            var redBear = this.game.add.sprite(0, 0, "atlas_bb-0", "jelly_160_red.png");
            redBear.z_hitcount=0;
            redBear.z_accum=0;
            redBear.z_color="red";
            redBear.animations.add('redbearshow', [
                'bear_ani_1.png',
                'bear_ani_2.png',
                'bear_ani_3.png',
                'bear_ani_4.png',
                'bear_ani_5.png',
                'bear_ani_6.png',
                'bear_ani_7.png',
                'bear_ani_8.png',
                'bear_ani_9.png',
                'bear_ani_10.png',
                'bear_ani_11.png',
                'bear_ani_12.png',
                'bear_ani_13.png',
                "jelly_160_red.png"
            ]);
            redBear.animations.add('hit_0', [ //대 //적곰 히트 애니 생성
                'jelly_160_red.png',
                'jelly_160_red_w25.png',
                'jelly_160_red_w50.png',
                'jelly_160_red_w75.png',
                'jelly_160_white.png'
            ]);
            redBear.animations.add('hit_1', [ //중
                'jelly_80_red.png',
                'jelly_80_red_w25.png',
                'jelly_80_red_w50.png',
                'jelly_80_red_w75.png',
                'jelly_80_white.png'
            ]);
            redBear.animations.add('kill', [ //소
                'jelly_40_red.png',
                'jelly_40_red_w25.png',
                'jelly_40_red_w50.png',
                'jelly_40_red_w75.png',
                'jelly_40_red.png'
            ]);
            redBear.animations.add('div_0', [ //분열0
                'jelly_80_white.png',
                'jelly_80_red_w75.png',
                'jelly_80_red_w50.png',
                'jelly_80_red_w25.png',
                'jelly_80_red.png',
                'jelly_80_red_w25.png',
                'jelly_80_red_w50.png',
                'jelly_80_red_w75.png',
                'jelly_80_white.png',
                'jelly_80_red_w75.png',
                'jelly_80_red_w50.png',
                'jelly_80_red_w25.png',
                'jelly_80_red.png'
            ]);
            redBear.animations.add('div_1', [ //분열1
                'jelly_40_white.png',
                'jelly_40_red_w75.png',
                'jelly_40_red_w50.png',
                'jelly_40_red_w25.png',
                'jelly_40_red.png',
                'jelly_40_red_w25.png',
                'jelly_40_red_w50.png',
                'jelly_40_red_w75.png',
                'jelly_40_white.png',
                'jelly_40_red_w75.png',
                'jelly_40_red_w50.png',
                'jelly_40_red_w25.png',
                'jelly_40_red.png'
            ]);
            //애니 테스트 aball.animations.play('hit_normal', 15, false, undefined); //1time

            redBear.anchor.set(0.5);
            //물리설정
            redBear.checkWorldBounds = true;
            this.game.physics.enable(redBear, Phaser.Physics.ARCADE);
            redBear.body.setSize(redBear.body.width - 50, redBear.body.height - 50, 25, 25);
            redBear.body.collideWorldBounds = true;
            redBear.body.bounce.set(1);

            redBear.events.onOutOfBounds.add(this.helpers.death, this);
            //이름설정
            redBear.name = 'redBear' + (i + 1);
            //그룹에 등록
            this.redBears.add(redBear);
            redBear.kill();            // 초기상태를 죽기로 변환
        }
    },
    createbulletsSprite: function () {
        for (var i = 0; i < 64; i++) {
            //스프라이트생성
            var bullet1 = this.game.add.sprite(this.ballInitialX, this.ballInitialY, "atlas_bb-0", "shot_ed0.png");
            bullet1.anchor.set(0.5);
            bullet1.animations.add('idle', [
                'shot_ed0.png',
                'shot_ed1.png',
                'shot_ed2.png'
            ]);
            bullet1.animations.add('kill', [
                'shot_bomb_ani_1.png',
                'shot_bomb_ani_2.png',
                'shot_bomb_ani_3.png'
            ]);
            //물리설정
            bullet1.checkWorldBounds = true;
            this.game.physics.enable(bullet1, Phaser.Physics.ARCADE);
            //bullet1.body.collideWorldBounds = true;
            bullet1.body.bounce.set(1);
            bullet1.body.setSize(bullet1.width*0.5, bullet1.height*0.5, bullet1.width*0.25, bullet1.height*0.25);//총알물리크기조절
            bullet1.events.onOutOfBounds.add(this.helpers.deathbullet1, this);
            bullet1.body.mass=0.001;//총알질량
            //이름설정
            bullet1.name = 'bullet' + (i + 1);
            //그룹에 등록
            this.bullets.add(bullet1);
            //초기상태 하이드
            bullet1.kill();
        }
    },

    createBounds3Sprite: function () {
        //테두리 3개생성----
        var bounds3_top = this.game.add.sprite(0, 0, "white1x1");
        var bounds3_left = this.game.add.sprite(0, 0, "white1x1");
        var bounds3_right = this.game.add.sprite(0, 0, "white1x1");

        bounds3_top.scale.setTo(720 - 28 - 28, 28);
        bounds3_left.scale.setTo(28, 1280);
        bounds3_right.scale.setTo(28, 1280);

        bounds3_top.anchor.setTo(0.5, 1);
        bounds3_left.anchor.setTo(0, 1);
        bounds3_right.anchor.setTo(1, 1);

        bounds3_top.reset(720 * 0.5, 130);
        bounds3_left.reset(0, 1280);
        bounds3_right.reset(720, 1280);

        bounds3_top.alpha = 0.0;
        bounds3_left.alpha = 0.0;
        bounds3_right.alpha = 0.0;

        this.game.physics.enable(bounds3_top, Phaser.Physics.ARCADE);
        this.game.physics.enable(bounds3_left, Phaser.Physics.ARCADE);
        this.game.physics.enable(bounds3_right, Phaser.Physics.ARCADE);

        bounds3_top.body.immovable = true;
        bounds3_left.body.immovable = true;
        bounds3_right.body.immovable = true;

        bounds3_top.body.bounce.set(1);
        bounds3_left.body.bounce.set(1);
        bounds3_right.body.bounce.set(1);

        bounds3_top.name = "bounds3_top";
        bounds3_left.name = "bounds3_left";
        bounds3_right.name = "bounds3_right";

        this.bounds3.add(bounds3_top);
        this.bounds3.add(bounds3_left);
        this.bounds3.add(bounds3_right);
        //테두리 3개생성----

        //좌우 앏은벽 생성
        this.bounds3.sideL = uigame.add.sprite(-346+359, 640+640, "atlas_bb_ui-0", "wall_left.png");
        this.bounds3.sideL.anchor.setTo(0.5, 1);
        this.bounds3.sideL.scale.setTo(1,116);
        this.bounds3.addChild(this.bounds3.sideL); //debug_Sprite(this.bounds3.sideL);
        this.bounds3.sideR = uigame.add.sprite(346+360, 640+640, "atlas_bb_ui-0", "wall_left.png");
        this.bounds3.sideR.anchor.setTo(0.5, 1);
        this.bounds3.sideR.scale.setTo(-1,116);
        this.bounds3.addChild(this.bounds3.sideR); //debug_Sprite(this.bounds3.sideR);
    },
    createBounds4Sprite: function () {
        //테두리 3개생성----
        var bounds3_top = this.game.add.sprite(0, 0, "white1x1");
        var bounds3_left = this.game.add.sprite(0, 0, "white1x1");
        var bounds3_right = this.game.add.sprite(0, 0, "white1x1");
        var bounds3_down = this.game.add.sprite(0, 0, "white1x1"); //debug_Sprite(bounds3_down);

        bounds3_top.scale.setTo(720 - 28 - 28, 28);
        bounds3_left.scale.setTo(28, 1280);
        bounds3_right.scale.setTo(28, 1280);
        bounds3_down.scale.setTo(720 - 28 - 28, 28);

        bounds3_top.anchor.setTo(0.5, 1);
        bounds3_left.anchor.setTo(0, 1);
        bounds3_right.anchor.setTo(1, 1);
        bounds3_down.anchor.setTo(0.5, 0);

        bounds3_top.reset(720 * 0.5, 130);
        bounds3_left.reset(0, 1280);
        bounds3_right.reset(720, 1280);
        bounds3_down.reset(720 * 0.5, 786);

        bounds3_top.tint = ColorSet.orange;
        bounds3_left.tint = ColorSet.orange;
        bounds3_right.tint = ColorSet.orange;
        bounds3_down.tint = ColorSet.orange;

        bounds3_top.alpha = 0.0;
        bounds3_left.alpha = 0.0;
        bounds3_right.alpha = 0.0;
        bounds3_down.alpha = 0.0;

        this.game.physics.enable(bounds3_top, Phaser.Physics.ARCADE);
        this.game.physics.enable(bounds3_left, Phaser.Physics.ARCADE);
        this.game.physics.enable(bounds3_right, Phaser.Physics.ARCADE);
        this.game.physics.enable(bounds3_down, Phaser.Physics.ARCADE);

        bounds3_top.body.immovable = true;
        bounds3_left.body.immovable = true;
        bounds3_right.body.immovable = true;
        bounds3_down.body.immovable = true;

        bounds3_top.body.bounce.set(1);
        bounds3_left.body.bounce.set(1);
        bounds3_right.body.bounce.set(1);
        bounds3_down.body.bounce.set(1);

        bounds3_top.name = "bounds3_top";
        bounds3_left.name = "bounds3_left";
        bounds3_right.name = "bounds3_right";
        bounds3_down.name = "bounds3_right";

        this.bounds4.add(bounds3_top);
        this.bounds4.add(bounds3_left);
        this.bounds4.add(bounds3_right);
        this.bounds4.add(bounds3_down);
        //테두리 3개생성----
    },
    setBulletOffset:function () {
        switch (this.padsize){
            case PadSize.nerf:
                this.bulletx = this.gunpos[0][0];
                this.bullety = this.gunpos[0][1];
                break;
            case PadSize.normal:
                this.bulletx = this.gunpos[1][0];
                this.bullety = this.gunpos[1][1];
                break;
            case PadSize.long:
                this.bulletx = this.gunpos[2][0];
                this.bullety = this.gunpos[2][1];
                break;
            case PadSize.longa:
                this.bulletx = this.gunpos[3][0];
                this.bullety = this.gunpos[3][1];
                break;
            case PadSize.longaa:
                this.bulletx = this.gunpos[4][0];
                this.bullety = this.gunpos[4][1];
                break;
            default:
                this.bulletx = this.gunpos[1][0];
                this.bullety = this.gunpos[1][1];
                break;
        }
    },

    //2.발사 이벤트처리 메소드 함수
    shootBullet: function () {//총알발사
        if (this.lastBulletShotAt === undefined) this.lastBulletShotAt = 0;// 바로전딜레이타임 변수 초기화
        if (this.game.time.now - this.lastBulletShotAt < this.SHOT_DELAY) return;// 딜레이 미만이면 거부
        this.lastBulletShotAt = this.game.time.now;// 바로전딜레이타임 변수에 현재 시간 저장
        //bullet1
        var bullet = this.bullets.getFirstDead();//킬상태인 총알 가져오기
        if (bullet === null || bullet === undefined) return;// 총알상태가 이상하면 거부
        bullet.revive();// 총알을 "alive"상태로
        bullet.checkWorldBounds = true;//총알은 월드를 벗어나면 kill상태가 된다. phaser가 플래그를 통해 관리하고 잇다
        bullet.outOfBoundsKill = true;//내가 따로 월드좌표를 이용해서 kill상태로 할수있다.
        bullet.reset( this.paddle.x + this.bulletx, this.paddle.y + this.bullety ); //총구 위치로
        bullet.body.enable = true; //총알쏠때 true
        bullet.body.velocity.x = 0;//발사
        bullet.body.velocity.y = -this.BULLET_SPEED;
        bullet.animations.play('idle', 25, true, undefined); //loop
        //총알소환

        //bullet2
        var bullet2 = this.bullets.getFirstDead();//킬상태인 총알 가져오기
        if (bullet2 === null || bullet2 === undefined) return;// 총알상태가 이상하면 거부
        bullet2.revive();// 총알을 "alive"상태로
        bullet2.checkWorldBounds = true;//총알은 월드를 벗어나면 kill상태가 된다. phaser가 플래그를 통해 관리하고 잇다
        bullet2.outOfBoundsKill = true;//내가 따로 월드좌표를 이용해서 kill상태로 할수있다.
        bullet2.reset( this.paddle.x - this.bulletx, this.paddle.y + this.bullety); //총구 위치로
        bullet2.body.enable = true; //총알쏠때 true
        bullet2.body.velocity.x = 0;//발사
        bullet2.body.velocity.y = -this.BULLET_SPEED;
        bullet2.animations.play('idle', 25, true, undefined); //loop
        //총알소환
        if(kData.bSoundSE) SE_Shot.play(); //총알,미사일 발사 소리
    },
    //bb----------------------------------------------------------->>
    destroy: function () {
        //console.log("----MassiveController destroy!!----");

        this.game = null;
        this.gameState = null;
        this.utilities = null;
        this.vehicles = null;
        this.cachedVehicles = null;
        this.cachedBoosters = null;
        this.vehicleSpawnList = null;
        this.initialBike = null;
        this.introTruck = null;
        this.tmpVehicle = null;
        this.lanesInUse = null;
        this.availableLanes = null;

        //----매시브제거--------------------------
        this.spawncnt  = null;
        this.updatecnt  = null;
        this.game  = null;
        this.h  = null;
        //this.massiveController.gameState  = null;
        this.utilities  = null;
        this.targetxy  = null;
        this.RedorGreen = null;
        this.prev = null;
        this.last = null;
        this.dirc = null;
        this.dirr = null;

        this.mskl = null;
        this.mskr = null;
        this.mskllen = null;
        this.mskrlen = null;
        this.msklmax = null;
        this.mskrmax = null;
        this.mskloff = null;
        this.mskroff = null;
        this.mskldir = null;
        this.mskrdir = null;

        this._mskx = null;
        this._msky = null;
        this._mxobj = null;
        this._mski = null;

        this._i = null;
        this._j = null;
        this._k = null;
        this._m = null;
        this._n = null;
        this._o = null;
        this._p = null;
        this._pos = null;
        this._ai = null;
        this._aj = null;

        this._tmptile = null;
        this._tmpcolor = null;
        this._ri = null;
        this._rk = null;

        this._xa = null;
        this._xb = null;
        this._ya = null;
        this._yb = null;
        this._cntliving = null;

        this.ball.destroy(true);
        this.paddle.destroy(true);
        this.paddlePosY = null;
        this.attrTimer = null;
        this.padatt = null;
        this.padsize = null;
        this.padsizeold = null;
        this.ballstate = null;
        this.tiles.destroy(true);
        this.introboxcap = null;
        console.log("---remove");
        if(typeof this.stageText === 'undefined' || this.stageText === null) return;
        this.stageText.destroy(true);
        this._sideblk = null,
        this.uiCombo.destroy(true);

        //this.massiveController.background.destroy(true);
        this.ballOnPaddle = null;
        this.ballOnPaddleTweening = null;
        this.navi.destroy(true);
        this.DtSec  = null;

        this.countDownTime = null;
        this.countDownTimeElapsed = null;
        this.countDondTick = null;
        this.isCountDownOff = null;
        this.paddleNerfTime = null;

        //this.massiveController.bricks = null;
        this.brickCount = null;
        this.bricksWithItems=[];
        this.dropItemLimit = null;
        this.tile1width = null;
        this.tile1height = null;
        this.balls.destroy(true);
        this.trails.destroy(true);
        this.ballInitialX = null;
        this.ballInitialY = null;

        this.ballMaxVel = null;

        this.redbeardelaytimer = null;
        this.redbeardelaymax = null;

        this.redBearVel = null;
        this.redBears.destroy(true);
        this.redbeartimer = null;

        this.greenBearVel = null;
        this.greenBears.destroy(true);
        this.greenbeartimer = null;

        this.bounds3.destroy(true);
        this.boundLeftOffsetByPaddle = null;
        this.boundRightOffsetByPaddle = null;

        this.fixedballs=[];

        this.bullets.destroy(true);
        this.SHOT_DELAY = null;
        this.BULLET_SPEED = null;
        this.lastBulletShotAt = null;


        this.gunpos = null;
        this.bulletx = null;
        this.bullety = null;
        this.temp_delete_dup_count = null;

        this.releasetimer = null;
        this.releasetimemax = null;
        this.countgold = null;
        this.countgoldcur = null;

        this.se_brickDeath = null;
        this.se_powerdown = null;
        this.se_powerup = null;
        this.se_recover = null;

        this.defaultTextOptions = null;

        this.boldTextOptions = null;
    }

};
//MassiveController끝

BGController = function (game) {
    this.updatecnt = 0;
    this.game = game;
    this.gameState = game.state.states[game.state.current];
    this.utilities = this.gameState.utilities;
};

BGController.prototype = {
    bias_v: 0.048,
    minRoadSpeed: 2 * 5,
    maxRoadSpeed: 15 * 5,

    startTimeLen: 3,
    goalTimeLen: 3,

    starTime: 3,

    init: function () { //게임시작2-2, 게임재시작2-2
        if (dm) console.log("- BGController.init");
        //블록깨기-----------
        this.Background = CreateUIBackground(0);
        //블록깨기-----------
    },

    destroy: function () { //게임재시작1-7
        //console.log("--- BGController.destroy----");

        if(typeof this.Background.z_cellophane === 'undefined' || this.Background.z_cellophane === null) return;
        this.Background.z_cellophane.destroy(true);
        this.Background.texarr=[];

        var bglen = this.Background.texarr.length;
        this.Background.z_dlbg.destroy(true);

        this.game = null;
        this.gameState = null;
        this.utilities = null;


        //this.road = null;
    },

    update: function () { },

    updateStartBG: function () {

    },
    updateGoalBG: function () {

    },
    updateBooster: function () {

    }

};

var GAME = 0;
UIController = function (game) {
    this.spawnStack = []; //var retE = shift();
    this.spawnStackFrom = [];
    this.spawnStackTo = [];
    this.spawn1ing = false;
    this.spawn1 = 0;
    this.spawnFrom1 = 0;
    this.spawnTo1 = 0;
    this.updatecnt = 0;
    this.game = game;
    GAME = game;
    this.gameState = game.state.states[game.state.current];
    this.utilities = this.gameState.utilities;

    //지울것
    // this.upKey1=0;
    // this.qKey1=0;
    // this.leftKey1=0;
    // this.rightKey1=0;
    //지울것

    // ensure string.format exists
    if (!String.prototype.format) {
        String.prototype.format = function () {
            var args = arguments;
            return this.replace(/{(\d+)}/g, function (match, number) {
                return typeof args[number] !== 'undefined' ? args[number] : match;
            });
        };
    }
};

UIController.prototype = {
    // constants
    struggleIndicatorOffset: 25, // distance from attached vehicle to struggle indicator
    struggleIndicatorBlinkDuration: 100, // duration of struggle indicator blink animation (in milliseconds)
    struggleIndicatorBlinkCount: 10, // number of times struggle indicator will blink during animation

    readySetGoYOffset: 150,	// distance from center of screen for readySetGoText////레드-카운트다운
    readySetGoStyle: {font: "124pt Arial", fill: "#ffffff", align: "center", stroke: "#000000", strokeThickness: 2},
    readySetGoLabelsDesktop: ["3", "2", "1"], //레드-카운트다운 레벨

    scoreXOffset: 10,
    scoreYOffset: 10,
    scoreStyle: {font: "20pt Arial", fill: "#ffffff", align: "right", stroke: "#000000", strokeThickness: 2},
    scoreLabelDebug: ("{0}km\n"
        + "difficulty: {1}\n"
        + "struggle: {2}\n"
        + "velocity: {3}\n"
        + "elapsed: {4}\n"
        + "timeplay: {5}\n"
        + "playtime_bias: {6}\n"
        + "iHeartChargeMax: {7}\n"
        + "iHeartInitData: {8}\n"
        + "fHeartChargeTime: {9}\n"
    ), ////속도표시

    gameOverStyle: {font: "20pt Arial", fill: "#ffffff", align: "center", stroke: "#000000", strokeThickness: 2},
    gameOverLabel: "GAME OVER\n\nHIGH SCORE\n{1}km\n\nPRESS TO RETRY",
    gameOverHighScore: "NEW HIGH SCORE!\n\n{0}km\n\nPRESS TO RETRY",


    fingerIconYOffset: 185, // distance from center of screen for the finger icon

    init: function () {
        if (dm) console.log("- UIController.init");


       // this.itembomb = createFX_bomb();
       // this.itemmissile = createFX_missile();

        //this.gameState.onIntroComplete.add(this.onIntroComplete, this);
        this.gameState.onGameBegin.add(this.onGameBegun, this);
        this.gameState.onGameOver.add(this.onGameOver, this); //골인 내랭킹 트로피 연출
        //this.gameState.onMistake.add(this.onMistake, this);

        this.gameState.onFinishLevelUI.add(this.onFinishLevelUI, this);




        this.uivelocity = 0; //속도그래프용 속도
        this.uiguagestep = 0;
        //새로추가 --속도계 ----

        //새로추가 --신호등----

        this.tx20sec = create20sec();
        this.tx20sec.visible = false;

        this.light123 = createLight123();
        this.number123 = createNumber123();

        //this.light123.fixedToCamera = true;

        //this.number123.fixedToCamera = true;
        //새로추가 --신호등----


        this.uievent_onoff = true;

        this.veldivmin = 0.25;
        this.veldivnormal = 0.5;
        this.veldiv = 0.5;
        //


        //새로추가 - 일시정지버튼---------

        //벽돌깨기-------------------------------------------------------------------------------
        // .z_life[3]
        // .z_life[0].z_star
        // .z_life[0].z_paddle
        // .z_stageNumber
        // .z_scoreNumber
        this.uiMain =  CreateUIMainGame();
        this.uiMain.z_pause.fnok = function () { //일시정지버튼 클릭시(일시정지메뉴보이기)
            var stgame = uigame.state.states.game;
            stgame.uiController.uipause.visible = true;

            ispausemode=true;                               //메인창-일시정지클릭-->인풋잠금

            stgame.massiveController.onPauseSaveVelocity(); //속도저장

            stgame.uiController.uipause.onActivePs();

            if (kData.bSoundBGM) {
                if (stgame.uiController.uipause.dlgbg9.btnsound.icon.visible)
                    stgame.uiController.uipause.dlgbg9.btnsound.icon.visible = false; //사운드켜기 상태표시
            } else {
                if (!stgame.uiController.uipause.dlgbg9.btnsound.icon.visible)
                    stgame.uiController.uipause.dlgbg9.btnsound.icon.visible = true; //사운드끄기 상태표시
            }
            
        };
        this.uiMain.onShow();

        this.uiReadyGo = CreateUIReadyG0();//레디고스파인생성
        this.uiReadyGo.visible = false;

        //별숨김// this.uiDropStar = CreateUIDropStar();//별파괴
        //별숨김// this.uiDropStar.visible = false;//debug_Sprite(this.uiDropStar);

        //시작창만들기----------------------------------------------------------------------
        this.uiStartLevel = CreateUIStartLevel();
        this.uiStartLevel.visible = false;
        var star3;

        //kData예외처리//케이데이타예외처리
        if(typeof(kData) === 'undefined' || typeof(kData.userData) === 'undefined') {
            star3 = 0;
        }else{
            star3 = kData.userData[curLevel];
        }
        var score3 = -99;//점수제거// var score3 = kData.userDataScore[curLevel];

        this.uiStartLevel.onSetSt(curLevel, score3, star3); //유저스코어출력
        //일반모드 텍스트 출력
        if(modeOption[0]===1) this.uiStartLevel.z_scoreNumber.text="DROP MODE";
        else{
            var stgame = uigame.state.states.game;
            if( stgame.massiveController.mskllen>0
             || stgame.massiveController.mskrlen>0){
                this.uiStartLevel.z_scoreNumber.text="MOVE MODE";
            }
            else {
                this.uiStartLevel.z_scoreNumber.text="BASIC MODE";
            }
        }

        this.uiStartLevel.onActiveSt(); //생성과 동시에 나온다




        this.uiStartLevel.z_btyes.fnok = function () {//레벨시작 오케이버튼 클릭시
            if(nvmode===true){
                //네이버모드 하트가 0이면
                if(kData.iHeart<=0){
                    //네이버모드
                    if (naverShop2.visible) {
                        naverShop2.visible=false;
                    } else {
                        naverShop2.Show(cbNaverShopReward);//네이버샵띄우기
                    }
                    return;
                    //일시정지모드
                }else {
                    var sends = {};//처리
                    kData.iHeart -= 1;//네이버 시작
                    sends.iHeart = kData.iHeart;//네이버저장하기
                    if (typeof GamePocket.Sdk !== 'undefined') {
                        networkManager.AppDataPut(JSON.stringify(sends));
                    }
                    // 레벨시작 음악---
                    TweenMax.delayedCall(0.1, function () {
                        if (kData.bSoundSE) SE_Heart.play(); //하트가 소모될때
                        selectBGM("BGM_Game_Nomal", true);
                    });
                }
			}

            //스타트화면 닫기용 트윈 오브젝트
            var stgame = uigame.state.states.game;
            var dlg =stgame.uiController.uiStartLevel.z_dlg;
            var bg = stgame.uiController.uiStartLevel.z_bg;




            //-----로그인 상태 체크-----------in CreateUIStartLevel
            if(loginTF === 1){          //로그인회원
                if (proto.serPos === 0              //모비서비스
                    ||proto.serPos === 1) {              //야후서비스
                    if (kData.iHeart<=0) { //하트가 바닥이면
                        //우선나가기
                        ispausemode = false; //컨티뉴-오케이->인풋잠금풀기

                        uigame.state.states.game.onGameOver.dispatch();
                        uigame.state.game.state.start('menu');

                        //우선나가기
                    }else {
                        // 컨티뉴버젼 ----
                        // TweenMax.delayedCall( 0.1, function () {
                        //     if(bSoundSE) SE_Heart.play(); //하트가 소모될때
                        // });

                        // 레벨시작 음악---
                        TweenMax.delayedCall( 0.1, function () {
                            if(kData.bSoundSE) SE_Heart.play(); //하트가 소모될때
                            selectBGM("BGM_Game_Nomal", true);
                        });

                        // networkManager.UseHeart(1, function () {
                        //    curLives = MaxLife; //in 스타트메뉴 예스(모비서비스)
                        // });
                    }
                }
            }else{
                if (networkManager.networkState === NET_STATE.LOCALHOST) { //로컬서비스
                    curLives = MaxLife;  //in 컨티뉴UI 예스(로컬)
                    var stgame = uigame.state.states.game;
                    //stgame.uiController.uiMain.z_lifestar.onSetLife(curLives);//컨티뉴 예스

                    //stgame.massiveController.startContinue(); //인트로시작2?
                }else{ //비회원  //게스트모드
                    //
                    // networkManager.ModalCall(MODAL_BUTTON_TYPE.OKCANCEL, GetShpMsg('signup'),//상점
                    //     function () {
                    //         networkManager.JoinMember();
                    //     },
                    //     function () {
                    //     }
                    // );
                    // networkManager.UseHeart(1, function () {
                    //     curLives = MaxLife; //in 스타트메뉴 예스(모비서비스)
                    // });
                    TweenMax.delayedCall( 0.1, function () {
                        if(kData.bSoundSE) SE_Heart.play(); //하트가 소모될때
                        selectBGM("BGM_Game_Nomal", true);
                    });
                }
            }
            //-----로그인 상태 체크-----------in CreateUIStartLevel
            

            ////하트소비 연출(스파인) //레벨시작 오케이
            //stgame.uiController.uiStartLevel.z_spnHeart.visible = true;
            //stgame.uiController.uiStartLevel.z_spnHeart.z_spine.setAnimationByName(1, "heart_bomb_out", false);
            //엠프티에러//stgame.uiController.uiStartLevel.z_spnHeart.z_spine.addAnimationByName(0, "empty", false);

            // //하트소비 연출(프레임)
            // stgame.uiController.hideHeart.x = stgame.uiController.uiStartLevel.z_btyes.world.x+75;
            // stgame.uiController.hideHeart.y = stgame.uiController.uiStartLevel.z_btyes.world.y-115;
            // stgame.uiController.hideHeart.visible = true;
            // stgame.uiController.hideHeart.animations.play('hideheart', 20, false, true); //1time //kill//

            //더블클릭방지 마스크 사용
            stgame.uiController.uiStartLevel.z_mask.visible = true;

            //시작창 사라진 후, 인트로 시작
            TweenMax.delayedCall(0.5,function(){
                if(kData.bSoundSE) SE_Popup_OFF.play();
                onFadeout(bg, 0.75);
                onFadeoutScale(dlg, function () {
                    //스타트화면 끄기
                    stgame.uiController.uiStartLevel.visible = false;
                    stgame.uiController.uiStartLevel.z_mask.visible = false;
                    //console.log("introshow in uicontroller:init");
                    TweenMax.delayedCall(0.75,function() { stgame.massiveController.introShow(); });


                    TweenMax.delayedCall(0.2,function() {
                        if (kData.bSoundSE) SE_Ready.play();
                    });
                    TweenMax.delayedCall(1.1,function() {
                        if (kData.bSoundSE) SE_Go.play();
                    });

                    //레디고플레이
                    TweenMax.delayedCall(0.1,function() {
                        stgame.uiController.uiReadyGo.visible = true;
                        stgame.uiController.uiReadyGo.z_spine.setAnimationByName(1, "ready_go_ani", false); //in uiStartLevel.btyes
                        //엠프티에러//stgame.uiController.uiReadyGo.z_spine.addAnimationByName(0, "empty", false);
                    });
                });

                uigame.state.states.game.gameBegun = true;

                uimode = uimodeset.ingame;

                uigame.state.states.game.onGameBegin.dispatch();
                timer20sec=alonemode?9:time20secMax;


            });//delay
            //gameBegin: function()----------------
        };

        //클리어창만들기------------------------------------------------------------------------
        this.uiClearLevel = CreateUIClearLevel();
        this.uiClearLevel.visible = false;
        this.uiClearLevel.onSetCl(curLevel, ""); //lvidx, time, starcount, clearmode, allcleared
        //this.uiClearLevel.onActiveCl(true, false);

        //게임오버창
        this.uiGameOver = CreateUIGameOver();
        this.uiGameOver.visible = false;
        //this.uiGameOver.onActiveGv(false); //생성과 동시에 나온다

        //컨티뉴
        this.uiContinue = CreateUIContinue();
        this.uiContinue.visible = false;
        //this.uiContinue.onActiveCn(false);


        //새로추가 - 스타트샵------------
        uishopinmenu = false;
        this.uishop = createUIShop();
        this.uishop.visible = false;//초기화 삽ui 숨기기
        this.uishop.onRefreshInitShop();

        this.uishopresult = createUIShopResult();
        this.uishopresult.visible = false;

        //
        // this.uishopplus = createUIShopPlusButton();
        // this.uishopplus.visible = false;//초기화 삽플러스ui 숨기기
        //새로추가 - 스타트샵-------------

        //하트1개소비
        this.hideHeart = CreateHideHeart1();
        this.hideHeart.visible = false;

        //해쉬디버그용 텍스트
        this.txDebug =  uigame.add.text(0, 0, "", style_debug);
        this.txDebug.anchor.setTo(1,1);
        this.txDebug.position.setTo(720,1280-50);
        this.txDebug.name = "uicontroller";
        txdebug = this.txDebug;
        //

        //if(hsdm) hsDebug.onSet("info","1");
        //if(hsdm) hsDebug.onUpdateHash();



        //if(dm) hsDebug.onSet("os", 1234);
        //if(dm) hsDebug.onSet("v1", "aa");
        //if(dm) hsDebug.onSet("os", "ios");


        //벽돌깨기------------------------------------------------------------------------------


        //새로추가 - 일시정지메뉴판 윈도우창---------
        this.uipause = createUIPause();        //this.uipause.dlgbg9.scale.set(0.5,0.5);
        if (kData.bSoundBGM) {
            if (this.uipause.dlgbg9.btnsound.icon.visible)
                this.uipause.dlgbg9.btnsound.icon.visible = false; //사운드켜기 상태표시
        } else {
            if (!this.uipause.dlgbg9.btnsound.icon.visible)
                this.uipause.dlgbg9.btnsound.icon.visible = true; //사운드끄기 상태표시
        }
        //일시정지메뉴판 - 닫기버튼
        this.uipause.dlgbg9.btnx.fnok = function () { //아래와 동일 //일시정지창 닫기
            var stgame = uigame.state.states.game;
            var dlg = stgame.uiController.uipause.dlgbg9;
            var bg = stgame.uiController.uipause.bg;

            //일시정지변수
            ispausemode = false;  //일시정지창-닫기->인풋잠금풀기

            //TweenMax.resumeAll(true, true);//트윈맥스일시정지 다시시작
            
            if(kData.bSoundSE) SE_Popup_OFF.play();
            onFadeout(bg, 0.75);
            onFadeoutScale(dlg, function () {
                stgame.uiController.uipause.visible = false;

                //stgame.massiveController.onPauseModeEnd();//오브젝트 속도 복구(in 창닫기버튼)
                ispausemode=false; //메인창-일시정지닫기-->인풋풀기
                stgame.massiveController.onPauseLoadVelocity();

                //grp.z_mask.visible = false;
            });
            //grp.z_mask.visible = true; //일시정지창에는 없다

        };
        this.uipause.dlgbg9.btnback.fnok = function () { //위와같다 //일시정지창 창닫기

            //일시정지변수
            ispausemode = false; //일시정지뒤로클릭->인풋잠금풀기

            //일시정지메뉴판 사라지기
            var stgame = uigame.state.states.game;
            stgame.uiController.uipause.visible = false;

            //차량속도 복구
            ispausemode=false;  //일시정지창-뒤로버튼클릭시 --> 인풋잠금풀기


            uigame.state.start('game');
            //stgame.massiveController.onPauseLoadVelocity();
        };
        this.uipause.visible = false;
        //새로추가 - 일시정지 윈도우창---------


        //도움말
        this.uiHelp = CreateUIHelp();
        this.uiHelp.visible = false;
        //this.uiHelp.onActiveHp();


        // if (kData.ITEM_1 < 1) item3btn[0].visible = false;
        // if (kData.ITEM_2 < 1) item3btn[1].visible = false;
        // if (kData.ITEM_3 < 1) item3btn[2].visible = false;
        if (kData.ITEM_1 < 1) {
            item3btn[0].islock = true;                                          //호버시,업,다운시 작동 못하게
            item3btn[0].alpha = 0.2;                                            //사용한후 투명처리
        }
        if (kData.ITEM_2 < 1) {
            item3btn[1].islock = true;                                          //호버시,업,다운시 작동 못하게
            item3btn[1].alpha = 0.2;                                            //사용한후 투명처리
        }
        if (kData.ITEM_3 < 1) {
            item3btn[2].islock = true;                                          //호버시,업,다운시 작동 못하게
            item3btn[2].alpha = 0.2;                                            //사용한후 투명처리
        }
		if(nvmode===true){
	        this.naver = uigame.add.group();
	        naverShop2 = new NaverShop(uigame, this.naver); //원본
            //this.naver.addChild(naverShop2.main); //혜관님 수정본
	        naverShop2.loadImg();
		}
        this.uiDev = CreateUIDev();
        this.uiDev.visible=false;

    },//init


    onFinishLevelUI: function () { //비어있음
        //this.uiClearLevel.
    },

    //스폰스택 업데이트 //아이템공격당함
    spawnstackcallback: function () {
    },

    //속도계업데이트
    speedupdatecallback: function () {
    },

    //onIntroComplete: function () {
        // if (dm) console.log("- UIController.onIntroComplete");
        //
        // if (this.fingerIcon && !this.game.input.activePointer.isDown) {
        //     this.fingerIcon.visible = true;
        //     this.fingerIcon.reset(this.game.world.centerX, this.game.world.centerY + this.fingerIconYOffset);
        //     this.fingerIcon.alpha = 0.15;
        //     this.pulseFingerTween = this.game.add.tween(this.fingerIcon).to({alpha: 0.75}, 1000, Phaser.Easing.Linear.None, true, 0, 2000, true);
        //     this.game.input.onDown.addOnce(
        //         function () {
        //             this.pulseFingerTween.stop();
        //             this.fingerIcon.kill();
        //         },
        //         this
        //     );
        // }

    //},

    onGameBegun: function () { //ui방향키보이기, ui아이템보이기, 타이머콜백시작
        if (dm) console.log("- UIController.onGameBegun");

        if (this.readySetGoText) this.readySetGoText.destroy(); //레드-카운트다운 제거



        if (this.leftArrow) this.leftArrow.visible = true;
        if (this.rightArrow) this.rightArrow.visible = true;

        // if (FOLLOW_TOUCH && this.fingerIcon && !this.game.input.activePointer.isDown) {
        //     this.fingerIcon.visible = true;
        //     this.fingerIcon.reset(this.game.world.centerX, this.game.world.centerY + this.fingerIconYOffset);
        //     this.fingerIcon.alpha = 0.75;
        //     this.swipeFingerTween = this.game.add.tween(this.fingerIcon).to({x: this.gameState.playerController.roadBounds.max}, 750, Phaser.Easing.Linear.None, true, 0, 0, true)
        //         .to({x: this.gameState.playerController.roadBounds.min}, 1500, Phaser.Easing.Linear.None)
        //         .to({x: this.game.world.centerX}, 750, Phaser.Easing.Linear.None)
        //         .loop();
        //     this.game.input.onDown.addOnce(
        //         function () {
        //             this.swipeFingerTween.stop();
        //             this.fingerIcon.kill();
        //         },
        //         this
        //     );
        // }


        if (kData.ITEM_1 < 1) item3btn[0].visible = false;
        if (kData.ITEM_2 < 1) item3btn[1].visible = false;
        if (kData.ITEM_3 < 1) item3btn[2].visible = false;

        //uigame.time.events.add(250, uigame.state.states.game.uiController.speedupdatecallback, this);
        uigame.time.events.loop(Phaser.Timer.QUARTER, uigame.state.states.game.uiController.spawnstackcallback, this);//속도계업데이트
        uigame.time.events.loop(Phaser.Timer.QUARTER, uigame.state.states.game.uiController.speedupdatecallback, this);//속도계업데이트
        //uigame.time.events.loop(Phaser.Timer.SECOND, uigame.state.states.game.uiController.minimap.onupdatetrack, this);//미니맵업데이트

        //this.side4.onSetCountSide4();
        //uigame.time.events.loop(Phaser.Timer.SECOND, this.utilities.updateSide4, this);//사이드4업데이트
        uigame.time.events.loop(Phaser.Timer.SECOND, this.utilities.updateTx20Sec, this);

    },
    // //순위업데이트,랭킹업데이트<<
    // Side4Time -= this.game.time.elapsed; //레드-카운트다운 타이머
    // if(Side4Time<0) {
    //     Side4Time = Side4TimeMax;
    //     this.side4.onSwapRankSide4();//랭킹업데이트
    // }
    // //순위업데이트,랭킹업데이트>>

    onGameOver: function () { //골인시 내랭킹 트로피 연출 되는 곳 //in endGame: function()
        if (dm) console.log("- UIController.onGameOver");
        //랜덤등수
        //var Rankrnd0123 = uigame.rnd.integerInRange(0, 3); //랜덤(0~3포함)

        //미스테이크 등수
        //mistake4 = [0,1,2,3];//실수카운트를 저장, 초기값은 싱글모드
        //mistake4_sort=[0,0,0,0]; //임시데이터 랭크용
        //mistake4_myrank=0;
        if (matchmode) {
            //멀티모드
            if (alonemode) {
                net_userallfin[0] = net_userall[0];
                net_userallfin[1] = net_userall[1];
            }//alonemode

            //공격메뉴판 사라지게
            if(item3btn[0].visible) item3btn[0].visible = false;
            if(item3btn[1].visible) item3btn[1].visible = false;
            if(item3btn[2].visible) item3btn[2].visible = false;

            uigame.state.states.game.uiController.side4.onSwapRankSide4();//게임종료시 랭킹업데이트 1회 강제 호출

            var myrankidx = net_userall.indexOf(net_yourname);//내순위
            if(myrankidx==0)this.tx20sec.visible = false;
            this.uigoal.onFinishRank(ids[rndid][0], myrankidx); //넷 골인직후 내랭킹만 출력


            //}
        } else {
            //싱글모드
            //sortMistake4();
            //getMyRank();

            //this.uigoal.onFinishRank(ids[rndid][0], mistake4_myrank);
        }



        TweenMax.delayedCall(3, function () {
            //일시정지버튼으로 게임종료시에도 호출되므로,  다른메뉴에서 에러안나게하려고
            //if(!this.uistartshop.visible || !this.uifind.visible)
            if(uimode === uimodeset.ingame
            && game.state.states[game.state.current] === "game" //게임스테이트검사
            )
                uigame.state.states.game.gotoResult();
        });

        //this.gameOverText = this.game.add.text(this.game.world.centerX, this.game.world.centerY, txt, this.gameOverStyle);
        //this.gameOverText.anchor.setTo(0.5, 0.5);

        //if(this.leftArrow) this.leftArrow.kill();
        //if(this.rightArrow) this.rightArrow.kill();

        // ensure finger tweens are not active at this point
        //if (this.pulseFingerTween && this.pulseFingerTween.isRunning) this.pulseFingerTween.stop();
        //if (this.swipeFingerTween && this.swipeFingerTween.isRunning) this.swipeFingerTween.stop();
    },
    // onMistake: function () {
    //     if (dm) console.log("- UIController.onMistake");
    // },
    update: function () {},

    postUpdate: function () { },

    // copStruggle: function (direction, onCompleteCallback) {
    //     if (dm) console.log("- UIController.copStruggle");
    //
    //     if (this.gameState.playerSprite && !this.struggleIndicator) {
    //         this.struggleBlinkTimer = 0;
    //         this.struggleBlinkCounter = 0;
    //         this.struggleDirection = direction;
    //         this.struggleCompleteCallback = onCompleteCallback;
    //         this.struggleIndicator = direction > 0 ? this.struggleWarnLeft : this.struggleWarnRight;
    //         this.struggleIndicator.x = this.gameState.playerSprite.x - (this.struggleIndicatorOffset * this.struggleDirection);
    //         this.struggleIndicator.y = this.gameState.playerSprite.y;
    //         this.struggleIndicator.visible = true;
    //     }
    // },

    // cancelStruggle: function () {
    //     if (dm) console.log("- UIController.cancelStruggle");
    //
    //     if (this.struggleIndicator) {
    //         this.struggleIndicator.visible = false;
    //         this.struggleCompleteCallback = null;
    //         this.struggleIndicator = null;
    //     }
    // }
    destroy: function () {//게임재시작1-3
        //console.log("- UIController.destroy---");

        this.gameState = null;
        this.utilities = null;
        this.readySetGoLabels = null;
        this.readySetGoText = null;//레드-카운트다운 제거
        // if (this.scoreText) {
        //     this.scoreText.destroy();
        //     this.scoreText = null;
        // }
        if (this.stageText) {
            this.stageText.destroy();
            this.stageText = null;
        }

        if (this.gameOverText) {
            this.gameOverText.destroy();
            this.gameOverText = null;
        }
        this.struggleWarnLeft = null;
        this.struggleWarnRight = null;
        this.struggleIndicator = null;
        this.struggleCompleteCallback = null;
        this.struggleMeter = null;
        this.struggleMeterBG = null;
        this.struggleMeterFiller = null;
        this.leftArrow = null;
        this.rightArrow = null;
        this.fingerIcon = null;
        this.pulseFingerTween = null;
        this.swipeFingerTween = null;
        this.game = null;

//this.uiMain =  CreateUIMainGame();
        this.uiMain.z_bonus.destroy(true);
        this.uiMain.z_normal.destroy(true);
        this.uiMain.z_top_b.destroy(true);
        this.uiMain.z_bonus.destroy(true);
        this.uiMain.z_prog.destroy(true);
        this.uiMain.z_warning.destroy(true);
        this.uiMain.z_itemsel.destroy(true);
        this.uiMain.z_combo.destroy(true);
        this.uiMain.z_shopplus.destroy(true);
        this.uiMain.z_heartcnt_b.destroy(true);

//this.uiReadyGo = CreateUIReadyG0();
        this.uiReadyGo.z_spine.destroy(true);

//this.uiStartLevel = CreateUIStartLevel();
        this.uiStartLevel.z_mini.destroy(true);
        this.uiStartLevel.z_star1y.destroy(true);
        this.uiStartLevel.z_star3y.destroy(true);
        this.uiStartLevel.z_star2y.destroy(true);
        this.uiStartLevel.z_star1.destroy(true);
        this.uiStartLevel.z_star3.destroy(true);
        this.uiStartLevel.z_star2.destroy(true);
        this.uiStartLevel.z_stageNumber.destroy(true);
        this.uiStartLevel.z_scorebg.destroy(true);
        this.uiStartLevel.z_bonus_title.destroy(true);
        this.uiStartLevel.z_stageNumber_b.destroy(true);
        this.uiStartLevel.z_minibg_b.destroy(true);
        this.uiStartLevel.z_scoreNumber_b.destroy(true);
        this.uiStartLevel.z_scorebg_b.destroy(true);
        this.uiStartLevel.z_allcollected.destroy(true);
        this.uiStartLevel.z_spnHeart.z_spine.destroy(true);

        this.uiStartLevel.z_normal.destroy(true);
        this.uiStartLevel.z_bonus.destroy(true);
        this.uiStartLevel.z_dlgdown_b.destroy(true);
        this.uiStartLevel.z_bonusbg.destroy(true);
        this.uiStartLevel.z_dlgtop.destroy(true);
        this.uiStartLevel.z_normalbg.destroy(true);
        this.uiStartLevel.z_dlg.destroy(true);
        this.uiStartLevel.z_bg.destroy(true);

//this.uiClearLevel = CreateUIClearLevel();
        this.uiClearLevel.z_mask.destroy(true);
        this.uiClearLevel.z_allcollected.destroy(true);
        this.uiClearLevel.z_scoreNumber_b.destroy(true);
        this.uiClearLevel.z_bonus_hminmap.destroy(true);
        this.uiClearLevel.z_scorebg_b.destroy(true);
        this.uiClearLevel.z_scoreNumber.destroy(true);
        this.uiClearLevel.z_scorebg.destroy(true);
        this.uiClearLevel.z_stageNumber.destroy(true);
        this.uiClearLevel.z_bonus_title.destroy(true);
        this.uiClearLevel.z_spine_clear.destroy(true);
        this.uiClearLevel.z_spine_star.destroy(true);
        this.uiClearLevel.z_star1.destroy(true);
        this.uiClearLevel.z_star2.destroy(true);
        this.uiClearLevel.z_star3.destroy(true);
        this.uiClearLevel.z_btyes.destroy(true);
        this.uiClearLevel.z_btretry.destroy(true);
        this.uiClearLevel.z_btnext.destroy(true);

        this.uiClearLevel.z_normal.destroy(true);
        this.uiClearLevel.z_bonus.destroy(true);
        this.uiClearLevel.z_dlgdown_b.destroy(true);
        this.uiClearLevel.z_bonusbg.destroy(true);
        this.uiClearLevel.z_dlgtop.destroy(true);
        this.uiClearLevel.z_normalbg.destroy(true);
        this.uiClearLevel.z_dlg.destroy(true);
        this.uiClearLevel.z_bg.destroy(true);

//this.uiGameOver = CreateUIGameOver();
        this.uiGameOver.z_btyes.destroy(true);
        this.uiGameOver.z_game_text.destroy(true);
        this.uiGameOver.z_over_text.destroy(true);
        this.uiGameOver.z_mask.destroy(true);
        this.uiGameOver.z_dlgall.destroy(true);
        this.uiGameOver.z_dlgmelt.destroy(true);
        this.uiGameOver.z_dlg.destroy(true);

//this.uiContinue = CreateUIContinue();
        this.uiContinue.z_bg.destroy(true);
        this.uiContinue.z_dlg.destroy(true);
        this.uiContinue.z_btyes.destroy(true);
        this.uiContinue.z_spnHeart.z_spine.destroy(true);
        this.uiContinue.z_spnHeart.destroy(true);
        this.uiContinue.z_btno.destroy(true);
        this.uiContinue.z_title.destroy(true);
        this.uiContinue.z_txmsg.destroy(true);
        this.uiContinue.z_mask.destroy(true);
        this.uiContinue.z_dlg.destroy(true);
        this.uiContinue.z_bg.destroy(true);

//this.uishop = createUIShop();
        this.uishop.slots[3].destroy(true);
        this.uishop.slots[2].destroy(true);
        this.uishop.slots[1].destroy(true);
        this.uishop.slots[0].destroy(true);
        //this.uishop.btnok.destroy(true);
        //this.uishop.fnok.destroy(true);
        this.uishop.pttx.destroy(true);
        this.uishop.spPoint.destroy(true);
        //this.uishop.pt.destroy(true);
        //this.uishop.title.destroy(true);
        this.uishop.dlgbg9_t.destroy(true);
        this.uishop.dlgbg9_b.destroy(true);
        this.uishop.dlgbg9.destroy(true);
        this.uishop.bg.destroy(true);

//this.uishopresult = createUIShopResult();
        //this.uishopresult.ybt.destroy(true);
        this.uishopresult.txComment.destroy(true);
        this.uishopresult.txCnt.destroy(true);
        //this.uishopresult.sprGold.destroy(true);
        //this.uishopresult.inresultbg9.destroy(true);
        this.uishopresult.dlgbg9.destroy(true);
        //this.uishopresult.darkbg.destroy(true);

//this.hideHeart = CreateHideHeart1();
        this.hideHeart.destroy(true);

//this.txDebug =  uigame.add.text(0, 0, "", style_debug);
        this.txDebug.destroy(true);

//this.uipause = createUIPause();
        this.uipause.dlgbg9.btnhelp.destroy(true);
        this.uipause.dlgbg9.btnhome.destroy(true);
        this.uipause.dlgbg9.btnsound.destroy(true);
        this.uipause.dlgbg9.btnback.destroy(true);
        this.uipause.dlgbg9.btnx.destroy(true);
        this.uipause.dlgbg9.destroy(true);
        this.uipause.bg.destroy(true);


//this.uiHelp = CreateUIHelp();
        this.uiHelp.z_btno.destroy(true);
        this.uiHelp.z_slots[4].destroy(true);
        this.uiHelp.z_slots[3].destroy(true);
        this.uiHelp.z_slots[2].destroy(true);
        this.uiHelp.z_slots[1].destroy(true);
        this.uiHelp.z_slots[0].destroy(true);
        this.uiHelp.txPageBg.destroy(true);
        this.uiHelp.sRight.destroy(true);
        this.uiHelp.sLeft.destroy(true);
        this.uiHelp.z_title.destroy(true);
        this.uiHelp.z_dlgtop.destroy(true);
        this.uiHelp.z_dlgdown.destroy(true);
        this.uiHelp.z_bg.destroy(true);
        this.uiHelp.z_dlg.destroy(true);



    },

};

GameState = function(game) {
	this.updatecnt=0;
	this.game = game;
	this.utilities = new Utilities();
	// only initialize once (high score counter)
	this.maxDistance = 0;
	// ensure collisions always register, even if objects overlap by a large number of pixels
	this.game.physics.OVERLAP_BIAS = 99999;

	//지울것
    this.rKey=0;
    this.pKey = game.input.keyboard.addKey(Phaser.Keyboard.P);

    //this.bgmonoff=true;
    //this.music=0;
    //this.pauseonoff=false;
	//지울것



};//GameState = function(game) 생성

GameState.prototype = {
    //변수들 생성
	playerVehicleYOffset: 100,		// attached vehicle distance from center of screen

    init: function () {
        if(dm) console.log("- GameState.init");

    },
	create: function() //-->init-->update
	{ //게임시작2-1, 게임재시작2-1 //인트로 애니전 리소스준비한다.

        if(dm) console.log("- GameState.create");

        //selectBGM("BGM_Game_Nomal", true);
        // if(bSoundBGM){//bSoundSE=false;
        //     BGM_Game_Nomal.mute=false;
        //     BGM_ALL.mute=true;
        // }else{
        //     BGM_Game_Nomal.mute=true;
        //     BGM_ALL.mute=true;
        // }

        //랜덤 생성 1,2,3,4 캐릭터선정
        rndid=uigame.rnd.integerInRange(0, 3); //랜덤(0~3포함)

        //게임 변수들 초기화
        playtime_all = playtime_all_base;
        //playtime_cur= 0; //in GameState.create()//플레이타임
        playtime_all_cur = 0;
        playtime_bias=0;

        curVelocity = VelocityInit;

        //alonemode=false;
        timer20sec=time20secMax;

		this.gameBegun = false;
		this.gameOver = false;			//endGame 1번만 실행하려는 목적인거 같음

        //timeplay = 0;//난이도설정용 누적시간

		this.introCompleted = false;
		//this.onIntroComplete = new Phaser.Signal();
		this.onGameBegin = new Phaser.Signal();
		this.onGameOver = new Phaser.Signal(); //골인 내랭킹 트로피 연출
        //this.onMistake = new Phaser.Signal();
        //this.onMistakeRecover = new Phaser.Signal();
		this.onVehicleSpawned = new Phaser.Signal();
        this.onReleaseBalls = new Phaser.Signal();
        this.onCopyBalls = new Phaser.Signal();
        this.onFinishLevelUI = new  Phaser.Signal();



        this.bgController = this.game.plugins.add(BGController);		// road renders first
        this.massiveController = this.game.plugins.add(MassiveController);	// then vehicles (playerController also depends on this, need to spawn it first)
		this.powerupController = this.game.plugins.add(PowerupController);	// then powerups
		this.playerController = this.game.plugins.add(PlayerController);	// then player
		this.uiController = this.game.plugins.add(UIController);			// then UI

        //ui입력받고 실행하게끔 하려고 여기 주석처리
		//this.playIntroAnimation(); //create시 호출되고 안에서--> gamebegin:실행


		//P key 클릭시 이벤트
		this.pKey.onDown.add( function() {
            	if(game.input.keyboard.isDown(Phaser.Keyboard.SHIFT)) {
                    var stgame = uigame.state.states.game;
                    stgame.uiController.uipause.visible = true;

                    ispausemode = true;                               //메인창-일시정지클릭-->인풋잠금
                    stgame.massiveController.onPauseSaveVelocity(); //속도저장

                    stgame.uiController.uipause.onActivePs();

                    //TweenMax.pauseAll(true, true);//트윈맥스일시정지

                    if (kData.bSoundBGM) {
                        if (stgame.uiController.uipause.dlgbg9.btnsound.icon.visible)
                            stgame.uiController.uipause.dlgbg9.btnsound.icon.visible = false; //사운드켜기 상태표시
                    } else {
                        if (!stgame.uiController.uipause.dlgbg9.btnsound.icon.visible)
                            stgame.uiController.uipause.dlgbg9.btnsound.icon.visible = true; //사운드끄기 상태표시
                    }

                    //키입력시 사운드출력
                    if (kData.bSoundSE) SE_Click.play();
                    //키입력시 사운드출력
                }
			} //func
        );//onDown


	},//create
	
	shutdown: function() {//게임상태제거//게임재시작1-2//
        if(dm) console.log("- GameState.shutdown");

		//this.onIntroComplete.dispose();		this.onIntroComplete = null;
		this.onGameBegin.dispose();			this.onGameBegin = null;
		this.onGameOver.dispose();			this.onGameOver = null;
		//this.onMistake.dispose();           this.onMistake = null;
       // this.onMistakeRecover.dispose();           this.onMistakeRecover = null;
		this.onVehicleSpawned.dispose();	this.onVehicleSpawned = null;
		this.introTween = null;
		this.leapTween = null;
		this.bgController = null;

			//this.massiveController.helpers = null;
		//----매시브제거--------------------------
		this.massiveController = null;

		this.powerupController = null;
		this.playerController = null;
		this.uiController = null;
		this.game.plugins.removeAll();
		this.game = null;
		//this.music = null;
	},
	
	// play intro animation
	playIntroAnimation: function() //create안에서 호출
	{
        this.introDuration = 5000;
		this.blockintro = this.game.add.sprite(this.game.world.width-50, 0, 'atlas_bb-0', 'block_deepblue.png');
        this.introTween = this.game.add.tween(this.blockintro);
        this.introTween.to({y: this.game.world.centerY + 100}, this.introDuration, Phaser.Easing.Quadratic.Out, true);
        this.introTween.onComplete.add(this.introComplete, this);
	    //신호등,카운트다운 등장했던곳
        //차량출발이펙트 등장

        this.gameBegin();
        //cars_velocity=0;
        //this.introTween.onComplete.add(this.introComplete, this);
	},
	
	// wait till player clicks the initial bike before starting the game
	introComplete: function() //playIntroAnimation안에서 호출
	{
        if(dm) console.log("- GameState.introComplete");
		this.introCompleted = true;
        //
		// this.massiveController.initialBike.inputEnabled = true;
		// this.massiveController.initialBike.input.useHandCursor = true;
		//
		// if(DEBUG) {
		// 	this.playLeapAnimation();
		// }
		// else {	this.game.input.onDown.addOnce(this.playLeapAnimation, this);
         //    //키보드 작동 되므로, 트럭을 스폰하려고 하므로 우선껏음
		// 	//this.game.input.keyboard.addCallbacks(this, this.playLeapAnimation);
		// }
		
		//this.onIntroComplete.dispatch(); //다른스테이트들의 함수호출(ui컨트롤러 핑거아이콘 트윈)
	},
	
	// play animation where player jumps from truck to bike
	playLeapAnimation: function() //introComplete안에서 키입력시 호출
	{
        if(dm) console.log("- GameState.playLeapAnimation");

        //err this.game.input.keyboard.addCallbacks(); // clear keyboard callback
        //this.game.input.keyboard.stop(); //키보드먹통
        //키보드먹통해결책
        var keyboard = this.game.input.keyboard;
        keyboard.onDownCallback = keyboard.onUpCallback = keyboard.onPressCallback = null;

		this.game.input.onDown.remove(this.playLeapAnimation, this); // clear mouse callback

		//this.massiveController.introTruck.kill();

		//this.massiveController.spawnVehicle("enemy_car_big_1.png", false, false); //this.massiveController.spawnVehicle('truck', false, false);

		//this.massiveController.tmpVehicle.reset(this.massiveController.introTruck.x, this.massiveController.introTruck.y);
		//this.massiveController.introTruck = this.massiveController.tmpVehicle;

		//this.playerController.playerLeap.reset(this.game.world.centerX, this.game.world.centerY + (this.truckYOffset - 20));
		//this.leapTween.start();
	},

	//시작UI가 있으서 거기에서 처리 this.uiStartLevel = CreateUIStartLevel();
    gameBegin: function() //playIntroAnimation안에서 호출
	{
        if(dm) console.log("- GameState.beginGame");


		if(!this.gameBegun)
		{
			this.gameBegun = true;

			uimode = uimodeset.ingame;

            //if(bSoundSE) SE_Run.mute = false;//자동차음켜기
            //else SE_Run.mute = true; //자동차음끄기

            this.onGameBegin.dispatch();
            //timeplay = 0;//난이도설정용 누적시간

            timer20sec=alonemode?9:time20secMax;

            //출발시 카메라흔들림,이펙트 호출
            //uigame.camera.shake(0.005, 500);//카메라 흔들림
            //uigame.state.states.game.playerController.beginfxside();
            //if(bSoundSE) SE_Accel.play();              //차 가속하는 소리            --차가 출발할 때 나오는 효과음, 부딪히거나 미사일 맞은 후 다시 가속 할 때도 출력
            
            //출발가속 이펙트3번
            //setTimeout( function () { uigame.state.states.game.playerController.beginfxside();
            //    },250//500,750
            //);

		}
	},

    mistakeGame: function(){
        if(dm) console.log("- GameState.mistakeGame");

        //this.onMistake.dispatch();
        TweenMax.delayedCall(
            2.5, //tilem //1.5초->에서 2.5초로 변경
            function () {
            }
        );
    },

    gotoResult: function () { //랭킹결과창으로 가기 //인게임에서 게임종료시(일시정시중 나가는 경우도 포함되니 주의)
        uigame.state.states.menu.uifind.visible=false;
        uimode = uimodeset.result;
        uigame.state.states.menu.uiresult.onRefreshResult();
        this.game.state.start('menu');
    },

    //한번만 호출하려는 의도(onGameOver), 인풋입력할당도, 사운드끄기
	endGame: function() //PlayerController.updateGoal:에서 호출됨 //플레이어가 y값 -100까지 도달 햇을때
	{
        if(dm) console.log("- GameState.endGame");

		if(this.gameOver) return; //endGame 1번만 실행하려는 목적인거 같음 //업데이트구문 일부 정지시킴

        if(alonemode) { //얼론모드에서 종료시작
            mode20sec=true; //얼론모드에서 종료시작
            timer20sec = 9; //얼론모드에서 종료시작
        }

        //3차수정
        //in onGameOverUI 게임오버창에서 끄고 있으므로
		//2차 수정
        //selectBGM("none", true);
		//1차 소스
        // if(bSoundBGM){//bSoundSE=false;
        //     //BGM_Awards.play();
        //     BGM_Game_Nomal.mute=true;
        //     BGM_ALL.mute=true;
        // }else{
        //     BGM_Game_Nomal.mute=true;
        //     BGM_ALL.mute=true;
        // }

		if(this.distance > this.maxDistance)
		{
			this.highScore = true;
			this.maxDistance = this.distance;
		}
		else
		{
			this.highScore = false;
		}

		this.gameOver = true; //endGame 1번만 실행하려는 목적인거 같음

        this.massiveController.onStopObjAll();//컨티뉴때문에 앞으로
        this.massiveController.onGameOverUI(); //게임오버UI창


		this.onGameOver.dispatch(); //UIController.onGameOver     에서 ui트로피연출
                                    //MassiveController.onGameOver에서 모든차 속도 0로
                                    //PowerupController.onGameOver에서 모든파워업 속도 0로
	},
	
	restartGame: function()
	{ //게임재시작1-1
        if(dm) console.log("- GameState.restartGame");

		this.game.input.onDown.remove(this.restartGame, this); // clear mouse callback
        //err this.game.input.keyboard.addCallbacks(); // clear keyboard callback
        //this.game.input.keyboard.stop(); //키보드 먹통
        //키보드먹통해결책
        var keyboard = this.game.input.keyboard;
        keyboard.onDownCallback = keyboard.onUpCallback = keyboard.onPressCallback = null;

        //this.game.state.start('game'); //<--게임재반복
        this.game.state.start('menu');   //<--게임재반복,메뉴로 가기
	},
	
	slowDown: function()//powerupcontroller에서 오버랩시 호출,update안에서 계속호출
	{
        if(dm) console.log("- GameState.slowDown");

		this.isSlowingDown = true; // don't update difficulty while it's being tweened
		this.slowDownTimer = 0;
		this.slowDownDifficulty = this.difficulty;
	},
	
	// calmDown: function()//powerupcontroller에서 오버랩시 호출,update안에서 계속호출
	// {
     //    if(dm) console.log("- GameState.calmDown");
    //
	// 	this.struggleDifficulty -= this.struggleDifficultyDampen;
	// 	if(this.struggleDifficulty < 0) this.struggleDifficulty = 0;
	// 	// cancel / reset struggle
	// 	this.uiController.cancelStruggle();
	// 	this.struggleTimer = 0;
	// },
	
	starCollected: function()//powerupcontroller에서 오버랩시 호출,update안에서 계속호출
	{
		// TODO: Implement
        if(dm) console.log("- GameState.starCollected");
	},
	
	update: function()
	{

		if(this.gameOver) //게임오버이후 처리
		{
			cars_velocity = 0;
			return;
		}


        if(true) { //게임시작이후 처리
		//if(this.gameBegun) { //게임시작이후 처리
            // increase distance score
            this._elapsedSeconds = this.game.time.elapsed / 1000; //tick-->sec //시간

            if (endgameonoff) {  //게임종료(시간도달,체크배경도달)
                //속도0
            }





        }//if(this.gameBegun)
	},//update



	

};//GameState.prototype

Object.defineProperty(GameState.prototype, "playerSprite", {

    get: function () {
        return this.playerController.attachedVehicle;
    }

});
//('preloader', LoadState, true);
//('menu',      MenuState);
//('game',      GameState);
/**
 * Created by NeoHan on 2017-04-11.
 */
// Gameplay Toggles
//DEBUG = false;
//DEBUG = false;
//var firstRunLandscape;
//var game = new Phaser.Game(window.innerWidth, window.innerHeight, Phaser.CANVAS, 'gameContainer',
//var game = new Phaser.Game(window.innerWidth * window.devicePixelRatio, window.innerHeight * window.devicePixelRatio, Phaser.CANVAS, 'gameContainer',

var screenWidth = window.screen.width; //retrieve current document width
var screenHeight = window.screen.height;
var first_width = window.innerWidth;
var first_height = window.innerHeight;


var isPotrait = true;

if(first_width > first_height)
{
    first_width = window.innerHeight;
    first_height = window.innerWidth;
    isPotrait = false;
}

var game = new Phaser.Game(720, 1280, Phaser.AUTO, 'gameContainer',
    {
        preload: preload,
        create: create,
        resizeCallback: resizeCallback
        //onSizeChange: onSizeChange
    },
    false, //transparent //true:첫로고화면에서 검정배경나옴
    true //antialias //true:픽셀 부드럽게 //false:픽셀 각지게 보이게
);


game.name = "sweet_bricks";
uigame = game;

var GAME_WIDTH = 720;
var GAME_HEIGHT = 1280;
//game.usespaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
function preload() {
    // Prevent certain keys from propagating to the browser:
    var arrPreventedKeys = [
        Phaser.Keyboard.SPACEBAR,
        Phaser.Keyboard.UP,
        Phaser.Keyboard.DOWN,
        Phaser.Keyboard.LEFT,
        Phaser.Keyboard.RIGHT
    ];

    game.input.keyboard.addKeyCapture(arrPreventedKeys);

    game.input.maxPointers = 2;

    //game.stage.disableVisibilityChange = false; //포커스외부클릭시 멈춤
    game.stage.disableVisibilityChange = true; //포커스무시 그냥 실행



    //물리등록
    game.physics.startSystem(Phaser.Physics.ARCADE);
    game.physics.arcade.checkCollision.down = false;
    game.physics.arcade.checkCollision.up = false;
    game.physics.arcade.checkCollision.left = false;
    game.physics.arcade.checkCollision.right = false;
    if (dm) console.log(game.physics.arcade.bounds);

    //백그라운드 칼라
    game.stage.backgroundColor = ColorSet.white;// ColorSet.black;


    if (!game.device.desktop) {

        game.scale.enterIncorrectOrientation.add(handleIncorrect);
        game.scale.leaveIncorrectOrientation.add(handleCorrect);
    }

    if (this.game.device.desktop) {
        //데스크탑환경
        if (document.location.href.indexOf("game.jp") > 0)
            this.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
        else
            this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;    //축소확대 비율유지

        //false이면 전체비율을 폭에 맞춤//폭 크면 높이 길고, 폭 작으면 높이 작음 //
        //true이면 전체비율을 폭,높이에 둘다맞춤
        this.scale.parentIsWindow = true;

        game.pageAlignHorizontally = false;
        game.pageAlignVertically = false;
    }//데스크탑
    else {
        //강제해상도 지정
        this.scale.scaleMode = Phaser.ScaleManager.USER_SCALE;
        //--------------리사이즈함수에서 가져옴
        if(game.device.iOS) {
            if(isPotrait === false)
            {
                //디버그 dddd
                // boottxt += ("\ndevice.chrome:"+game.device.chrome+"\n");
                // var bb= is_chrome;
                //
                // boottxt += ("\nischrome:"+bb+"\n");
                //디버그 dddd

                //크롬 예외처리 //랜드스케이프에서 포트레이트로 갈때 사이즈 보간(주소창크기)
                //if(is_chrome)
                if (!game.device.mobileSafari) {
                    first_width += 76;
                }
            }
            inh = first_height;
            inw = first_width;
        }else{
            inh = window.innerHeight;
            inw = window.innerWidth;
        }

        var ratio = parseFloat(inh / inw);
        var ratio_w = parseFloat(inw / GAME_WIDTH);
        var ratio_h = parseFloat(inh / GAME_HEIGHT);
        game.scale.setUserScale(ratio_w, ratio_h);


        if (isPotrait) {
            document.getElementById("turn").style.display = "none";
        }
        else {
            if(bPhone) {
                document.getElementById("turn").style.display = "block";
            }
        }
        //--------------리사이즈함수에서 가져옴
    }//모바일환경
    game.scale.refresh();

    //--크롬예외처리(안드로이드 사운드 예외처리)------------------
    if (this.game.device.android
        && this.game.device.chrome
        && this.game.device.chromeVersion >= 55) {

        this.game.sound.setTouchLock();

        this.game.input.touch.addTouchLockCallback(function () {
            if (this.noAudio                  //크롬 안드로이드 모드--> false로 들어옴
                //|| !this.touchLocked        //크롬 안드로이드 모드---> false로 들어옴
                || this._unlockSource !== null   //크롬 안드로이드 모드---> null로 들어옴
            ) {
                return true;
            }
            if (this.usingWebAudio) {
                // Create empty buffer and play it
                // The SoundManager.update loop captures the state of it and then resets touchLocked to false

                var buffer = this.context.createBuffer(1, 1, 22050);
                this._unlockSource = this.context.createBufferSource();
                this._unlockSource.buffer = buffer;
                this._unlockSource.connect(this.context.destination);

                if (this._unlockSource.start === undefined) {
                    this._unlockSource.noteOn(0);
                }
                else {
                    this._unlockSource.start(0);
                }

                //Hello Chrome 55!
                if (this._unlockSource.context.state === 'suspended') {
                    this._unlockSource.context.resume();
                }
            }

            //  We can remove the event because we've done what we needed (started the unlock sound playing)
            return true;

        }, this.game.sound, true);

    }
    //--크롬예외처리(안드로이드 사운드 예외처리)------------------


    if (document.location.href.indexOf("neolith") > -1) {
    //if (document.location.href.indexOf("localhost") > -1) {//테스트
        game.load.image('preloaderLogoMono', 'assets/preloader/Neo_Loading_01.png');
        game.load.image('preloaderLogoColor', 'assets/preloader/Neo_Loading_02.png');
        game.load.image('preloaderLogoText', 'assets/preloader/Neo_Loading_03.png');
    }else{
        game.load.image('preloaderLogoMono', 'assets/preloader/movi_01.png');
        game.load.image('preloaderLogoColor', 'assets/preloader/movi_02.png');
        game.load.image('preloaderLogoText', 'assets/preloader/movi_03.png');
    }


}//preload

function create() {
    var that = this;
    //리사이즈
    this.game.scale.setResizeCallback(this.resizeCallback, this);

    game.state.add('preloader', LoadState, true);
    game.state.add('menu', MenuState);
    game.state.add('game', GameState);

    //샵설정값들
    sGame = uigame.add.group();
    sNetworkLoading = uigame.add.group();
    sPopupHeart = uigame.add.group();             // 하트 표시
    sPopupHeartShop = uigame.add.group();        // 하트 샵
    sPopupHeartShopConfirm = uigame.add.group(); // 하트 충전 완료
    sPopupHeartChargeGuide = uigame.add.group(); // 차지 유도 //ui없는 컨테이너
    //샵설정값들

    heartController = new HeartController();//하트컨트롤러 생성

}
//아이폰 해상도 스케일
function getIOSBias(){
    // //아이폰대응,애플대응
    // //아이폰5&6                 //pixelratio:2 //screen:320x568  //inner:720x1280
    // //아이패드 air2(실2048x1536) //pixelratio:2 //screen:768x1024 //inner:768x1280
    // //아이폰7(실1334x750)        //pixelratio:2 //screen:375x667  //inner:720x1280
    var innerx= window.innerWidth;
    var innery= window.innerHeight;
    var scrx = window.screen.width;
    var scry = window.screen.height;
    var xbias;
    var ybias;
    var yoff; //주소창크기만큼
    xbias = scrx/innerx;
    //스위치문
    switch (scrx) {
        case 320:                           //아이폰5&6
            yoff=60;
            if(uigame.device.mobileSafari) yoff+=yoff;
            ybias=(scry-yoff)/innery;
            break;
        case 375:                           //아이폰7(실1334x750)
            yoff=69;
            if(uigame.device.mobileSafari) yoff+=(yoff*0.8);
            ybias=(scry-yoff)/innery;
            break;
        case 768:                           //아이패드 air2(실2048x1536)
            yoff=60;
            ybias=(scry-yoff)/innery;
            break;
        default:
            yoff=60;
            if(uigame.device.mobileSafari) yoff+=yoff;
            ybias=(scry-yoff)/innery;
            break;
    }
    return{x:xbias,y:ybias};
}
//안드로이드 해상도 스케일
function getAndroidBias() {
    var xbias = window.innerWidth / 720;
    var ybias = window.innerHeight / 1280
    return{x:xbias,y:ybias};
}
//--회전경고//회전권유-----
function handleIncorrect(){//사용안함

}
function handleCorrect(){//사용안함

}

function resizeCallback(scale, parentBounds) {
    if(!game.device.desktop && !game.device.iOS) {
        //일반적인 안드로이드
        inh = window.innerHeight;
        inw = window.innerWidth;

        if (inh > inw) {
            document.getElementById("turn").style.display = "none";
        }
        else {
            if(bPhone) {
                document.getElementById("turn").style.display = "block";
            }
        }
        var ratio = parseFloat(inh / inw);
        var ratio_w = parseFloat(inw / GAME_WIDTH);
        var ratio_h = parseFloat(inh / GAME_HEIGHT);

        game.scale.setUserScale(ratio_w, ratio_h);
        if (inh > inw) {

            document.getElementById("turn").style.display = "none";
        }
        else {
            if(bPhone) {
                document.getElementById("turn").style.display = "block";
            }
        }
    }
}
